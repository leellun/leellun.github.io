<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>kubesphere快速部署redis</title>
    <link href="/2022/07/27/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2redis/"/>
    <url>/2022/07/27/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2redis/</url>
    
    <content type="html"><![CDATA[<h1 id="一、配置文件创建"><a href="#一、配置文件创建" class="headerlink" title="一、配置文件创建"></a>一、配置文件创建</h1><p>redis-conf：redis.conf</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">cluster-enabled yes <span class="hljs-comment">#开启集群</span><br>cluster-config-file nodes.conf <span class="hljs-comment">#集群node</span><br>cluster-<span class="hljs-keyword">node</span><span class="hljs-title">-timeout</span> <span class="hljs-number">5000</span> <span class="hljs-comment"># 集群延迟</span><br>appendonly yes <span class="hljs-comment"># aof文件开启</span><br>masterauth <span class="hljs-number">123456</span> <span class="hljs-comment"># 密码</span><br>requirepass <span class="hljs-number">123456</span> <span class="hljs-comment"># 认证密码</span><br></code></pre></td></tr></table></figure><h1 id="二、redis有状态服务副本集创建"><a href="#二、redis有状态服务副本集创建" class="headerlink" title="二、redis有状态服务副本集创建"></a>二、redis有状态服务副本集创建</h1><p>存储卷模板：</p><img src="/2022/07/27/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2redis/1663220903688.png" class="" width="1663220903688"><p>redis 容器设置即启动命令配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">redis-server <span class="hljs-regexp">/etc/</span>redis/redis.conf<br></code></pre></td></tr></table></figure><img src="/2022/07/27/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2redis/1663213016039.png" class="" width="1663213016039"><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@k8s-master01 kubesphere]# kubectl get pod,pvc -n gulimall<br>NAME                    READY   STATUS    RESTARTS   AGE<br>pod/mysql-master-v1<span class="hljs-string">-0</span>   1/1     Running   0          13h<br>pod/redis-cluster<span class="hljs-string">-0</span>     1/1     Running   0          30m<br>pod/redis-cluster<span class="hljs-string">-1</span>     1/1     Running   0          26m<br>pod/redis-cluster<span class="hljs-string">-2</span>     1/1     Running   0          26m<br>pod/redis-cluster<span class="hljs-string">-3</span>     1/1     Running   0          26m<br>pod/redis-cluster<span class="hljs-string">-4</span>     1/1     Running   0          26m<br>pod/redis-cluster<span class="hljs-string">-5</span>     1/1     Running   0          26m<br><br>NAME                                              STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS       AGE<br>persistentvolumeclaim/mysql-pvc                   Bound    pvc-c912ac48-fce5<span class="hljs-string">-4</span>ced<span class="hljs-string">-9763</span><span class="hljs-string">-2</span>b4c31687fab   30Gi       RWO            openebs-hostpath   14h<br>persistentvolumeclaim/pvc-redis-redis-cluster<span class="hljs-string">-0</span>   Bound    pvc<span class="hljs-string">-9638569</span>c<span class="hljs-string">-0095</span><span class="hljs-string">-4022</span><span class="hljs-string">-9</span>a10<span class="hljs-string">-31</span>b50602ad6d   10Gi       RWO            openebs-hostpath   30m<br>persistentvolumeclaim/pvc-redis-redis-cluster<span class="hljs-string">-1</span>   Bound    pvc-b2f190ed<span class="hljs-string">-720</span>b<span class="hljs-string">-491</span>b<span class="hljs-string">-8</span>d09<span class="hljs-string">-7350854</span>c3f46   10Gi       RWO            openebs-hostpath   26m<br>persistentvolumeclaim/pvc-redis-redis-cluster<span class="hljs-string">-2</span>   Bound    pvc<span class="hljs-string">-36</span>a96ab2<span class="hljs-string">-7</span>dc1<span class="hljs-string">-4</span>cfd<span class="hljs-string">-8</span>c7d<span class="hljs-string">-7</span>f733d37e817   10Gi       RWO            openebs-hostpath   26m<br>persistentvolumeclaim/pvc-redis-redis-cluster<span class="hljs-string">-3</span>   Bound    pvc<span class="hljs-string">-0</span>a37fdd9<span class="hljs-string">-4</span>b74<span class="hljs-string">-4</span>fc0-b009-a5ed06ecac9c   10Gi       RWO            openebs-hostpath   26m<br>persistentvolumeclaim/pvc-redis-redis-cluster<span class="hljs-string">-4</span>   Bound    pvc-ff8a3d3b<span class="hljs-string">-2</span>ec2<span class="hljs-string">-4132</span><span class="hljs-string">-9</span>d09<span class="hljs-string">-498</span>a25dcc506   10Gi       RWO            openebs-hostpath   26m<br>persistentvolumeclaim/pvc-redis-redis-cluster<span class="hljs-string">-5</span>   Bound    pvc<span class="hljs-string">-20635271</span>-fb88<span class="hljs-string">-4904</span>-af26<span class="hljs-string">-77754</span>bd64385   10Gi       RWO            openebs-hostpath   26m<br></code></pre></td></tr></table></figure><h1 id="三、查看ip"><a href="#三、查看ip" class="headerlink" title="三、查看ip"></a>三、查看ip</h1><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">[root@k8s-master01 kubesphere]# kubectl get pods -l app=redis-cluster -n gulimall -o jsonpath=&#x27;&#123;range.items[*]&#125;&#123;.status.podIP&#125;:<span class="hljs-number">6379</span> &#x27;      <br><span class="hljs-number">10.244.0.79</span>:<span class="hljs-number">6379 10.244</span>.<span class="hljs-number">0.81:6379</span> <span class="hljs-number">10.244.0.83</span>:<span class="hljs-number">6379 10.244</span>.<span class="hljs-number">0.85:6379</span> <span class="hljs-number">10.244.0.87</span>:<span class="hljs-number">6379 10.244</span>.<span class="hljs-number">0.89:6379</span><br></code></pre></td></tr></table></figure><h1 id="四、集群"><a href="#四、集群" class="headerlink" title="四、集群"></a>四、集群</h1><p>这里通过ip集群，最好通过pod.svc。例如：redis-cluster-0.redis-cluster-85pg,redis-cluster-1.redis-cluster-85pg,redis-cluster-2.redis-cluster-85pg,redis-cluster-3.redis-cluster-85pg,redis-cluster-4.redis-cluster-85pg,redis-cluster-5.redis-cluster-85pg</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">kubectl exec -it redis-cluster-<span class="hljs-number">0</span> -n gulimall -- redis-cli --cluster create --cluster-replicas <span class="hljs-number">1</span> <span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">pods</span> -<span class="hljs-params">l</span> <span class="hljs-params">app</span>=<span class="hljs-params">redis</span>-<span class="hljs-params">cluster</span> -<span class="hljs-params">n</span> <span class="hljs-params">gulimall</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=&#x27;&#123;<span class="hljs-params">range</span>.<span class="hljs-params">items</span>[<span class="hljs-operator">*</span>]&#125;&#123;.<span class="hljs-params">status</span>.<span class="hljs-params">podIP</span>&#125;:6379 &#x27;)</span> -a <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>结果打印：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">Warning:</span> <span class="hljs-keyword">Using</span> a password <span class="hljs-keyword">with</span> <span class="hljs-comment">&#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br>&gt;&gt;&gt; Performing hash slots allocation <span class="hljs-keyword">on</span> <span class="hljs-number">6</span> nodes...<br>Master[<span class="hljs-number">0</span>] -&gt; Slots <span class="hljs-number">0</span> - <span class="hljs-number">5460</span><br>Master[<span class="hljs-number">1</span>] -&gt; Slots <span class="hljs-number">5461</span> - <span class="hljs-number">10922</span><br>Master[<span class="hljs-number">2</span>] -&gt; Slots <span class="hljs-number">10923</span> - <span class="hljs-number">16383</span><br>Adding replica <span class="hljs-number">10.244</span>.<span class="hljs-number">0.87</span>:<span class="hljs-number">6379</span> <span class="hljs-keyword">to</span> <span class="hljs-number">10.244</span>.<span class="hljs-number">0.79</span>:<span class="hljs-number">6379</span><br>Adding replica <span class="hljs-number">10.244</span>.<span class="hljs-number">0.89</span>:<span class="hljs-number">6379</span> <span class="hljs-keyword">to</span> <span class="hljs-number">10.244</span>.<span class="hljs-number">0.81</span>:<span class="hljs-number">6379</span><br>Adding replica <span class="hljs-number">10.244</span>.<span class="hljs-number">0.85</span>:<span class="hljs-number">6379</span> <span class="hljs-keyword">to</span> <span class="hljs-number">10.244</span>.<span class="hljs-number">0.83</span>:<span class="hljs-number">6379</span><br><span class="hljs-symbol">M:</span> <span class="hljs-number">6</span>a8be8e3baaff7e6569484b68173f9ae929687a4 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.79</span>:<span class="hljs-number">6379</span><br>   slots:[<span class="hljs-number">0</span>-<span class="hljs-number">5460</span>] (<span class="hljs-number">5461</span> slots) master<br><span class="hljs-symbol">M:</span> c902a47a859884e9d8e9e98463c998bafa8c456b <span class="hljs-number">10.244</span>.<span class="hljs-number">0.81</span>:<span class="hljs-number">6379</span><br>   slots:[<span class="hljs-number">5461</span>-<span class="hljs-number">10922</span>] (<span class="hljs-number">5462</span> slots) master<br><span class="hljs-symbol">M:</span> edbddb2005e23a357f371fed804fc490bcabbdc0 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.83</span>:<span class="hljs-number">6379</span><br>   slots:[<span class="hljs-number">10923</span>-<span class="hljs-number">16383</span>] (<span class="hljs-number">5461</span> slots) master<br><span class="hljs-symbol">S:</span> <span class="hljs-number">6255</span>f444e9f53ba7d4e0c3714111820347f60ab8 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.85</span>:<span class="hljs-number">6379</span><br>   replicates edbddb2005e23a357f371fed804fc490bcabbdc0<br><span class="hljs-symbol">S:</span> <span class="hljs-number">4563856</span>b15f4a6325c9f22dcc4f3b49b5867adc4 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.87</span>:<span class="hljs-number">6379</span><br>   replicates <span class="hljs-number">6</span>a8be8e3baaff7e6569484b68173f9ae929687a4<br><span class="hljs-symbol">S:</span> db1d355eb2cf0ffa12240658aceadf737e00cfd3 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.89</span>:<span class="hljs-number">6379</span><br>   replicates c902a47a859884e9d8e9e98463c998bafa8c456b<br>Can I <span class="hljs-keyword">set</span> the above configuration? (type <span class="hljs-comment">&#x27;yes&#x27; to accept): yes</span><br>&gt;&gt;&gt; Nodes configuration updated<br>&gt;&gt;&gt; Assign a different config epoch <span class="hljs-keyword">to</span> <span class="hljs-keyword">each</span> node<br>&gt;&gt;&gt; Sending CLUSTER MEET messages <span class="hljs-keyword">to</span> <span class="hljs-keyword">join</span> the cluster<br>Waiting <span class="hljs-keyword">for</span> the cluster <span class="hljs-keyword">to</span> <span class="hljs-keyword">join</span><br>.<br>&gt;&gt;&gt; Performing Cluster Check (<span class="hljs-keyword">using</span> node <span class="hljs-number">10.244</span>.<span class="hljs-number">0.79</span>:<span class="hljs-number">6379</span>)<br><span class="hljs-symbol">M:</span> <span class="hljs-number">6</span>a8be8e3baaff7e6569484b68173f9ae929687a4 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.79</span>:<span class="hljs-number">6379</span><br>   slots:[<span class="hljs-number">0</span>-<span class="hljs-number">5460</span>] (<span class="hljs-number">5461</span> slots) master<br>   <span class="hljs-number">1</span> additional replica(s)<br><span class="hljs-symbol">S:</span> db1d355eb2cf0ffa12240658aceadf737e00cfd3 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.89</span>:<span class="hljs-number">6379</span><br>   slots: (<span class="hljs-number">0</span> slots) slave<br>   replicates c902a47a859884e9d8e9e98463c998bafa8c456b<br><span class="hljs-symbol">S:</span> <span class="hljs-number">6255</span>f444e9f53ba7d4e0c3714111820347f60ab8 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.85</span>:<span class="hljs-number">6379</span><br>   slots: (<span class="hljs-number">0</span> slots) slave<br>   replicates edbddb2005e23a357f371fed804fc490bcabbdc0<br><span class="hljs-symbol">S:</span> <span class="hljs-number">4563856</span>b15f4a6325c9f22dcc4f3b49b5867adc4 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.87</span>:<span class="hljs-number">6379</span><br>   slots: (<span class="hljs-number">0</span> slots) slave<br>   replicates <span class="hljs-number">6</span>a8be8e3baaff7e6569484b68173f9ae929687a4<br><span class="hljs-symbol">M:</span> c902a47a859884e9d8e9e98463c998bafa8c456b <span class="hljs-number">10.244</span>.<span class="hljs-number">0.81</span>:<span class="hljs-number">6379</span><br>   slots:[<span class="hljs-number">5461</span>-<span class="hljs-number">10922</span>] (<span class="hljs-number">5462</span> slots) master<br>   <span class="hljs-number">1</span> additional replica(s)<br><span class="hljs-symbol">M:</span> edbddb2005e23a357f371fed804fc490bcabbdc0 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.83</span>:<span class="hljs-number">6379</span><br>   slots:[<span class="hljs-number">10923</span>-<span class="hljs-number">16383</span>] (<span class="hljs-number">5461</span> slots) master<br>   <span class="hljs-number">1</span> additional replica(s)<br>[OK] All nodes agree about slots configuration.<br>&gt;&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...<br>&gt;&gt;&gt; Check slots coverage...<br>[OK] All <span class="hljs-number">16384</span> slots covered.<br></code></pre></td></tr></table></figure><p>验证集群：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">kubectl exec -<span class="hljs-keyword">it</span> redis-cluster<span class="hljs-number">-0</span> -n gulimall <span class="hljs-comment">-- redis-cli cluster info </span><br></code></pre></td></tr></table></figure><p>角色查看：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master01 src]# <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> $(seq <span class="hljs-number">0</span> <span class="hljs-number">5</span>); <span class="hljs-keyword">do</span> echo &quot;redis-cluster-$x&quot;; kubectl exec redis-<span class="hljs-keyword">cluster</span>-$x -n gulimall <span class="hljs-comment">-- redis-cli -a 123456 role; echo; done </span><br>redis-<span class="hljs-keyword">cluster</span><span class="hljs-number">-0</span><br><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">Using</span> a <span class="hljs-keyword">password</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;-a&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;-u&#x27;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">on</span> the command <span class="hljs-type">line</span> interface may <span class="hljs-keyword">not</span> be safe.<br>master<br><span class="hljs-number">2215</span><br><span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.87</span><br><span class="hljs-number">6379</span><br><span class="hljs-number">2215</span><br><br>redis-<span class="hljs-keyword">cluster</span><span class="hljs-number">-1</span><br>master<br><span class="hljs-number">2156</span><br><span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.89</span><br><span class="hljs-number">6379</span><br><span class="hljs-number">2156</span><br><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">Using</span> a <span class="hljs-keyword">password</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;-a&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;-u&#x27;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">on</span> the command <span class="hljs-type">line</span> interface may <span class="hljs-keyword">not</span> be safe.<br><br>redis-<span class="hljs-keyword">cluster</span><span class="hljs-number">-2</span><br><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">Using</span> a <span class="hljs-keyword">password</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;-a&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;-u&#x27;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">on</span> the command <span class="hljs-type">line</span> interface may <span class="hljs-keyword">not</span> be safe.<br>master<br><span class="hljs-number">2156</span><br><span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.85</span><br><span class="hljs-number">6379</span><br><span class="hljs-number">2156</span><br><br>redis-<span class="hljs-keyword">cluster</span><span class="hljs-number">-3</span><br><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">Using</span> a <span class="hljs-keyword">password</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;-a&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;-u&#x27;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">on</span> the command <span class="hljs-type">line</span> interface may <span class="hljs-keyword">not</span> be safe.<br>slave<br><span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.83</span><br><span class="hljs-number">6379</span><br>connected<br><span class="hljs-number">2156</span><br><br>redis-<span class="hljs-keyword">cluster</span><span class="hljs-number">-4</span><br><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">Using</span> a <span class="hljs-keyword">password</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;-a&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;-u&#x27;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">on</span> the command <span class="hljs-type">line</span> interface may <span class="hljs-keyword">not</span> be safe.<br>slave<br><span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.79</span><br><span class="hljs-number">6379</span><br>connected<br><span class="hljs-number">2229</span><br><br>redis-<span class="hljs-keyword">cluster</span><span class="hljs-number">-5</span><br>slave<br><span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.81</span><br><span class="hljs-number">6379</span><br>connected<br><span class="hljs-number">2156</span><br><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">Using</span> a <span class="hljs-keyword">password</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;-a&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;-u&#x27;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">on</span> the command <span class="hljs-type">line</span> interface may <span class="hljs-keyword">not</span> be safe.<br></code></pre></td></tr></table></figure><p>启动集群：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">kubectl exec -it redis-<span class="hljs-keyword">cluster</span>-0 -<span class="hljs-keyword">n</span> gulimall -- redis-<span class="hljs-keyword">cli</span> redis-<span class="hljs-keyword">cli</span> -c -p 6379<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master01 src]# kubectl exec redis-<span class="hljs-keyword">cluster</span><span class="hljs-number">-3</span> -n gulimall -it <span class="hljs-comment">-- /bin/sh</span><br># redis-cli -c -a <span class="hljs-number">123456</span><br><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">Using</span> a <span class="hljs-keyword">password</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;-a&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;-u&#x27;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">on</span> the command <span class="hljs-type">line</span> interface may <span class="hljs-keyword">not</span> be safe.<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-keyword">get</span> aa<br>-&gt; Redirected <span class="hljs-keyword">to</span> slot [<span class="hljs-number">1180</span>] located at <span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.79</span>:<span class="hljs-number">6379</span><br>&quot;234234&quot;<br></code></pre></td></tr></table></figure><h1 id="五、整理操作"><a href="#五、整理操作" class="headerlink" title="五、整理操作"></a>五、整理操作</h1><p>软件版本：redis:5.0</p><p>配置文件：redis-conf：redis.conf</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">cluster-enabled yes <span class="hljs-comment">#开启集群</span><br>cluster-config-file nodes.conf <span class="hljs-comment">#集群node</span><br>cluster-<span class="hljs-keyword">node</span><span class="hljs-title">-timeout</span> <span class="hljs-number">5000</span> <span class="hljs-comment"># 集群延迟</span><br>appendonly yes <span class="hljs-comment"># aof文件开启</span><br>masterauth <span class="hljs-number">123456</span> <span class="hljs-comment"># 密码</span><br>requirepass <span class="hljs-number">123456</span> <span class="hljs-comment"># 认证密码</span><br></code></pre></td></tr></table></figure><p>配置文件挂载：/etc/redis/redis.conf</p><p>数据挂载：/data</p><p>启动命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">redis-server <span class="hljs-regexp">/etc/</span>redis/redis.conf<br></code></pre></td></tr></table></figure><p>集群：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kubectl exec -it redis-cluster-<span class="hljs-number">0</span> -n gulimall -- redis-cli <span class="hljs-attr">--cluster</span> create <span class="hljs-attr">--cluster-replicas</span> <span class="hljs-number">1</span> redis-cluster-<span class="hljs-number">0</span><span class="hljs-selector-class">.redis-cluster</span><span class="hljs-selector-class">.gulimall</span>,redis-cluster-<span class="hljs-number">1</span><span class="hljs-selector-class">.redis-cluster</span><span class="hljs-selector-class">.gulimall</span>,redis-cluster-<span class="hljs-number">2</span><span class="hljs-selector-class">.redis-cluster</span><span class="hljs-selector-class">.gulimall</span>,redis-cluster-<span class="hljs-number">3</span><span class="hljs-selector-class">.redis-cluster</span><span class="hljs-selector-class">.gulimall</span>,redis-cluster-<span class="hljs-number">4</span><span class="hljs-selector-class">.redis-cluster</span><span class="hljs-selector-class">.gulimall</span>,redis-cluster-<span class="hljs-number">5</span><span class="hljs-selector-class">.redis-cluster</span><span class="hljs-selector-class">.gulimall</span> -<span class="hljs-selector-tag">a</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>验证集群：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">kubectl exec -<span class="hljs-keyword">it</span> redis-cluster<span class="hljs-number">-0</span> -n gulimall <span class="hljs-comment">-- redis-cli cluster info </span><br></code></pre></td></tr></table></figure><p>角色查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 0 5); <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;redis-cluster-<span class="hljs-variable">$x</span>&quot;</span>; kubectl <span class="hljs-built_in">exec</span> redis-cluster-<span class="hljs-variable">$x</span> -n gulimall -- redis-cli -a 123456 role; <span class="hljs-built_in">echo</span>; <span class="hljs-keyword">done</span> <br></code></pre></td></tr></table></figure><p>启动集群：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">kubectl exec -it redis-<span class="hljs-keyword">cluster</span>-0 -<span class="hljs-keyword">n</span> gulimall -- redis-<span class="hljs-keyword">cli</span> redis-<span class="hljs-keyword">cli</span> -c -p 6379<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>kubeshpere</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubesphere快速部署mysql</title>
    <link href="/2022/07/26/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2mysql/"/>
    <url>/2022/07/26/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="一、docker部署方式"><a href="#一、docker部署方式" class="headerlink" title="一、docker部署方式"></a>一、docker部署方式</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> --name some-mysql -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=my-secret-pw -d mysql:8.0 <span class="hljs-attribute">--character-set-server</span>=utf8mb4 <span class="hljs-attribute">--collation-server</span>=utf8mb4_unicode_ci<br></code></pre></td></tr></table></figure><h1 id="二、k8s有状态部署方式"><a href="#二、k8s有状态部署方式" class="headerlink" title="二、k8s有状态部署方式"></a>二、k8s有状态部署方式</h1><h2 id="2-1-准备配置文件"><a href="#2-1-准备配置文件" class="headerlink" title="2.1 准备配置文件"></a>2.1 准备配置文件</h2><p>创建my-cnf的ConfigMap，键为my.cnf</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs gams">[client]<br>default-character-<span class="hljs-keyword">set</span>=utf8mb4<br>[mysql]<br>default-character-<span class="hljs-keyword">set</span>=utf8mb4<br>[mysqld]<br>max_connections <span class="hljs-comment">= 2000</span><br>secure_file_priv=/var/lib/mysql<br>basedir=/var/lib/mysql<br>datadir=/var/lib/mysql/data<br>sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION<br>skip-name-resolve<br>open_files_limit <span class="hljs-comment">= 65535</span><br>table_open_cache <span class="hljs-comment">= 128</span><br>log_error <span class="hljs-comment">=</span> /var/<span class="hljs-comment">lib</span>/mysql/<span class="hljs-comment">mysql-error.log</span><br>slow_query_log <span class="hljs-comment">= 1</span><br>long_query_time <span class="hljs-comment">= 1</span><br>slow_query_log_file <span class="hljs-comment">=</span> /var/<span class="hljs-comment">lib</span>/mysql/<span class="hljs-comment">mysql-slow.log</span><br>default-storage-engine <span class="hljs-comment">= InnoDB</span><br>innodb_file_per_table <span class="hljs-comment">= 1</span><br>innodb_open_files <span class="hljs-comment">= 500</span><br>innodb_buffer_pool_size <span class="hljs-comment">= 64M</span><br>innodb_write_io_threads <span class="hljs-comment">= 4</span><br>innodb_read_io_threads <span class="hljs-comment">= 4</span><br>innodb_thread_concurrency <span class="hljs-comment">= 0</span><br>innodb_purge_threads <span class="hljs-comment">= 1</span><br>innodb_flush_log_at_trx_commit <span class="hljs-comment">= 2</span><br>innodb_log_buffer_size <span class="hljs-comment">= 2M</span><br>innodb_log_file_size <span class="hljs-comment">= 32M</span><br>innodb_log_files_in_group <span class="hljs-comment">= 3</span><br>innodb_max_dirty_pages_pct <span class="hljs-comment">= 90</span><br>innodb_lock_wait_timeout <span class="hljs-comment">= 120</span><br>bulk_insert_buffer_size <span class="hljs-comment">= 8M</span><br>myisam_sort_buffer_size <span class="hljs-comment">= 8M</span><br>myisam_max_sort_file_size <span class="hljs-comment">= 10G</span><br>myisam_repair_threads <span class="hljs-comment">= 1</span><br>interactive_timeout <span class="hljs-comment">= 28800</span><br>wait_timeout <span class="hljs-comment">= 28800</span><br>[mysqldump]<br>quick<br>max_allowed_packet <span class="hljs-comment">= 16M</span><br>[myisamchk]<br>key_buffer_size <span class="hljs-comment">= 8M</span><br>sort_buffer_size <span class="hljs-comment">= 8M</span><br>read_buffer <span class="hljs-comment">= 4M</span><br>write_buffer <span class="hljs-comment">= 4M</span><br></code></pre></td></tr></table></figure><img src="/2022/07/26/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2mysql/1663167746173.png" class="" width="1663167746173"><img src="/2022/07/26/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2mysql/1663170735856.png" class="" width="1663170735856"><h2 id="2-2-mysql有状态持久卷创建"><a href="#2-2-mysql有状态持久卷创建" class="headerlink" title="2.2 mysql有状态持久卷创建"></a>2.2 mysql有状态持久卷创建</h2><img src="/2022/07/26/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2mysql/1663167951290.png" class="" width="1663167951290"><h2 id="2-3-创建mysql服务"><a href="#2-3-创建mysql服务" class="headerlink" title="2.3 创建mysql服务"></a>2.3 创建mysql服务</h2><img src="/2022/07/26/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2mysql/1663168060307.png" class="" width="1663168060307"><p>配置文件挂在：持久卷可以创建也可以指定持久卷模板，地址 /var/lib/mysql</p><img src="/2022/07/26/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2mysql/1663169165653.png" class="" width="1663169165653"><p>存储卷挂载：挂载配置文件my.cnf，挂载/etc/mysql/my.cnf</p><img src="/2022/07/26/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2mysql/1663169211109.png" class="" width="1663169211109"><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>kubeshpere</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>devops之KubeSphere流水线部署</title>
    <link href="/2022/07/26/devops%E4%B9%8BKubeSphere%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/07/26/devops%E4%B9%8BKubeSphere%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<img src="/2022/07/26/devops%E4%B9%8BKubeSphere%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2/pipeline-overview.png" class="" title="流水线概览"> <ul><li><strong>阶段 1：Checkout SCM</strong>：从 GitHub 仓库检出源代码。</li><li><strong>阶段 2：单元测试</strong>：待该测试通过后才会进行下一阶段。</li><li><strong>阶段 3：SonarQube 分析</strong>：SonarQube 代码质量分析。</li><li><strong>阶段 4：构建并推送快照镜像</strong>：根据<strong>策略设置</strong>中选定的分支来构建镜像，并将 <code>SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER</code> 标签推送至 Docker Hub，其中 <code>$BUILD_NUMBER</code> 为流水线活动列表中的运行序号。</li><li><strong>阶段 5：推送最新镜像</strong>：将 SonarQube 分支标记为 <code>latest</code>，并推送至 Docker Hub。</li><li><strong>阶段 6：部署至开发环境</strong>：将 SonarQube 分支部署到开发环境，此阶段需要审核。</li><li><strong>阶段 7：带标签推送</strong>：生成标签并发布到 GitHub，该标签会推送到 Docker Hub。</li><li><strong>阶段 8：部署至生产环境</strong>：将已发布的标签部署到生产环境。</li></ul><h1 id="一、开启devops"><a href="#一、开启devops" class="headerlink" title="一、开启devops"></a>一、开启devops</h1><p>cluster-configuration.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">devops:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 将“false”更改为“true”。</span><br></code></pre></td></tr></table></figure><p>执行：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl apply -f <span class="hljs-keyword">cluster</span>-<span class="hljs-keyword">configuration</span>.yaml<br></code></pre></td></tr></table></figure><p>查看安装情况：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">kubectl logs -n kubesphere-system <span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">pod</span> -<span class="hljs-params">n</span> <span class="hljs-params">kubesphere</span>-<span class="hljs-params">system</span> -<span class="hljs-params">l</span> &#x27;<span class="hljs-params">app</span> <span class="hljs-params">in</span> (<span class="hljs-params">ks</span>-<span class="hljs-params">install</span>, <span class="hljs-params">ks</span>-<span class="hljs-params">installer</span>)</span>&#x27; -o jsonpath=&#x27;&#123;.items<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>.metadata.name&#125;&#x27;) -f<br></code></pre></td></tr></table></figure><p>查看结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 kubesphere]# kubectl <span class="hljs-keyword">get</span> pod <span class="hljs-comment">--all-namespaces</span><br>NAMESPACE                      NAME                                                              READY   STATUS      RESTARTS         AGE<br>argocd                         devops<span class="hljs-operator">-</span>argocd<span class="hljs-operator">-</span>application<span class="hljs-operator">-</span>controller<span class="hljs-number">-0</span>                            <span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">9</span> (<span class="hljs-number">29</span>s ago)      <span class="hljs-number">24</span>m<br>argocd                         devops<span class="hljs-operator">-</span>argocd<span class="hljs-operator">-</span>applicationset<span class="hljs-operator">-</span>controller<span class="hljs-operator">-</span>b88d4b875<span class="hljs-operator">-</span>hztm8           <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>                <span class="hljs-number">24</span>m<br>argocd                         devops<span class="hljs-operator">-</span>argocd<span class="hljs-operator">-</span>dex<span class="hljs-operator">-</span>server<span class="hljs-number">-5</span>f4c69cdb8<span class="hljs-number">-26</span>d9x                         <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>                <span class="hljs-number">24</span>m<br>argocd                         devops<span class="hljs-operator">-</span>argocd<span class="hljs-operator">-</span>notifications<span class="hljs-operator">-</span>controller<span class="hljs-number">-6</span>d86f8974f<span class="hljs-operator">-</span>twlk6           <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>                <span class="hljs-number">24</span>m<br>argocd                         devops<span class="hljs-operator">-</span>argocd<span class="hljs-operator">-</span>redis<span class="hljs-number">-655969589</span>d<span class="hljs-operator">-</span>vbzfq                              <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>                <span class="hljs-number">24</span>m<br>argocd                         devops<span class="hljs-operator">-</span>argocd<span class="hljs-operator">-</span>repo<span class="hljs-operator">-</span>server<span class="hljs-operator">-</span>f77687668<span class="hljs-operator">-</span>l46fj                         <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>                <span class="hljs-number">24</span>m<br>argocd                         devops<span class="hljs-operator">-</span>argocd<span class="hljs-operator">-</span>server<span class="hljs-number">-6</span>c55bbb84f<span class="hljs-operator">-</span>tgdv6                             <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>                <span class="hljs-number">24</span>m<br>....<br></code></pre></td></tr></table></figure><img src="/2022/07/26/devops%E4%B9%8BKubeSphere%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2/1662990207401.png" class="" width="1662990207401"><p>jdk11:</p><p>在<strong>配置字典</strong>页面的搜索框中输入 <code>jenkins-casc-config</code> 并按<strong>回车键</strong>。 </p><h1 id="二、创建凭证"><a href="#二、创建凭证" class="headerlink" title="二、创建凭证"></a>二、创建凭证</h1><h2 id="1-1-创建dockerhub凭证"><a href="#1-1-创建dockerhub凭证" class="headerlink" title="1.1 创建dockerhub凭证"></a>1.1 创建dockerhub凭证</h2><ol><li><p>登录 Docker Hub，点击右上角的帐户，并从菜单中选择 <strong>Account Settings</strong>。</p></li><li><p>在左侧导航栏点击 <strong>Security</strong>，然后点击 <strong>New Access Token</strong>。</p></li><li><p>在弹出的对话框中，输入令牌名称（<code>go-project-token</code>），点击 <strong>Create</strong>。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">dockerhub-<span class="hljs-built_in">id</span><br>用户名：leellun<br>密码：dckr_pat_P9abXAwRM9TU96yyERoODoyThRY<br></code></pre></td></tr></table></figure></li><li><p>点击 <strong>Copy and Close</strong> 并务必保存该访问令牌。</p></li></ol><img src="/2022/07/26/devops%E4%B9%8BKubeSphere%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2/1662995312671.png" class="" width="1662995312671"><h2 id="1-2-github凭证"><a href="#1-2-github凭证" class="headerlink" title="1.2 github凭证"></a>1.2 github凭证</h2><p>github-id</p><p>用户名和token添加</p><h2 id="1-3-kubeconfig凭证添加"><a href="#1-3-kubeconfig凭证添加" class="headerlink" title="1.3 kubeconfig凭证添加"></a>1.3 kubeconfig凭证添加</h2><p>可以用root/.kube/config内容，也可以生成用户认证kubeconfig</p><img src="/2022/07/26/devops%E4%B9%8BKubeSphere%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2/1662995264415.png" class="" width="1662995264415"><h2 id="1-4-SonarQube凭证添加"><a href="#1-4-SonarQube凭证添加" class="headerlink" title="1.4 SonarQube凭证添加"></a>1.4 SonarQube凭证添加</h2><p>sonar-token</p><p>进入sonarqube添加项目并且生成token：<strong>caea718fe1c8d61628c85cc642998605247c4de9</strong> </p><img src="/2022/07/26/devops%E4%B9%8BKubeSphere%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2/1662997272162.png" class="" width="1662997272162"> <p>配置sonarqube凭证：</p><p>用户名和token添加</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">user:</span> <br><span class="hljs-symbol">token:</span> caea<span class="hljs-number">718</span>fe<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">8</span>d<span class="hljs-number">61628</span><span class="hljs-keyword">c</span><span class="hljs-number">85</span><span class="hljs-keyword">cc</span><span class="hljs-number">642998605247</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>de<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h1 id="三、修改-Jenkinsfile"><a href="#三、修改-Jenkinsfile" class="headerlink" title="三、修改 Jenkinsfile"></a>三、修改 Jenkinsfile</h1><img src="/2022/07/26/devops%E4%B9%8BKubeSphere%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2/jenkins-edit--2.png" class="" title="jenkins-edit--2"><table><thead><tr><th>条目</th><th>值</th><th>描述信息</th></tr></thead><tbody><tr><td>DOCKER_CREDENTIAL_ID</td><td>dockerhub-id</td><td>您在 KubeSphere 中为 Docker Hub 帐户设置的<strong>名称</strong>。</td></tr><tr><td>GITHUB_CREDENTIAL_ID</td><td>github-id</td><td>您在 KubeSphere 中为 GitHub 帐户设置的<strong>名称</strong>，用于将标签推送至您的 GitHub 仓库。</td></tr><tr><td>KUBECONFIG_CREDENTIAL_ID</td><td>demo-kubeconfig</td><td>您在 KubeSphere 中为 kubeconfig 设置的<strong>名称</strong>，用于访问运行中的 Kubernetes 集群。</td></tr><tr><td>REGISTRY</td><td>docker.io</td><td>默认为 <code>docker.io</code>，用作推送镜像的地址。</td></tr><tr><td>DOCKERHUB_NAMESPACE</td><td>your-dockerhub-account</td><td>请替换为您的 Docker Hub 帐户名，也可以替换为该帐户下的 Organization 名称。</td></tr><tr><td>GITHUB_ACCOUNT</td><td>your-github-account</td><td>请替换为您的 GitHub 帐户名。例如，如果您的 GitHub 地址是 <code>https://github.com/kubesphere/</code>，则您的 GitHub 帐户名为 <code>kubesphere</code>，也可以替换为该帐户下的 Organization 名称。</td></tr><tr><td>APP_NAME</td><td>devops-maven-sample</td><td>应用名称。</td></tr><tr><td>SONAR_CREDENTIAL_ID</td><td>sonar-token</td><td>您在 KubeSphere 中为 SonarQube 令牌设置的<strong>名称</strong>，用于代码质量检测。</td></tr></tbody></table><h1 id="四、具体Jenkinsfile根据项目而定"><a href="#四、具体Jenkinsfile根据项目而定" class="headerlink" title="四、具体Jenkinsfile根据项目而定"></a>四、具体Jenkinsfile根据项目而定</h1><p>下面选用的代码仓库是码云、docker镜像仓库是dockerhub、代码分析sonar是自己部署的</p><p>流水线步骤：拉取镜像——单元测试——代码质量分析——编译 &amp; 推送——推送最新——发布开发环境——推送正式版本——发布生产环境</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">pipeline</span> &#123;<br>  agent &#123;<br>    <span class="hljs-keyword">node</span> &#123;<br>      label <span class="hljs-string">&#x27;maven&#x27;</span><br>    &#125;<br><br>  &#125;<br>  <span class="hljs-keyword">environment</span> &#123;<br>    DOCKER_CREDENTIAL_ID = <span class="hljs-string">&#x27;dockerhub-id&#x27;</span><br>    GITEE_CREDENTIAL_ID = <span class="hljs-string">&#x27;gitee-id&#x27;</span><br>    KUBECONFIG_CREDENTIAL_ID = <span class="hljs-string">&#x27;kubeconfig&#x27;</span><br>    REGISTRY = <span class="hljs-string">&#x27;docker.io&#x27;</span><br>    DOCKERHUB_NAMESPACE = <span class="hljs-string">&#x27;leellun&#x27;</span><br>    GIT_ACCOUNT = <span class="hljs-string">&#x27;myselfyou&#x27;</span><br>    SONAR_CREDENTIAL_ID = <span class="hljs-string">&#x27;sonar-token&#x27;</span><br>    BRANCH_NAME = <span class="hljs-string">&#x27;master&#x27;</span><br>  &#125;<br>  <span class="hljs-keyword">parameters</span> &#123;<br>    string(<span class="hljs-literal">name</span>: <span class="hljs-string">&#x27;PROJECT_VERSION&#x27;</span>, defaultValue: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-literal">description</span>: <span class="hljs-string">&#x27;版本&#x27;</span>)<br>    string(<span class="hljs-literal">name</span>: <span class="hljs-string">&#x27;PROJECT_NAME&#x27;</span>, defaultValue: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-literal">description</span>: <span class="hljs-string">&#x27;项目名称&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">stages</span> &#123;<br>    stage(<span class="hljs-string">&#x27;拉取代码&#x27;</span>) &#123;<br>      steps &#123;<br>        sh <span class="hljs-string">&quot;echo 正在构建 <span class="hljs-variable">$PROJECT_NAME</span> 版本号：<span class="hljs-variable">$PROJECT_VERSION</span> 将会提交给 <span class="hljs-variable">$REGISTRY</span> 镜像仓库&quot;</span><br>        git(url: <span class="hljs-string">&#x27;https://gitee.com/myselfyou/gulimall-learng.git&#x27;</span>, credentialsId: <span class="hljs-string">&quot;<span class="hljs-variable">$GITEE_CREDENTIAL_ID</span>&quot;</span>, branch: <span class="hljs-string">&#x27;master&#x27;</span>, changelog: <span class="hljs-keyword">true</span>, poll: <span class="hljs-keyword">false</span>)<br>      &#125;<br>    &#125;<br>    stage (<span class="hljs-string">&#x27;单元测试&#x27;</span>) &#123;<br>        <span class="hljs-keyword">steps</span> &#123;<br>            container (<span class="hljs-string">&#x27;maven&#x27;</span>) &#123;<br>                sh <span class="hljs-string">&#x27;java -version&#x27;</span><br>                sh <span class="hljs-string">&#x27;mvn clean test&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;代码质量分析&#x27;</span>) &#123;<br>      <span class="hljs-keyword">steps</span> &#123;<br>        container(<span class="hljs-string">&#x27;maven&#x27;</span>) &#123;<br>          withCredentials([string(credentialsId: <span class="hljs-string">&quot;<span class="hljs-variable">$SONAR_CREDENTIAL_ID</span>&quot;</span>, variable: <span class="hljs-string">&#x27;SONAR_TOKEN&#x27;</span>)]) &#123;<br>            withSonarQubeEnv(<span class="hljs-string">&#x27;sonar&#x27;</span>) &#123;<br>              sh <span class="hljs-string">&quot;mvn sonar:sonar -Dsonar.login=<span class="hljs-variable">$SONAR_TOKEN</span>&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    stage (<span class="hljs-string">&#x27;编译 &amp; 推送&#x27;</span>) &#123;<br>        <span class="hljs-keyword">steps</span> &#123;<br>            container (<span class="hljs-string">&#x27;maven&#x27;</span>) &#123;<br>                sh <span class="hljs-string">&#x27;mvn clean package -DskipTests&#x27;</span><br>                sh <span class="hljs-string">&#x27;cd <span class="hljs-variable">$PROJECT_NAME</span> &amp;&amp; docker build -f Dockerfile -t <span class="hljs-variable">$REGISTRY</span>/<span class="hljs-variable">$DOCKERHUB_NAMESPACE</span>/<span class="hljs-variable">$PROJECT_NAME</span>:SNAPSHOT-<span class="hljs-variable">$BRANCH_NAME</span>-<span class="hljs-variable">$BUILD_NUMBER</span> .&#x27;</span><br>                withCredentials([usernamePassword(passwordVariable : <span class="hljs-string">&#x27;DOCKER_PASSWORD&#x27;</span> ,usernameVariable : <span class="hljs-string">&#x27;DOCKER_USERNAME&#x27;</span> ,credentialsId : <span class="hljs-string">&quot;<span class="hljs-variable">$DOCKER_CREDENTIAL_ID</span>&quot;</span> ,)]) &#123;<br>                    sh <span class="hljs-string">&#x27;echo &quot;<span class="hljs-variable">$DOCKER_PASSWORD</span>&quot; | docker login <span class="hljs-variable">$REGISTRY</span> -u &quot;<span class="hljs-variable">$DOCKER_USERNAME</span>&quot; --password-stdin&#x27;</span><br>                    sh <span class="hljs-string">&#x27;docker push  <span class="hljs-variable">$REGISTRY</span>/<span class="hljs-variable">$DOCKERHUB_NAMESPACE</span>/<span class="hljs-variable">$PROJECT_NAME</span>:SNAPSHOT-<span class="hljs-variable">$BRANCH_NAME</span>-<span class="hljs-variable">$BUILD_NUMBER</span>&#x27;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;推送最新&#x27;</span>)&#123;<br>       when&#123;<br>         branch <span class="hljs-string">&#x27;master&#x27;</span><br>       &#125;<br>       steps&#123;<br>            container (<span class="hljs-string">&#x27;maven&#x27;</span>) &#123;<br>              sh <span class="hljs-string">&#x27;docker tag  <span class="hljs-variable">$REGISTRY</span>/<span class="hljs-variable">$DOCKERHUB_NAMESPACE</span>/<span class="hljs-variable">$PROJECT_NAME</span>:SNAPSHOT-<span class="hljs-variable">$BRANCH_NAME</span>-<span class="hljs-variable">$BUILD_NUMBER</span> <span class="hljs-variable">$REGISTRY</span>/<span class="hljs-variable">$DOCKERHUB_NAMESPACE</span>/<span class="hljs-variable">$PROJECT_NAME</span>:latest &#x27;</span><br>              sh <span class="hljs-string">&#x27;docker push  <span class="hljs-variable">$REGISTRY</span>/<span class="hljs-variable">$DOCKERHUB_NAMESPACE</span>/<span class="hljs-variable">$PROJECT_NAME</span>:latest &#x27;</span><br>            &#125;<br>       &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;发布开发环境&#x27;</span>) &#123;<br>      when&#123;<br>        branch <span class="hljs-string">&#x27;master&#x27;</span><br>      &#125;<br>      <span class="hljs-keyword">steps</span> &#123;<br>        input(<span class="hljs-built_in">id</span>: <span class="hljs-string">&#x27;deploy-to-dev&#x27;</span>, <span class="hljs-literal">message</span>: <span class="hljs-string">&#x27;是否发布到开发环境?&#x27;</span>)<br>        container (<span class="hljs-string">&#x27;maven&#x27;</span>) &#123;<br>            withCredentials([<br>                kubeconfigFile(<br>                credentialsId: env.KUBECONFIG_CREDENTIAL_ID,<br>                variable: <span class="hljs-string">&#x27;KUBECONFIG&#x27;</span>)<br>                ]) &#123;<br>                sh <span class="hljs-string">&#x27;envsubst &lt; <span class="hljs-variable">$PROJECT_NAME</span>/deploy/<span class="hljs-variable">$PROJECT_NAME</span>-deploy.yaml | kubectl apply -f -&#x27;</span><br>            &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;推送正式版本&#x27;</span>)&#123;<br>      when&#123;<br>        expression&#123;<br>          return params.PROJECT_VERSION =~ /v.*/<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">steps</span> &#123;<br>          container (<span class="hljs-string">&#x27;maven&#x27;</span>) &#123;<br>            input(<span class="hljs-built_in">id</span>: <span class="hljs-string">&#x27;release-image-with-tag&#x27;</span>, <span class="hljs-literal">message</span>: <span class="hljs-string">&#x27;是否发布镜像版本<span class="hljs-variable">$PROJECT_NAME</span>:<span class="hljs-variable">$PROJECT_VERSION</span>?&#x27;</span>)<br>              withCredentials([usernamePassword(credentialsId: <span class="hljs-string">&quot;<span class="hljs-variable">$GITEE_CREDENTIAL_ID</span>&quot;</span>, passwordVariable: <span class="hljs-string">&#x27;GIT_PASSWORD&#x27;</span>, usernameVariable: <span class="hljs-string">&#x27;GIT_USERNAME&#x27;</span>)]) &#123;<br>                sh <span class="hljs-string">&#x27;git config --global user.email &quot;kubesphere@qq.com&quot; &#x27;</span><br>                sh <span class="hljs-string">&#x27;git config --global user.name &quot;kubesphere&quot; &#x27;</span><br>                sh <span class="hljs-string">&#x27;git tag -a <span class="hljs-variable">$PROJECT_NAME</span>-<span class="hljs-variable">$PROJECT_VERSION</span> -m &quot;<span class="hljs-variable">$PROJECT_NAME</span>-<span class="hljs-variable">$PROJECT_VERSION</span>&quot; &#x27;</span><br>                sh <span class="hljs-string">&#x27;echo <span class="hljs-variable">$GIT_ACCOUNT</span>&#x27;</span><br>                sh <span class="hljs-string">&#x27;git push http://<span class="hljs-variable">$GIT_USERNAME</span>:<span class="hljs-variable">$GIT_PASSWORD</span>@gitee.com/<span class="hljs-variable">$GIT_ACCOUNT</span>/gulimall-learng.git --tags --ipv4&#x27;</span><br>              &#125;<br>            <span class="hljs-keyword">sh</span> &#x27;docker tag  <span class="hljs-variable">$REGISTRY</span>/<span class="hljs-variable">$DOCKERHUB_NAMESPACE</span>/<span class="hljs-variable">$PROJECT_NAME</span>:SNAPSHOT-<span class="hljs-variable">$BRANCH_NAME</span>-<span class="hljs-variable">$BUILD_NUMBER</span> <span class="hljs-variable">$REGISTRY</span>/<span class="hljs-variable">$DOCKERHUB_NAMESPACE</span>/<span class="hljs-variable">$PROJECT_NAME</span>:<span class="hljs-variable">$PROJECT_VERSION</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">            sh &#x27;</span>docker push  <span class="hljs-variable">$REGISTRY</span>/<span class="hljs-variable">$DOCKERHUB_NAMESPACE</span>/<span class="hljs-variable">$PROJECT_NAME</span>:<span class="hljs-variable">$PROJECT_VERSION</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    stage(&#x27;</span>发布生产环境<span class="hljs-string">&#x27;) &#123;</span><br><span class="hljs-string">      when&#123;</span><br><span class="hljs-string">        expression&#123;</span><br><span class="hljs-string">          return params.PROJECT_VERSION =~ /v.*/</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">      steps &#123;</span><br><span class="hljs-string">        input(id: &#x27;</span>deploy-to-production<span class="hljs-string">&#x27;, message: &#x27;</span>是否发布生产环境?<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">        container (&#x27;</span>maven<span class="hljs-string">&#x27;) &#123;</span><br><span class="hljs-string">            withCredentials([</span><br><span class="hljs-string">                kubeconfigFile(</span><br><span class="hljs-string">                credentialsId: env.KUBECONFIG_CREDENTIAL_ID,</span><br><span class="hljs-string">                variable: &#x27;</span>KUBECONFIG<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">                ]) &#123;</span><br><span class="hljs-string">                sh &#x27;</span>envsubst &lt; <span class="hljs-variable">$PROJECT_NAME</span>/deploy/<span class="hljs-variable">$PROJECT_NAME</span>-deploy.yaml | kubectl apply -f -<span class="hljs-string">&#x27;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>kubeshpere</tag>
      
      <tag>流水线</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>devops安装配置SonarQube</title>
    <link href="/2022/07/25/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/"/>
    <url>/2022/07/25/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/</url>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>SonarQube 是一种主流的代码质量持续检测工具。您可以将其用于代码库的静态和动态分析。SonarQube 集成到 KubeSphere 流水线后，如果在运行的流水线中检测到问题，您可以直接在仪表板上查看常见代码问题，例如 Bug 和漏洞。</p><p>需要启用 KubeSphere DevOps 系统。</p><h1 id="二、安装-SonarQube-服务器"><a href="#二、安装-SonarQube-服务器" class="headerlink" title="二、安装 SonarQube 服务器"></a>二、安装 SonarQube 服务器</h1><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">helm upgrade <span class="hljs-params">--install</span> sonarqube sonarqube <span class="hljs-params">--repo</span> https:<span class="hljs-string">//charts.kubesphere.io/main</span> -n kubesphere-devops-system  <span class="hljs-params">--create-namespace</span> <span class="hljs-params">--set</span> service.type=NodePort<br></code></pre></td></tr></table></figure><p>查看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 kubesphere]# kubectl <span class="hljs-keyword">get</span> pod  <span class="hljs-operator">-</span>n kubesphere<span class="hljs-operator">-</span>devops<span class="hljs-operator">-</span><span class="hljs-keyword">system</span><br>NAME                                   READY   STATUS      RESTARTS        AGE<br>...<br>sonarqube<span class="hljs-operator">-</span>postgresql<span class="hljs-number">-0</span>                 <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>               <span class="hljs-number">7</span>m6s<br>sonarqube<span class="hljs-operator">-</span>sonarqube<span class="hljs-number">-84</span>f6585f85<span class="hljs-operator">-</span>jnsz6   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">1</span> (<span class="hljs-number">2</span>m59s ago)   <span class="hljs-number">7</span>m8s<br></code></pre></td></tr></table></figure><p>获取 SonarQube 控制台地址:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">export NODE_PORT=<span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> --<span class="hljs-params">namespace</span> <span class="hljs-params">kubesphere</span>-<span class="hljs-params">devops</span>-<span class="hljs-params">system</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=<span class="hljs-string">&quot;&#123;.spec.ports[0].nodePort&#125;&quot;</span> <span class="hljs-params">services</span> <span class="hljs-params">sonarqube</span>-<span class="hljs-params">sonarqube</span>)</span><br>export NODE_IP=<span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">nodes</span> --<span class="hljs-params">namespace</span> <span class="hljs-params">kubesphere</span>-<span class="hljs-params">devops</span>-<span class="hljs-params">system</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=<span class="hljs-string">&quot;&#123;.items[0].status.addresses[0].address&#125;&quot;</span>)</span><br>echo http:<span class="hljs-comment">//$NODE_IP:$NODE_PORT</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">66.10</span>:<span class="hljs-number">30759</span><br></code></pre></td></tr></table></figure><h1 id="三、配置-SonarQube-服务器"><a href="#三、配置-SonarQube-服务器" class="headerlink" title="三、配置 SonarQube 服务器"></a>三、配置 SonarQube 服务器</h1><h2 id="3-1-访问-SonarQube-控制台"><a href="#3-1-访问-SonarQube-控制台" class="headerlink" title="3.1 访问 SonarQube 控制台"></a>3.1 访问 SonarQube 控制台</h2><ol><li>在浏览器中访问 SonarQube 控制台 <code>http://&lt;Node IP&gt;:&lt;NodePort&gt;</code>。</li><li>点击右上角的 <strong>Log in</strong>，然后使用默认帐户 <code>admin/admin</code> 登录。</li></ol><h2 id="3-2-创建-SonarQube-管理员令牌-Token"><a href="#3-2-创建-SonarQube-管理员令牌-Token" class="headerlink" title="3.2 创建 SonarQube 管理员令牌 (Token)"></a>3.2 创建 SonarQube 管理员令牌 (Token)</h2><ol><li><p>点击右上角字母 <strong>A</strong>，然后从菜单中选择 <strong>My Account</strong> 以转到 <strong>Profile</strong> 页面。</p><img src="/2022/07/25/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/sonarqube-config-1.png" class="" title="SonarQube 配置-1"></li><li><p>点击 <strong>Security</strong> 并输入令牌名称，例如 <code>kubesphere</code>。得到：68b67a9ac9f2fcfc6e2dd956b3a969a440996cf9 </p><img src="/2022/07/25/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/sonarqube-config-2.png" class="" title="SonarQube 配置-2"></li></ol><h2 id="3-3-创建-Webhook-服务器"><a href="#3-3-创建-Webhook-服务器" class="headerlink" title="3.3 创建 Webhook 服务器"></a>3.3 创建 Webhook 服务器</h2><ol><li><p>执行以下命令获取 SonarQube Webhook 的地址。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">export NODE_PORT=<span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> --<span class="hljs-params">namespace</span> <span class="hljs-params">kubesphere</span>-<span class="hljs-params">devops</span>-<span class="hljs-params">system</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=<span class="hljs-string">&quot;&#123;.spec.ports[0].nodePort&#125;&quot;</span> <span class="hljs-params">services</span> <span class="hljs-params">devops</span>-<span class="hljs-params">jenkins</span>)</span><br>export NODE_IP=<span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">nodes</span> --<span class="hljs-params">namespace</span> <span class="hljs-params">kubesphere</span>-<span class="hljs-params">devops</span>-<span class="hljs-params">system</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=<span class="hljs-string">&quot;&#123;.items[0].status.addresses[0].address&#125;&quot;</span>)</span><br>echo http:<span class="hljs-comment">//$NODE_IP:$NODE_PORT/sonarqube-webhook/</span><br></code></pre></td></tr></table></figure></li><li><p>预期输出结果：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">66.10</span>:<span class="hljs-number">30180</span><span class="hljs-regexp">/sonarqube-webhook/</span><br></code></pre></td></tr></table></figure></li><li><p>依次点击 <strong>Administration</strong>、<strong>Configuration</strong> 和 <strong>Webhooks</strong> 创建一个 Webhook。</p><img src="/2022/07/25/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/sonarqube-webhook-1.png" class="" title="SonarQube Webhook-1"></li><li><p>点击 <strong>Create</strong>。</p><img src="/2022/07/25/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/sonarqube-webhook-2.png" class="" title="SonarQube Webhook-2"></li><li><p>在弹出的对话框中输入 <strong>Name</strong> 和 <strong>Jenkins Console URL</strong>（即 SonarQube Webhook 地址）。点击 <strong>Create</strong> 完成操作。</p><img src="/2022/07/25/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/webhook-page-info.png" class="" title="Webhook 页面信息"></li></ol><h2 id="3-4-将-SonarQube-配置添加到-ks-installer"><a href="#3-4-将-SonarQube-配置添加到-ks-installer" class="headerlink" title="3.4 将 SonarQube 配置添加到 ks-installer"></a>3.4 将 SonarQube 配置添加到 ks-installer</h2><ol><li><p>执行以下命令编辑 <code>ks-installer</code>。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">kubectl <span class="hljs-keyword">edit</span> <span class="hljs-keyword">cc</span> -n kubesphere-<span class="hljs-built_in">system</span> ks-installer<br></code></pre></td></tr></table></figure></li><li><p>搜寻至 <code>devops</code>。添加字段 <code>sonarqube</code> 并在其下方指定 <code>externalSonarUrl</code> 和 <code>externalSonarToken</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">devops:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">jenkinsJavaOpts_MaxRAM:</span> <span class="hljs-string">2g</span><br>  <span class="hljs-attr">jenkinsJavaOpts_Xms:</span> <span class="hljs-string">512m</span><br>  <span class="hljs-attr">jenkinsJavaOpts_Xmx:</span> <span class="hljs-string">512m</span><br>  <span class="hljs-attr">jenkinsMemoryLim:</span> <span class="hljs-string">2Gi</span><br>  <span class="hljs-attr">jenkinsMemoryReq:</span> <span class="hljs-string">1500Mi</span><br>  <span class="hljs-attr">jenkinsVolumeSize:</span> <span class="hljs-string">8Gi</span><br>  <span class="hljs-attr">sonarqube:</span> <span class="hljs-comment"># Add this field manually.</span><br>    <span class="hljs-attr">externalSonarUrl:</span> <span class="hljs-string">http://192.168.66.10:30759</span> <span class="hljs-comment"># The SonarQube IP address.</span><br>    <span class="hljs-attr">externalSonarToken:</span> <span class="hljs-string">68b67a9ac9f2fcfc6e2dd956b3a969a440996cf9</span>  <span class="hljs-comment"># The SonarQube admin token created above.</span><br></code></pre></td></tr></table></figure></li><li><p>完成操作后保存此文件。</p></li></ol><h2 id="3-5-将-SonarQube-服务器添加至-Jenkins"><a href="#3-5-将-SonarQube-服务器添加至-Jenkins" class="headerlink" title="3.5 将 SonarQube 服务器添加至 Jenkins"></a>3.5 将 SonarQube 服务器添加至 Jenkins</h2><ol><li><p>执行以下命令获取 Jenkins 的地址。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">export NODE_PORT=<span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> --<span class="hljs-params">namespace</span> <span class="hljs-params">kubesphere</span>-<span class="hljs-params">devops</span>-<span class="hljs-params">system</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=<span class="hljs-string">&quot;&#123;.spec.ports[0].nodePort&#125;&quot;</span> <span class="hljs-params">services</span> <span class="hljs-params">devops</span>-<span class="hljs-params">jenkins</span>)</span><br>export NODE_IP=<span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">nodes</span> --<span class="hljs-params">namespace</span> <span class="hljs-params">kubesphere</span>-<span class="hljs-params">devops</span>-<span class="hljs-params">system</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=<span class="hljs-string">&quot;&#123;.items[0].status.addresses[0].address&#125;&quot;</span>)</span><br>echo http:<span class="hljs-comment">//$NODE_IP:$NODE_PORT</span><br></code></pre></td></tr></table></figure></li><li><p>您可以获得以下输出，获取 Jenkins 的端口号。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">66.10</span>:<span class="hljs-number">30180</span><br></code></pre></td></tr></table></figure></li><li><p>可以直接用kubesphere账号登录<code>admin/P@88w0rd</code></p><img src="/2022/07/25/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/1663084944194.png" class="" width="1663084944194"></li><li><p>点击左侧导航栏中的<strong>系统管理</strong>—<strong>系统配置</strong>。搜寻到 <strong>SonarQube servers</strong>，然后点击 <strong>Add SonarQube</strong>。</p></li><li><p>输入 <strong>Name</strong> 和 <strong>Server URL</strong> (<code>http://&lt;Node IP&gt;:&lt;NodePort&gt;</code>)。点击<strong>添加</strong>，选择 <strong>Jenkins</strong>，然后在弹出的对话框中用 SonarQube 管理员令牌创建凭证（如下方第二张截图所示）。创建凭证后，从 <strong>Server authentication token</strong> 旁边的下拉列表中选择该凭证。点击<strong>应用</strong>完成操作。</p><img src="/2022/07/25/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/sonarqube-jenkins-settings.png" class="" title="sonarqube-jenkins-settings"><p>配置id为sonarqube的密钥：</p><img src="/2022/07/25/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/add-credentials.png" class="" title="add-credentials"></li></ol><h2 id="3-6-将-sonarqubeURL-添加到-KubeSphere-控制台"><a href="#3-6-将-sonarqubeURL-添加到-KubeSphere-控制台" class="headerlink" title="3.6 将 sonarqubeURL 添加到 KubeSphere 控制台"></a>3.6 将 sonarqubeURL 添加到 KubeSphere 控制台</h2><p>您需要指定 <code>sonarqubeURL</code>，以便可以直接从 KubeSphere 控制台访问 SonarQube。</p><p>1 执行以下命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">kubectl <span class="hljs-keyword">edit</span>  <span class="hljs-keyword">cm</span> -n kubesphere-<span class="hljs-built_in">system</span>  ks-console-config<br></code></pre></td></tr></table></figure><p>2 搜寻到 <code>data.client.enableKubeConfig</code>，在下方添加 <code>devops</code> 字段并指定 <code>sonarqubeURL</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">client:</span><br>  <span class="hljs-attr">enableKubeConfig:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">devops:</span> <span class="hljs-comment"># 手动添加该字段。</span><br>    <span class="hljs-attr">sonarqubeURL:</span> <span class="hljs-string">http://192.168.66.10:30759</span> <span class="hljs-comment"># SonarQube IP 地址。</span><br></code></pre></td></tr></table></figure><p>3 重启服务</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">kubectl -n kubesphere-devops-<span class="hljs-built_in">system</span> rollout <span class="hljs-built_in">restart</span> deploy devops-apiserver<br>kubectl -n kubesphere-<span class="hljs-built_in">system</span> rollout <span class="hljs-built_in">restart</span> deploy ks-console<br></code></pre></td></tr></table></figure><img src="/2022/07/25/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/1663953257964.png" class="" width="1663953257964"><h2 id="3-7-为新项目创建-SonarQube-Token"><a href="#3-7-为新项目创建-SonarQube-Token" class="headerlink" title="3.7 为新项目创建 SonarQube Token"></a>3.7 为新项目创建 SonarQube Token</h2><p>您需要一个 SonarQube 令牌，以便您的流水线可以在运行时与 SonarQube 通信。</p><ol><li><p>在 SonarQube 控制台上，点击 <strong>Create new project</strong>。</p><img src="/2022/07/25/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/sonarqube-create-project.png" class="" title="SonarQube 创建项目"></li><li><p>输入项目密钥，例如 <code>java-demo</code>，然后点击 <strong>Set Up</strong>。</p><img src="/2022/07/25/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/jenkins-projet-key.png" class="" title="Jenkins 项目密钥"></li><li><p>输入项目名称，例如 <code>java-sample</code>，然后点击 <strong>Generate</strong>。token：b0aa4ba3f0661297c10640f3e4e1e2c918a7b188</p><img src="/2022/07/25/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/generate-a-token.png" class="" title="创建令牌"></li><li><p>创建令牌后，点击 <strong>Continue</strong>。</p><img src="/2022/07/25/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/token-created.png" class="" title="令牌已创建"></li><li><p>分别选择 <strong>Java</strong> 和 <strong>Maven</strong>。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mvn sonar:sonar \<br>  -Dsonar.<span class="hljs-attribute">projectKey</span>=java-demo \<br>  -Dsonar.host.<span class="hljs-attribute">url</span>=http://192.168.66.10:30759 \<br>  -Dsonar.<span class="hljs-attribute">login</span>=b0aa4ba3f0661297c10640f3e4e1e2c918a7b188<br></code></pre></td></tr></table></figure><img src="/2022/07/25/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/sonarqube-example.png" class="" title="sonarqube-example"></li></ol>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>sonarqube</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s快速集成KubeSphere</title>
    <link href="/2022/07/24/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/"/>
    <url>/2022/07/24/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/</url>
    
    <content type="html"><![CDATA[<h1 id="一、KubeSphere-介绍"><a href="#一、KubeSphere-介绍" class="headerlink" title="一、KubeSphere 介绍"></a>一、KubeSphere 介绍</h1><p>KubeSphere 是在 Kubernetes 之上构建的面向云原生应用的<strong>分布式操作系统</strong>，完全开源，支持多云与多集群管理，提供全栈的 IT 自动化运维能力，简化企业的 DevOps 工作流。它的架构可以非常方便地使第三方应用与云原生生态组件进行即插即用 (plug-and-play) 的集成。 </p><p>功能：</p><ul><li>多云与多集群管理</li><li>Kubernetes 资源管理</li><li>DevOps</li><li>应用生命周期管理</li><li>微服务治理（服务网格）</li><li>日志查询与收集</li><li>服务与网络</li><li>多租户管理</li><li>监控告警</li><li>事件与审计查询</li><li>存储管理</li><li>访问权限控制</li><li>GPU 支持</li><li>网络策略</li><li>镜像仓库管理</li><li>安全管理等 </li></ul><h1 id="二、部署-KubeSphere"><a href="#二、部署-KubeSphere" class="headerlink" title="二、部署 KubeSphere"></a>二、部署 KubeSphere</h1><p>当卸载重新安装时，执行下面 的脚本全面卸载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kubesphere/</span>ks-installer<span class="hljs-regexp">/edit/m</span>aster<span class="hljs-regexp">/scripts/</span>kubesphere-<span class="hljs-keyword">delete</span>.sh<br></code></pre></td></tr></table></figure><h2 id="2-1-执行以下命令以开始安装："><a href="#2-1-执行以下命令以开始安装：" class="headerlink" title="2.1 执行以下命令以开始安装："></a>2.1 执行以下命令以开始安装：</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">kubectl apply -f https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kubesphere/</span>ks-installer<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v3.2.1/</span>kubesphere-installer.yaml<br>kubectl apply -f https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kubesphere/</span>ks-installer<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v3.2.1/</span>cluster-configuration.yaml<br><br><span class="hljs-comment">#默认sc</span><br> kubectl patch sc openebs-hostpath -p <span class="hljs-string">&#x27;&#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;: &#123;&quot;storageclass.beta.kubernetes.io/is-default-class&quot;: &quot;true&quot;&#125;&#125;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="2-2-检查安装"><a href="#2-2-检查安装" class="headerlink" title="2.2 检查安装"></a>2.2 检查安装</h2><p>日志查看：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean">kubectl logs -n kubesphere-<span class="hljs-keyword">system</span> $(kubectl get pod -n kubesphere-<span class="hljs-keyword">system</span> -l <span class="hljs-string">&#x27;app in (ks-install, ks-installer)&#x27;</span> -o jsonpath=<span class="hljs-string">&#x27;&#123;.items[0].metadata.name&#125;&#x27;</span>) -f<br><br>结果：<br>Collecting installation results ...<br>#####################################################<br>###              Welcome to KubeSphere!           ###<br>#####################################################<br><br>Console: http:<span class="hljs-comment">//192.168.66.10:30880</span><br>Account: admin<br>Password: P@<span class="hljs-number">88</span>w0rd<br></code></pre></td></tr></table></figure><p>安装服务查看：</p><p>使用 <code>kubectl get pod --all-namespaces</code> 查看所有 Pod 在 KubeSphere 相关的命名空间是否正常运行。如果是正常运行，请通过以下命令来检查控制台的端口（默认为 30880，可以通过默认帐户和密码 (<code>admin/P@88w0rd</code>) 访问 Web 控制台。）：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">kubectl <span class="hljs-built_in">get</span> svc/ks-console -n kubesphere-<span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><p>重置密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl patch <span class="hljs-built_in">users</span> &lt;USERNAME&gt; -p <span class="hljs-string">&#x27;&#123;&quot;spec&quot;:&#123;&quot;password&quot;:&quot;&lt;YOURPASSWORD&gt;&quot;&#125;&#125;&#x27;</span> --<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;merge&#x27;</span> &amp;&amp; kubectl annotate <span class="hljs-built_in">users</span> &lt;USERNAME&gt; iam.kubesphere.io/password-encrypted-<br><br>kubectl patch <span class="hljs-built_in">users</span> admin -p <span class="hljs-string">&#x27;&#123;&quot;spec&quot;:&#123;&quot;password&quot;:&quot;P@88w0rd&quot;&#125;&#125;&#x27;</span> --<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;merge&#x27;</span> &amp;&amp; kubectl annotate <span class="hljs-built_in">users</span> admin iam.kubesphere.io/password-encrypted-<br></code></pre></td></tr></table></figure><h1 id="三、示例wordpress部署"><a href="#三、示例wordpress部署" class="headerlink" title="三、示例wordpress部署"></a>三、示例wordpress部署</h1><p>这里使用project-regular权限账号进行登录，可以通过admin用户添加指定账号，然后创建空间demo-wordspace，并且创建demo-project项目</p><h2 id="3-1-密钥创建"><a href="#3-1-密钥创建" class="headerlink" title="3.1 密钥创建"></a>3.1 密钥创建</h2><p>选择<strong>类型</strong>为 Opaque（默认）</p><p>mysql密钥：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">名称：mysql-secret<br>键值：<span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=123456<br></code></pre></td></tr></table></figure><p>创建 WordPress 密钥：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">名称：wordpress-secret<br>键值：WORDPRESS_DB_PASSWORD <span class="hljs-operator">=</span><span class="hljs-number">123456</span><br>   <br></code></pre></td></tr></table></figure><img src="/2022/07/24/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662953701465.png" class="" width="1662953701465"><h2 id="3-2-创建持久卷声明"><a href="#3-2-创建持久卷声明" class="headerlink" title="3.2 创建持久卷声明"></a>3.2 创建持久卷声明</h2><p>创建持久券：wordpress-pvc ，选择（存储类、访问模式、卷容量）</p><h2 id="3-3-创建应用程序"><a href="#3-3-创建应用程序" class="headerlink" title="3.3 创建应用程序"></a>3.3 创建应用程序</h2><h3 id="3-3-1-添加-MySQL-后端组件"><a href="#3-3-1-添加-MySQL-后端组件" class="headerlink" title="3.3.1 添加 MySQL 后端组件"></a>3.3.1 添加 MySQL 后端组件</h3><p>（1）创建应用</p><img src="/2022/07/24/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662954670517.png" class="" width="1662954670517"><p>（2）创建mysql服务</p><img src="/2022/07/24/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662954686176.png" class="" width="1662954686176"><p>（3）选择有状态服务</p><img src="/2022/07/24/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662954729101.png" class="" width="1662954729101"><p>（4）容器配置</p><p>在搜索框中输入 <code>mysql:5.6</code>，按下<strong>回车键</strong>，然后点击<strong>使用默认端口</strong>。</p><img src="/2022/07/24/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662954919071.png" class="" width="1662954919071"><p>（5）环境变量配置</p><p>向下滚动到<strong>环境变量</strong>，点击<strong>来自保密字典</strong>。输入名称 <code>MYSQL_ROOT_PASSWORD</code>，然后选择资源 <code>mysql-secret</code> 和前面步骤中创建的密钥 <code>MYSQL_ROOT_PASSWORD</code></p><img src="/2022/07/24/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662955108731.png" class="" width="1662955108731"><p>（6）存储设置</p><p>选择<strong>存储设置</strong>中的<strong>添加持久卷声明模板</strong>，输入 PVC 名称前缀 (<code>mysql</code>) 和<strong>挂载路径</strong>（模式：<code>读写</code>，路径：/var/lib/mysql）的值。</p><img src="/2022/07/24/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662955217850.png" class="" width="1662955217850"><p>（7）随后直接添加</p><h3 id="3-3-2-wordpress服务添加"><a href="#3-3-2-wordpress服务添加" class="headerlink" title="3.3.2 wordpress服务添加"></a>3.3.2 wordpress服务添加</h3><p>（1）无状态服务添加</p><img src="/2022/07/24/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662955316163.png" class="" width="1662955316163"><p>（2）容器配置</p><p>在搜索栏中输入 wordpress:4.8-apache 并按下<strong>回车键</strong>，然后点击<strong>使用默认端口</strong>。</p><img src="/2022/07/24/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662955481272.png" class="" width="1662955481272"><p>(3) 环境变量</p><p>向下滚动到<strong>环境变量</strong>，点击<strong>来自保密字典</strong>。这里需要添加两个环境变量，请输入以下值：</p><ul><li>对于 <code>WORDPRESS_DB_PASSWORD</code>，请选择在步骤 1 中创建的 <code>wordpress-secret</code> 和 <code>WORDPRESS_DB_PASSWORD</code>。</li><li>点击<strong>添加环境变量</strong>，分别输入 <code>WORDPRESS_DB_HOST</code> 和 <code>mysql</code> 作为键 (Key) 和值 (Value)。</li></ul><img src="/2022/07/24/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662955721051.png" class="" width="1662955721051"><p>(4) 存储设置</p><p>选择上一步创建的 <code>wordpress-pvc</code>，将模式设置为<code>读写</code>，并输入挂载路径 <code>/var/www/html</code></p><img src="/2022/07/24/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662956356797.png" class="" width="1662956356797"><p>（5）路由设置</p><p><strong>路由设置</strong>中设置路由规则（应用路由 Ingress），也可以直接点击<strong>创建</strong>。创建成功后，应用将显示在应用列表中。</p><h3 id="3-3-3-验证资源"><a href="#3-3-3-验证资源" class="headerlink" title="3.3.3 验证资源"></a>3.3.3 验证资源</h3><p>在<strong>工作负载</strong>中，分别检查<strong>部署</strong>和<strong>有状态副本集</strong>中 <code>wordpress-v1</code> 和 <code>mysql-v1</code> 的状态。如果它们的运行状态为<strong>运行中</strong>，就意味着 WordPress 已经成功创建。</p><h3 id="3-3-4-通过-NodePort-访问-WordPress"><a href="#3-3-4-通过-NodePort-访问-WordPress" class="headerlink" title="3.3.4 通过 NodePort 访问 WordPress"></a>3.3.4 通过 NodePort 访问 WordPress</h3><ol><li>若要在集群外访问服务，选择左侧导航栏中的<strong>应用负载 &gt; 服务</strong>。点击 <code>wordpress</code> 右侧的三个点后，选择<strong>编辑外部访问</strong>。</li><li>在<strong>访问方式</strong>中选择 <code>NodePort</code>，然后点击<strong>确定</strong>。</li><li>点击<strong>服务</strong>进入详情页，可以在<strong>端口</strong>处查看暴露的端口。</li><li>通过 <code>&#123;Node IP&#125;:&#123;NodePort&#125;</code> 访问此应用程序，可以看到下图：</li></ol><h1 id="四、查看结果"><a href="#四、查看结果" class="headerlink" title="四、查看结果"></a>四、查看结果</h1><img src="/2022/07/24/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662979858086.png" class="" width="1662979858086">]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes </tag>
      
      <tag>kubesphere</tag>
      
      <tag>wordpress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s持久化存储之OpenEBS</title>
    <link href="/2022/07/23/k8s%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E4%B9%8BOpenEBS/"/>
    <url>/2022/07/23/k8s%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E4%B9%8BOpenEBS/</url>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>OpenEBS 是 CNCF 项目的一部分，采用 Apache v2 许可证。是 Kubernetes 部署使用最广泛且易用的开源存储解决方案。</p><p><strong>目的：</strong></p><p>让持久化工作负载的存储和存储服务完全集成到环境中，这样每个团队和工作负载都可以从控制的粒度和 Kubernetes 原生行为中获益。</p><p><strong>特点：</strong></p><ul><li><p>微服务架构，使用 Kubernetes 自身的能力来编排管理 OpenEBS 组件。</p></li><li><p>OpenEBS 支持一系列存储引擎，以便开发人员能够部署适合其应用程序设计目标的存储技术。</p><p>像 Cassandra 这样的分布式应用程序可以使用 LocalPV 引擎实现最低延迟的写操作。</p><p>像 MySQL 和 PostgreSQL 这样的独立应用程序可以使用 ZFS 引擎 (cStor) 进行恢复。</p><p>像 Kafka 这样的流媒体应用程序可以使用 NVMe 引擎 Mayastor 在边缘环境中获得最佳性能。</p><p>在各种引擎类型中，OpenEBS 为高可用性、快照、克隆和易管理性提供了一致的框架。</p></li><li><p>管理员和开发人员可以使用 Kubernetes 提供的所有工具来交互和管理 OpenEBS。</p></li></ul><h1 id="二、OpenEBS-存储引擎建议"><a href="#二、OpenEBS-存储引擎建议" class="headerlink" title="二、OpenEBS 存储引擎建议"></a>二、OpenEBS 存储引擎建议</h1><table><thead><tr><th>应用需求</th><th>存储类型</th><th>OpenEBS 卷类型</th></tr></thead><tbody><tr><td>低时延、高可用性、同步复制、快照、克隆、精简配置</td><td>SSD/ 云存储卷</td><td>OpenEBS Mayastor</td></tr><tr><td>高可用性、同步复制、快照、克隆、精简配置</td><td>机械 /SSD/ 云存储卷</td><td>OpenEBS cStor</td></tr><tr><td>高可用性、同步复制、精简配置</td><td>主机路径或外部挂载存储</td><td>OpenEBS Jiva</td></tr><tr><td>低时延、本地 PV</td><td>主机路径或外部挂载存储</td><td>Dynamic Local PV - Hostpath, Dynamic Local PV - Rawfile</td></tr><tr><td>低时延、本地 PV</td><td>本地机械 /SSD/ 云存储卷等块设备</td><td>Dynamic Local PV - Device</td></tr><tr><td>低延迟，本地 PV，快照，克隆</td><td>本地机械 /SSD/ 云存储卷等块设备</td><td>OpenEBS Dynamic Local PV - ZFS , OpenEBS Dynamic Local PV - LVM</td></tr></tbody></table><ul><li>多机环境，如果有额外的块设备（非系统盘块设备）作为数据盘，选用 <code>OpenEBS Mayastor</code>、<code>OpenEBS cStor</code></li><li>多机环境，如果没有额外的块设备（非系统盘块设备）作为数据盘，仅单块系统盘块设备，选用 <code>OpenEBS Jiva</code></li><li>单机环境，建议本地路径 <code>Dynamic Local PV - Hostpath, Dynamic Local PV - Rawfile</code>，由于单机多用于测试环境，数据可靠性要求较低。</li></ul><h1 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h1><p><a href="https://openebs.io/docs/2.12.x/user-guides/cstor">openobs官方安装文档</a></p><p>在安装openebs之前先去除污点，然后等安装完成再添加回来污点</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 去除污点</span><br>kubectl taint nodes k8s-master01 <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span>:NoSchedule-<br><span class="hljs-comment"># 添加污点</span><br>kubectl taint nodes k8s-master01 <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span>:NoSchedule<br></code></pre></td></tr></table></figure><p>添加helm repo</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">helm</span> repo <span class="hljs-keyword">add</span> openebs https:<span class="hljs-comment">//openebs.github.io/charts</span><br><span class="hljs-symbol">helm</span> repo update<br></code></pre></td></tr></table></figure><p>安装openebs（这里只会安装Jiva和Local组件）</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">helm install openebs</span> <span class="hljs-literal">--</span><span class="hljs-comment">namespace openebs openebs/openebs</span> <span class="hljs-literal">--</span><span class="hljs-comment">create</span><span class="hljs-literal">-</span><span class="hljs-comment">namespace</span> <span class="hljs-literal">--</span><span class="hljs-comment">version 3</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">x</span><br></code></pre></td></tr></table></figure><p>添加cstor支持</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">helm install openebs <span class="hljs-params">--namespace</span> openebs openebs/openebs <span class="hljs-params">--create-namespace</span> <span class="hljs-params">--set</span> cstor.enabled=<span class="hljs-literal">true</span> <span class="hljs-params">--version</span> 3.2.0<br></code></pre></td></tr></table></figure><p>查看安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 查看安装pod</span><br>kubectl <span class="hljs-built_in">get</span> pod -n openebs<br><span class="hljs-comment"># 查看安装blockdevice，这里的blockdevice是磁盘，当添加一块未分配的磁盘，就会有值</span><br>kubectl <span class="hljs-built_in">get</span> bd -n openebs<br></code></pre></td></tr></table></figure><p>OpenEBS依赖与iSCSI做存储管理，因此需要先确保您的集群上已有安装openiscsi。 （这里当报错的时候可以安装试试）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">yum -y install iscsi-initiator-utils<br>systemctl <span class="hljs-keyword">enable</span> iscsid <span class="hljs-comment">--now</span><br>systemctl <span class="hljs-keyword">start</span> iscsid<br></code></pre></td></tr></table></figure><p>查看安装状况：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get pod -n openebs</span><br>NAME                                            READY   STATUS    RESTARTS         AGE<br>openebs-cstor-admission-server-b74f5487-lkz84   1/1     Running  <span class="hljs-number"> 1 </span>(6m21s ago)    8h<br>openebs-cstor-csi-controller-0                  6/6     Running  <span class="hljs-number"> 0 </span>               4m44s<br>openebs-cstor-csi-node-4df4w                    2/2     Running  <span class="hljs-number"> 2 </span>(61m ago)      8h<br>openebs-cstor-csi-node-x8bmt                    2/2     Running  <span class="hljs-number"> 6 </span>(16m ago)      8h<br>openebs-cstor-csi-node-zzn4k                    2/2     Running  <span class="hljs-number"> 2 </span>(6m21s ago)    8h<br>openebs-cstor-cspc-operator-84464fb479-fh949    1/1     Running  <span class="hljs-number"> 3 </span>(16m ago)      8h<br>openebs-cstor-cvc-operator-646f6f676b-xhd44     1/1     Running  <span class="hljs-number"> 2 </span>(16m ago)      46m<br>openebs-localpv-provisioner-55b65f8b55-zqj29    1/1     Running  <span class="hljs-number"> 13 </span>(6m23s ago)   8h<br>openebs-ndm-429hl                               1/1     Running  <span class="hljs-number"> 2 </span>(4m28s ago)    8h<br>openebs-ndm-9kkzd                               1/1     Running  <span class="hljs-number"> 1 </span>(6m21s ago)    8h<br>openebs-ndm-operator-6c944d87b6-5ddxz           1/1     Running  <span class="hljs-number"> 2 </span>(16m ago)      46m<br>openebs-ndm-sqnwx                               1/1     Running  <span class="hljs-number"> 6 </span>(15m ago)      8h<br></code></pre></td></tr></table></figure><h1 id="四、添加磁盘"><a href="#四、添加磁盘" class="headerlink" title="四、添加磁盘"></a>四、添加磁盘</h1><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[root<span class="hljs-title">@k8s-master01</span> ~]# kubectl get bd -n openebs<br>NAME                                           NODENAME       SIZE           CLAIMSTATE   STATUS     AGE<br>blockdevice<span class="hljs-number">-57886</span>fae<span class="hljs-number">032</span>a<span class="hljs-number">3</span>d<span class="hljs-number">3638</span>badeb<span class="hljs-number">1282</span>dd<span class="hljs-number">67</span>e   k<span class="hljs-number">8</span>s-node<span class="hljs-number">02</span>     <span class="hljs-number">21473771008</span>    Unclaimed    Active     <span class="hljs-number">53</span>s<br>blockdevice-d<span class="hljs-number">923</span>fc<span class="hljs-number">382</span>d<span class="hljs-number">96</span>ff<span class="hljs-number">6</span>eea<span class="hljs-number">7</span>d<span class="hljs-number">9</span>ab<span class="hljs-number">8</span>efb<span class="hljs-number">66224</span>   k<span class="hljs-number">8</span>s-master<span class="hljs-number">01</span>   <span class="hljs-number">21473771008</span>    Unclaimed    Active     <span class="hljs-number">11</span>m<br>blockdevice-e<span class="hljs-number">5009</span>ce<span class="hljs-number">419</span><span class="hljs-keyword">c</span><span class="hljs-number">80719025</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span><span class="hljs-keyword">cc</span><span class="hljs-number">9409253</span>ab   k<span class="hljs-number">8</span>s-node<span class="hljs-number">01</span>     <span class="hljs-number">21473771008</span>    Unclaimed    Active     <span class="hljs-number">33</span>s<br></code></pre></td></tr></table></figure><h1 id="五、配置"><a href="#五、配置" class="headerlink" title="五、配置"></a>五、配置</h1><h2 id="5-1-创建cStor存储池"><a href="#5-1-创建cStor存储池" class="headerlink" title="5.1 创建cStor存储池"></a>5.1 创建cStor存储池</h2><p>cspc.yaml ：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cstor.openebs.io/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">CStorPoolCluster</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cstor-disk-pool</span><br> <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">openebs</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">pools</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">nodeSelector:</span><br>       <span class="hljs-attribute">kubernetes.io/hostname</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s-master01&quot;</span><br>     <span class="hljs-attribute">dataRaidGroups</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">blockDevices:</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-string">blockDeviceName: &quot;blockdevice-d923fc382d96ff6eea7d9ab8efb66224&quot;</span><br>     <span class="hljs-attribute">poolConfig</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-attribute">dataRaidGroupType</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stripe&quot;</span><br><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">nodeSelector:</span><br>       <span class="hljs-attribute">kubernetes.io/hostname</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s-node01&quot;</span><br>     <span class="hljs-attribute">dataRaidGroups</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">blockDevices:</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-string">blockDeviceName: &quot;blockdevice-e5009ce419c80719025c4cc9409253ab&quot;</span><br>     <span class="hljs-attribute">poolConfig</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-attribute">dataRaidGroupType</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stripe&quot;</span><br><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">nodeSelector:</span><br>       <span class="hljs-attribute">kubernetes.io/hostname</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s-node02&quot;</span><br>     <span class="hljs-attribute">dataRaidGroups</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">blockDevices:</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-string">blockDeviceName: &quot;blockdevice-57886fae032a3d3638badeb1282dd67e&quot;</span><br>     <span class="hljs-attribute">poolConfig</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-attribute">dataRaidGroupType</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stripe&quot;</span><br></code></pre></td></tr></table></figure><p>dataRaidGroupType:可以根据您的需要设置为 <code>stripe</code> or <code>mirror</code> 。下面以配置为stripe为例。 </p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-master01 openebs]<span class="hljs-comment"># kubectl get CStorPoolCluster -n openebs</span><br>NAME              HEALTHYINSTANCES   PROVISIONEDINSTANCES   DESIREDINSTANCES   AGE<br>cstor-disk-pool                     <span class="hljs-number"> 3 </span>                    <span class="hljs-number"> 3 </span>                 42s<br></code></pre></td></tr></table></figure><h2 id="5-2-storageclass创建"><a href="#5-2-storageclass创建" class="headerlink" title="5.2 storageclass创建"></a>5.2 storageclass创建</h2><h3 id="5-2-1-cstor的创建"><a href="#5-2-1-cstor的创建" class="headerlink" title="5.2.1 cstor的创建"></a>5.2.1 cstor的创建</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cstor-csi-disk</span><br><span class="hljs-attr">provisioner:</span> <span class="hljs-string">cstor.csi.openebs.io</span><br><span class="hljs-attr">allowVolumeExpansion:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">parameters:</span><br>  <span class="hljs-attr">cas-type:</span> <span class="hljs-string">cstor</span><br>  <span class="hljs-comment"># cstorPoolCluster should have the name of the CSPC</span><br>  <span class="hljs-attr">cstorPoolCluster:</span> <span class="hljs-string">cstor-disk-pool</span><br>  <span class="hljs-comment"># replicaCount should be &lt;= no. of CSPI created in the selected CSPC</span><br>  <span class="hljs-attr">replicaCount:</span> <span class="hljs-string">&quot;3&quot;</span><br></code></pre></td></tr></table></figure><p>添加硬盘后查看磁盘情况</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">磁盘 /dev/sdb：21.5 GB,<span class="hljs-number"> 21474836480 </span>字节，41943040 个扇区<br>Units = 扇区 of<span class="hljs-number"> 1 </span>*<span class="hljs-number"> 512 </span>=<span class="hljs-number"> 512 </span>bytes<br>扇区大小(逻辑/物理)：512 字节 /<span class="hljs-number"> 512 </span>字节<br>I/O 大小(最小/最佳)：512 字节 /<span class="hljs-number"> 512 </span>字节<br>磁盘标签类型：gpt<br>Disk identifier: ADA9C10B-8C31-4EE2-A29B-F2701E9554DC<br><br><br><span class="hljs-comment">#         Start          End    Size  Type            Name</span><br><span class="hljs-number"> 1 </span>       <span class="hljs-number"> 2048 </span>   <span class="hljs-number"> 41943006 </span>    20G  Linux filesyste OpenEBS_NDM<br></code></pre></td></tr></table></figure><h3 id="5-2-2-jiva"><a href="#5-2-2-jiva" class="headerlink" title="5.2.2 jiva"></a>5.2.2 jiva</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">jiva-storageclass</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">openebs.io/cas-type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">jiva</span><br>    <span class="hljs-attribute">cas.openebs.io/config</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: StoragePool</span><br>        <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">provisioner</span><span class="hljs-punctuation">:</span> <span class="hljs-string">openebs.io/provisioner-iscsi</span><br></code></pre></td></tr></table></figure><h3 id="5-2-3-hostpath"><a href="#5-2-3-hostpath" class="headerlink" title="5.2.3  hostpath"></a>5.2.3  hostpath</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">localpv-hostpath-sc</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">openebs.io/cas-type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">local</span><br>    <span class="hljs-attribute">cas.openebs.io/config</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: BasePath</span><br>        <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/openebs/local&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: StorageType</span><br>        <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hostpath&quot;</span><br><span class="hljs-attribute">provisioner</span><span class="hljs-punctuation">:</span> <span class="hljs-string">openebs.io/local</span><br></code></pre></td></tr></table></figure><h3 id="5-2-4-device"><a href="#5-2-4-device" class="headerlink" title="5.2.4 device"></a>5.2.4 device</h3><p>下面的类型需要添加硬盘</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">磁盘 /dev/sdc：21.5 GB,<span class="hljs-number"> 21474836480 </span>字节，41943040 个扇区<br>Units = 扇区 of<span class="hljs-number"> 1 </span>*<span class="hljs-number"> 512 </span>=<span class="hljs-number"> 512 </span>bytes<br>扇区大小(逻辑/物理)：512 字节 /<span class="hljs-number"> 512 </span>字节<br>I/O 大小(最小/最佳)：512 字节 /<span class="hljs-number"> 512 </span>字节<br>磁盘标签类型：gpt<br>Disk identifier: BAD0A706-0A9D-478A-85C6-319224EC5D1F<br><br><br><span class="hljs-comment">#         Start          End    Size  Type            Name</span><br><span class="hljs-number"> 1 </span>       <span class="hljs-number"> 2048 </span>   <span class="hljs-number"> 41943006 </span>    20G  Linux filesyste OpenEBS_NDM<br></code></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">localpv-device-sc</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">openebs.io/cas-type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">local</span><br>    <span class="hljs-attribute">cas.openebs.io/config</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: StorageType</span><br>        <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;device&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: FSType</span><br>        <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ext4</span><br><span class="hljs-attribute">provisioner</span><span class="hljs-punctuation">:</span> <span class="hljs-string">openebs.io/local</span><br></code></pre></td></tr></table></figure><p>查看：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master01 openebs]# kubectl <span class="hljs-keyword">get</span> sc -n openebs<br><span class="hljs-type">NAME</span>               PROVISIONER            RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE<br>cstor-csi-disk     cstor.csi.openebs.io   <span class="hljs-keyword">Delete</span>          <span class="hljs-keyword">Immediate</span>              <span class="hljs-keyword">true</span>                   <span class="hljs-number">43</span>s<br>openebs-device     openebs.io/<span class="hljs-keyword">local</span>       <span class="hljs-keyword">Delete</span>          WaitForFirstConsumer   <span class="hljs-keyword">false</span>                  <span class="hljs-number">9</span>h<br>openebs-hostpath   openebs.io/<span class="hljs-keyword">local</span>       <span class="hljs-keyword">Delete</span>          WaitForFirstConsumer   <span class="hljs-keyword">false</span>                  <span class="hljs-number">9</span>h<br></code></pre></td></tr></table></figure><h3 id="5-2-5-cStor、Jiva、LocalPV-特性比较："><a href="#5-2-5-cStor、Jiva、LocalPV-特性比较：" class="headerlink" title="5.2.5 cStor、Jiva、LocalPV 特性比较："></a>5.2.5 cStor、Jiva、LocalPV 特性比较：</h3><table><thead><tr><th>特性</th><th>Jiva</th><th>cStor</th><th>Local PV</th></tr></thead><tbody><tr><td>轻量级运行于用户空间</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>同步复制</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>适合低容量工作负载</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>支持快照，克隆</td><td>Basic</td><td>Advanced</td><td>No</td></tr><tr><td>数据一致性</td><td>Yes</td><td>Yes</td><td>NA</td></tr><tr><td>使用 Velero 恢复备份</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>适合高容量工作负载</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>自动精简配置</td><td></td><td>Yes</td><td>No</td></tr><tr><td>磁盘池或聚合支持</td><td></td><td>Yes</td><td>No</td></tr><tr><td>动态扩容</td><td></td><td>Yes</td><td>Yes</td></tr><tr><td>数据弹性 (RAID 支持)</td><td></td><td>Yes</td><td>No</td></tr><tr><td>接近原生磁盘性能</td><td>No</td><td>No</td><td>Yes</td></tr></tbody></table><p>大多数场景推荐 <code>cStor</code>，因其提供了强大的功能，包括快照 / 克隆、存储池功能（如精简资源调配、按需扩容等）。</p><p><code>Jiva</code> 适用于低容量需求的工作负载场景，例如 <code>5</code> 到 <code>50G</code>。尽管使用 <code>Jiva</code> 没有空间限制，但建议将其用于低容量工作负载。<code>Jiva</code> 非常易于使用，并提供企业级容器本地存储，而不需要专用硬盘。有快照和克隆功能的需求的场景，优先考虑使用 <code>cStor</code> 而不是 <code>Jiva</code>。</p><h2 id="5-3-默认sc"><a href="#5-3-默认sc" class="headerlink" title="5.3 默认sc"></a>5.3 默认sc</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">kubectl patch storage<span class="hljs-keyword">class</span> <span class="hljs-title class_">cstor</span>-<span class="hljs-title">csi</span>-<span class="hljs-title">disk</span> -<span class="hljs-title">p</span> &#x27;&#123;<span class="hljs-string">&quot;metadata&quot;</span>: &#123;<span class="hljs-string">&quot;annotations&quot;</span>:&#123;<span class="hljs-string">&quot;storageclass.kubernetes.io/is-default-class&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;&#125;&#125;<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>推荐文章：</p><p><a href="https://blog.csdn.net/easylife206/article/details/125213855">https://blog.csdn.net/easylife206/article/details/125213855</a></p><p><a href="https://zhuanlan.zhihu.com/p/519172233">https://zhuanlan.zhihu.com/p/519172233</a></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>openebs</tag>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s Service的概述、类型及代理模式</title>
    <link href="/2021/08/13/k8s%20Service%E7%9A%84%E6%A6%82%E8%BF%B0%E3%80%81%E7%B1%BB%E5%9E%8B%E5%8F%8A%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/08/13/k8s%20Service%E7%9A%84%E6%A6%82%E8%BF%B0%E3%80%81%E7%B1%BB%E5%9E%8B%E5%8F%8A%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>Kubernete Service 是一个定义了一组Pod的策略的抽象，我们也有时候叫做宏观服务。这些被服务标记的Pod都是（一般）通过label Selector决定的 。</p><p>通过创建Service,可以为一组具有相同功能的容器应用提供一个统一的入口地址，并且将请求负载分发到后端的各个容器应用上。</p><p>对于Kubernete原生的应用，Kubernete提供了一个简单的Endpoints API，这个Endpoints api的作用就是当一个服务中的pod发生变化时，Endpoints API随之变化，对于哪些不是原生的程序，Kubernetes提供了一个基于虚拟IP的网桥的服务，这个服务会将请求转发到对应的后台pod 。</p><p>![1658045368211](k8s Service的概述、类型及代理模式/1658045368211.png)</p><h1 id="二、代理模式"><a href="#二、代理模式" class="headerlink" title="二、代理模式"></a>二、代理模式</h1><p>Service能够提供负载均衡的能力,但是在使用上有以下限制:</p><p>只提供4层负载均衡能力,而没有7层功能,但有时我们可能需要更多的匹配规则来转发请求,这点上4层负载均衡是不支持的</p><p>VIP和Service代理：</p><p>在Kubernetes 集群中,每个Node运行一个 kube-proxy进程。kube-proxy负责为Service实现了一种VIP (虚拟IP)的形式,而不是ExternalName的形式。</p><ul><li>在Kubernetes v1.0版本,代理完全在userspace.</li><li>在Kubernetes v1.1版本,新增了 iptables 代理,但并不是默认的运行模式。</li><li>从Kubemetes v1.2起,默认就是iptables代理。</li><li>在Kubernetes v1.8.0-beta.0中,添加了ipvs代理</li><li>在Kubernetes 1.14版本开始默认使用ipvs代理</li><li>在Kubernetes v1.0版本, Service是4层概念。在Kubernetes v1.1版本，新增了  Ingress API (beta版) ,用来表示“7层（Http）服务</li></ul><p>为什么不用DNS?</p><p>因为DNS需要在客服端保留记录，存在缓存等干扰，可能导致过期解析。</p><h2 id="1-userspace代理模式"><a href="#1-userspace代理模式" class="headerlink" title="1 userspace代理模式"></a>1 userspace代理模式</h2><p>![1658044956049](k8s Service的概述、类型及代理模式/1658044956049.png)</p><h2 id="2-iptables代理模式"><a href="#2-iptables代理模式" class="headerlink" title="2 iptables代理模式"></a>2 iptables代理模式</h2><p>![1658044977401](k8s Service的概述、类型及代理模式/1658044977401.png)</p><h2 id="3-ipvs代理模式"><a href="#3-ipvs代理模式" class="headerlink" title="3  ipvs代理模式"></a>3  ipvs代理模式</h2><p>这种模式, kube-proxy会监视Kubernetes Service对象和Endpoints,调用netlink接口以相应地创建ipvs规则并定期与Kubernetes Service对象和Endpoints对象同步ipvs规则,以确保ipvs状态与期望一致。访问服务时,流量将被重定向到其中一个后端Pod与iptables 类似, ipvs于netfilter的hook功能,但使用哈希表作为底层数据结构并在内核空间中工作。这意味着ipvs可以更快地重定向流量,并且在同步代理规则时具有更好的性能。此外,ipvs为负载均衡算法提供了更多选项,例如:</p><ul><li>rr:轮询调度</li><li>1c:最小连接数</li><li>dh:目标哈希</li><li>sh:源哈希</li><li>sed:最短期望延迟</li><li>nq:不排队调度</li></ul><p>![1658045067670](k8s Service的概述、类型及代理模式/1658045067670.png)</p><h1 id="三、Service-的类型"><a href="#三、Service-的类型" class="headerlink" title="三、Service 的类型"></a>三、Service 的类型</h1><p>Service 在K8s中有以下四种类型</p><ul><li>Clusterlp:默认类型,自动分配一个仅Cluster内部可以访问的虚拟IP</li><li>NodePort: 在ClusterIP基础上为Service在每台机器上绑定一个端口,这样就可以通过:NodePort来访问该服务</li><li>LoadBalancer: 在NodePort的基础上,借助cloud provider创建一个外部负载均衡器,并将请求转发到: NodePort</li><li>ExternalName:把集群外部的服务引入到集群内部来,在集群内部直接使用。没有任何类型代理被创建,这只有kubernetes 1.7或更高版本的kube-dns才支持</li></ul><h2 id="1-ClusterIP"><a href="#1-ClusterIP" class="headerlink" title="1 ClusterIP"></a>1 ClusterIP</h2><p>clusterIP 主要在每个 node 节点使用iptables,将发向 clusterIP 对应端口的数据,转发到kube-proxy中。然后kube-proxy 自己内部实现有负载均衡的方法,并可以查询到这个 service下对应pod的地址和端口,进而把数据转发给对应的pod的地址和端口</p><p>![1658045231642](k8s Service的概述、类型及代理模式/1658045231642.png)</p><p>协同工作原理:</p><ul><li>apiserver 用户通过kubectl命令向apiserver发送创建service的命令, apiserver接收到请求后将数据存储到etcd中</li><li>kube-proxy kubernetes的每个节点中都有一个叫做kube-porxy的进程,这个进程负责感知service, pod的变化,并将变化的信息写入本地的iptables规则中</li><li>iptables 使用NAT等技术将virtualIP的流量转至endpoint中</li></ul><p>创建myapp-deploy.yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp-deploy</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>      <span class="hljs-attr">release:</span> <span class="hljs-string">stabel</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>        <span class="hljs-attr">release:</span> <span class="hljs-string">stabel</span><br>        <span class="hljs-attr">env:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>创建Service信息，myapp-service.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">release:</span> <span class="hljs-string">stabel</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h2 id="2-Headless-Service"><a href="#2-Headless-Service" class="headerlink" title="2 Headless Service"></a>2 Headless Service</h2><p>有时不需要或不想要负载均衡,以及单独的Service IP.遇到这种情况,可以通过指定ClusterIP(spec.clusterIP) 的值为”None”来创建Headless Service。这类Service并不会分配Cluster IP，kube-proxy不会处理它们,而且平台也不会为它们进行负载均衡和路由。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">mainfests</span>]<span class="hljs-comment"># vim myapp-svc-headless.yaml</span><br></code></pre></td></tr></table></figure><p>myapp-svc-headless.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp-headless</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">&quot;None&quot;</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">[root@k8s-master01 service]# yum install -y  bind-utils<br>[root@k8s-master01 service]# dig -t A myapp-headless.<span class="hljs-keyword">default</span>.svc.<span class="hljs-keyword">cluster</span>.local. @10<span class="hljs-number">.244</span><span class="hljs-number">.0</span><span class="hljs-number">.12</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@k8s-master01 service]</span># kubectl get pod -n kube-system -o wide<br>NAME                                   READY   STATUS    RESTARTS        AGE     IP                    NODE           NOMINATED NODE   READINESS GATES<br>coredns-<span class="hljs-number">7</span>f6cbbb7b8-pbv77               <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">4</span> (<span class="hljs-number">2</span>d20h ago)   <span class="hljs-number">5</span>d20h   <span class="hljs-number">10.244</span>.<span class="hljs-number">0.13</span>           k8s-master01   &lt;<span class="hljs-attribute">none</span>&gt;           &lt;<span class="hljs-attribute">none</span>&gt;<br>coredns-<span class="hljs-number">7</span>f6cbbb7b8-qxw99               <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">4</span> (<span class="hljs-number">2</span>d20h ago)   <span class="hljs-number">5</span>d20h   <span class="hljs-number">10.244</span>.<span class="hljs-number">0.12</span>           k8s-master01   &lt;<span class="hljs-attribute">none</span>&gt;           &lt;<span class="hljs-attribute">none</span>&gt;<br>etcd-k8s-master01                      <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">7</span> (<span class="hljs-number">2</span>d20h ago)   <span class="hljs-number">5</span>d20h   <span class="hljs-number">10.0</span>.<span class="hljs-number">0.10</span>             k8s-master01   &lt;<span class="hljs-attribute">none</span>&gt;           &lt;<span class="hljs-attribute">none</span>&gt;<br>kube-apiserver-k8s-master01            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">7</span> (<span class="hljs-number">2</span>d20h ago)   <span class="hljs-number">5</span>d20h   <span class="hljs-number">10.0</span>.<span class="hljs-number">0.10</span>             k8s-master01   &lt;<span class="hljs-attribute">none</span>&gt;           &lt;<span class="hljs-attribute">none</span>&gt;<br>kube-controller-manager-k8s-master01   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">9</span> (<span class="hljs-number">2</span>d20h ago)   <span class="hljs-number">5</span>d20h   <span class="hljs-number">10.0</span>.<span class="hljs-number">0.10</span>             k8s-master01   &lt;<span class="hljs-attribute">none</span>&gt;           &lt;<span class="hljs-attribute">none</span>&gt;<br>kube-proxy-ml24c                       <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">3</span> (<span class="hljs-number">2</span>d20h ago)   <span class="hljs-number">3</span>d22h   fd56:a9ae:cb0f::<span class="hljs-number">7</span>a1   k8s-node01     &lt;none&gt;           &lt;none&gt;<br>kube-proxy-mrbsk                       <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">4</span> (<span class="hljs-number">2</span>d20h ago)   <span class="hljs-number">3</span>d22h   <span class="hljs-number">10.0</span>.<span class="hljs-number">0.10</span>             k8s-master01   &lt;none&gt;           &lt;none&gt;<br>kube-proxy-tkszd                       <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span> (<span class="hljs-number">22</span>h ago)     <span class="hljs-number">3</span>d22h   fd56:a9ae:cb0f::<span class="hljs-number">853</span>   k8s-node02     &lt;none&gt;           &lt;none&gt;<br>kube-scheduler-k8s-master01            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">8</span> (<span class="hljs-number">2</span>d20h ago)   <span class="hljs-number">5</span>d20h   <span class="hljs-number">10.0</span>.<span class="hljs-number">0.10</span>             k8s-master01   &lt;none&gt;           &lt;none&gt;<br>[root@k8s-master01 service]# dig -t A myapp-headless.default.svc.cluster.local. @<span class="hljs-number">10.244</span>.<span class="hljs-number">0.12</span><br><br>; &lt;&lt;&gt;&gt; DiG <span class="hljs-number">9.11</span>.<span class="hljs-number">4</span>-P2-RedHat-<span class="hljs-number">9.11</span>.<span class="hljs-number">4</span>-<span class="hljs-number">26</span><span class="hljs-selector-class">.P2</span><span class="hljs-selector-class">.el7_9</span>.<span class="hljs-number">9</span> &lt;&lt;&gt;&gt; -t <span class="hljs-selector-tag">A</span> myapp-headless<span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span>. <span class="hljs-keyword">@10</span>.244.0.12<br>;; global options: +cmd<br>;; Got answer:<br>;; WARNING: .local is reserved for Multicast DNS<br>;; You are currently testing what happens when an mDNS query is leaked <span class="hljs-selector-tag">to</span> DNS<br>;; -&gt;&gt;<span class="hljs-selector-tag">HEADER</span>&lt;&lt;- opcode: QUERY, status: NOERROR, id: <span class="hljs-number">14989</span><br>;; flags: qr aa rd; QUERY: <span class="hljs-number">1</span>, ANSWER: <span class="hljs-number">3</span>, AUTHORITY: <span class="hljs-number">0</span>, ADDITIONAL: <span class="hljs-number">1</span><br>;; WARNING: recursion requested but not available<br><br>;; OPT PSEUDOSECTION:<br>; EDNS: version: <span class="hljs-number">0</span>, flags:; udp: <span class="hljs-number">4096</span><br>;; QUESTION <span class="hljs-selector-tag">SECTION</span>:<br>;myapp-headless<span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span>. IN <span class="hljs-selector-tag">A</span><br><br>;; ANSWER <span class="hljs-selector-tag">SECTION</span>:<br>myapp-headless.default.svc.cluster.local. <span class="hljs-number">30</span> IN A <span class="hljs-number">10.244</span>.<span class="hljs-number">2.109</span><br>myapp-headless.default.svc.cluster.local. <span class="hljs-number">30</span> IN A <span class="hljs-number">10.244</span>.<span class="hljs-number">1.165</span><br>myapp-headless.default.svc.cluster.local. <span class="hljs-number">30</span> IN A <span class="hljs-number">10.244</span>.<span class="hljs-number">2.108</span><br><br>;; Query <span class="hljs-selector-tag">time</span>: <span class="hljs-number">2</span> msec<br>;; SERVER: <span class="hljs-number">10.244</span>.<span class="hljs-number">0.12</span>#<span class="hljs-number">53</span>(<span class="hljs-number">10.244</span>.<span class="hljs-number">0.12</span>)<br>;; WHEN: 一 <span class="hljs-number">7</span>月 <span class="hljs-number">18</span> <span class="hljs-number">05</span>:<span class="hljs-number">05</span>:<span class="hljs-number">52</span> CST <span class="hljs-number">2022</span><br>;; MSG SIZE  rcvd: <span class="hljs-number">237</span><br><br>[root@k8s-master01 service]# kubectl get pod -o wide<br>NAME                            READY   STATUS    RESTARTS   AGE     IP             NODE         NOMINATED NODE   READINESS GATES<br>myapp-deploy-<span class="hljs-number">85</span>bb565996-<span class="hljs-number">2</span>tvcg   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m20s   <span class="hljs-number">10.244</span>.<span class="hljs-number">2.108</span>   k8s-node02   &lt;none&gt;           &lt;none&gt;<br>myapp-deploy-<span class="hljs-number">85</span>bb565996-dgzgz   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m20s   <span class="hljs-number">10.244</span>.<span class="hljs-number">2.109</span>   k8s-node02   &lt;none&gt;           &lt;none&gt;<br>myapp-deploy-<span class="hljs-number">85</span>bb565996-mlnh8   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m20s   <span class="hljs-number">10.244</span>.<span class="hljs-number">1.165</span>   k8s-node01   &lt;none&gt;           &lt;none&gt;<br></code></pre></td></tr></table></figure><p>通过Headless Service一样可以访问到对应的pod上去</p><h2 id="3-NodePort"><a href="#3-NodePort" class="headerlink" title="3 NodePort"></a>3 NodePort</h2><p>nodePort 的原理在于在node上开了一个端口,将向该端口的流量导入到kube-proxy,然后由kube-proxy进一步到给对应的pod</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">manifests</span>]<span class="hljs-comment"># vi myapp-np-service.yaml</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">release:</span> <span class="hljs-string">stabel</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>查看结果</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 查看service服务暴露端口</span><br>[root<span class="hljs-meta">@k8s-master01</span> service]<span class="hljs-comment"># kubectl get svc -o wide</span><br>NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE     SELECTOR<br>kubernetes   ClusterIP   10.96.0.1       <span class="hljs-variable">&lt;none&gt;</span>        443/TCP        5d20h   <span class="hljs-variable">&lt;none&gt;</span><br>myapp        NodePort    10.98.226.253   <span class="hljs-variable">&lt;none&gt;</span>        80:30247/TCP   17s     app=myapp,release=stabel<br><span class="hljs-comment">#查看myapp分布在哪些节点</span><br>[root<span class="hljs-meta">@k8s-master01</span> service]<span class="hljs-comment"># kubectl get pod -o wide</span><br>NAME                            READY   STATUS    RESTARTS   AGE   IP             NODE         NOMINATED NODE   READINESS GATES<br>myapp-deploy-85bb565996-dcgzh   1/1     Running   0          54s   10.244.1.167   k8s-node01   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>myapp-deploy-85bb565996-snpfg   1/1     Running   0          54s   10.244.1.166   k8s-node01   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>myapp-deploy-85bb565996-xv2q4   1/1     Running   0          54s   10.244.2.110   k8s-node02   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br><span class="hljs-comment">#查看所有节点的信息</span><br>[root<span class="hljs-meta">@k8s-master01</span> service]<span class="hljs-comment"># kubectl get node -o wide           </span><br>NAME           STATUS   ROLES                  AGE     VERSION   INTERNAL-IP           EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME<br>k8s-master01   Ready    control-plane,master   5d20h   v1.22.0   10.0.0.10             <span class="hljs-variable">&lt;none&gt;</span>        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   docker://18.6.1<br>k8s-node01     Ready    <span class="hljs-variable">&lt;none&gt;</span>                 4d22h   v1.22.0   10.0.0.21             <span class="hljs-variable">&lt;none&gt;</span>        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   docker://18.6.1<br>k8s-node02     Ready    <span class="hljs-variable">&lt;none&gt;</span>                 4d22h   v1.22.0   10.0.0.22             <span class="hljs-variable">&lt;none&gt;</span>        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   docker://18.6.1<br></code></pre></td></tr></table></figure><p>通过访问10.0.0.10:30247,10.0.0.21:30247,10.0.0.22:30247都可以得到：</p><p>![1658064476544](k8s Service的概述、类型及代理模式.assets/1658064476544.png)</p><p>查询流程</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@k8s-master01 service]<span class="hljs-comment"># iptables -t nat -nvL KUBE-NODEPORTS</span><br>Chain KUBE-NODEPORTS (<span class="hljs-number">0</span> references)<br> pkts bytes target     prot opt <span class="hljs-keyword">in</span>     out     source               destination         <br>    <span class="hljs-number">0</span>     <span class="hljs-number">0</span> KUBE-SVC-<span class="hljs-number">2</span>CMXP7HKUVJN7L6M  tcp  --  *      *       <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            <span class="hljs-regexp">/* default/</span>nginx */ tcp dpt:<span class="hljs-number">30029</span><br></code></pre></td></tr></table></figure><h2 id="4-LoadBalancer"><a href="#4-LoadBalancer" class="headerlink" title="4 LoadBalancer"></a>4 LoadBalancer</h2><p>loadBalancer 和 nodePort其实是同一种方式,区别在于loadBalancer 比 nodePort多了一步,就是可以调用cloud provider 去创建 LB 来向节点导流。</p><p>![1658046066962](k8s Service的概述、类型及代理模式/1658046066962.png)</p><h1 id="5-ExternalName"><a href="#5-ExternalName" class="headerlink" title="5 ExternalName"></a>5 ExternalName</h1><p>这种类型的Service通过返回CNAME和它的值,可以将服务映射到externalName字段的内容(例如:hub.atguigu.com). ExternalName Service 是 Service的特例,它没有 selector,也没有定义任何的端口和Endpoint。相反的,对于运行在集群外部的服务,它通过返回该外部服务的别名这种方式来提供服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiversion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-service-1</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ExternalName</span><br>  <span class="hljs-attr">externalName:</span> <span class="hljs-string">www.qingyeshuijian.com</span><br></code></pre></td></tr></table></figure><p>当查询主机 my-service-1.defalut.svc.cluster.local (SVC_NAME.NAMESPACE.svc.cluster.local )时,集群的DNS服务将返回一个值my.database.example.com的CNAME记录。访问这个服务的工作方式和其他的相同,唯一不同的是重定向发生在DNS层,而且不会进行代理或转发。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@k8s-master01 service]</span># dig -t <span class="hljs-selector-tag">A</span> my-service-<span class="hljs-number">1</span><span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span>. <span class="hljs-keyword">@10</span>.244.0.12              <br><br>; &lt;&lt;&gt;&gt; DiG <span class="hljs-number">9.11</span>.<span class="hljs-number">4</span>-P2-RedHat-<span class="hljs-number">9.11</span>.<span class="hljs-number">4</span>-<span class="hljs-number">26</span><span class="hljs-selector-class">.P2</span><span class="hljs-selector-class">.el7_9</span>.<span class="hljs-number">9</span> &lt;&lt;&gt;&gt; -t <span class="hljs-selector-tag">A</span> my-service-<span class="hljs-number">1</span><span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span>. <span class="hljs-keyword">@10</span>.244.0.12<br>;; global options: +cmd<br>;; Got answer:<br>;; WARNING: .local is reserved for Multicast DNS<br>;; You are currently testing what happens when an mDNS query is leaked <span class="hljs-selector-tag">to</span> DNS<br>;; -&gt;&gt;<span class="hljs-selector-tag">HEADER</span>&lt;&lt;- opcode: QUERY, status: NOERROR, id: <span class="hljs-number">3150</span><br>;; flags: qr aa rd; QUERY: <span class="hljs-number">1</span>, ANSWER: <span class="hljs-number">2</span>, AUTHORITY: <span class="hljs-number">0</span>, ADDITIONAL: <span class="hljs-number">1</span><br>;; WARNING: recursion requested but not available<br><br>;; OPT PSEUDOSECTION:<br>; EDNS: version: <span class="hljs-number">0</span>, flags:; udp: <span class="hljs-number">4096</span><br>;; QUESTION <span class="hljs-selector-tag">SECTION</span>:<br>;my-service-<span class="hljs-number">1</span><span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span>.        IN <span class="hljs-selector-tag">A</span><br><br>;; ANSWER <span class="hljs-selector-tag">SECTION</span>:<br>my-service-<span class="hljs-number">1</span>.default.svc.cluster.local. <span class="hljs-number">30</span> IN CNAME www.qingyeshuijian.com.<br>www.qingyeshuijian.com. <span class="hljs-number">30</span>      IN      A       <span class="hljs-number">39.107</span>.<span class="hljs-number">115.153</span><br><br>;; Query <span class="hljs-selector-tag">time</span>: <span class="hljs-number">50</span> msec<br>;; SERVER: <span class="hljs-number">10.244</span>.<span class="hljs-number">0.12</span>#<span class="hljs-number">53</span>(<span class="hljs-number">10.244</span>.<span class="hljs-number">0.12</span>)<br>;; WHEN: 一 <span class="hljs-number">7</span>月 <span class="hljs-number">18</span> <span class="hljs-number">05</span>:<span class="hljs-number">30</span>:<span class="hljs-number">32</span> CST <span class="hljs-number">2022</span><br>;; MSG SIZE  rcvd: <span class="hljs-number">179</span><br></code></pre></td></tr></table></figure><p>通过上面的dig查看ExternalName找到cname指向了<a href="http://www.qingyeshuijian.com/">www.qingyeshuijian.com</a></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>service</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s pod重启策略与状态</title>
    <link href="/2021/08/10/k8s%20pod%E9%87%8D%E5%90%AF%E7%AD%96%E7%95%A5%E4%B8%8E%E7%8A%B6%E6%80%81/"/>
    <url>/2021/08/10/k8s%20pod%E9%87%8D%E5%90%AF%E7%AD%96%E7%95%A5%E4%B8%8E%E7%8A%B6%E6%80%81/</url>
    
    <content type="html"><![CDATA[<h1 id="重启策略"><a href="#重启策略" class="headerlink" title="重启策略"></a>重启策略</h1><p>PodSpec中有一个 restartPolicy字段，可能的值为Always、OnFailure和Never。默认为Always. </p><p>restartPolicy 适用于Pod中的所有容器。restartPolicy仅指通过同一节点上的kubelet 重新启动容器。失败的容器由kubelet以五分钟为上限的指数退避延迟(10秒,20秒, 40秒.)重新启动,并在成功执行十分钟后重置。如Pod文档中所述,一旦绑定到一个节点, Pod将永远不会重新绑定到另一个节点。</p><h1 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h1><p>Pod的status字段是一个PodStatus对象, PodStatus中有一个 phase字段。</p><p>Pod的相位(phase)是Pod在其生命周期中的简单宏观概述。该阶段并不是对容器或Pod的综合汇总,也不是为了做为综合状态机</p><p>挂起(Pending)：Pod已被Kubernetes系统接受,但有一个或者多个容器镜像尚未创建。等待时间包括调度Pod的时间和通过网络下载镜像的时间，这可能需要花点时间</p><p>运行中(Running)：该Pod已经绑定到了一个节点上, Pod中所有的容器都已被创建。至少有一个容器正在运行,或者正处于启动或重启状态</p><p>成功(Succeeded)： Pod中的所有容器都被成功终止,并且不会再重启</p><p>失败(Failed)：Pod中的所有容器都已终止了,并且至少有一个容器是因为失败终止。也就是说,容器以非0状态退出或者被系统终止</p><p>未知(Unknown)：因为某些原因无法取得Pod的状态,通常是因为与Pod所在主机通信失败</p><h1 id="状态示例"><a href="#状态示例" class="headerlink" title="状态示例"></a>状态示例</h1><p>Pod中只有一个容器并且正在运行，容器成功退出</p><ul><li>记录事件完成</li><li>如果restartPolicy为:<pre><code class="hljs">Always：重启容器；Pod phase 仍为RunningOnFailure： Pod phase变成 SucceededNever：Pod phase成 Succeeded</code></pre></li></ul><p>Pod中只有一个容器并且正在运行。容器退出失败</p><ul><li>记录失败事件</li><li>如果restartPolicy为:<pre><code class="hljs">Always：重启容器: Pod phase 仍为RunningOnFailure：重启容器; Pod phase仍为RunningNever：Pod phase 变成 Failed</code></pre></li></ul><p>Pod中有两个容器并且正在运行。容器1退出失败</p><ul><li>记录失败事件</li><li>如果restartPolicy为:<pre><code class="hljs">Always：重启容器; Pod phase仍为RunningOnFailure：重启容器: Pod phase仍为RunningNever： 重启容器: Pod phase为Running</code></pre></li><li>如果有容器1没有处于运行状态,并且容器2退出:<pre><code class="hljs">    记录失败事件    如果restartPolicy为:            Always: 重启容器: Pod phase为 Running           OnFailure: 重启容器; Pod phase仍为Running           Never: Pod phase 变成 Failed</code></pre></li></ul><p>Pod 中只有一个容器并处于运行状态。容器运行时内存超出限制</p><ul><li>容器以失败状态终止</li><li>记录OOM事件</li><li>如果restartPolicy为:<br>Always: 重启容器: Pod phase为Running<br>OnFailure:重启容器; Pod phase 为Running<br>Never: 记录失败事件: Pod phase仍为Failed</li></ul><p>Pod正在运行,磁盘故障.</p><ul><li>杀掉所有容器。记录适当事件</li><li>Pod phase变成 Failed</li><li>如果使用控制器来运行, Pod将在别处重建</li></ul><p>Pod正在运行,其节点被分段</p><ul><li>节点控制器等待直到超时</li><li>节点控制器将Pod phase设置为Failed</li><li>如果是用控制器来运行, Pod将在别处重建</li></ul><h1 id="启动退出"><a href="#启动退出" class="headerlink" title="启动退出"></a>启动退出</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">lifecycle-demo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">lifecycle-demo-containen</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/myapp:v1.23</span>   <span class="hljs-comment">#本地搭建仓库  </span><br>    <span class="hljs-attr">lifecycle:</span><br>      <span class="hljs-attr">postStart:</span> <span class="hljs-comment">#pod创建后执行</span><br>        <span class="hljs-attr">exec:</span><br>          <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;touch /tmp/live&quot;</span>]<br>      <span class="hljs-attr">preStop:</span> <span class="hljs-comment">#pod退出前执行</span><br>        <span class="hljs-attr">exec:</span><br>          <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;rm -rf /tmp/live&quot;</span>]<br></code></pre></td></tr></table></figure><p>查看是否成功：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@k8s-master01 probe]<span class="hljs-comment"># kubectl exec lifecycle-demo -it -- /bin/sh</span><br><span class="hljs-comment"># ls /tmp</span><br>live<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>重启策略</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s pod生命周期—探针</title>
    <link href="/2021/08/08/k8s%20pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E2%80%94%E6%8E%A2%E9%92%88/"/>
    <url>/2021/08/08/k8s%20pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E2%80%94%E6%8E%A2%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h1 id="三种类型处理程序"><a href="#三种类型处理程序" class="headerlink" title="三种类型处理程序"></a>三种类型处理程序</h1><p>探针是由kubelet对容器执行的定期诊断。要执行诊断, kubelet调用由容器实现的Handler。有三种类型的处理程序:</p><p>ExecAction：在容器内执行指定命令。如果命令退出时返回码为0则认为诊断成功。</p><p>TCPSocketAction：对指定端口上的容器的IP地址进行TCP检查。如果端口打开,则诊断被认为是成功的。</p><p>HTTPGetAction：对指定的端口和路径上的容器的IP地址执行HTTP Get请求。如果响应的状态码大于等于200且小于400,则诊断被认为是成功的</p><p>每次探测都将获得以下三种结果之一：</p><p>成功：容器通过了诊断。</p><p>失败：容器未通过诊断。</p><p>未知：诊断失败,因此不会采取任何行动</p><h1 id="探测方式"><a href="#探测方式" class="headerlink" title="探测方式"></a>探测方式</h1><p><strong>livenessProbe</strong></p><p>指示容器是否正在运行。如果存活探测失败,则kubelet会杀死容器,并且容器将受到其重启策略的影响。如果容器不提供存活探针,则默认状态为Success</p><p><strong>readinessProbe</strong></p><p>指示容器是否准备好服务请求。如果就绪探测失败,端点控制器将从与Pod匹配的所有Service的端点中删除该Pod的IP地址。初始延迟之前的就绪状态默认为Failure。如果容器不提供就绪探针,则默认状态为Success</p><h1 id="Pod-hook"><a href="#Pod-hook" class="headerlink" title="Pod hook"></a>Pod hook</h1><p>Pod hook (子)是由Kubernetes 管理的kubelet发起的,当容器中的进程启动前或者容器中的进程终止之前运行,这是包含在容器的生命周期之中。可以同时为Pod中的所有容器都配置hook</p><p>Hook 的类型包括两种:</p><ul><li>exec:执行一段命令</li><li>HTTP:发送HTTP请求</li></ul><h1 id="探针示例"><a href="#探针示例" class="headerlink" title="探针示例"></a>探针示例</h1><p>注意：harborcloud.com是我本地搭建的云仓库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">harborcloud.com<span class="hljs-regexp">/library/my</span>app:v1.<span class="hljs-number">23</span> =&gt;nginx<br>harborcloud.com<span class="hljs-regexp">/library/</span>busybox:v1.<span class="hljs-number">35</span> =&gt;busybox<br></code></pre></td></tr></table></figure><h2 id="就绪探针"><a href="#就绪探针" class="headerlink" title="就绪探针"></a>就绪探针</h2><h3 id="资源清单"><a href="#资源清单" class="headerlink" title="资源清单"></a>资源清单</h3><p>readinessProbe-httpget</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">readiness-httpget-pod</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">readiness-httpget-container</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/myapp:v1.23</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">readinessProbe:</span><br>      <span class="hljs-attr">httpGet:</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/index1.html</span><br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="清单应用"><a href="#清单应用" class="headerlink" title="清单应用"></a>清单应用</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@k8s-master01 probe]<span class="hljs-comment"># vi readinessProbe-httpget.ymal</span><br>[root@k8s-master01 probe]<span class="hljs-comment"># kubectl create -f readinessProbe-httpget.ymal</span><br><span class="hljs-comment"># kubectl get pod 可能需要等待一会才会 status：running</span><br>[root@k8s-master01 probe]<span class="hljs-comment"># kubectl get pod</span><br>NAME                    READY   STATUS    RESTARTS   AGE<br>readiness-httpget-pod   <span class="hljs-number">0</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m3s<br></code></pre></td></tr></table></figure><p>结果分析：为什么会出现READY 0/1</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master01</span> <span class="hljs-string">probe</span>]<span class="hljs-comment"># kubectl describe pod readiness-httpget-pod</span><br><span class="hljs-attr">Name:</span>         <span class="hljs-string">readiness-httpget-pod</span><br><span class="hljs-attr">Namespace:</span>    <span class="hljs-string">default</span><br><span class="hljs-attr">Priority:</span>     <span class="hljs-number">0</span><br><span class="hljs-attr">Node:</span>         <span class="hljs-string">k8s-node02/fd56:a9ae:cb0f::853</span><br><span class="hljs-attr">Start Time:</span>   <span class="hljs-string">Sun,</span> <span class="hljs-number">17</span> <span class="hljs-string">Jul</span> <span class="hljs-number">2022 00:10:36</span> <span class="hljs-string">+0800</span><br><span class="hljs-attr">Labels:</span>       <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Annotations:</span>  <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Status:</span>       <span class="hljs-string">Running</span><br><span class="hljs-attr">IP:</span>           <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.5</span><br><span class="hljs-attr">IPs:</span><br>  <span class="hljs-attr">IP:</span>  <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.5</span><br><span class="hljs-attr">Containers:</span><br>  <span class="hljs-attr">readiness-httpget-container:</span><br>    <span class="hljs-attr">Container ID:</span>   <span class="hljs-string">docker://692f676aa6a3b9a16eac5373d78398df1780d6e7b87e129a3035a871e3617d61</span><br>    <span class="hljs-attr">Image:</span>          <span class="hljs-string">wangyanglinux/myapp:v1</span><br>    <span class="hljs-attr">Image ID:</span>       <span class="hljs-string">docker-pullable://wangyanglinux/myapp@sha256:9c3dc30b5219788b2b8a4b065f548b922a34479577befb54b03330999d30d513</span><br>    <span class="hljs-attr">Port:</span>           <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Host Port:</span>      <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">State:</span>          <span class="hljs-string">Running</span><br>      <span class="hljs-attr">Started:</span>      <span class="hljs-string">Sun,</span> <span class="hljs-number">17</span> <span class="hljs-string">Jul</span> <span class="hljs-number">2022 00:12:13</span> <span class="hljs-string">+0800</span><br>    <span class="hljs-attr">Ready:</span>          <span class="hljs-literal">False</span><br>    <span class="hljs-attr">Restart Count:</span>  <span class="hljs-number">0</span><br>    <span class="hljs-attr">Readiness:</span>      <span class="hljs-string">http-get</span> <span class="hljs-string">http://:80/index1.html</span> <span class="hljs-string">delay=1s</span> <span class="hljs-string">timeout=1s</span> <span class="hljs-string">period=3s</span> <span class="hljs-comment">#success=1 #failure=3</span><br>    <span class="hljs-attr">Environment:</span>    <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Mounts:</span><br>      <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class="hljs-string">from</span> <span class="hljs-string">kube-api-access-2n7st</span> <span class="hljs-string">(ro)</span><br><span class="hljs-attr">Conditions:</span><br>  <span class="hljs-string">Type</span>              <span class="hljs-string">Status</span><br>  <span class="hljs-string">Initialized</span>       <span class="hljs-literal">True</span> <br>  <span class="hljs-string">Ready</span>             <span class="hljs-literal">False</span> <br>  <span class="hljs-string">ContainersReady</span>   <span class="hljs-literal">False</span> <br>  <span class="hljs-string">PodScheduled</span>      <span class="hljs-literal">True</span> <br><span class="hljs-attr">Volumes:</span><br>  <span class="hljs-attr">kube-api-access-2n7st:</span><br>    <span class="hljs-attr">Type:</span>                    <span class="hljs-string">Projected</span> <span class="hljs-string">(a</span> <span class="hljs-string">volume</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">injected</span> <span class="hljs-string">data</span> <span class="hljs-string">from</span> <span class="hljs-string">multiple</span> <span class="hljs-string">sources)</span><br>    <span class="hljs-attr">TokenExpirationSeconds:</span>  <span class="hljs-number">3607</span><br>    <span class="hljs-attr">ConfigMapName:</span>           <span class="hljs-string">kube-root-ca.crt</span><br>    <span class="hljs-attr">ConfigMapOptional:</span>       <span class="hljs-string">&lt;nil&gt;</span><br>    <span class="hljs-attr">DownwardAPI:</span>             <span class="hljs-literal">true</span><br><span class="hljs-attr">QoS Class:</span>                   <span class="hljs-string">BestEffort</span><br><span class="hljs-attr">Node-Selectors:</span>              <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Tolerations:</span>                 <span class="hljs-string">node.kubernetes.io/not-ready:NoExecute</span> <span class="hljs-string">op=Exists</span> <span class="hljs-string">for</span> <span class="hljs-string">300s</span><br>                             <span class="hljs-string">node.kubernetes.io/unreachable:NoExecute</span> <span class="hljs-string">op=Exists</span> <span class="hljs-string">for</span> <span class="hljs-string">300s</span><br><span class="hljs-attr">Events:</span><br>  <span class="hljs-string">Type</span>     <span class="hljs-string">Reason</span>     <span class="hljs-string">Age</span>                             <span class="hljs-string">From</span>               <span class="hljs-string">Message</span><br>  <span class="hljs-string">----</span>     <span class="hljs-string">------</span>     <span class="hljs-string">----</span>                            <span class="hljs-string">----</span>               <span class="hljs-string">-------</span><br>  <span class="hljs-string">Normal</span>   <span class="hljs-string">Scheduled</span>  <span class="hljs-string">2m17s</span>                           <span class="hljs-string">default-scheduler</span>  <span class="hljs-string">Successfully</span> <span class="hljs-string">assigned</span> <span class="hljs-string">default/readiness-httpget-pod</span> <span class="hljs-string">to</span> <span class="hljs-string">k8s-node02</span><br>  <span class="hljs-string">Warning</span>  <span class="hljs-string">Failed</span>     <span class="hljs-string">&lt;invalid&gt;</span>                       <span class="hljs-string">kubelet</span>            <span class="hljs-string">Failed</span> <span class="hljs-string">to</span> <span class="hljs-string">pull</span> <span class="hljs-string">image</span> <span class="hljs-attr">&quot;wangyanglinux/myapp:v1&quot;:</span> <span class="hljs-attr">rpc error:</span> <span class="hljs-string">code</span> <span class="hljs-string">=</span> <span class="hljs-string">Unknown</span> <span class="hljs-string">desc</span> <span class="hljs-string">=</span> <span class="hljs-attr">Get https://registry-1.docker.io/v2/: net/http:</span> <span class="hljs-string">TLS</span> <span class="hljs-string">handshake</span> <span class="hljs-string">timeout</span><br>  <span class="hljs-string">Warning</span>  <span class="hljs-string">Failed</span>     <span class="hljs-string">&lt;invalid&gt;</span>                       <span class="hljs-attr">kubelet            Error:</span> <span class="hljs-string">ErrImagePull</span><br>  <span class="hljs-string">Normal</span>   <span class="hljs-string">BackOff</span>    <span class="hljs-string">&lt;invalid&gt;</span>                       <span class="hljs-string">kubelet</span>            <span class="hljs-string">Back-off</span> <span class="hljs-string">pulling</span> <span class="hljs-string">image</span> <span class="hljs-string">&quot;wangyanglinux/myapp:v1&quot;</span><br>  <span class="hljs-string">Warning</span>  <span class="hljs-string">Failed</span>     <span class="hljs-string">&lt;invalid&gt;</span>                       <span class="hljs-attr">kubelet            Error:</span> <span class="hljs-string">ImagePullBackOff</span><br>  <span class="hljs-string">Normal</span>   <span class="hljs-string">Pulling</span>    <span class="hljs-string">&lt;invalid&gt;</span> <span class="hljs-string">(x2</span> <span class="hljs-string">over</span> <span class="hljs-string">45s)</span>         <span class="hljs-string">kubelet</span>            <span class="hljs-string">Pulling</span> <span class="hljs-string">image</span> <span class="hljs-string">&quot;wangyanglinux/myapp:v1&quot;</span><br>  <span class="hljs-string">Normal</span>   <span class="hljs-string">Pulled</span>     <span class="hljs-string">&lt;invalid&gt;</span>                       <span class="hljs-string">kubelet</span>            <span class="hljs-string">Successfully</span> <span class="hljs-string">pulled</span> <span class="hljs-string">image</span> <span class="hljs-string">&quot;wangyanglinux/myapp:v1&quot;</span> <span class="hljs-string">in</span> <span class="hljs-number">16.</span><span class="hljs-string">208867618s</span><br>  <span class="hljs-string">Normal</span>   <span class="hljs-string">Created</span>    <span class="hljs-string">&lt;invalid&gt;</span>                       <span class="hljs-string">kubelet</span>            <span class="hljs-string">Created</span> <span class="hljs-string">container</span> <span class="hljs-string">readiness-httpget-container</span><br>  <span class="hljs-string">Normal</span>   <span class="hljs-string">Started</span>    <span class="hljs-string">&lt;invalid&gt;</span>                       <span class="hljs-string">kubelet</span>            <span class="hljs-string">Started</span> <span class="hljs-string">container</span> <span class="hljs-string">readiness-httpget-container</span><br>  <span class="hljs-string">Warning</span>  <span class="hljs-string">Unhealthy</span>  <span class="hljs-string">&lt;invalid&gt;</span> <span class="hljs-string">(x15</span> <span class="hljs-string">over</span> <span class="hljs-string">&lt;invalid&gt;)</span>  <span class="hljs-attr">kubelet            Readiness probe failed: HTTP probe failed with statuscode:</span> <span class="hljs-number">404</span><br></code></pre></td></tr></table></figure><p>通过上面分析可以看出 </p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">Readiness:      http-get http://:80/index1.html delay=1s timeout=1s period=3s #success=1 #failure=3<br><span class="hljs-keyword">error: </span>code = Unknown desc = Get https://registry<span class="hljs-string">-1</span>.docker.io/v2/: net/http: TLS handshake timeout<br>statuscode: 404<br></code></pre></td></tr></table></figure><p>处理异常</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-master01 probe]<span class="hljs-meta"># kubectl exec readiness-httpget-pod -it -- /bin/sh</span><br><span class="hljs-meta"># cd /usrshare/nginx/html</span><br><span class="hljs-meta"># echo <span class="hljs-string">&quot;234srwerwe&quot;</span>&gt;&gt;index1.html</span><br>[root<span class="hljs-symbol">@k8s</span>-master01 probe]<span class="hljs-meta"># kubectl get pod</span><br>NAME                    READY   STATUS    RESTARTS   AGE<br>readiness-httpget-pod   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">6</span>m22s<br></code></pre></td></tr></table></figure><p>当index1.html添加后pod正常启动</p><h2 id="存活检测"><a href="#存活检测" class="headerlink" title="存活检测"></a>存活检测</h2><h3 id="livenessProbe-exec"><a href="#livenessProbe-exec" class="headerlink" title="livenessProbe-exec"></a>livenessProbe-exec</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">liveness-exec-pod</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">liveness-exec-containen</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/busybox:v1.35</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;touch /tmp/live;sleep 60;rm -rf /tmp/live;sleep 3600&quot;</span>]<br>    <span class="hljs-attr">livenessProbe:</span><br>      <span class="hljs-attr">exec:</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;-e&quot;</span>,<span class="hljs-string">&quot;/tmp/live&quot;</span>]<br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 probe]# kubectl <span class="hljs-keyword">create</span> <span class="hljs-operator">-</span>f livenessProbe<span class="hljs-operator">-</span>exec.yaml <br>pod<span class="hljs-operator">/</span>liveness<span class="hljs-operator">-</span><span class="hljs-keyword">exec</span><span class="hljs-operator">-</span>pod created<br>[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 probe]# kubectl <span class="hljs-keyword">get</span> pod<br>NAME                READY   STATUS    RESTARTS   AGE<br>liveness<span class="hljs-operator">-</span><span class="hljs-keyword">exec</span><span class="hljs-operator">-</span>pod   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">14</span>s<br>[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 probe]# kubectl <span class="hljs-keyword">get</span> pod<br>NAME                READY   STATUS    RESTARTS            AGE<br>liveness<span class="hljs-operator">-</span><span class="hljs-keyword">exec</span><span class="hljs-operator">-</span>pod   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">1</span> (<span class="hljs-operator">&lt;</span>invalid<span class="hljs-operator">&gt;</span> ago)   <span class="hljs-number">2</span>m11s<br></code></pre></td></tr></table></figure><p>时间轴：</p><p>创建pod成功——等待60秒后删除/tmp/live——存活检测/tmp/live被删除了，然后就重启pod</p><h3 id="livenessProbe-httpget"><a href="#livenessProbe-httpget" class="headerlink" title="livenessProbe-httpget"></a>livenessProbe-httpget</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">liveness-httpget-pod</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">liveness-httpget-containen</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/myapp:v1.23</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">livenessProbe:</span><br>      <span class="hljs-attr">httpGet:</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/index.html</span><br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">3</span><br>      <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="livenessProbe-tcp"><a href="#livenessProbe-tcp" class="headerlink" title="livenessProbe-tcp"></a>livenessProbe-tcp</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">probe-tcp</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/myapp:v1.23</span><br>    <span class="hljs-attr">livenessProbe:</span><br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">tcpSocket:</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>探针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s pod生命周期</title>
    <link href="/2021/08/06/k8s%20pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2021/08/06/k8s%20pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="k8s-pod生命周期—Init容器"><a href="#k8s-pod生命周期—Init容器" class="headerlink" title="k8s pod生命周期—Init容器"></a>k8s pod生命周期—Init容器</h1><h1 id="pod生命周期"><a href="#pod生命周期" class="headerlink" title="pod生命周期"></a>pod生命周期</h1><p>![1657944206659](k8s pod生命周期/1657944206659.png)</p><p>Pod能够具有多个容器,应用运行在容器里面,但是它也可能有一个或多个先于应用容器启动的Init容器。</p><p>Init容器与普通的容器非常像,除了如下两点:</p><ul><li>Init 容器总是运行到成功完成为止</li><li>每个Init容器都必须在下一个Init容器启动之前成功完成</li></ul><p>如果Pod的Init容器失败, Kubernetes会不断地重启该Pod,直到Init容器成功为止。然而,如果Pod对应的restartPolicy 为Never,它不会重新启动。</p><p><strong>因为Init容器具有与应用程序容器分离的单独镜像,所以它们的启动相关代码具有如下优势:</strong></p><ul><li>它们可以包含并运行实用工具,但是出于安全考虑,是不建议在应用程序容器镜像中包含这些实用工具的。</li><li>它们可以包含使用工具和定制化代码来安装,但是不能出现在应用程序镜像中。例如,创建镜像没必要FROM另一个镜像,只需要在安装过程中使用类似sed、 awk、 python或dig这样的工具。</li><li>应用程序镜像可以分离出创建和部署的角色,而没有必要联合它们构建一个单独的镜像。</li><li>Init 容器使用Linux Namespace,所以相对应用程序容器来说具有不同的文件系统视图。因此,它们能够具有访问Secret的权限,而应用程序容器则不能。</li><li>它们必须在应用程序容器启动之前运行完成,而应用程序容器是并行运行的,所以Init容器能够提供了一种简单的阻塞或延迟应用容器的启动的方法,直到满足了一组先决条件。</li></ul><p>在Pod启动过程中,Init容器会按顺序在网络和数据卷初始化之后启动。每个容器必须在下一个容器启动之前成功退出。</p><p>如果由于运行时或失败退出,将导致容器启动失败,它会根据Pod的restartPolicy指定的策略进行重试。然而,如果Pod的restartPolicy设置为Always, Init容器失败时会使用RestartPolicy策略。</p><p>在所有的Init容器没有成功之前, Pod将不会变成Ready状态。Init容器的端口将不会在Service 中进行聚集。正在初始化中的Pod处于Pending状态,但应该会将Initializing状态设置为true。</p><p>如果Pod重启,所有Init容器必须重新执行。</p><p>对Init容器spec的修改被限制在容器image字段,修改其他字段都不会生效。更改Init容器的image字段,等价于重启该Pod。(kubectl edit pod myapp-pod)</p><p>Init容器具有应用容器的所有字段。除了readinessProbe，因为Init容器无法定义不同于完成(completion)的就绪(readiness)之外的其他状态。这会在验证过程中强制执行。</p><p>在Pod中的每个app和Init容器的名称必须唯一；与任何其它容器共享同一个名称,会在验证时抛出错误。</p><h1 id="Init容器"><a href="#Init容器" class="headerlink" title="Init容器"></a>Init容器</h1><p>Init模板</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp-pod</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp-container</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>, <span class="hljs-string">&#x27;echo The app is running! &amp;&amp; sleep 3600&#x27;</span>]<br>  <span class="hljs-attr">initContainers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">init-myservice</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>, <span class="hljs-string">&#x27;until nslookup myservice; do echo waiting for myservice; sleep 2;done;&#x27;</span>]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">init-mydb</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>, <span class="hljs-string">&#x27;until nslookup mydb; do echo waiting for mydb; sleep 2; done; &#x27;</span>]<br></code></pre></td></tr></table></figure><p>myservice模板</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myservice</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9376</span><br></code></pre></td></tr></table></figure><p>mydb模板</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mydb</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9377</span><br></code></pre></td></tr></table></figure><h1 id="Init容器操作查看"><a href="#Init容器操作查看" class="headerlink" title="Init容器操作查看"></a>Init容器操作查看</h1><h2 id="第一步：之创建init状态检测pod"><a href="#第一步：之创建init状态检测pod" class="headerlink" title="第一步：之创建init状态检测pod"></a>第一步：之创建init状态检测pod</h2><p>通过init容器模板创建pod</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"># 先生成<span class="hljs-keyword">init</span>配置清单<br>[<span class="hljs-symbol">root@</span>k8s-master01 <span class="hljs-keyword">init</span>-container]# vi <span class="hljs-keyword">init</span>.yaml<br># 通过<span class="hljs-keyword">init</span>.yaml创建pod<br>[<span class="hljs-symbol">root@</span>k8s-master01 <span class="hljs-keyword">init</span>-container]# kubectl create -f  <span class="hljs-keyword">init</span>.yaml<br># 查看pod的状态<br>[<span class="hljs-symbol">root@</span>k8s-master01 <span class="hljs-keyword">init</span>-container]# kubectl <span class="hljs-keyword">get</span> pod<br>NAME        READY   STATUS     RESTARTS   AGE<br>myapp-pod   <span class="hljs-number">0</span>/<span class="hljs-number">1</span>     Init:<span class="hljs-number">0</span>/<span class="hljs-number">2</span>   <span class="hljs-number">0</span>          3m8s<br></code></pre></td></tr></table></figure><p>查看myapp-pod的启动日志</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master01</span> <span class="hljs-string">init-container</span>]<span class="hljs-comment"># kubectl describe pod myapp-pod</span><br><span class="hljs-attr">Name:</span>         <span class="hljs-string">myapp-pod</span><br><span class="hljs-attr">Namespace:</span>    <span class="hljs-string">default</span><br><span class="hljs-attr">Priority:</span>     <span class="hljs-number">0</span><br><span class="hljs-attr">Node:</span>         <span class="hljs-string">k8s-node02/fd56:a9ae:cb0f::853</span><br><span class="hljs-attr">Start Time:</span>   <span class="hljs-string">Sat,</span> <span class="hljs-number">16</span> <span class="hljs-string">Jul</span> <span class="hljs-number">2022 20:56:13</span> <span class="hljs-string">+0800</span><br><span class="hljs-attr">Labels:</span>       <span class="hljs-string">app=myapp</span><br><span class="hljs-attr">Annotations:</span>  <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Status:</span>       <span class="hljs-string">Pending</span><br><span class="hljs-attr">IP:</span>           <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.4</span><br><span class="hljs-attr">IPs:</span><br>  <span class="hljs-attr">IP:</span>  <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.4</span><br><span class="hljs-attr">Init Containers:</span><br>  <span class="hljs-attr">init-myservice:</span><br>    <span class="hljs-attr">Container ID:</span>  <span class="hljs-string">docker://b4e6898bf71991f1571f0750d7ed58f54aeb511ca175b9dcafbbdf457aac3971</span><br>    <span class="hljs-attr">Image:</span>         <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">Image ID:</span>      <span class="hljs-string">docker-pullable://busybox@sha256:5acba83a746c7608ed544dc1533b87c737a0b0fb730301639a0179f9344b1678</span><br>    <span class="hljs-attr">Port:</span>          <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Host Port:</span>     <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Command:</span><br>      <span class="hljs-string">sh</span><br>      <span class="hljs-string">-c</span><br>      <span class="hljs-string">until</span> <span class="hljs-string">nslookup</span> <span class="hljs-string">myservice;</span> <span class="hljs-string">do</span> <span class="hljs-string">echo</span> <span class="hljs-string">waiting</span> <span class="hljs-string">for</span> <span class="hljs-string">myservice;</span> <span class="hljs-string">sleep</span> <span class="hljs-number">2</span><span class="hljs-string">;done;</span><br>    <span class="hljs-attr">State:</span>          <span class="hljs-string">Running</span><br>      <span class="hljs-attr">Started:</span>      <span class="hljs-string">Sat,</span> <span class="hljs-number">16</span> <span class="hljs-string">Jul</span> <span class="hljs-number">2022 20:56:33</span> <span class="hljs-string">+0800</span><br>    <span class="hljs-attr">Ready:</span>          <span class="hljs-literal">False</span><br>    <span class="hljs-attr">Restart Count:</span>  <span class="hljs-number">0</span><br>    <span class="hljs-attr">Environment:</span>    <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Mounts:</span><br>      <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class="hljs-string">from</span> <span class="hljs-string">kube-api-access-4vx22</span> <span class="hljs-string">(ro)</span><br>  <span class="hljs-attr">init-mydb:</span><br>    <span class="hljs-attr">Container ID:</span>  <br>    <span class="hljs-attr">Image:</span>         <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">Image ID:</span>      <br>    <span class="hljs-attr">Port:</span>          <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Host Port:</span>     <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Command:</span><br>      <span class="hljs-string">sh</span><br>      <span class="hljs-string">-c</span><br>      <span class="hljs-string">until</span> <span class="hljs-string">nslookup</span> <span class="hljs-string">mydb;</span> <span class="hljs-string">do</span> <span class="hljs-string">echo</span> <span class="hljs-string">waiting</span> <span class="hljs-string">for</span> <span class="hljs-string">mydb;</span> <span class="hljs-string">sleep</span> <span class="hljs-number">2</span><span class="hljs-string">;</span> <span class="hljs-string">done;</span> <br>    <span class="hljs-attr">State:</span>          <span class="hljs-string">Waiting</span><br>      <span class="hljs-attr">Reason:</span>       <span class="hljs-string">PodInitializing</span><br>    <span class="hljs-attr">Ready:</span>          <span class="hljs-literal">False</span><br>    <span class="hljs-attr">Restart Count:</span>  <span class="hljs-number">0</span><br>    <span class="hljs-attr">Environment:</span>    <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Mounts:</span><br>      <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class="hljs-string">from</span> <span class="hljs-string">kube-api-access-4vx22</span> <span class="hljs-string">(ro)</span><br><span class="hljs-attr">Containers:</span><br>  <span class="hljs-attr">myapp-container:</span><br>    <span class="hljs-attr">Container ID:</span>  <br>    <span class="hljs-attr">Image:</span>         <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">Image ID:</span>      <br>    <span class="hljs-attr">Port:</span>          <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Host Port:</span>     <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Command:</span><br>      <span class="hljs-string">sh</span><br>      <span class="hljs-string">-c</span><br>      <span class="hljs-string">echo</span> <span class="hljs-string">The</span> <span class="hljs-string">app</span> <span class="hljs-string">is</span> <span class="hljs-string">running!</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">sleep</span> <span class="hljs-number">3600</span><br>    <span class="hljs-attr">State:</span>          <span class="hljs-string">Waiting</span><br>      <span class="hljs-attr">Reason:</span>       <span class="hljs-string">PodInitializing</span><br>    <span class="hljs-attr">Ready:</span>          <span class="hljs-literal">False</span><br>    <span class="hljs-attr">Restart Count:</span>  <span class="hljs-number">0</span><br>    <span class="hljs-attr">Environment:</span>    <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Mounts:</span><br>      <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class="hljs-string">from</span> <span class="hljs-string">kube-api-access-4vx22</span> <span class="hljs-string">(ro)</span><br><span class="hljs-attr">Conditions:</span><br>  <span class="hljs-string">Type</span>              <span class="hljs-string">Status</span><br>  <span class="hljs-string">Initialized</span>       <span class="hljs-literal">False</span> <br>  <span class="hljs-string">Ready</span>             <span class="hljs-literal">False</span> <br>  <span class="hljs-string">ContainersReady</span>   <span class="hljs-literal">False</span> <br>  <span class="hljs-string">PodScheduled</span>      <span class="hljs-literal">True</span> <br><span class="hljs-attr">Volumes:</span><br>  <span class="hljs-attr">kube-api-access-4vx22:</span><br>    <span class="hljs-attr">Type:</span>                    <span class="hljs-string">Projected</span> <span class="hljs-string">(a</span> <span class="hljs-string">volume</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">injected</span> <span class="hljs-string">data</span> <span class="hljs-string">from</span> <span class="hljs-string">multiple</span> <span class="hljs-string">sources)</span><br>    <span class="hljs-attr">TokenExpirationSeconds:</span>  <span class="hljs-number">3607</span><br>    <span class="hljs-attr">ConfigMapName:</span>           <span class="hljs-string">kube-root-ca.crt</span><br>    <span class="hljs-attr">ConfigMapOptional:</span>       <span class="hljs-string">&lt;nil&gt;</span><br>    <span class="hljs-attr">DownwardAPI:</span>             <span class="hljs-literal">true</span><br><span class="hljs-attr">QoS Class:</span>                   <span class="hljs-string">BestEffort</span><br><span class="hljs-attr">Node-Selectors:</span>              <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Tolerations:</span>                 <span class="hljs-string">node.kubernetes.io/not-ready:NoExecute</span> <span class="hljs-string">op=Exists</span> <span class="hljs-string">for</span> <span class="hljs-string">300s</span><br>                             <span class="hljs-string">node.kubernetes.io/unreachable:NoExecute</span> <span class="hljs-string">op=Exists</span> <span class="hljs-string">for</span> <span class="hljs-string">300s</span><br><span class="hljs-attr">Events:</span><br>  <span class="hljs-string">Type</span>    <span class="hljs-string">Reason</span>     <span class="hljs-string">Age</span>    <span class="hljs-string">From</span>               <span class="hljs-string">Message</span><br>  <span class="hljs-string">----</span>    <span class="hljs-string">------</span>     <span class="hljs-string">----</span>   <span class="hljs-string">----</span>               <span class="hljs-string">-------</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Scheduled</span>  <span class="hljs-string">4m6s</span>   <span class="hljs-string">default-scheduler</span>  <span class="hljs-string">Successfully</span> <span class="hljs-string">assigned</span> <span class="hljs-string">default/myapp-pod</span> <span class="hljs-string">to</span> <span class="hljs-string">k8s-node02</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Pulling</span>    <span class="hljs-string">2m34s</span>  <span class="hljs-string">kubelet</span>            <span class="hljs-string">Pulling</span> <span class="hljs-string">image</span> <span class="hljs-string">&quot;busybox&quot;</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Pulled</span>     <span class="hljs-string">2m16s</span>  <span class="hljs-string">kubelet</span>            <span class="hljs-string">Successfully</span> <span class="hljs-string">pulled</span> <span class="hljs-string">image</span> <span class="hljs-string">&quot;busybox&quot;</span> <span class="hljs-string">in</span> <span class="hljs-number">17.</span><span class="hljs-string">673975295s</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Created</span>    <span class="hljs-string">2m16s</span>  <span class="hljs-string">kubelet</span>            <span class="hljs-string">Created</span> <span class="hljs-string">container</span> <span class="hljs-string">init-myservice</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Started</span>    <span class="hljs-string">2m16s</span>  <span class="hljs-string">kubelet</span>            <span class="hljs-string">Started</span> <span class="hljs-string">container</span> <span class="hljs-string">init-myservice</span><br></code></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs golo">[root<span class="hljs-meta">@k</span>8s-master01 init-container]<span class="hljs-comment"># kubectl logs myapp-pod -c  init-myservice</span><br>waiting <span class="hljs-keyword">for</span> myservice<br>Server:         <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br>Address:        <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span>:<span class="hljs-number">53</span><br><br>** server can&#x27;t <span class="hljs-keyword">find</span> myservice.default.svc.cluster.<span class="hljs-keyword">local</span>: NXDOMAIN<br><br>*** Can&#x27;t <span class="hljs-keyword">find</span> myservice.svc.cluster.<span class="hljs-keyword">local</span>: No answer<br>*** Can&#x27;t <span class="hljs-keyword">find</span> myservice.cluster.<span class="hljs-keyword">local</span>: No answer<br>*** Can&#x27;t <span class="hljs-keyword">find</span> myservice.default.svc.cluster.<span class="hljs-keyword">local</span>: No answer<br>*** Can&#x27;t <span class="hljs-keyword">find</span> myservice.svc.cluster.<span class="hljs-keyword">local</span>: No answer<br>*** Can&#x27;t <span class="hljs-keyword">find</span> myservice.cluster.<span class="hljs-keyword">local</span>: No answer<br></code></pre></td></tr></table></figure><h2 id="第二步：创建myservice"><a href="#第二步：创建myservice" class="headerlink" title="第二步：创建myservice"></a>第二步：创建myservice</h2><p>通过myservice模板创建svc</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">vi myservice.yaml<br>kubectl <span class="hljs-keyword">create</span> -f myservice.yaml<br></code></pre></td></tr></table></figure><p>查看pod状态，可以看出status中的显示变成了Init:1/2,说明检测状态中，有一个service已经成功启动。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@k8s-master01 init-container]<span class="hljs-comment"># kubectl get pod</span><br>NAME        READY   STATUS     RESTARTS   AGE<br>myapp-pod   <span class="hljs-number">0</span><span class="hljs-regexp">/1     Init:1/</span><span class="hljs-number">2</span>   <span class="hljs-number">0</span>          <span class="hljs-number">16</span>m<br></code></pre></td></tr></table></figure><h2 id="第三步：创建mydb"><a href="#第三步：创建mydb" class="headerlink" title="第三步：创建mydb"></a>第三步：创建mydb</h2><p>通过myservice模板创建svc</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">vi mydb.yaml<br>kubectl <span class="hljs-keyword">create</span> -f mydb.yaml<br></code></pre></td></tr></table></figure><p>查看pod状态，可以看出READY显示为1/1,status中的显示变成了Running,说明检测状态中，已经成功启动。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">[<span class="hljs-symbol">root@</span>k8s-master01 <span class="hljs-keyword">init</span>-container]# kubectl <span class="hljs-keyword">get</span> pod<br>NAME        READY   STATUS    RESTARTS   AGE<br>myapp-pod   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          22m<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>pod</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes调度器scheduler</title>
    <link href="/2021/08/04/kubeadm%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2kubernetes%E9%9B%86%E7%BE%A4/"/>
    <url>/2021/08/04/kubeadm%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2kubernetes%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="kubeadm快速部署kubernetes集群"><a href="#kubeadm快速部署kubernetes集群" class="headerlink" title="kubeadm快速部署kubernetes集群"></a>kubeadm快速部署kubernetes集群</h1><h1 id="1-安装要求"><a href="#1-安装要求" class="headerlink" title="1 安装要求"></a>1 安装要求</h1><ul><li>一台或多台机器，操作系统 CentOS7.x-86_x64</li><li>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多(master必须2cpu,node可以不用)</li><li>可以访问外网，需要拉取镜像，如果服务器不能上网，需要提前下载镜像并导入节点</li><li>禁止swap分区</li></ul><p><a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">安装 kubeadm | Kubernetes</a></p><h1 id="2-准备环境"><a href="#2-准备环境" class="headerlink" title="2 准备环境"></a>2 准备环境</h1><table><thead><tr><th>角色</th><th>IP</th></tr></thead><tbody><tr><td>master</td><td>192.168.66.11</td></tr><tr><td>node1</td><td>192.168.66.21</td></tr><tr><td>node2</td><td>192.168.66.22</td></tr></tbody></table><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">yum <span class="hljs-keyword">update</span> -y<br>yum install -y firewalld ntpdate <span class="hljs-keyword">net</span>-tools ipvsadm wget<br></code></pre></td></tr></table></figure><h2 id="2-1-关闭防火墙及selinux"><a href="#2-1-关闭防火墙及selinux" class="headerlink" title="2.1 关闭防火墙及selinux"></a>2.1 关闭防火墙及selinux</h2><p>所有节点执行一下命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 关闭防火墙</span><br>systemctl stop firewalld<br>systemctl <span class="hljs-built_in">disable</span> firewalld<br><br><span class="hljs-comment"># 关闭selinux</span><br><span class="hljs-comment"># 永久</span><br>sed -i <span class="hljs-string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux<span class="hljs-built_in">/config </span> <br><span class="hljs-comment"># 临时</span><br>setenforce 0  <br></code></pre></td></tr></table></figure><h2 id="2-2-关闭swap"><a href="#2-2-关闭swap" class="headerlink" title="2.2 关闭swap"></a>2.2 关闭swap</h2><p>所有节点执行一下命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 关闭swap</span><br><span class="hljs-comment"># 临时</span><br>swapoff -a  <br><span class="hljs-comment"># 永久</span><br>sed -ri <span class="hljs-string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> <span class="hljs-regexp">/etc/</span>fstab    <br></code></pre></td></tr></table></figure><h2 id="2-3-根据规划设置主机名及hosts"><a href="#2-3-根据规划设置主机名及hosts" class="headerlink" title="2.3 根据规划设置主机名及hosts"></a>2.3 根据规划设置主机名及hosts</h2><p>所有节点执行hostnamectl set-hostname <hostname>命令</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># k8smaster节点执行</span><br><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-master01</span><br><span class="hljs-comment"># k8snode1节点执行</span><br><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-node01</span><br><span class="hljs-comment"># k8snode2节点执行</span><br><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-node02</span><br></code></pre></td></tr></table></figure><p>k8smaster主节点执行</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">cat &gt;&gt; /etc/hosts &lt;&lt; EOF<br><span class="hljs-number">192.168.66.11</span> k8s-master01<br><span class="hljs-number">192.168.66.21</span> k8s-node01<br><span class="hljs-number">192.168.66.22</span> k8s-node02<br>EOF<br></code></pre></td></tr></table></figure><h2 id="2-4-将桥接的IPv4流量传递到iptables的链"><a href="#2-4-将桥接的IPv4流量传递到iptables的链" class="headerlink" title="2.4 将桥接的IPv4流量传递到iptables的链"></a>2.4 将桥接的IPv4流量传递到iptables的链</h2><p>确保 <code>br_netfilter</code> 模块被加载。这一操作可以通过运行 <code>lsmod | grep br_netfilter</code> 来完成。若要显式加载该模块，可执行 <code>sudo modprobe br_netfilter</code>。 </p><p>确保在你的 <code>sysctl</code> 配置中将 <code>net.bridge.bridge-nf-call-iptables</code> 设置为 1。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="hljs-string">br_netfilter</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">#将桥接的IPv4流量传递到iptables的链</span><br><span class="hljs-built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment"># 生效</span><br>sysctl --system  <br></code></pre></td></tr></table></figure><h2 id="2-5-时间同步"><a href="#2-5-时间同步" class="headerlink" title="2.5 时间同步"></a>2.5 时间同步</h2><p>所有节点执行一下命令</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yum <span class="hljs-keyword">install </span>ntpdate -y<br>ntpdate time.windows.com<br><span class="hljs-comment"># 强制把系统时间写入CMOS</span><br><span class="hljs-keyword">clock </span>-w<br></code></pre></td></tr></table></figure><h1 id="3-所有节点安装Docker-kubeadm-kubelet"><a href="#3-所有节点安装Docker-kubeadm-kubelet" class="headerlink" title="3 所有节点安装Docker/kubeadm/kubelet"></a>3 所有节点安装Docker/kubeadm/kubelet</h1><h2 id="3-1-安装Docker"><a href="#3-1-安装Docker" class="headerlink" title="3.1 安装Docker"></a>3.1 安装Docker</h2><p>k8snode1和k8snode2下安装docker</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span>docker-ce.repo -O <span class="hljs-regexp">/etc/yum</span>.repos.d/docker-ce.repo<br>yum -y install docker-ce-<span class="hljs-number">18.06</span>.<span class="hljs-number">1</span>.ce-<span class="hljs-number">3</span>.el7<br>systemctl enable docker &amp;&amp; systemctl start docker<br>docker --version<br></code></pre></td></tr></table></figure><h2 id="3-2-配置docker镜像加速"><a href="#3-2-配置docker镜像加速" class="headerlink" title="3.2 配置docker镜像加速"></a>3.2 配置docker镜像加速</h2><img src="/2021/08/04/kubeadm%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2kubernetes%E9%9B%86%E7%BE%A4/1629031322356.png" class="" title="img"><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cat &gt; /etc/docker/daemon<span class="hljs-selector-class">.json</span> &lt;&lt; EOF<br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;https://onozxvpe.mirror.aliyuncs.com&quot;</span>,<span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>, <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>]</span>,<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>]</span><br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>添加镜像加入和本地搭建harbor后：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://onozxvpe.mirror.aliyuncs.com&quot;</span>],<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>],<br>  <span class="hljs-string">&quot;insecure-registries&quot;</span>: [<span class="hljs-string">&quot;harborcloud.com&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-添加阿里云YUM软件源"><a href="#3-3-添加阿里云YUM软件源" class="headerlink" title="3.3 添加阿里云YUM软件源"></a>3.3 添加阿里云YUM软件源</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat &gt; <span class="hljs-regexp">/etc/yum</span>.repos.d/kubernetes.repo &lt;&lt; EOF<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/repos/</span>kubernetes-el7-x86_64<br>enabled=<span class="hljs-number">1</span><br>gpgcheck=<span class="hljs-number">0</span><br>repo_gpgcheck=<span class="hljs-number">0</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/doc/yum</span>-key.gpg https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/doc/</span>rpm-package-key.gpg<br>EOF<br></code></pre></td></tr></table></figure><h2 id="3-4-安装kubeadm，kubelet和kubectl"><a href="#3-4-安装kubeadm，kubelet和kubectl" class="headerlink" title="3.4 安装kubeadm，kubelet和kubectl"></a>3.4 安装kubeadm，kubelet和kubectl</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> install -y kubeadm-<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">0</span> kubectl-<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">0</span> kubelet-<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">systemctl</span> enable kubelet<br></code></pre></td></tr></table></figure><h1 id="4-部署Kubernetes-Master"><a href="#4-部署Kubernetes-Master" class="headerlink" title="4 部署Kubernetes Master"></a>4 部署Kubernetes Master</h1><p><a href="https://kubernetes.io/zh-cn/docs/reference/setup-tools/kubeadm/kubeadm-init/">https://kubernetes.io/zh-cn/docs/reference/setup-tools/kubeadm/kubeadm-init/</a></p><p>在192.168.66.10（k8smaster）执行。</p><p>由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址</p><p><strong>–pod-network-cidr</strong></p><p>指定pod网络的IP地址范围。 设置后，控制平面将自动为每个节点分配cidr。</p><p><strong>–service-cidr</strong></p><p>集群内部虚拟网络，Pod统一访问入口</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubeadm init \<br><span class="hljs-attribute">--apiserver-advertise-address</span>=192.168.66.10 \<br>--image-repository registry.aliyuncs.com/google_containers \<br>--kubernetes-version v1.22.0 \<br><span class="hljs-attribute">--service-cidr</span>=10.96.0.0/12 \<br><span class="hljs-attribute">--pod-network-cidr</span>=10.244.0.0/16<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[init]</span> Using Kubernetes version: v1.<span class="hljs-number">22.0</span><br><span class="hljs-selector-attr">[preflight]</span> Running pre-flight checks<br><span class="hljs-selector-attr">[preflight]</span> Pulling images required <span class="hljs-keyword">for</span> setting up <span class="hljs-selector-tag">a</span> Kubernetes cluster<br><span class="hljs-selector-attr">[preflight]</span> This might take <span class="hljs-selector-tag">a</span> minute or two, depending on the speed of your internet connection<br><span class="hljs-selector-attr">[preflight]</span> You can also perform this action <span class="hljs-keyword">in</span> beforehand using <span class="hljs-string">&#x27;kubeadm config images pull&#x27;</span><br><span class="hljs-selector-attr">[certs]</span> Using certificateDir folder <span class="hljs-string">&quot;/etc/kubernetes/pki&quot;</span><br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;ca&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;apiserver&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> apiserver serving cert is signed <span class="hljs-keyword">for</span> DNS names <span class="hljs-selector-attr">[k8s-master01 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local]</span> and IPs <span class="hljs-selector-attr">[10.96.0.1 192.168.66.11]</span><br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;apiserver-kubelet-client&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;front-proxy-ca&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;front-proxy-client&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;etcd/ca&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;etcd/server&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> etcd/server serving cert is signed <span class="hljs-keyword">for</span> DNS names <span class="hljs-selector-attr">[k8s-master01 localhost]</span> and IPs <span class="hljs-selector-attr">[192.168.66.11 127.0.0.1 ::1]</span><br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;etcd/peer&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> etcd/peer serving cert is signed <span class="hljs-keyword">for</span> DNS names <span class="hljs-selector-attr">[k8s-master01 localhost]</span> and IPs <span class="hljs-selector-attr">[192.168.66.11 127.0.0.1 ::1]</span><br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;etcd/healthcheck-client&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;apiserver-etcd-client&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;sa&quot;</span> key and public key<br><span class="hljs-selector-attr">[kubeconfig]</span> Using kubeconfig folder <span class="hljs-string">&quot;/etc/kubernetes&quot;</span><br><span class="hljs-selector-attr">[kubeconfig]</span> Writing <span class="hljs-string">&quot;admin.conf&quot;</span> kubeconfig file<br><span class="hljs-selector-attr">[kubeconfig]</span> Writing <span class="hljs-string">&quot;kubelet.conf&quot;</span> kubeconfig file<br><span class="hljs-selector-attr">[kubeconfig]</span> Writing <span class="hljs-string">&quot;controller-manager.conf&quot;</span> kubeconfig file<br><span class="hljs-selector-attr">[kubeconfig]</span> Writing <span class="hljs-string">&quot;scheduler.conf&quot;</span> kubeconfig file<br><span class="hljs-selector-attr">[kubelet-start]</span> Writing kubelet environment file with flags to file <span class="hljs-string">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class="hljs-selector-attr">[kubelet-start]</span> Writing kubelet configuration to file <span class="hljs-string">&quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class="hljs-selector-attr">[kubelet-start]</span> Starting the kubelet<br><span class="hljs-selector-attr">[control-plane]</span> Using manifest folder <span class="hljs-string">&quot;/etc/kubernetes/manifests&quot;</span><br><span class="hljs-selector-attr">[control-plane]</span> Creating static Pod manifest <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;kube-apiserver&quot;</span><br><span class="hljs-selector-attr">[control-plane]</span> Creating static Pod manifest <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;kube-controller-manager&quot;</span><br><span class="hljs-selector-attr">[control-plane]</span> Creating static Pod manifest <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;kube-scheduler&quot;</span><br><span class="hljs-selector-attr">[etcd]</span> Creating static Pod manifest <span class="hljs-keyword">for</span> local etcd <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;/etc/kubernetes/manifests&quot;</span><br><span class="hljs-selector-attr">[wait-control-plane]</span> Waiting <span class="hljs-keyword">for</span> the kubelet to boot up the control plane as static Pods from directory <span class="hljs-string">&quot;/etc/kubernetes/manifests&quot;</span>. This can take up to <span class="hljs-number">4</span>m0s<br><span class="hljs-selector-attr">[apiclient]</span> All control plane components are healthy after <span class="hljs-number">12.003757</span> seconds<br><span class="hljs-selector-attr">[upload-config]</span> Storing the configuration used <span class="hljs-keyword">in</span> ConfigMap <span class="hljs-string">&quot;kubeadm-config&quot;</span> <span class="hljs-keyword">in</span> the <span class="hljs-string">&quot;kube-system&quot;</span> Namespace<br><span class="hljs-selector-attr">[kubelet]</span> Creating <span class="hljs-selector-tag">a</span> ConfigMap <span class="hljs-string">&quot;kubelet-config-1.22&quot;</span> <span class="hljs-keyword">in</span> namespace kube-system with the configuration <span class="hljs-keyword">for</span> the kubelets <span class="hljs-keyword">in</span> the cluster<br><span class="hljs-selector-attr">[upload-certs]</span> Skipping phase. Please see <span class="hljs-attr">--upload-certs</span><br><span class="hljs-selector-attr">[mark-control-plane]</span> Marking the node k8s-master01 as control-plane by adding the labels: <span class="hljs-selector-attr">[node-role.kubernetes.io/master(deprecated) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]</span><br><span class="hljs-selector-attr">[mark-control-plane]</span> Marking the node k8s-master01 as control-plane by adding the taints <span class="hljs-selector-attr">[node-role.kubernetes.io/master:NoSchedule]</span><br><span class="hljs-selector-attr">[bootstrap-token]</span> Using token: ii3pse<span class="hljs-selector-class">.bfxj9fqc9tvz6yrr</span><br><span class="hljs-selector-attr">[bootstrap-token]</span> Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles<br><span class="hljs-selector-attr">[bootstrap-token]</span> configured RBAC rules to allow Node Bootstrap tokens to get nodes<br><span class="hljs-selector-attr">[bootstrap-token]</span> configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="hljs-keyword">in</span> <span class="hljs-attribute">order</span> for nodes to get long term certificate credentials<br><span class="hljs-selector-attr">[bootstrap-token]</span> configured RBAC rules to allow the csrapprover controller automatically approve CSRs from <span class="hljs-selector-tag">a</span> Node Bootstrap Token<br><span class="hljs-selector-attr">[bootstrap-token]</span> configured RBAC rules to allow certificate rotation <span class="hljs-keyword">for</span> <span class="hljs-attribute">all</span> node client certificates in the cluster<br><span class="hljs-selector-attr">[bootstrap-token]</span> Creating the <span class="hljs-string">&quot;cluster-info&quot;</span> ConfigMap <span class="hljs-keyword">in</span> the <span class="hljs-string">&quot;kube-public&quot;</span> namespace<br><span class="hljs-selector-attr">[kubelet-finalize]</span> Updating <span class="hljs-string">&quot;/etc/kubernetes/kubelet.conf&quot;</span> to point to <span class="hljs-selector-tag">a</span> rotatable kubelet client certificate and key<br><span class="hljs-selector-attr">[addons]</span> Applied essential addon: CoreDNS<br><span class="hljs-selector-attr">[addons]</span> Applied essential addon: kube-proxy<br><br>Your Kubernetes control-plane has initialized successfully!<br><br>To start using your cluster, you need to run the following as <span class="hljs-selector-tag">a</span> regular user:<br><br>  mkdir -<span class="hljs-selector-tag">p</span> <span class="hljs-variable">$HOME</span>/<span class="hljs-selector-class">.kube</span><br>  sudo cp -<span class="hljs-selector-tag">i</span> /etc/kubernetes/admin<span class="hljs-selector-class">.conf</span> <span class="hljs-variable">$HOME</span>/.kube/config<br>  sudo chown $(id -u):$(id -g) <span class="hljs-variable">$HOME</span>/.kube/config<br><br>Alternatively, <span class="hljs-keyword">if</span> you are the root user, you can run:<br><br>  export KUBECONFIG=/etc/kubernetes/admin<span class="hljs-selector-class">.conf</span><br><br>You should now deploy <span class="hljs-selector-tag">a</span> pod network to the cluster.<br>Run <span class="hljs-string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:<br>  https:<span class="hljs-comment">//kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><br>Then you can join any number of worker nodes by running the following on each as root:<br><br>kubeadm join <span class="hljs-number">192.168</span>.<span class="hljs-number">66.11</span>:<span class="hljs-number">6443</span> <span class="hljs-attr">--token</span> ii3pse<span class="hljs-selector-class">.bfxj9fqc9tvz6yrr</span> \<br>        <span class="hljs-attr">--discovery-token-ca-cert-hash</span> sha256:<span class="hljs-number">643</span>b48706d97589356e2a4be7294a898ac9a909baa56fecca277b7b4e5634e0e <br></code></pre></td></tr></table></figure><ul><li>preflight，系统前置检查</li><li>certs 各种证书的文件生成</li><li>kubeconfig生成kubeconfig文件，主要是kubenetes的几大组件的配置文件。</li><li>kubelet-start 启动kubelet</li><li>control-plane 生成所有静态pod的manifest文件，这些静态pod组成了kubenetes的控制面板，apiserver，controller，scheduler，生成这个文件后，kubelet会自动依据此文件描述的信息拉起镜像</li><li>etcd 生成etcd的manifest</li><li>upload-config 上传kubeadm和kubelet的配置文件到configmap中</li><li>upload-certs 上传配置证书文件</li><li>mark-control-plane mark一个node作为控制台</li><li>bootstrap-token 生成bootstrap tokens用于把node节点加入到集群。</li><li>kubelet-finalize 更新kubelet的设置</li><li>addon 安装其他的相关组件。主要是网络组件dns和kube-proxy</li></ul><p>所有node执行：</p><p>注：<code>kubectl</code> 在 <code>$HOME/.kube</code> 目录中查找一个名为 <code>config</code> 的配置文件。 你可以通过设置 KUBECONFIG 环境变量或设置 <a href="https://kubernetes.io/zh/docs/concepts/configuration/organize-cluster-access-kubeconfig/"><code>--kubeconfig</code></a> 参数来指定其它 <a href="https://kubernetes.io/zh/docs/concepts/configuration/organize-cluster-access-kubeconfig/">kubeconfig</a> 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br>$ kubectl get nodes<br></code></pre></td></tr></table></figure><p>如果出现错误通过一下命令重置</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">kubeadm reset</span><br></code></pre></td></tr></table></figure><h1 id="5-加入Kubernetes-Node"><a href="#5-加入Kubernetes-Node" class="headerlink" title="5 加入Kubernetes Node"></a>5 加入Kubernetes Node</h1><p>执行上面kubeadm init后显示的信息提示，加入kubernates</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">kubeadm <span class="hljs-keyword">join </span><span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">66</span>.<span class="hljs-number">11</span>:<span class="hljs-number">6443</span> --token ii3pse.<span class="hljs-keyword">bfxj9fqc9tvz6yrr </span>\<br>        --<span class="hljs-keyword">discovery-token-ca-cert-hash </span><span class="hljs-keyword">sha256:643b48706d97589356e2a4be7294a898ac9a909baa56fecca277b7b4e5634e0e</span><br></code></pre></td></tr></table></figure><p>默认token有效期为24小时，当过期之后，该token就不可用了。这时就需要重新创建token，操作如下：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">kubeadm <span class="hljs-built_in">token</span> <span class="hljs-keyword">create</span> --<span class="hljs-keyword">print</span>-join-command<br></code></pre></td></tr></table></figure><h1 id="6-部署CNI网络插件"><a href="#6-部署CNI网络插件" class="headerlink" title="6 部署CNI网络插件"></a>6 部署CNI网络插件</h1><img src="/2021/08/04/kubeadm%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2kubernetes%E9%9B%86%E7%BE%A4/image-25.png" class="" title="img"><p>这里可能需要代理下载，可以先下载下来</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/coreos/</span>flannel<span class="hljs-regexp">/master/</span>Documentation/kube-flannel.yml<br>$ kubectl get pods -n kube-system<br>NAME                          READY   STATUS    RESTARTS   AGE<br>kube-flannel-ds-amd64-<span class="hljs-number">2</span>pc95   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">72</span>s<br></code></pre></td></tr></table></figure><img src="/2021/08/04/kubeadm%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2kubernetes%E9%9B%86%E7%BE%A4/image-26.png" class="" title="img"><p><strong>Flannel工作原理</strong></p><p>k8s网络通讯方式：<a href="http://jishu.youhang.site/25.html">k8s网络通讯方式 – 青叶水间 (youhang.site)</a></p><p>每个主机配置一个ip段和子网个数。 例如，可以配置一个覆盖网络使用 10.244.0.0/16段，每个主机/24个子网。因此主机a可以接受10.244.1.0/24，主机B可以接受10.244.2.0/24的包。flannel使用etcd来维护分配的子网到实际的ip地址之间的映射。</p><p>master IP信息：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs pf">[root@k8s-master01 ~]<span class="hljs-comment"># ip addr</span><br><span class="hljs-number">1</span>: lo: <span class="hljs-variable">&lt;LOOPBACK,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">65536</span> qdisc noqueue <span class="hljs-keyword">state</span> UNKNOWN <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/loopback <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> brd <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/<span class="hljs-number">8</span> scope host lo<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> ::<span class="hljs-number">1</span>/<span class="hljs-number">128</span> scope host <br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">2</span>: eno16777736: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1500</span> qdisc pfifo_fast <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">6</span>b:de:b6 brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">66.11</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span> scope <span class="hljs-keyword">global</span> noprefixroute eno16777736<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> fd56:a9ae:cb0f::a49/<span class="hljs-number">128</span> scope <span class="hljs-keyword">global</span> noprefixroute dynamic <br>       valid_lft <span class="hljs-number">29570</span>sec preferred_lft <span class="hljs-number">29570</span>sec<br>    <span class="hljs-keyword">inet6</span> fd56:a9ae:cb0f:<span class="hljs-number">0</span>:<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe6b:deb6/<span class="hljs-number">64</span> scope <span class="hljs-keyword">global</span> noprefixroute <br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> fe80::<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe6b:deb6/<span class="hljs-number">64</span> scope link noprefixroute <br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">3</span>: docker0: <span class="hljs-variable">&lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt;</span> mtu <span class="hljs-number">1500</span> qdisc noqueue <span class="hljs-keyword">state</span> DOWN <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> <br>    link/ether <span class="hljs-number">02</span>:<span class="hljs-number">42</span>:f0:df:d5:af brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">172.17</span>.<span class="hljs-number">0.1</span>/<span class="hljs-number">16</span> brd <span class="hljs-number">172.17</span>.<span class="hljs-number">255.255</span> scope <span class="hljs-keyword">global</span> docker0<br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">4</span>: flannel.<span class="hljs-number">1</span>: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1450</span> qdisc noqueue <span class="hljs-keyword">state</span> UNKNOWN <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> <br>    link/ether <span class="hljs-number">8</span>e:<span class="hljs-number">53</span>:a8:<span class="hljs-number">6</span>d:<span class="hljs-number">99</span>:<span class="hljs-number">1</span>e brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.244</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">32</span> scope <span class="hljs-keyword">global</span> flannel.<span class="hljs-number">1</span><br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> fe80::<span class="hljs-number">8</span>c53:a8ff:fe6d:<span class="hljs-number">991</span>e/<span class="hljs-number">64</span> scope link <br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">5</span>: cni0: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1450</span> qdisc noqueue <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/ether <span class="hljs-number">7</span>a:<span class="hljs-number">33</span>:a2:<span class="hljs-number">1</span>a:<span class="hljs-number">15</span>:<span class="hljs-number">65</span> brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.244</span>.<span class="hljs-number">0.1</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.244</span>.<span class="hljs-number">0.255</span> scope <span class="hljs-keyword">global</span> cni0<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> fe80::<span class="hljs-number">7833</span>:a2ff:fe1a:<span class="hljs-number">1565</span>/<span class="hljs-number">64</span> scope link <br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">6</span>: vethefc85590@if3: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1450</span> qdisc noqueue master cni0 <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> <br>    link/ether <span class="hljs-number">5</span>a:<span class="hljs-number">3</span>e:<span class="hljs-number">58</span>:<span class="hljs-number">6</span>a:<span class="hljs-number">8</span>c:d2 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="hljs-number">0</span><br>    <span class="hljs-keyword">inet6</span> fe80::<span class="hljs-number">583</span>e:<span class="hljs-number">58</span>ff:fe6a:<span class="hljs-number">8</span>cd2/<span class="hljs-number">64</span> scope link <br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">7</span>: veth991a2bde@if3: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1450</span> qdisc noqueue master cni0 <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> <br>    link/ether fe:<span class="hljs-number">6</span>f:eb:<span class="hljs-number">91</span>:<span class="hljs-number">71</span>:<span class="hljs-number">71</span> brd ff:ff:ff:ff:ff:ff link-netnsid <span class="hljs-number">1</span><br>    <span class="hljs-keyword">inet6</span> fe80::fc6f:ebff:fe91:<span class="hljs-number">7171</span>/<span class="hljs-number">64</span> scope link <br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><p><strong>lo</strong></p><p>本地环回接口</p><p><strong>eno16777736</strong></p><p>真实网卡</p><p><strong>docker0</strong></p><p>docker ip信息，默认IP 172.17.0.1/16</p><p>可修改 /etc/docker/daemon.json, 指定ip地址，例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>docker/daemon.json<br>&#123;<br> <span class="hljs-string">&quot;bip&quot;</span>: <span class="hljs-string">&quot;172.18.0.1/24&quot;</span>,<br>&#125;<br>service docker restart<br></code></pre></td></tr></table></figure><p><strong>flannel.1</strong></p><p>docker集群跨主机通讯的覆盖网络 10.244.0.0/32</p><p><strong>cni0</strong></p><p>pod分配 网络 10.244.0.1/24</p><p>node1 IP信息：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="hljs-number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/loopback <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> brd <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">127.0.0.1</span>/<span class="hljs-number">8</span> scope host lo<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> ::<span class="hljs-number">1</span>/<span class="hljs-number">128</span> scope host <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">2</span>: eno16777736: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">1</span>a:<span class="hljs-number">1</span>c:d4 brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.0.0.21</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.0.0.255</span> scope global noprefixroute eno16777736<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fd56:a9ae:cb0f::<span class="hljs-number">7</span>a1/<span class="hljs-number">128</span> scope global noprefixroute dynamic <br>       <span class="hljs-attribute">valid_lft</span> <span class="hljs-number">29510</span>sec preferred_lft <span class="hljs-number">29510</span>sec<br>    <span class="hljs-attribute">inet6</span> fd56:a9ae:cb0f:<span class="hljs-number">0</span>:<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe1a:<span class="hljs-number">1</span>cd4/<span class="hljs-number">64</span> scope global noprefixroute <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fe80::<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe1a:<span class="hljs-number">1</span>cd4/<span class="hljs-number">64</span> scope link noprefixroute <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">3</span>: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu <span class="hljs-number">1500</span> qdisc noqueue state DOWN group default <br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">02</span>:<span class="hljs-number">42</span>:b8:ae:c9:<span class="hljs-number">24</span> brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">172.17.0.1</span>/<span class="hljs-number">16</span> brd <span class="hljs-number">172.17.255.255</span> scope global docker0<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">4</span>: flannel.<span class="hljs-number">1</span>: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">1450</span> qdisc noqueue state UNKNOWN group default <br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">1</span>e:<span class="hljs-number">6</span>d:<span class="hljs-number">47</span>:<span class="hljs-number">69</span>:f7:<span class="hljs-number">6</span>a brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.244.1.0</span>/<span class="hljs-number">32</span> scope global flannel.<span class="hljs-number">1</span><br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fe80::<span class="hljs-number">1</span>c6d:<span class="hljs-number">47</span>ff:fe69:f76a/<span class="hljs-number">64</span> scope link <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br></code></pre></td></tr></table></figure><p>node2 IP信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="hljs-number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/loopback <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> brd <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">127.0.0.1</span>/<span class="hljs-number">8</span> scope host lo<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> ::<span class="hljs-number">1</span>/<span class="hljs-number">128</span> scope host <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">2</span>: eno16777736: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">67</span>:c3:<span class="hljs-number">4</span>a brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.0.0.22</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.0.0.255</span> scope global noprefixroute eno16777736<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fd56:a9ae:cb0f::<span class="hljs-number">853</span>/<span class="hljs-number">128</span> scope global noprefixroute dynamic <br>       <span class="hljs-attribute">valid_lft</span> <span class="hljs-number">29262</span>sec preferred_lft <span class="hljs-number">29262</span>sec<br>    <span class="hljs-attribute">inet6</span> fd56:a9ae:cb0f:<span class="hljs-number">0</span>:<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe67:c34a/<span class="hljs-number">64</span> scope global noprefixroute <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fe80::<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe67:c34a/<span class="hljs-number">64</span> scope link noprefixroute <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">3</span>: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu <span class="hljs-number">1500</span> qdisc noqueue state DOWN group default <br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">02</span>:<span class="hljs-number">42</span>:b2:<span class="hljs-number">7</span>e:<span class="hljs-number">58</span>:<span class="hljs-number">1</span>f brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">172.17.0.1</span>/<span class="hljs-number">16</span> brd <span class="hljs-number">172.17.255.255</span> scope global docker0<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">4</span>: flannel.<span class="hljs-number">1</span>: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">1450</span> qdisc noqueue state UNKNOWN group default <br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">66</span>:<span class="hljs-number">5</span>b:e2:<span class="hljs-number">87</span>:<span class="hljs-number">5</span>c:<span class="hljs-number">22</span> brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.244.2.0</span>/<span class="hljs-number">32</span> scope global flannel.<span class="hljs-number">1</span><br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fe80::<span class="hljs-number">645</span>b:e2ff:fe87:<span class="hljs-number">5</span>c22/<span class="hljs-number">64</span> scope link <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br></code></pre></td></tr></table></figure><p>7 测试kubernetes集群</p><p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl create deployment nginx --image=nginx</span><br>deployment.apps/nginx created<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl expose deployment nginx --port=80 --type=NodePort</span><br>service/nginx exposed<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get pod,svc</span><br>NAME                         READY   STATUS              RESTARTS   AGE<br>pod<span class="hljs-regexp">/nginx-6799fc88d8-zzsw7   0/</span><span class="hljs-number">1</span>     ContainerCreating   <span class="hljs-number">0</span>          <span class="hljs-number">31</span>s<br><br>NAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE<br>service<span class="hljs-regexp">/kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/</span>TCP        <span class="hljs-number">24</span>h<br>service<span class="hljs-regexp">/nginx        NodePort    10.103.32.138   &lt;none&gt;        80:30029/</span>TCP   <span class="hljs-number">13</span>s<br></code></pre></td></tr></table></figure><p>访问地址：<a href="http://nodeip:Port/">http://NodeIP:Port</a></p><p>可以通过 <a href="http://10.0.0.21:31263/">http://10.0.0.21:31263</a> 和 <a href="http://10.0.0.22:31263/">http://10.0.0.22:31263</a> 访问</p><h1 id="8-错误排查"><a href="#8-错误排查" class="headerlink" title="8 错误排查"></a>8 <strong>错误排查</strong></h1><p>启动日志获取</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#查看启动日志</span><br><span class="hljs-keyword">journalctl </span>-f -u kubelet.service<br></code></pre></td></tr></table></figure><p>配置加载与重启服务</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload &amp;&amp; <span class="hljs-params">system</span>ctl restart kubelet<br></code></pre></td></tr></table></figure><h1 id="9-ipvs修改"><a href="#9-ipvs修改" class="headerlink" title="9 ipvs修改"></a>9 ipvs修改</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">kubectl <span class="hljs-keyword">edit</span> configmap kube-proxy -n kube-<span class="hljs-built_in">system</span><br>...<br><span class="hljs-number">43</span>   <span class="hljs-keyword">mode</span>: <span class="hljs-string">&quot;ipvs&quot;</span><br>   ...<br></code></pre></td></tr></table></figure><p><strong>删除pod,会自动拉起</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">kubectl <span class="hljs-keyword">delete</span> pod kube-proxy-btz4p -n kube-<span class="hljs-keyword">system</span>  <br></code></pre></td></tr></table></figure><p><strong>查看是否启用ipvs</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">kubectl logs kube-proxy-wwqbh -n kube-<span class="hljs-keyword">system</span>        <br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1、 kube-proxy配置文件以configmap方式存储<br>2、 如果让所有节点生效，需要重建所有节点kube-proxy pod<br></code></pre></td></tr></table></figure><h1 id="10-问题及解决"><a href="#10-问题及解决" class="headerlink" title="10 问题及解决"></a>10 <strong>问题及解决</strong></h1><p>1 failed to find subsystem mount for required subsystem: pids failed to find subsystem mount for required subsystem: pids</p><p>解决方法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system<span class="hljs-regexp">/kubelet.service.d/</span><span class="hljs-number">10</span>-kubeadm.conf<br><span class="hljs-comment">#发现ExecStart=后面添加参数</span><br>ExecStart=<span class="hljs-string">&quot;--feature-gates SupportPodPidsLimit=false --feature-gates SupportNodePidsLimit=false&quot;</span><br><span class="hljs-comment">#或者更改引用变量$KUBELET_EXTRA_ARGS</span><br>vi <span class="hljs-regexp">/etc/</span>sysconfig/kubelet<br>KUBELET_EXTRA_ARGS=--feature-gates SupportPodPidsLimit=false --feature-gates SupportNodePidsLimit=false<br></code></pre></td></tr></table></figure><p>2 kubelet cgroup driver: \“systemd\“ is different from docker cgroup driver: \“cgroupfs\“</p><p>docker的驱动查看是否有systemd</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> <span class="hljs-literal">info</span> |grep Cgroup<br></code></pre></td></tr></table></figure><p>解决方案步骤如下：</p><p>(1)、先修改docker的Cgroup Driver，修改/etc/docker/daemon.json文件</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>重启docker</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload<br><span class="hljs-params">system</span>ctl restart docker<br></code></pre></td></tr></table></figure><p>(2)、然后修改kubelet的Cgroup Driver<br>修改 “/usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf ” 文件，增加（或修改成）“–cgroup-driver=systemd” (官方推荐用systemd)</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">Environment</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --cgroup-driver=systemd&quot;</span><br></code></pre></td></tr></table></figure><p>修改 “/var/lib/kubelet/kubeadm-flags.env ”文件，增加（或修改成）“-–cgroup-driver=systemd”</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">KUBELET_KUBEADM_ARGS=&quot;</span><span class="hljs-literal">--</span><span class="hljs-comment">cgroup</span><span class="hljs-literal">-</span><span class="hljs-comment">driver=systemd</span> <span class="hljs-literal">--</span><span class="hljs-comment">network</span><span class="hljs-literal">-</span><span class="hljs-comment">plugin=cni</span> <span class="hljs-literal">--</span><span class="hljs-comment">pod</span><span class="hljs-literal">-</span><span class="hljs-comment">infra</span><span class="hljs-literal">-</span><span class="hljs-comment">container</span><span class="hljs-literal">-</span><span class="hljs-comment">image=registry</span><span class="hljs-string">.</span><span class="hljs-comment">aliyuncs</span><span class="hljs-string">.</span><span class="hljs-comment">com/google_containers/pause:3</span><span class="hljs-string">.</span><span class="hljs-comment">2&quot;</span><br></code></pre></td></tr></table></figure><p>重启：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload<br><span class="hljs-params">system</span>ctl restart kubelet<br></code></pre></td></tr></table></figure><p>3 missing required cgroups: cpu</p><p>修改<code>/etc/default/grub</code></p><p>添加一行<code>GRUB_CMDLINE_LINUX=&quot;cgroup_enable=cpu&quot;</code></p><p>运行 <code>update-grub2</code></p><p>重启机器 <code>reboot</code></p><p>4  Failed to start CRI Interface for Docker Application Container Engine Defined-By: systemd</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">7</span>月 <span class="hljs-number">29</span> <span class="hljs-number">20</span>:<span class="hljs-number">35</span>:<span class="hljs-number">14</span> k8s-master02 systemd[<span class="hljs-number">1</span>]: cri-docker.service: main <span class="hljs-built_in">process</span> exited, code=exited, status=<span class="hljs-number">203</span>/EXEC<br><span class="hljs-number">7</span>月 <span class="hljs-number">29</span> <span class="hljs-number">20</span>:<span class="hljs-number">35</span>:<span class="hljs-number">14</span> k8s-master02 systemd[<span class="hljs-number">1</span>]: Failed <span class="hljs-built_in">to</span> <span class="hljs-built_in">start</span> CRI Interface <span class="hljs-keyword">for</span> Docker Application Container Engine.<br><span class="hljs-comment">-- Subject: Unit cri-docker.service has failed</span><br><span class="hljs-comment">-- Defined-By: systemd</span><br><span class="hljs-comment">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="hljs-comment">-- </span><br><span class="hljs-comment">-- Unit cri-docker.service has failed.</span><br><span class="hljs-comment">-- </span><br><span class="hljs-comment">-- The result is failed.</span><br><span class="hljs-number">7</span>月 <span class="hljs-number">29</span> <span class="hljs-number">20</span>:<span class="hljs-number">35</span>:<span class="hljs-number">14</span> k8s-master02 systemd[<span class="hljs-number">1</span>]: Unit cri-docker.service entered failed state.<br><span class="hljs-number">7</span>月 <span class="hljs-number">29</span> <span class="hljs-number">20</span>:<span class="hljs-number">35</span>:<span class="hljs-number">14</span> k8s-master02 systemd[<span class="hljs-number">1</span>]: cri-docker.service failed.<br></code></pre></td></tr></table></figure><p>修改 docker 控制组</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>docker/daemon.json <br>&#123;<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>从重启服务</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload<br><span class="hljs-params">system</span>ctl restart docker<br><span class="hljs-params">system</span>ctl restart cri-docker<br></code></pre></td></tr></table></figure><p>5  error execution phase preflight: couldn’t validate the identity of the API Server: Get “<a href="https://10.0.0.150:16443/api/v1/namespaces/kube-public/configmaps/cluster-info?timeout=10s&quot;">https://10.0.0.150:16443/api/v1/namespaces/kube-public/configmaps/cluster-info?timeout=10s&quot;</a>: x509: certificate has expired or is not yet valid: current time 2022-07-30T16:12:40+08:00 is before 2022-07-30T13:31:36Z</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yum <span class="hljs-keyword">install </span>ntpdate -y<br>ntpdate time.windows.com<br><span class="hljs-comment"># 强制把系统时间写入CMOS</span><br><span class="hljs-keyword">clock </span>-w<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>集群部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s集群开启firewalld防火墙</title>
    <link href="/2021/08/02/k8s%E9%9B%86%E7%BE%A4%E5%BC%80%E5%90%AFfirewalld%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <url>/2021/08/02/k8s%E9%9B%86%E7%BE%A4%E5%BC%80%E5%90%AFfirewalld%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    
    <content type="html"><![CDATA[<h1 id="一、基础设置"><a href="#一、基础设置" class="headerlink" title="一、基础设置"></a>一、基础设置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关闭selinux</span><br>sed -i <span class="hljs-string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config  <span class="hljs-comment"># 永久</span><br>setenforce 0  <span class="hljs-comment"># 临时</span><br><br><span class="hljs-comment"># 关闭swap</span><br>swapoff -a  <span class="hljs-comment"># 临时</span><br>sed -ri <span class="hljs-string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab    <span class="hljs-comment"># 永久</span><br><br><span class="hljs-comment">#将桥接的IPv4流量传递到iptables的链</span><br><span class="hljs-built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br>sysctl --system  <span class="hljs-comment"># 生效</span><br></code></pre></td></tr></table></figure><h1 id="二、假设k8s部署情况如下："><a href="#二、假设k8s部署情况如下：" class="headerlink" title="二、假设k8s部署情况如下："></a>二、假设k8s部署情况如下：</h1><table><thead><tr><th>主机名</th><th>主机IP</th></tr></thead><tbody><tr><td>k8s-master01</td><td>10.0.0.10</td></tr><tr><td>k8s-node01</td><td>10.0.0.11</td></tr><tr><td>k8s-node02</td><td>10.0.0.21</td></tr><tr><td>k8s-node03</td><td>10.0.0.22</td></tr></tbody></table><h1 id="三、所有机器上执行如下命令："><a href="#三、所有机器上执行如下命令：" class="headerlink" title="三、所有机器上执行如下命令："></a>三、所有机器上执行如下命令：</h1><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 确保开启防火墙服务</span><br>systemctl restart firewalld<br><br><span class="hljs-comment"># 将集群内所有的节点IP配置到防火墙可信区中</span><br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--zone=trusted</span> <span class="hljs-params">--add-source=10</span>.0.0.10<br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--zone=trusted</span> <span class="hljs-params">--add-source=10</span>.0.0.11<br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--zone=trusted</span> <span class="hljs-params">--add-source=10</span>.0.0.21<br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--zone=trusted</span> <span class="hljs-params">--add-source=10</span>.0.0.22<br><br><span class="hljs-comment"># 增加防火墙规则</span><br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--direct</span> <span class="hljs-params">--add-rule</span> ipv4 filter INPUT 1 -j ACCEPT -m comment <span class="hljs-params">--comment</span> <span class="hljs-string">&quot;kube-proxy redirects&quot;</span><br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--direct</span> <span class="hljs-params">--add-rule</span> ipv4 filter FORWARD 1  -j ACCEPT -m comment <span class="hljs-params">--comment</span> <span class="hljs-string">&quot;docker subnet&quot;</span><br><br><span class="hljs-comment"># 设置防火墙伪装ip, 打开NAT，默认是关闭状态</span><br>firewall-cmd <span class="hljs-params">--add-masquerade</span> <span class="hljs-params">--permanent</span><br><br><span class="hljs-comment"># 所有k8s的NodePort端口添加到例外</span><br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--zone=public</span> <span class="hljs-params">--add-port=30000-32767/tcp</span><br><br><span class="hljs-comment"># 重新加载配置</span><br>firewall-cmd <span class="hljs-params">--reload</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>firewalld</tag>
      
      <tag>防火墙</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes调度器scheduler</title>
    <link href="/2021/08/02/kubernetes%E8%B0%83%E5%BA%A6%E5%99%A8scheduler/"/>
    <url>/2021/08/02/kubernetes%E8%B0%83%E5%BA%A6%E5%99%A8scheduler/</url>
    
    <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Scheduler 是kubernetes 的调度器,主要的任务是把定义的pod分配到集群的节点上。听起来非常简单,但有很多要考虑的问题:</p><ul><li>公平：如何保证每个节点都能被分配资源</li><li>资源高效利用：集群所有资源最大化被使用</li><li>效率：调度的性能要好,能够尽快地对大批量的pod完成调度工作</li><li>灵活：允许用户根据自己的需求控制调度的逻辑</li></ul><p>Sheduler 是作为单独的程序运行的，启动之后会一直坚挺API Server，获取PodSpec.NodeName为空的 pod,对每个pod都会创建一个binding,表明该pod应该放到哪个节点上</p><h1 id="二、调度过程"><a href="#二、调度过程" class="headerlink" title="二、调度过程"></a>二、调度过程</h1><p>调度分为几个部分：首先是过滤掉不满足条件的节点，这个过程称为predicate；然后对通过的节点按照优先级排序,这个是priority;最后从中选择优先级最高的节点。如果中间任何一步骤有错误,就直接返回错误。</p><p>Predicate 有一系列的算法可以使用:</p><p>Predicate 有一系列的算法可以使用:</p><ul><li>PodFitsResources：节点上剩余的资源是否大于 pod请求的资源</li><li>PodFitsHost：如果pod指定了NodeName,检查节点名称是否和NodeName匹配</li><li>PodFitsHostPorts：节点上已经使用的port 是否和 pod申请的port冲突</li><li>PodSelectorMatches：过滤掉和pod指定的label 不匹配的节点</li><li>NoDiskConflict：已经mount 的volume 和 pod指定的volume 不冲突,除非它们都是只读</li></ul><p>如果在predicate过程中没有合适的节点，pod会一直在pending状态，不断重试调度，直到有节点满足条件。<br>经过这个步骤，如果有多个节点满足条件，就继续priorities过程:按照优先级大小对节点排序</p><p>优先级由一系列键值对组成,键是该优先级项的名称,值是它的权重(该项的重要性)。这些优先级选项包括:</p><ul><li>LeastRequestedPriority :通过计算 CPU 和Memory 的使用率来决定权重,使用率越低权重越高。换句话说,这个优先级指标倾向于资源使用比例更低的节点</li><li>BalancedResourceAllocation :节点上CPU 和Memory 使用率越接近,权重越高。这个应该和上面的一起使用,不应该单独使用</li><li>ImageLocalityPriority :倾向于已经有要使用镜像的节点,镜像总大小值越大,权重越高</li></ul><p>通过算法对所有的优先级项目和权重进行计算,得出最终的结果。</p><h1 id="三、自定义调度器"><a href="#三、自定义调度器" class="headerlink" title="三、自定义调度器"></a>三、自定义调度器</h1><p>除了kubernetes 自带的调度器,也可以编写自己的调度器。通过spec:schedulername参数指定调度器的名字,可以为pod选择某个调度器进行调度。比如下面的pod选择my-scheduler进行调度,而不是默认的default-scheduler。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">annotation-second-scheduler</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">multischeduler-example</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">my-schedulen</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">pod-with-second-annotation-container</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">gcr.io/google_containers/pause:2.0</span><br></code></pre></td></tr></table></figure><h1 id="四、节点亲和性"><a href="#四、节点亲和性" class="headerlink" title="四、节点亲和性"></a>四、节点亲和性</h1><p>pod.spec.nodeAffinity</p><ul><li>preferredDuringSchedulinglgnoredDuringExecution：软策略</li><li>requiredDuringSchedulinglgnoredDuringExecution：硬策略</li></ul><p>requiredDuringSchedulinglgnoredDuringExecution</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">affinity</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">node-affinity-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">with-node-affinity</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br>  <span class="hljs-attr">affinity:</span><br>    <span class="hljs-attr">nodeAffinity:</span><br>      <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>        <span class="hljs-attr">nodeSelectorTerms:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">matchExpressions:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>            <span class="hljs-attr">operator:</span> <span class="hljs-string">NotIn</span><br>            <span class="hljs-attr">values:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">k8s-node02</span><br></code></pre></td></tr></table></figure><p>requiredDuringSchedulinglgnoredDuringExecution</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">affinity</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">node-affinity-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">with-node-affinity</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br>  <span class="hljs-attr">affinity:</span><br>    <span class="hljs-attr">nodeAffinity:</span><br>      <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">weight:</span> <span class="hljs-number">1</span><br>        <span class="hljs-attr">preference:</span><br>          <span class="hljs-attr">matchExpressions:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>            <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>            <span class="hljs-attr">values:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">k8s-node02222</span><br></code></pre></td></tr></table></figure><p>综合</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">affinity</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">node-affinity-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">with-node-affinity</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br>  <span class="hljs-attr">affinity:</span><br>    <span class="hljs-attr">nodeAffinity:</span><br>      <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>        <span class="hljs-attr">nodeSelectorTerms:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">matchExpressions:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>            <span class="hljs-attr">operator:</span> <span class="hljs-string">NotIn</span><br>            <span class="hljs-attr">values:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">k8s-node02</span><br>      <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">weight:</span> <span class="hljs-number">1</span><br>        <span class="hljs-attr">preference:</span><br>          <span class="hljs-attr">matchExpressions:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">source</span><br>            <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>            <span class="hljs-attr">values:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">qikqiak</span><br></code></pre></td></tr></table></figure><h2 id="4-1-键值运算关系"><a href="#4-1-键值运算关系" class="headerlink" title="4.1 键值运算关系"></a>4.1 键值运算关系</h2><ul><li>In: label的值在某个列表中</li><li>Notln: label的值不在某个列表中</li><li>Gt: label的值大于某个值</li><li>Lt: label的值小于某个值</li><li>Exists:某个label 存在</li><li>DoesNotExist:某 label 不存在</li></ul><h1 id="五、Pod亲和性"><a href="#五、Pod亲和性" class="headerlink" title="五、Pod亲和性"></a>五、Pod亲和性</h1><p>pod.spec.affinity.podAffinity/podAntiAffinity</p><ul><li>preferredDuringSchedulinglgnoredDuringExecution: 软策略</li><li>requiredDuringSchedulinglgnoredDuringExecution:硬策略</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">affinity:</span><br>    <span class="hljs-attr">podAffinity:</span> <span class="hljs-comment">#亲和力</span><br>      <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">labelSelector:</span><br>          <span class="hljs-attr">matchLabels:</span><br>            <span class="hljs-attr">service.cpaas.io/name:</span> <span class="hljs-string">deployment-nginx</span><br>        <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">kubernetes.io/hostname</span> <span class="hljs-comment"># pod同node</span><br>    <span class="hljs-attr">podAntiAffinity:</span> <span class="hljs-comment">#反亲和力</span><br>      <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">weight:</span> <span class="hljs-number">100</span><br>        <span class="hljs-attr">podAffinityTerm:</span><br>          <span class="hljs-attr">labelSelector:</span><br>            <span class="hljs-attr">matchExpressions:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">a</span><br>              <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>              <span class="hljs-attr">values:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">b</span><br>          <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>  <span class="hljs-attr">containers:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-pod</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.18</span><br></code></pre></td></tr></table></figure><h1 id="六、亲和性-反亲和性调度策略比较如下"><a href="#六、亲和性-反亲和性调度策略比较如下" class="headerlink" title="六、亲和性/反亲和性调度策略比较如下:"></a>六、亲和性/反亲和性调度策略比较如下:</h1><table><thead><tr><th>调度策略</th><th>匹配标签</th><th>操作符</th><th>拓扑域支持</th><th>调度目标</th></tr></thead><tbody><tr><td>nodeAffinity</td><td>主机</td><td>In, Notln, Exists,DoesNotExist, Gt, Lt <br /></td><td>否</td><td>指定主机</td></tr><tr><td>podAffinity</td><td>POD</td><td>In, Notln, Exists,DoesNotExist</td><td>是</td><td>POD与指定POD同一拓扑域 （同一个node上）</td></tr><tr><td>podAnitAffinity</td><td>POD</td><td>In, Notln, Exists,DoesNotExist</td><td>是</td><td>POD与指定POD不在同一拓扑域</td></tr></tbody></table><h1 id="七、污点-Taint-和容忍-Toleration"><a href="#七、污点-Taint-和容忍-Toleration" class="headerlink" title="七、污点(Taint) 和容忍(Toleration)"></a>七、污点(Taint) 和容忍(Toleration)</h1><p>节点亲和性，是pod的一种属性(偏好或硬性要求),它使pod被吸引到一类特定的节点。Taint则相反,它使节点能够排斥一类特定的pod。Taint 和toleration 相互配合,可以用来避免 pod 被分配到不合适的节点上。每个节点上都可以应用一个或多个taint,这表示对于那些不能容忍这些taint的pod,是不会被该节点接受的。如果将toleration应用于pod上,则表示这些pod可以(但不要求)被调度到具有匹配taint的节点上</p><h2 id="7-1-污点-Taint"><a href="#7-1-污点-Taint" class="headerlink" title="7.1 污点(Taint)"></a>7.1 污点(Taint)</h2><p>1、污点(Taint)的组成<br>使用kubectl taint命令可以给某个Node节点设置污点, Node被设置上污点之后就和Pod之间存在了一种相斥的关系,可以让Node拒绝Pod的调度执行,甚至将Node已经存在的Pod驱逐出去。</p><p>每个污点的组成如下:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">key</span>=value:effect<br></code></pre></td></tr></table></figure><p>每个污点有一个key和value作为污点的标签,其中value 可以为空, effect描述污点的作用。</p><p>当前taint effect 支持如下三个选项:</p><ul><li>NoSchedule ：表示k8s将不会将Pod调度到具有该污点的Node上</li><li>PreferNoSchedule：表示k8s将尽量避免将Pod调度到具有该污点的Node上</li><li>NoExecute ：表示k8s将不会将Pod调度到具有该污点的Node上,同时会将Node 上已经存在的Pod驱逐出去</li></ul><p>1、污点的设置、查看和去除</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#设置污点</span><br>kubectl taint nodes node1 <span class="hljs-attr">key1=</span>value1: NoSchedule<br><span class="hljs-comment">#节点说明中,查找Taints字段</span><br>kubectl describe pod pod - name<br><span class="hljs-comment">#去除污点</span><br>kubectl taint nodes node1 key1: NoSchedule-<br><span class="hljs-comment"># master 节点的添加Taint</span><br>kubectl taint nodes k8s-master01 <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span>:NoSchedule<br><span class="hljs-comment"># master去除污点</span><br>kubectl taint nodes k8s-master01 <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span>:NoSchedule-<br></code></pre></td></tr></table></figure><p>2 例如：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-master01 scheduler]<span class="hljs-comment"># kubectl get pod -o wide</span><br>NAME    READY   STATUS    RESTARTS   AGE     IP             <span class="hljs-keyword">NODE</span>         <span class="hljs-title">NOMINATED</span> <span class="hljs-keyword">NODE</span>   <span class="hljs-title">READINESS</span> GATES<br>pod-<span class="hljs-number">1</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">8m</span>28s   <span class="hljs-number">10.244</span>.<span class="hljs-number">2.205</span>   k8s-node02   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>pod-<span class="hljs-number">3</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">7m</span>27s   <span class="hljs-number">10.244</span>.<span class="hljs-number">2.207</span>   k8s-node02   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>[root@k8s-master01 scheduler]<span class="hljs-comment"># kubectl taint node  k8s-node02 checkstatus=k8s:NoExecute</span><br><span class="hljs-keyword">node</span><span class="hljs-title">/k8s-node02</span> tainted<br>[root@k8s-master01 scheduler]<span class="hljs-comment"># kubectl get pod -o wide</span><br>No resources found <span class="hljs-keyword">in</span> default namespace.<br></code></pre></td></tr></table></figure><p>将k8s-node02设置污点NoExecute ，pod将从k8s-node02移除。</p><h2 id="7-2-容忍-Tolerations"><a href="#7-2-容忍-Tolerations" class="headerlink" title="7.2 容忍(Tolerations)"></a>7.2 容忍(Tolerations)</h2><p>设置了污点的Node将根据taint 的 effect: NoSchedule, PreferNoSchedule, NoExecute 和Pod 之间产生互斥的关系, Pod将在一定程度上不会被调度到Node上。但我们可以在Pod上设置容忍(Toleration),意思是设置了容忍的Pod将可以容忍污点的存在,可以被调度到存在污点的Node上。</p><p>pod.spec.tolerations</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tolerations:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;key1&quot;</span><br>  <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Equal&quot;</span><br>  <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;value1&quot;</span><br>  <span class="hljs-attr">effect:</span> <span class="hljs-string">&quot;NoExecute&quot;</span><br>  <span class="hljs-attr">tolerationSeconds:</span> <span class="hljs-number">3600</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;key1&quot;</span><br>  <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Equal&quot;</span><br>  <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;value1&quot;</span><br>  <span class="hljs-attr">effect:</span> <span class="hljs-string">&quot;NoExecute&quot;</span><br>  <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;key2&quot;</span><br>  <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br>  <span class="hljs-attr">effect:</span> <span class="hljs-string">&quot;NoSchedule&quot;</span><br></code></pre></td></tr></table></figure><p>完整yaml：</p><p>将在60s过后才会被node移除pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod-1</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">pod-1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">with-node-affinity</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br>  <span class="hljs-attr">tolerations:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;checkstatus&quot;</span><br>    <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Equal&quot;</span><br>    <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;k8s&quot;</span><br>    <span class="hljs-attr">effect:</span> <span class="hljs-string">&quot;NoExecute&quot;</span><br>    <span class="hljs-attr">tolerationSeconds:</span> <span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><p>其中key, vaule, effect 要与Node上设置的taint保持一致<br>operator 的值为Exists 将会忽略value值<br>tolerationSeconds 用于描述当Pod需要被驱逐时可以在Pod上继续保留运行的时间.。</p><p>1 当不指定key值时,表示容忍所有的污点key</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tolerations:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br></code></pre></td></tr></table></figure><p>2 当不指定effect值时,表示容忍所有的污点作用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tolerations:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;key&quot;</span><br>  <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br></code></pre></td></tr></table></figure><p>3 有多个Master存在时,防止资源浪费,可以如下设置</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">kubectl taint nodes <span class="hljs-keyword">Node</span><span class="hljs-title">-Name</span> <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span>:PreferNoSchedule<br></code></pre></td></tr></table></figure><h1 id="八、指定调度节点"><a href="#八、指定调度节点" class="headerlink" title="八、指定调度节点"></a>八、指定调度节点</h1><p>1 Pod.spec.nodeName 将 Pod 直接调度到指定的Node 节点上,会跳过Scheduler的调度策略,该匹配规则是强制匹配</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/vlbeta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">7</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">myweb</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">nodeName:</span> <span class="hljs-string">k8s-node01</span> <span class="hljs-comment">#将pod调度到k8s-node01</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">hub.atguigu.com/library/myapp:v1</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>2 Pod.spec.nodeSelector:通过 kubernetes 的label-selector 机制选择节点,由调度器调度策略匹配label,而后调度Pod到目标节点,该匹配规则属于强制约束</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/vlbeta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>  <span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">myweb</span><br>  <span class="hljs-attr">spec:</span><br>    <span class="hljs-attr">nodeSelector:</span> <span class="hljs-comment"># 未来Kubernetes会将nodeSelector废除</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">backEndNode1</span> <span class="hljs-comment">#自定义节点调度器</span><br>    <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">harbor/tomcat:8.5-jre8</span><br>      <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>scheduler</tag>
      
      <tag>调度器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes 入门学习 dashboard</title>
    <link href="/2021/08/02/k8s%20dashboard/"/>
    <url>/2021/08/02/k8s%20dashboard/</url>
    
    <content type="html"><![CDATA[<h1 id="1-dashboard安装"><a href="#1-dashboard安装" class="headerlink" title="1 dashboard安装"></a>1 dashboard安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">namespace/kubernetes-dashboard created  # 命名空间kubernetes-dashboard<br>serviceaccount/kubernetes-dashboard created # 服务账号kubernetes-dashboard<br>service/kubernetes-dashboard created # 服务kubernetes-dashboard<br>secret/kubernetes-dashboard-certs created #  secret创建<br>secret/kubernetes-dashboard-csrf created<br>secret/kubernetes-dashboard-key-holder created <br>configmap/kubernetes-dashboard-settings created # 配置<br>role.rbac.authorization.k8s.io/kubernetes-dashboard created # 角色和角色绑定<br>clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard configured<br>rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created<br>clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard unchanged<br>deployment.apps/kubernetes-dashboard created<br>service/dashboard-metrics-scraper created<br>deployment.apps/dashboard-metrics-scraper created<br></code></pre></td></tr></table></figure><p>查看校验资源的安装情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get deployments -n kubernetes-dashboard</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get services -n kubernetes-dashboard</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get pods -n kubernetes-dashboard</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get secrets -n kubernetes-dashboard</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get configMap -n kubernetes-dashboard</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl  get services -n kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><h1 id="2-开放外部访问端口"><a href="#2-开放外部访问端口" class="headerlink" title="2 开放外部访问端口"></a>2 开放外部访问端口</h1><p>kubernetes-dashbaord安装完毕后，kubernetes-dashboard默认service的类型为ClusterIP，为了从外部访问控制面板，开放为NodePort类型</p><p>过程：编辑之前——编辑——编辑之后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8smaster influxdb]# kubectl get svc -n kubernetes-dashboard<br>NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE<br>dashboard-metrics-scraper   ClusterIP   10.104.64.108   &lt;none&gt;        8000/TCP   2m33s<br>kubernetes-dashboard        ClusterIP   10.102.42.206   &lt;none&gt;        443/TCP    2m33s<br>[root@k8smaster influxdb]# kubectl edit svc/kubernetes-dashboard -n kubernetes-dashboard<br>service/kubernetes-dashboard edited<br>[root@k8smaster influxdb]# kubectl get svc -n kubernetes-dashboard<br>NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE<br>dashboard-metrics-scraper   ClusterIP   10.104.64.108   &lt;none&gt;        8000/TCP        10m<br>kubernetes-dashboard        NodePort    10.102.42.206   &lt;none&gt;        443:30367/TCP   10m<br></code></pre></td></tr></table></figure><h1 id="3-授权用户访问集群"><a href="#3-授权用户访问集群" class="headerlink" title="3 授权用户访问集群"></a>3 授权用户访问集群</h1><p>dashboard-rbac.yaml定义</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">happycloudlab</span> <br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">happycloudlab</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">happycloudlab</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><p>操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8smaster influxdb]# vi dashboard-rbac.yaml<br>[root@k8smaster influxdb]# kubectl create -f dashboard-rbac.yaml <br>serviceaccount/happycloudlab created<br>clusterrolebinding.rbac.authorization.k8s.io/happycloudlab created<br></code></pre></td></tr></table></figure><h1 id="4-获取token"><a href="#4-获取token" class="headerlink" title="4 获取token"></a>4 获取token</h1><p>通过token字段来登陆，token通过base64加密,这里的happycloudlab-token-*须通过命令查看，具体是哪一个。</p><h2 id="4-1-获取具体secret并且提取yaml信息"><a href="#4-1-获取具体secret并且提取yaml信息" class="headerlink" title="4.1 获取具体secret并且提取yaml信息"></a>4.1 获取具体secret并且提取yaml信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8smaster influxdb]# kubectl get secret -n kubernetes-dashboard<br>NAME                               TYPE                                  DATA   AGE<br>default-token-vzxqv                kubernetes.io/service-account-token   3      14m<br>happycloudlab-token-5dxhd          kubernetes.io/service-account-token   3      44s<br>kubernetes-dashboard-certs         Opaque                                0      14m<br>kubernetes-dashboard-csrf          Opaque                                1      14m<br>kubernetes-dashboard-key-holder    Opaque                                2      14m<br>kubernetes-dashboard-token-fqtcx   kubernetes.io/service-account-token   3      14m<br>[root@k8smaster influxdb]# kubectl get secrets -n kubernetes-dashboard happycloudlab-token-5dxhd -o yaml<br></code></pre></td></tr></table></figure><p>![1630834989795](.\k8s dashboard\1630834989795.png)</p><h2 id="4-2-通过echo获取base64编码token"><a href="#4-2-通过echo获取base64编码token" class="headerlink" title="4.2 通过echo获取base64编码token"></a>4.2 通过echo获取base64编码token</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8smaster influxdb]# echo &#x27;ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklrWmtSVE5UYVhOT2RrUlFWRU5vV2xOeE5FSkJjMGQxTURkM2JETkJOa2Q2TFZaNVdWbzFhV3hOV0ZFaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUpyZFdKbGNtNWxkR1Z6TFdSaGMyaGliMkZ5WkNJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZqY21WMExtNWhiV1VpT2lKb1lYQndlV05zYjNWa2JHRmlMWFJ2YTJWdUxUVmtlR2hrSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXpaWEoyYVdObExXRmpZMjkxYm5RdWJtRnRaU0k2SW1oaGNIQjVZMnh2ZFdSc1lXSWlMQ0pyZFdKbGNtNWxkR1Z6TG1sdkwzTmxjblpwWTJWaFkyTnZkVzUwTDNObGNuWnBZMlV0WVdOamIzVnVkQzUxYVdRaU9pSm1NemM1TkdOak5TMHhNMk5pTFRRMVpEQXRPRFJpWWkxaU5UVmtNRFF3TkdVMU9Ea2lMQ0p6ZFdJaU9pSnplWE4wWlcwNmMyVnlkbWxqWldGalkyOTFiblE2YTNWaVpYSnVaWFJsY3kxa1lYTm9ZbTloY21RNmFHRndjSGxqYkc5MVpHeGhZaUo5LkpBZVFBRS1CT1RGZDhXOGp3cEFpa0lTQlF4N2N6bmhySmZneDFxLXA5OTRLSUI5aXRfeFZ3bUlEaEI4bVlZQTJQLXRBNWp4d2d6NDZHamdSZTlfc1dYdFRrTHYwT3dpYmtNeDU3Q0RFVzkxV09CNzkyeTZiOWNWX1BhV3hPVkRyZFFvSVo3S3A0OVFITFNkN1lhREl1eE15UDlzX3pQaTI3dmc0YUZwLUFLS1ZWV0NqcDFvaURFM213Y3FJd2xha3JySW5ZUmg0THNKTFc5TTBVc3BCRklZUFhGNEh5QWxvX2NGX29qNVlHMUFJWUJGTGtlQUZyaEYwalFzQmhseHVYVVRubC01TmN2WjlDRXJJbGJ4VEpfMWtLcVc2UjBwOXFsZ1dpZzFPamhFNzg4NWs0dnVzeDM5S004d2U1ZHBJbjV6WDdIMzBFSjgwOGRpOGVyTFFQUQ==&#x27; | base64 -d<br></code></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">eyJhbGciOiJSUzI1NiIsImtpZCI6IkZkRTNTaXNOdkRQVENoWlNxNEJBc0d1MDd3bDNBNkd6LVZ5WVo1aWxNWFEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJoYXBweWNsb3VkbGFiLXRva2VuLTVkeGhkIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImhhcHB5Y2xvdWRsYWIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJmMzc5NGNjNS0xM2NiLTQ1ZDAtODRiYi1iNTVkMDQwNGU1ODkiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6aGFwcHljbG91ZGxhYiJ9.JAeQAE-BOTFd8W8jwpAikISBQx7cznhrJfgx1q-p994KIB9it_xVwmIDhB8mYYA2P-tA5jxwgz46GjgRe9_sWXtTkLv0OwibkMx57CDEW91WOB792y6b9cV_PaWxOVDrdQoIZ7Kp49QHLSd7YaDIuxMyP9s_zPi27vg4aFp-AKKVVWCjp1oiDE3mwcqIwlakrrInYRh4LsJLW9M0UspBFIYPXF4HyAlo_cF_oj5YG1AIYBFLkeAFrhF0jQsBhlxuXUTnl-5NcvZ9CErIlbxTJ_1kKqW6R0p9qlgWig1OjhE7885k4vusx39KM8we5dpIn5zX7H30EJ808di8erLQPQ<br></code></pre></td></tr></table></figure><h1 id="5-登录dashboard"><a href="#5-登录dashboard" class="headerlink" title="5 登录dashboard"></a>5 登录dashboard</h1><p>获取外网访问端口</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8smaster influxdb]# kubectl <span class="hljs-keyword">get</span> svc -n kubernetes-dashboard<br><span class="hljs-type">NAME</span>                        <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">CLUSTER</span>-IP      <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)         AGE<br>dashboard-metrics-scraper   ClusterIP   <span class="hljs-number">10.104</span><span class="hljs-number">.64</span><span class="hljs-number">.108</span>   &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">8000</span>/TCP        <span class="hljs-number">10</span>m<br>kubernetes-dashboard        NodePort    <span class="hljs-number">10.102</span><span class="hljs-number">.42</span><span class="hljs-number">.206</span>   &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">443</span>:<span class="hljs-number">30367</span>/TCP   <span class="hljs-number">10</span>m<br></code></pre></td></tr></table></figure><p>填写token并登录</p><p>![1630835361904](.\k8s dashboard\1630835361904.png)</p><p><img src=".%5C1630835709026.png" alt="1630835709026"></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>dashboard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s常用控制器及特点</title>
    <link href="/2021/08/01/k8s%E5%B8%B8%E7%94%A8%E6%8E%A7%E5%88%B6%E5%99%A8%E5%8F%8A%E7%89%B9%E7%82%B9/"/>
    <url>/2021/08/01/k8s%E5%B8%B8%E7%94%A8%E6%8E%A7%E5%88%B6%E5%99%A8%E5%8F%8A%E7%89%B9%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是控制器"><a href="#什么是控制器" class="headerlink" title="什么是控制器"></a>什么是控制器</h1><p>Kubernetes 中内建了很多controller (控制器),这些相当于一个状态机,用来控制Pod的具体状态和行为</p><h1 id="控制器类型"><a href="#控制器类型" class="headerlink" title="控制器类型"></a>控制器类型</h1><ul><li>ReplicationController 和 ReplicaSet</li><li>Deployment</li><li>DaemonSet</li><li>StateFulSet</li><li>Job/CronJob</li><li>Horizontal Pod Autoscaling</li></ul><h2 id="ReplicationController-和-ReplicaSet"><a href="#ReplicationController-和-ReplicaSet" class="headerlink" title="ReplicationController 和 ReplicaSet"></a>ReplicationController 和 ReplicaSet</h2><p>ReplicationController (RC)用来确保容器应用的副本数始终保持在用户定义的副本数,即如果有容器异常退出,会自动创建新的Pod来替代;而如果异常多出来的容器也会自动回收;</p><p>在新版本的Kubernetes 中建议使用ReplicaSet 来取代ReplicationController. ReplicaSet 跟ReplicationController 没有本质的不同,只是名字不一样,并且ReplicaSet支持集合式的selector;</p><p>虽然ReplicaSet 可以独立使用，但一般还是建议使用Deployment来自动管理ReplicaSet ，这样就无需担心跟其他机制的不兼容问题(比如ReplicaSet不支持rolling-update，但Deployment 支持)</p><h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><p>Deployment为Pod和ReplicaSet提供了一个声明式定义(declarative)方法,用来替代以前的ReplicationController来方便的管理应用。</p><p>Deployment 是Kubenetes v1.2 引入的新概念，引入的目的是为了更好的解决Pod 的编排问题，Deployment 内部使用了Replica Set 来实现。</p><p>典型的应用场景包括;</p><ul><li>定义Deployment 来创建Pod和ReplicaSet</li><li>滚动升级和回滚应用</li><li>扩容和缩容</li><li>暂停和继续Deployment</li></ul><h2 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h2><p>DaemonSet确保全部(或者一些) Node上运行一个Pod的副本。当有Node加入集群时,也会为他们新增一个Pod.当有Node从集群移除时,这些Pod也会被回收。删除DaemonSet将会删除它创建的所有Pod</p><p>使用DaemonSet的一些典型用法:</p><ul><li>运行集群存储daemon,例如在每个Node上运行 glusterd,ceph</li><li>在每个Node上运行日志收集daemon,例如fluentd, logstash</li><li>在每个Node上运行监控daemon,例如Prometheus Node Exporter, collectd, Datadog 代理、New Relic 代理,或 Ganglia gmond</li></ul><h2 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h2><p>Job负责批处理任务,即仅执行一次的任务,它保证批处理任务的一个或多个Pod成功结束</p><h2 id="CronJob"><a href="#CronJob" class="headerlink" title="CronJob"></a>CronJob</h2><p>CronJob管理基于时间的Job,即:</p><ul><li>在给定时间点只运行一次</li><li>周期性地在给定时间点运行</li></ul><p>使用前提条件:林当前使用的Kubernetes集群,版本&gt;=1.8 (对Cronjob).对于先前版本的集群,版本&lt;1.8,启动API Server时,通过传递选项-runtime-config=batch/v2alphal=true可以开启batch/v2alpha API**</p><p>典型的用法如下所示:</p><ul><li>在给定的时间点调度Job运行</li><li>创建周期性运行的Job,例如:数据库备份、发送邮件</li></ul><h2 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h2><p>StatefulSet 作为Controller 为Pod提供唯一的标识。它可以保证部署和scale的顺序。</p><p>StatefulSet是为了解决有状态服务的问题(对应Deployments和ReplicaSets是为无状态服务而设计),其应用场景包括:</p><ul><li>稳定的持久化存储,即Pod重新调度后还是能访问到相同的持久化数据,基于PVC来实现</li><li>稳定的网络标志,即Pod重新调度后其PodName和HostName不变,基于Headless Service (即没有Cluster IP的Service)来实现</li><li>有序部署,有序扩展,即Pod是有顺序的,在部署或者扩展的时候要依据定义的顺序依次依次进行(即从0到N-1, 在下一个Pod运行之前所有之前的Pod必须都是Running和Ready状态),基于init containers来实现</li><li>有序收缩,有序删除(即从N-1到0)</li></ul><h2 id="Horizontal-Pod-Autoscaling"><a href="#Horizontal-Pod-Autoscaling" class="headerlink" title="Horizontal Pod Autoscaling"></a>Horizontal Pod Autoscaling</h2><p>应用的资源使用率通常都有高峰和低谷的时候,如何削峰填谷,提高集群的整体资源利用率,让service中的Pod个数自动调整呢?这就有赖于Horizontal Pod Autoscaling了,顾名思义,使Pod水平自动缩放.</p><p>Horizontal Pod Autoscaling 仅适用于Deployment和ReplicaSet ,在V1版本中仅支持根据Pod的CPU利用率扩所容,在vlalpha版本中,支持根据内存和用户自定义的metric扩缩容。</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>控制器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s网络通讯方式</title>
    <link href="/2021/07/30/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/"/>
    <url>/2021/07/30/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="k8s组网要求"><a href="#k8s组网要求" class="headerlink" title="k8s组网要求"></a><strong>k8s组网要求</strong></h1><ul><li>所有的Pods之间可以在不使用NAT网络地址转换的情况下相互通信。</li><li>所有的Nodes之间可以在不使用NAT网络地址转换的情况下相互通信。</li><li>每个Pod自己看到的自己的ip和其他Pod看到的一致。即所有Pod对象都处于同一平面网络中，而且可以使用Pod自身的地址直接通信。</li></ul><h1 id="k8s网络模型设计基础原则"><a href="#k8s网络模型设计基础原则" class="headerlink" title="k8s网络模型设计基础原则"></a><strong>k8s网络模型设计基础原则</strong></h1><ul><li>每个Pod都拥有一个独立的IP地址，假定所有 Pod 都在一个可以直接连通的、扁平的网络空间中 。</li><li>不管Pod是否运行在同一个 Node中，都要求它们可以直接通过对方的 IP 进行访问。</li><li>用户不需要额外考虑如何建立 Pod 之间的连接，也不需要考虑将容器端口映射到主机端口等问题。</li></ul><p>k8s使用的网络插件必须能为Pod提供满足以上要求的网络，它需要为每个Pod配置至少一个特定的地址，即Pod IP。Pod IP地址实际存在于某个网卡（可以是虚拟设备）上，而service的地址却是一个虚拟IP地址，没有任何网络接口配置此地址，它由kube-proxy借助iptables规则或者IPVS规则重新定向到本地端口，在将其调度至后端Pod对象。Service的IP地址是集群提供服务的接口，也称为ClusterIP。</p><p>Pod网络及其IP由k8s的网络插件负责配置和管理，具体使用的网络地址可在管理配置网络插件时指定，如10.244.0.0/16网络。而Cluster网络和IP则是由k8s集群负责管理和配置，如10.96.0.0/12网络。</p><h1 id="k8s集群网络"><a href="#k8s集群网络" class="headerlink" title="k8s集群网络"></a>k8s集群网络</h1><ul><li>主机之间通信(如master和node)，不归k8s管，管理员自行构建。</li><li>pod资源对象之间通信，是一个虚拟网络。用于为各Pod对象设定IP地址等网络参数，其地址配置于Pod中容器的网络接口上，Pod网络需要借助k8s插件或者CNI插件实现，该插件可独立不属于k8s集群，亦可托管于k8s之上，他需要在构建k8s集群时由管理员定义，而后创建Pod对象时由其自动完成网络参数的动态配置。</li><li>Service资源的对象的网络，也是一个虚拟网络，用于k8s集群之中的Service配置IP地址，但此地址并不配置于任何主机或容器的网络接口之上，而是通过Node之上的kube-proxy配置为iptables或ipvs规则，从而将发往此地址的所有流量调度至其后端的各个Pod对象之上。Service网络在k8s集群创建时予以指定，而各Service的地址则在用户创建Service时予以动态配置。</li></ul><img src="/2021/07/30/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/image-4.png" class="" title="img">k8s网络环境<p><strong>容器和容器之间的网络</strong></p><ul><li>在k8s中每个Pod中管理着一组Docker容器，这些Docker容器共享同一个网络命名空间。</li><li>Pod中的每个Docker容器拥有与Pod相同的IP和port地址空间，并且由于他们在同一个网络命名空间，他们之间可以通过localhost相互访问。</li></ul><p>container模式指定新创建的Docker容器和已经存在的一个容器共享一个网络命名空间，而不是和宿主机共享。新创建的Docker容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等</p><p>每个Pod容器有有一个pause容器其有独立的网络命名空间，在Pod内启动Docker容器时候使用 –net=container就可以让当前Docker容器加入到Pod容器拥有的网络命名空间（pause容器），同一个Pod内的多个docker容器相互通信机制。</p><img src="/2021/07/30/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/image-5.png" class="" title="img"><p><strong>Pod与Pod之间的网络</strong></p><img src="/2021/07/30/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/image-6.png" class="" title="img">pod和pod通信<ul><li>k8s中，每个Pod拥有一个ip地址，不同的Pod之间可以直接使用ip通讯</li><li>在同一个Node上，从Pod的视角看，它存在于自己的网络命名空间中，并且需要与该Node上的其他网络命名空间上的Pod进行通信。</li></ul><p>原理：</p><p>使用linux虚拟以太网设备或者说是由两个虚拟接口组成的veth对使不同的网络命名空间链接起来，这些虚拟接口分布在多个网络命名空间上（这里是指多个Pod上）</p><p>为了让多个Pod的网络命名空间链接起来，可以让veth对的一端链接到root网络命名空间（宿主机的），另一端链接到Pod的网络命名空间。这里需要用到一个Linux以太网桥，它是一个虚拟的二层网络设备，目的就是把多个以太网段连接起来，它维护一个转发表，通过查看每个设备mac地址决定转发，还是丢弃数据。</p><p>同一台node节点上pod1和pod2通信：</p><p>pod1通过自身eth0网卡发送数据，eth0连接着veth0，网桥把veth0和veth1组成了一个以太网，然后数据到达veth0之后，网桥通过转发表，发送给veth1，veth1直接把数据传给pod2的eth0。</p><p>每对Veth就像一根接插电缆，连接两侧并允许流量在它们之间流动；这种veth对可以推广到同一个Node上任意多的Pod上，如上图这里展示使用veth对链接每个Pod到虚拟机的root网络命名空间。不同node节点上pod和pod通信：<strong>CIDR</strong>CIDR（无类域间路由选择）它消除了传统的A类、B类和C类地址以及划分子网的概念，因而可以更加有效地分配IPv4的地址空间。它可以将好几个IP网络结合在一起，使用一种无类别的域际路由选择算法，使它们合并成一条路由从而较少路由表中的路由条目减轻Internet路由器的负担。k8s集群中，每个node节点都会被分配一个CIDR块，（把网络前缀都相同的连续地址组成的地址组称为CIDR地址块）用来给node上的pod分配IP地址，另外还需要把pod的ip和所在nodeip进行关联.比如node1上pod1和node2上的pod4进行通信首先pod1上网卡eth0将数据发送给已经管理到root命名空间的veth0上，被虚拟网桥收到，查看自己转发表之后，并没有pod4的mac地址。就会把包转发到默认路由，（root命名空间的eth0上，也就是已经到了node节点的网卡上）通过eth0，发送到网络中。寻址转发后包来到了node2，首先被root命名空间的eth0设备接受，查看目标地址是发往pod4的，交给虚拟网桥路由到veth1，最终传给pod4的eth0上。</p><img src="/2021/07/30/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/1411165-20210604153215333-1022736403-990x1024.png" class="" title="img">不同node节点上<p>pod和pod通信<strong>pod与service之间的网络</strong>pod的ip地址是不持久的，当集群中pod的规模缩减或者pod故障或者node故障重启后，新的pod的ip就可能与之前的不一样的。所以k8s中衍生出来Service来解决这个问题。Service管理了多个Pods，每个Service有一个虚拟的ip,要访问service管理的Pod上的服务只需要访问你这个虚拟ip就可以了，这个虚拟ip是固定的，当service下的pod规模改变、故障重启、node重启时候，对使用service的用户来说是无感知的，因为他们使用的service的ip没有变。当数据包到达Service虚拟ip后，数据包会被通过k8s给该servcie自动创建的负载均衡器路由到背后的pod容器。在k8s里，iptables规则是由kube-proxy配置，kube-proxy监视APIserver的更改，因为集群中所有service（iptables）更改都会发送到APIServer上，所以每台kubelet-proxy监视APIServer，当对service或pod虚拟IP进行修改时，kube-proxy就会在本地更新，以便正确发送给后端pod.<img src="/2021/07/30/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/1411165-20210604153302687-2143265992.png" class="" title="img"></p><p>数据包从pod1的eth0离开，通过veth0传给网桥cbr0，网桥找不到service的ip对应的mac，交给了默认路由，到达了root命名空间的eth0root命名空间的eth0接受数据包之前会经过iptables进行过滤，iptables接受数据包后使用kube-proxy在node上配置的规则响应service，然后数据包的目的ip重写为service后端指定的pod的ip了。service到pod包的流转：收到包的pod会回应数据包到源pod，源ip是发送方ip，目标IP是接收方，数据包进行回复时经过iptables，iptables使用内核机制conntrack记住它之前做的选择，又将数据包源ip重新为service的ip，目标ip不变，然后原路返回至pod1的eth0<strong>Internet与service之间的网络</strong>node到internet包的流转</p><img src="/2021/07/30/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/1411165-20210604153732180-730315756.png" class="" title="img"><p>数据包源自pod1网络命名空间，通过veth对连接到root网络命名空间，紧接着，转发表里没有IP对应的mac，会发送到默认路由，到达root网络命名空间的eth0那么在到达root网络明明空间之前，iptables会修改数据包，现在数据包源ip是pod1的，继续传输会被Internet网关拒绝掉，因为网关NAT仅转发node的ip，解决方案：使iptables执行源NAT更改数据包源ip，让数据包看起来是来自于node而不是podiptables修改完源ip之后，数据包离开node，根据转发规则发给Internet网关，Internet网关执行另一个NAT，内网ip转为公网ip，在Internet上传输。数据包回应时，也是按照：Internet网关需要将公网IP转换为私有ip，到达目标node节点，再通过iptables修改目标ip并且最终传送到pod的eth0虚拟网桥。Internet到k8s的流量：让Internet流量进入k8s集群，这特定于配置的网络，可以在网络堆栈的不同层来实现：（1） NodePort（2）Service LoadBalancer（3）Ingress控制器。<strong>Flannel</strong>Flannel是CoreOS团队针对Kubernetes设计的一个网络规划服务,简单来说,它的功能是让集群中的不同节点主机创建的Docker容器都具有全集群唯一的虚拟IP地址。而且它还能在这些IP地址之间建立一个覆盖网络(Overlay Network),通过这个覆盖网络,将数据包原封不动地传递到目标容器内</p><img src="/2021/07/30/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/image-2.png" class="" title="img">ETCD 之Flannel提供说明:<p>存储管理Flannel可分配的IP地址段资源 监控ETCD中每个Pod的实际地址,并在内存中建立维护Pod节点路由表同一个Pod内部通讯:同一个Pod共享同一个网络命名空间,共享同一个Linux协议栈 <strong>Pod1至Pod2</strong>Pod1与Pod2不在同一台主机,Pod的地址是与docker0在同一个网段的,但docker0网段与宿主机网卡是两个完全不同的IP网段，并且不同Node之间的通信只能通过宿主机的物理网卡进行。将Pod的IP和所在Node的IP关联起来,通过这个关联让Pod可以互相访问Pod1与Pod2在同一台机器,由Docker0网桥直接转发请求至Pod2,不需要经过Flannel<strong>Pod至Service的网络</strong>目前基于性能考虑,全部为iptables维护和转发<strong>Pod到外网</strong>Pod向外网发送请求,查找路由表,转发数据包到宿主机的网卡,宿主网卡完成路由选择后，iptables执行Masquerade，把源IP 更改为宿主网卡的IP,然后向外网服务器发送请求。外网访问PodService</p><p>参考文章： </p><p><a href="https://blog.csdn.net/iqifenxia/article/details/121226087">https://blog.csdn.net/iqifenxia/article/details/121226087</a></p><p><a href="http://t.zoukankan.com/fat-girl-spring-p-14849880.html">http://t.zoukankan.com/fat-girl-spring-p-14849880.html</a></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>网络通讯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s资源清单及常用字段</title>
    <link href="/2021/07/29/kubernetes%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/07/29/kubernetes%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="kubernetes组件"><a href="#kubernetes组件" class="headerlink" title="kubernetes组件"></a>kubernetes组件</h1><p>一个 Kubernetes 集群是由一组被称作节点（node）的机器组成， 这些节点上会运行由 Kubernetes 所管理的容器化应用。 且每个集群至少有一个工作节点。</p><p>工作节点会托管所谓的 Pods，而 Pod 就是作为应用负载的组件。 控制平面管理集群中的工作节点和 Pods。 为集群提供故障转移和高可用性， 这些控制平面一般跨多主机运行，而集群也会跨多个节点运行。</p><img src="/2021/07/29/kubernetes%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/image-1-1024x478.png" class="" title="img">Kubernetes 集群的组件<p><strong>控制平面组件（Control Plane Components）</strong></p><p>控制平面组件会为集群做出全局决策，比如资源的调度。 以及检测和响应集群事件，例如当不满足部署的 <code>replicas</code> 字段时， 要启动新的 pod）。</p><p><strong>kube-apiserver</strong></p><p>API 服务器是 Kubernetes 控制平面的组件， 该组件负责公开了 Kubernetes API，负责处理接受请求的工作。 API 服务器是 Kubernetes 控制平面的前端。集群统一入口,以restful方式,交给etcd存储.</p><p><strong>etcd</strong></p><p><code>etcd</code> 是兼顾一致性与高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。存储系统,用于保存集群相关的数据。<br>etcd的官方将它定位成一个可信赖的分布式键值存储服务,它能够为整个分布式集群存储一些关键数据,协助分布式集群的正常运转。<a href="http://t.zoukankan.com/liujunjun-p-12186354.html">etcd运行原理</a></p><p><strong>kube-scheduler</strong></p><p><code>kube-scheduler</code> 是控制平面的组件， 负责监视新创建的、未指定运行节点（node）的 Pods， 并选择节点来让 Pod 在上面运行。负责介绍任务，选择合适的节点进行分配任务。</p><p>调度决策考虑的因素包括单个 Pod 及 Pods 集合的资源需求、软硬件及策略约束、 亲和性及反亲和性规范、数据位置、工作负载间的干扰及最后时限。</p><p>节点调度,选择node节点应用部署。</p><p><strong>kube-controller-manager</strong></p><p>kube-controller-manager 是控制平面的组件， 负责运行控制器进程。</p><p>为了降低复杂性，控制器都被编译到同一个可执行文件，并在同一个进程中运行。</p><p>控制器：</p><ul><li>节点控制器（Node Controller）：负责在节点出现故障时进行通知和响应</li><li>任务控制器（Job Controller）：监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成</li><li>端点控制器（Endpoints Controller）：填充端点（Endpoints）对象（即加入 Service 与 Pod）</li><li>服务帐户和令牌控制器（Service Account &amp; Token Controllers）：为新的命名空间创建默认帐户和 API 访问令牌</li><li>副本管理器（ReplicationController）：确保特定数量的 Pod 副本处于运⾏状态且总是可用。</li><li>Deployment管理器（DeploymentController）：可以拥有 ReplicaSet 并使⽤声明式⽅式在服务器端完成对 Pods 滚动更新的对象。</li><li>状态管理器（StatefulSetController）：管理有状态应⽤的⼯作负载 API 对象。</li><li>DaemonSetController：确保全部（或者某些）节点上运⾏⼀个 Pod 的副本。 当有节点加⼊集群时， 也会为他们新增⼀个 Pod 。 当有节点从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。</li><li>JobController：创建一个或者多个Pods,并将继续重试Pods的执行,直到指定数量的Pods成功终止。</li><li>CronJobController：创建基于时隔重复调度的 Jobs。</li><li>TTLController</li><li>EndpointController</li><li>PodGCController</li><li>ResourceQuotaController</li><li>NamespaceController</li><li>ServiceAccountController</li><li>GarbageCollectorController</li><li>HPAController</li><li>DisruptionController</li><li>CSRSigningController</li><li>CSRApprovingController</li><li>TokenController</li><li>NodeController</li><li>ServiceController</li><li>RouteController</li><li>PVBinderController</li><li>AttachDetachController</li><li>BootstrapSignerController</li><li>TokenCleanerController</li></ul><p><strong>cloud-controller-manager</strong></p><p><code>cloud-controller-manager</code> 是指嵌入特定云的控制逻辑之 控制平面组件。 <code>cloud-controller-manager</code> 允许你将你的集群连接到云提供商的 API 之上， 并将与该云平台交互的组件同与你的集群交互的组件分离开来。</p><p>下面的控制器都包含对云平台驱动的依赖：</p><ul><li>节点控制器（Node Controller）：用于在节点终止响应后检查云提供商以确定节点是否已被删除</li><li>路由控制器（Route Controller）：用于在底层云基础架构中设置路由</li><li>服务控制器（Service Controller）：用于创建、更新和删除云提供商负载均衡器</li></ul><p><strong>Node 组件</strong></p><p><strong>kubelet</strong></p><p>直接跟容器引擎交互实现容器的生命周期管理。</p><p>master排到node节点代表,管理本机容器。</p><p>kubelet 会在集群中每个节点（node）上运行。 它保证容器（containers）都运行在 Pod 中。<br>kubelet 接收一组通过各类机制提供给它的 PodSpecs， 确保这些 PodSpecs 中描述的容器处于运行状态且健康。 kubelet 不会管理不是由 Kubernetes 创建的容器。</p><p><strong>kube-proxy</strong></p><p>负责写入规则至 IPTABLES、IPVS 实现服务映射访问的。</p><p>kube-proxy 是集群中每个节点（node）所上运行的网络代理， 实现 Kubernetes 服务（Service） 概念的一部分。<br>kube-proxy 维护节点上的一些网络规则， 这些网络规则会允许从集群内部或外部的网络会话与 Pod 进行网络通信。<br>如果操作系统提供了可用的数据包过滤层，则 kube-proxy 会通过它来实现网络规则。 否则，kube-proxy 仅做流量转发。</p><p><strong>k8s核心概念</strong></p><p>Pod</p><ul><li>最小部署单元</li><li>一组容器的集合</li><li>共享网络</li><li>生命周期是短暂的</li></ul><p>controller</p><ul><li>确保预期的pod副本数量</li><li>无状态应用部署</li><li>有状态应用部署</li><li>确保所有的node运行同一个pod一次性任务和定时任务</li></ul><p>Service</p><ul><li>定义一组pod的访问规则</li></ul>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s资源清单及常用字段</title>
    <link href="/2021/07/27/k8s%E8%B5%84%E6%BA%90%E6%B8%85%E5%8D%95%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%AD%97%E6%AE%B5/"/>
    <url>/2021/07/27/k8s%E8%B5%84%E6%BA%90%E6%B8%85%E5%8D%95%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%AD%97%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<p>K8s中所有的内容都抽象为资源,资源实例化之后,叫做对象。</p><h1 id="名称空间级别"><a href="#名称空间级别" class="headerlink" title="名称空间级别"></a>名称空间级别</h1><p>工作负载型资源(workload ): Pod、 ReplicaSet, Deployment、 StatefulSet、DaemonSet、Job、CronJob (ReplicationController 在vl.11 版本被废弃)</p><p>服务发现及负载均衡型资源( ServiceDiscovery LoadBalance )： Service, Ingress. …</p><p>配置与存储型资源： Volume(存储卷)、CSI(容器存储接口,可以扩展各种各样的第三方存储卷)</p><p>特殊类型的存储卷：ConfigMap(当配置中心来使用的资源类型)、Secret(保存敏感数据)、DownwardAPI (把外部环境中的信息输出给容器)</p><p>集群级资源: Namespace、 Node、 Role、 ClusterRole, RoleBinding、 ClusterRoleBinding</p><p>元数据型资源: HPA、 PodTemplate、 LimitRange</p><h1 id="资源清单常用字段"><a href="#资源清单常用字段" class="headerlink" title="资源清单常用字段"></a>资源清单常用字段</h1><p>k8s 集群中对资源管理和资源对象编排部署都可以通过声明样式（YAML）文件来解决，通过kubectl 命令直接使用资源清单文件就可以实现对大量的资源对象进行编排部署了。这样的yaml文件我们一般称为资源清单。</p><h2 id="必须存在的属性"><a href="#必须存在的属性" class="headerlink" title="必须存在的属性"></a>必须存在的属性</h2><table><thead><tr><th>参数名</th><th>字段类型</th><th>说明</th></tr></thead><tbody><tr><td>version</td><td>string</td><td>K8S API的版本，可以通过kubectl api-version查询</td></tr><tr><td>kind</td><td>string</td><td>资源类型和角色</td></tr><tr><td>metadata</td><td>object</td><td>元数据对象</td></tr><tr><td>metadata.name</td><td>string</td><td>元数据对象的名称，比如pod的名字</td></tr><tr><td>metadata.namespace</td><td>string</td><td>元数据对象的命名控件</td></tr><tr><td>spec</td><td>object</td><td>详细定义对象</td></tr><tr><td>spec.container[]</td><td>list</td><td>容器列表</td></tr><tr><td>spec.container[].name</td><td>string</td><td>定义容器名称</td></tr><tr><td>spec.container[].image</td><td>string</td><td>定义用到镜像名称</td></tr></tbody></table><h2 id="spec-主要对象"><a href="#spec-主要对象" class="headerlink" title="spec 主要对象"></a>spec 主要对象</h2><table><thead><tr><th>参数名</th><th>字段类型</th><th>说明</th></tr></thead><tbody><tr><td>version</td><td>string</td><td>K8S API的版本，可以通过kubectl api-version查询</td></tr><tr><td>kind</td><td>string</td><td>资源类型和角色</td></tr><tr><td>metadata</td><td>object</td><td>元数据对象</td></tr><tr><td>metadata.name</td><td>string</td><td>元数据对象的名称，比如pod的名字</td></tr><tr><td>metadata.namespace</td><td>string</td><td>元数据对象的命名控件</td></tr><tr><td>metadata.labels</td><td>list</td><td>自定义标签列表</td></tr><tr><td>metadata.annotations</td><td>list</td><td>自定义注解列表</td></tr><tr><td>spec</td><td>object</td><td>详细定义对象</td></tr><tr><td>spec.container[]</td><td>list</td><td>容器列表</td></tr><tr><td>spec.container[].name</td><td>string</td><td>定义容器名称</td></tr><tr><td>spec.container[].image</td><td>string</td><td>定义用到镜像名称</td></tr><tr><td>spec.container[].imagePullPolicy</td><td>string</td><td>镜像拉取策略,    Always：不管镜像是否存在都会进行一次拉取。  Never：不管镜像是否存在都不会进行拉取  IfNotPresent：只有镜像不存在时，才会进行镜像拉取。</td></tr><tr><td>spec.container[].command[]</td><td>list</td><td>指定容器启动命令</td></tr><tr><td>spec.container[].args[]</td><td>list</td><td>命令参数</td></tr><tr><td>spec.container[].workingDir</td><td>string</td><td>指定容器的工作目录</td></tr><tr><td>spec.container[].volumeMounts[]</td><td>list</td><td>指定容器内部的存储卷配置</td></tr><tr><td>spec.container[].volumeMounts[].name</td><td>string</td><td>指定挂载存储卷的名称</td></tr><tr><td>spec.container[].volumeMounts[].mountPath</td><td>string</td><td>指定挂载存储卷的路径</td></tr><tr><td>spec.container[].volumeMounts[].readyOnly</td><td>string</td><td>true或false，读写模式</td></tr><tr><td>spec.container[].ports[]</td><td>list</td><td>指定容器需要用到的端口列表</td></tr><tr><td>spec.container[].ports[].name</td><td>string</td><td>端口名称</td></tr><tr><td>spec.container[].ports[].containerPort</td><td>string</td><td>指定容器要监听的端口号</td></tr><tr><td>spec.container[].ports[].hostPort</td><td>string</td><td>指定容器所在主机需要监听的端口号，默认跟containerPort相同，如果设置了hostPort同一台主机无法启动该容器的相同副本(因为主机的端口号不能相同，这样会冲突)</td></tr><tr><td>spec.container[].ports[].protocol</td><td>string</td><td>指定端口协议，支持TCP和UDP，默认值TCP</td></tr><tr><td>spec.container[].env[]</td><td>list</td><td>指定容器运行需要的环境</td></tr><tr><td>spec.container[].env[].name</td><td>string</td><td>环境变量名称</td></tr><tr><td>spec.container[].env[].value</td><td>string</td><td>环境变量值</td></tr><tr><td>spec.container[].resources</td><td>object</td><td>指定资源限制和资源请求的值</td></tr><tr><td>spec.container[].resources.limits</td><td>object</td><td>指定设置容器运行时资源的运行上限</td></tr><tr><td>spec.container[].resources.limits.cpu</td><td>string</td><td>指定cpu的限制，单位core数，将用于docker run –cpu-shares 参数</td></tr><tr><td>spec.container[].resources.limits.memory</td><td>string</td><td>指定MEM内存的限制，单位MIB ,GIB</td></tr><tr><td>spec.container[].resources.requests</td><td>object</td><td>指定容器启动和调度的限制设置</td></tr><tr><td>spec.container[].resources.requests.cpu</td><td>string</td><td>cpu请求，单位core数，容器启动时初始化可用数量</td></tr><tr><td>spec.container[].resources.requests.memory</td><td>string</td><td>内存请求，单位MIB,GIB 容器启动的初始化可用数量</td></tr><tr><td>spec.container[].livenessProbe</td><td>object</td><td>对Pod内各容器健康检查的设置，当探测无响应几次之后，系统将自动重启该容器。可以设置的方法包括：exec、httpGet和tcpSocket。对一个容器仅需设置一种健康检查方法</td></tr><tr><td>spec.container[].livenessProbe.exec</td><td>object</td><td>对Pod内各容器健康检查的设置</td></tr><tr><td>spec.container[].livenessProbe.exec.command[]</td><td>list</td><td>exec方式需要指定的命令或者脚本</td></tr><tr><td>spec.container[].livenessProbe.httpGet</td><td>object</td><td>对Pod内各容器健康检查的设置，httpget方式。需指定path、port</td></tr><tr><td>spec.container[].livenessProbe.httpGet.path</td><td>string</td><td></td></tr><tr><td>spec.container[].livenessProbe.httpGet.port</td><td>string</td><td></td></tr><tr><td>spec.container[].livenessProbe.httpGet.host</td><td>string</td><td></td></tr><tr><td>spec.container[].livenessProbe.httpGet.scheme</td><td>string</td><td></td></tr><tr><td>spec.container[].livenessProbe.httpGet .httpHeaders[]</td><td>list</td><td></td></tr><tr><td>spec.container[].livenessProbe.httpGet .httpHeaders[] .name</td><td>string</td><td></td></tr><tr><td>spec.container[].livenessProbe.httpGet .httpHeaders[] .value</td><td>string</td><td></td></tr><tr><td>spec.container[].livenessProbe.tcpSocket</td><td>object</td><td></td></tr><tr><td>spec.container[].livenessProbe.tcpSocket.port</td><td>string</td><td></td></tr><tr><td>spec.container[].livenessProbe.initialDelaySeconds</td><td>string</td><td>容器启动完成后首次探测的时间，单位为s</td></tr><tr><td>spec.container[].livenessProbe.timeoutSeconds</td><td>string</td><td>探测等待响应的超时时间，单位为s,默认1s</td></tr><tr><td>spec.container[].livenessProbe.periodSeconds</td><td>string</td><td>定期探测时间设置，单位s,默认10s探测一次</td></tr><tr><td>spec.container[].livenessProbe.successThreshold</td><td>string</td><td>失败后检查成功的最小连续成功次数。默认为1.活跃度必须为1。最小值为1。</td></tr><tr><td>spec.container[].livenessProbe.failureThreshold</td><td>string</td><td>当Pod成功启动且检查失败时，Kubernetes将在放弃之前尝试failureThreshold次。放弃生存检查意味着重新启动Pod。而放弃就绪检查，Pod将被标记为未就绪。默认为3.最小值为1。</td></tr><tr><td>spec.container[].livenessProbe.securityContext</td><td>object</td><td></td></tr><tr><td>spec.container[].livenessProbe.securityContext .privileged</td><td>string</td><td></td></tr><tr><td>spec.restartPolicy</td><td>string</td><td>定义pod重启策略，默认值Always                   Always：Pod一旦终止运行，则无论容器是如何终止的kubelet服务都将重启它                    OnFailure：只有Pod以非零退出码终止时，kubelet才会重启该容器，如果容器正常结束（退出码为0），则kubelet将不会重启它      Never：Pod终止后，kubelet将退出码报告给Master，不会重启该Pod</td></tr><tr><td>spec.nodeSelector</td><td>object</td><td>定义node的label过滤标签，以key：value格式指定</td></tr><tr><td>spec.imagePullSecrets</td><td>Object</td><td>定义pull镜像secret名称，以name:secretKey格式指定</td></tr><tr><td>spec.hostNetwork</td><td>Boolean</td><td>定义是否使用主机网络模式，默认值false，设置true表示使用宿主网路，不适用docker网桥，同时设置true将无法在同一台宿主机上启动第二个副本。</td></tr><tr><td>spec.volumes[]</td><td>list</td><td>在该pod上定义的共享存储卷列表</td></tr><tr><td>spec.volumes[].name</td><td>string</td><td>共享存储卷的名称，在一个pod中每个存储卷定义一个名称，容器定义部分的containers[].volumeMounts[].name将引用该共享存储卷的名称。可以定义多个volume，每个volume的name保持唯一。</td></tr><tr><td>spec.volumes[].emptyDir</td><td>string</td><td>类型为emptyDir的存储卷，表示与Pod同生命周期的一个临时目录，其值为一个空对象：emptyDir:{}</td></tr><tr><td>spec.volumes[].hostPath</td><td>object</td><td>类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录，通过volume[].hostPath.path指定</td></tr><tr><td>spec.volumes[].hostPath.path</td><td>string</td><td>Pod所在主机的目录，将被用于容器中mount的目录</td></tr><tr><td>spec.volumes[].secret</td><td>object</td><td>类型为secret的存储卷，表示挂载集群预定义的secret对象到容器内部</td></tr><tr><td>spec.volumes[].secret.secretName</td><td>string</td><td></td></tr><tr><td>spec.volumes[].secret.items[]</td><td>list</td><td></td></tr><tr><td>spec.volumes[].secret.items[].key</td><td>string</td><td></td></tr><tr><td>spec.volumes[].secret.items[].path</td><td>string</td><td></td></tr><tr><td>spec.volumes[].configMap</td><td>object</td><td>类型为configMap的存储卷，表示挂载集群预定义的configMap对象到容器内部</td></tr><tr><td>spec.volumes[].configMap.name</td><td>string</td><td></td></tr><tr><td>spec.volumes[].configMap.items[]</td><td>list</td><td></td></tr><tr><td>spec.volumes[].configMap.items[].key</td><td>string</td><td></td></tr><tr><td>spec.volumes[].configMap.items[].path</td><td>string</td><td></td></tr></tbody></table><h1 id="资源清单格式"><a href="#资源清单格式" class="headerlink" title="资源清单格式"></a>资源清单格式</h1><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">apiVersion:</span> group/apiversion <span class="hljs-meta">#如果没有给定group名称,那么默认为core,可以使用kubectl api-versions #获取当前k8s版本上所有的 apiVersion版本信息(每个版本可能不同)</span><br><span class="hljs-symbol">kind:</span><span class="hljs-meta">#资源类别</span><br><span class="hljs-symbol">metadata:</span><span class="hljs-meta">#资源元数据</span><br>  name<br>  namespace<br>  <span class="hljs-number">1</span>ables<br>  annotations <span class="hljs-meta">#主要目的是方便用户阅读查找</span><br><span class="hljs-symbol">spec:</span> <span class="hljs-meta">#期望的状态(disired state)</span><br><span class="hljs-symbol">status:</span> <span class="hljs-meta">#当前状态,本字段有Kubernetes 自身维护,用户不能去定义</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes  kubectl常用命令</title>
    <link href="/2021/07/25/kubernetes%20kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/07/25/kubernetes%20kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="1-kubectl-概述"><a href="#1-kubectl-概述" class="headerlink" title="1 kubectl 概述"></a>1 kubectl 概述</h1><p>kubectl 是Kubernetes 集群的命令行工具，通过kubectl 能够对集群本身进行管理，并能够在集群上进行容器化应用的安装部署。</p><p><a href="https://kubernetes.io/zh/docs/reference/kubectl/overview/">kubectl 概述 | Kubernetes</a> </p><h1 id="2-kubectl-命令的语法"><a href="#2-kubectl-命令的语法" class="headerlink" title="2 kubectl 命令的语法"></a>2 kubectl 命令的语法</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">kubectl <span class="hljs-selector-attr">[command]</span> <span class="hljs-selector-attr">[TYPE]</span> <span class="hljs-selector-attr">[NAME]</span> <span class="hljs-selector-attr">[flags]</span><br></code></pre></td></tr></table></figure><ul><li><code>command</code>：指定要对一个或多个资源执行的操作，例如 <code>create</code>、<code>get</code>、<code>describe</code>、<code>delete</code>。</li><li><code>TYPE</code>：指定<a href="https://kubernetes.io/zh/docs/reference/kubectl/overview/#%E8%B5%84%E6%BA%90%E7%B1%BB%E5%9E%8B">资源类型</a>。资源类型不区分大小写， 可以指定单数、复数或缩写形式。 </li><li><code>NAME</code>：指定资源的名称。名称区分大小写。 如果省略名称，则显示所有资源的详细信息 <code>kubectl get pods</code>。 </li><li><code>flags</code>: 指定可选的参数。例如，可以使用 <code>-s</code> 或 <code>-server</code> 参数指定 Kubernetes API 服务器的地址和端口。</li></ul><h1 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3 常用命令"></a>3 常用命令</h1><p><a href="https://kubernetes.io/zh/docs/reference/kubectl/kubectl/">kubectl | Kubernetes</a> </p><p><a href="http://docs.kubernetes.org.cn/475.html">常用命令</a></p><h2 id="3-1-基础命令"><a href="#3-1-基础命令" class="headerlink" title="3.1 基础命令"></a>3.1 基础命令</h2><table><thead><tr><th>create</th><th>从文件或 stdin 创建一个或多个资源。</th></tr></thead><tbody><tr><td>expose</td><td>将副本控制器、服务或 pod 作为新的 Kubernetes 服务暴露。</td></tr><tr><td>run</td><td>在集群上运行指定的镜像。</td></tr><tr><td>get</td><td>列出一个或多个资源。</td></tr><tr><td>delete</td><td>从文件、标准输入或指定标签选择器、名称、资源选择器或资源中删除资源。</td></tr><tr><td>set</td><td>为对象设置功能特性</td></tr><tr><td>explain</td><td>获取多种资源的文档。例如 pod, node, service 等。</td></tr><tr><td>edit</td><td>使用默认编辑器编辑和更新服务器上一个或多个资源的定义。</td></tr></tbody></table><h2 id="3-2-部署命令"><a href="#3-2-部署命令" class="headerlink" title="3.2 部署命令"></a>3.2 部署命令</h2><table><thead><tr><th>rollout</th><th>管理资源的部署。</th></tr></thead><tbody><tr><td>scale</td><td>更新指定副本控制器的大小。</td></tr><tr><td>autoscale</td><td>自动伸缩由副本控制器管理的一组 pod。</td></tr></tbody></table><h2 id="3-3-集群管理命令"><a href="#3-3-集群管理命令" class="headerlink" title="3.3 集群管理命令"></a>3.3 集群管理命令</h2><table><thead><tr><th>certificate</th><th>修改证书资源</th></tr></thead><tbody><tr><td>cluster-info</td><td>显示集群信息</td></tr><tr><td>top</td><td>显示资源（CPU/内存/存储）的使用情况。</td></tr><tr><td>cordon</td><td>将节点标记为不可调度。</td></tr><tr><td>uncordon</td><td>将节点标记为可调度。</td></tr><tr><td>drain</td><td>腾空节点以准备维护。</td></tr><tr><td>taint</td><td>更新一个或多个节点上的污点。</td></tr></tbody></table><h2 id="3-4-故障诊断命令"><a href="#3-4-故障诊断命令" class="headerlink" title="3.4 故障诊断命令"></a>3.4 故障诊断命令</h2><table><thead><tr><th>describe</th><th>显示一个或多个资源的详细状态</th></tr></thead><tbody><tr><td>logs</td><td>在 pod 中打印容器的日志。</td></tr><tr><td>attach</td><td>附加到正在运行的容器，查看输出流或与容器（stdin）交互</td></tr><tr><td>exec</td><td>执行命令到容器</td></tr><tr><td>port-forward</td><td>转发一个或多个本地端口到一个pod</td></tr><tr><td>proxy</td><td>运行 Kubernetes API 服务器的代理</td></tr><tr><td>cp</td><td>拷贝文件或目录到容器中</td></tr><tr><td>auth</td><td>检查授权</td></tr></tbody></table><h2 id="3-5-其它命令"><a href="#3-5-其它命令" class="headerlink" title="3.5 其它命令"></a>3.5 其它命令</h2><table><thead><tr><th>convert</th><th>在不同的 API 版本之间转换配置文件。配置文件可以是 YAML 或 JSON 格式。</th></tr></thead><tbody><tr><td>replace</td><td>从文件或标准输入中替换资源</td></tr><tr><td>apply</td><td>从文件或 stdin 对资源应用配置更改。</td></tr><tr><td>patch</td><td>使用策略合并 patch 程序更新资源的一个或多个字段。</td></tr><tr><td>label</td><td>添加或更新一个或多个资源的标签。</td></tr><tr><td>annotate</td><td>添加或更新一个或多个资源的注解。</td></tr><tr><td>completion</td><td>为指定的 shell （bash 或 zsh）输出 shell 补齐代码。</td></tr><tr><td>api-versions</td><td>列出可用的 API 版本。</td></tr><tr><td>config</td><td>修改 kubeconfig 文件。有关详细信息，请参阅各个子命令。</td></tr><tr><td>plugin</td><td>提供用于与插件交互的实用程序。</td></tr><tr><td>version</td><td>显示运行在客户端和服务器上的 Kubernetes 版本。</td></tr></tbody></table><h2 id="3-6-kubectl-create-与kubectl-apply区别"><a href="#3-6-kubectl-create-与kubectl-apply区别" class="headerlink" title="3.6 kubectl create 与kubectl apply区别"></a>3.6 kubectl create 与kubectl apply区别</h2><table><thead><tr><th><strong>kubectl create</strong></th><th><strong>kubectl apply</strong></th></tr></thead><tbody><tr><td>它首先删除资源，然后从提供的文件中创建资源</td><td>只更新文件中给出的属性</td></tr><tr><td>在create中使用的文件应该是完整的</td><td>apply中使用的文件可能是一个不完整的规范</td></tr><tr><td>Create工作于资源的每个属性</td><td>Apply仅对资源的某些属性有效</td></tr><tr><td>如果您将使用同一个文件的替换命令，该命令将失败，因为缺少信息</td><td>您可以应用只更改注释的文件，而不指定资源的任何其他属性</td></tr></tbody></table><h1 id="4-常用命令使用案例"><a href="#4-常用命令使用案例" class="headerlink" title="4 常用命令使用案例"></a>4 常用命令使用案例</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>获取所有可用的api 版本<br>kubectl api-versions<br><span class="hljs-regexp">//</span>给Node加上标签<br>kubectl label nodes &lt;your-node-name&gt; disktype=ssd<br></code></pre></td></tr></table></figure><p>快速创建pod及查看运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 创建deployment <br>kubectl create deployment nginx --image=nginx<br>// 将资源暴露为新的Kubernetes Service<br>kubectl expose deployment nginx --port=80 --type=NodePort<br>//查看pod<br>kubectl get pod/po &lt;Pod_name&gt;<br>kubectl get pod/po &lt;Pod_name&gt; -o wide<br>//显示所有pod<br>kubectl get pods<br>//删除pod<br>kubectl delete -f pod pod_name.yaml<br>kubectl delete pod --all/[pod_name]<br></code></pre></td></tr></table></figure><p>通过yaml创建deployment </p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f nginx-create.yaml<br></code></pre></td></tr></table></figure><p>获取所有的node</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> nodes<br></code></pre></td></tr></table></figure><p>获取指定node信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> nodes node_name<br></code></pre></td></tr></table></figure><p>帮助命令</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">kubectl <span class="hljs-comment">--help</span><span class="hljs-comment"></span><br><span class="hljs-comment">//查看某个操作</span><br>kubectl <span class="hljs-built_in">get</span> -help<br></code></pre></td></tr></table></figure><p>快速获取yaml</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create deployment nginx <span class="hljs-attribute">--image</span>=nginx -o yaml --dry-<span class="hljs-built_in">run</span> &gt; nginx-create.yaml<br><span class="hljs-comment"># 或者</span><br>kubectl <span class="hljs-built_in">get</span> deploy nginx -o yaml ---<span class="hljs-built_in">export</span> &gt; nginx-test.yaml<br></code></pre></td></tr></table></figure><h1 id="5-练习操作"><a href="#5-练习操作" class="headerlink" title="5 练习操作"></a>5 练习操作</h1><h2 id="5-1-删除操作"><a href="#5-1-删除操作" class="headerlink" title="5.1 删除操作"></a>5.1 删除操作</h2><p><strong>删除deplyment</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>删除myapp<br>kubectl <span class="hljs-keyword">delete</span> deployment myapp<br><span class="hljs-regexp">//</span>删除所有<br>kubectl <span class="hljs-keyword">delete</span> deployment --all<br></code></pre></td></tr></table></figure><p><strong>删除pod</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>删除myapp<br>kubectl <span class="hljs-keyword">delete</span> pod myapp<br><span class="hljs-regexp">//</span>删除所有<br>kubectl <span class="hljs-keyword">delete</span> pod --all<br></code></pre></td></tr></table></figure><p><strong>删除svc</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>删除nginx svc<br>kubectl <span class="hljs-keyword">delete</span> svc nginx<br></code></pre></td></tr></table></figure><h2 id="5-2-通过yaml创建资源"><a href="#5-2-通过yaml创建资源" class="headerlink" title="5.2 通过yaml创建资源"></a>5.2 通过yaml创建资源</h2><p>create和apply的区别在<strong>3.2 常用命令</strong>有说明</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">kubectl create -f  <span class="hljs-keyword">init</span>.yaml<br>或<br>kubectl apply -f  <span class="hljs-keyword">init</span>.yaml<br></code></pre></td></tr></table></figure><h2 id="5-3-查看k8s可用的apiVersion"><a href="#5-3-查看k8s可用的apiVersion" class="headerlink" title="5.3 查看k8s可用的apiVersion"></a>5.3 查看k8s可用的apiVersion</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">kubectl api-versions</span><br></code></pre></td></tr></table></figure><h2 id="5-4-查看所有api资源"><a href="#5-4-查看所有api资源" class="headerlink" title="5.4 查看所有api资源"></a>5.4 查看所有api资源</h2><p>通过配置清单创建资源时，会出现error: unable to recognize “init.yaml”: no matches for kind “Pod” in version “V1”，说明对应apiVersion 版本没有指定资源的定义，可以通过如下命令来查看对应资源的版本。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">kubectl api-resources</span><br></code></pre></td></tr></table></figure><h2 id="5-5-查看资源"><a href="#5-5-查看资源" class="headerlink" title="5.5 查看资源"></a>5.5 查看资源</h2><p>查看pod资源</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">get</span> <span class="hljs-string">pod</span><br></code></pre></td></tr></table></figure><h2 id="5-6-分析资源"><a href="#5-6-分析资源" class="headerlink" title="5.6 分析资源"></a>5.6 分析资源</h2><p>查看pod的描述</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">kubectl describe pod myapp-pod</span><br></code></pre></td></tr></table></figure><h2 id="5-7-资源日志查看"><a href="#5-7-资源日志查看" class="headerlink" title="5.7 资源日志查看"></a>5.7 资源日志查看</h2><p>查看pod的指定容器的日志</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">kubectl logs myapp-pod -c  <span class="hljs-keyword">init</span>-myservice<br></code></pre></td></tr></table></figure><h2 id="5-8-编辑资源清单"><a href="#5-8-编辑资源清单" class="headerlink" title="5.8 编辑资源清单"></a>5.8 编辑资源清单</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">edit</span> pod myapp-pod<br></code></pre></td></tr></table></figure><h2 id="5-9-获取资源的api版本"><a href="#5-9-获取资源的api版本" class="headerlink" title="5.9 获取资源的api版本"></a>5.9 获取资源的api版本</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">kubectl explain pod</span><br></code></pre></td></tr></table></figure><h2 id="5-10-获取已创建pod的yaml"><a href="#5-10-获取已创建pod的yaml" class="headerlink" title="5.10 获取已创建pod的yaml"></a>5.10 获取已创建pod的yaml</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">kubectl <span class="hljs-built_in">get</span> pod lifecycle-<span class="hljs-built_in">demo</span> -o yaml<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>kubectl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s资源清单及常用字段</title>
    <link href="/2021/07/24/kubernetes%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B8%8E%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/07/24/kubernetes%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B8%8E%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="kubernetes发展史"><a href="#kubernetes发展史" class="headerlink" title="kubernetes发展史"></a><strong>kubernetes发展史</strong></h2><p>CNCF(云计算基金会) Borg google内部使用borg，后来发现dockerswarm使用广泛，所以让go开发工程师重写brog，成了k8s，1.0版本的时候捐给了CNCF。</p><blockquote><p>一开始docker和另外一家coreos公司，技术基本是共享的，docker火起来后，coreos也研发了一个类似docker的技术，最后coreos加入k8s生态构建，etcd就是coreos提供的捐赠给CNCF的</p></blockquote><h2 id="其它容器管理引擎："><a href="#其它容器管理引擎：" class="headerlink" title="其它容器管理引擎："></a>其它容器管理引擎：</h2><ul><li>podman 红帽RedHat开发的容器管理引擎</li><li>docker docker公司研发的docker，另外他还研发了container捐给CNCF</li><li>CNCF container，docker公司研发捐给CNCF的</li></ul><h2 id="docker和contaniner的关系："><a href="#docker和contaniner的关系：" class="headerlink" title="docker和contaniner的关系："></a><strong>docker和contaniner的关系：</strong></h2><ul><li>docker用到的运行接口是CRI，CRI是一种容器运行时的标准，可以把CRI想象成一个数据线接口，Python等调用docker是需要调用这个接口，遵循这个规范，这个规范就是CRI</li><li>container用到的接口是O-CRI，他是CRI做了些改动，O即OPEN</li></ul><blockquote><p>k8s加入CNCF后，kubectl用的是O-CRI接口，无法直接调用docker的CRI接口，CNCF是国际公司，不可能直接去迁就docker，所以在中间加了个垫片，类似于螺丝与螺母之间的垫片，后来k8s壮大超过docker后，不再迁就docker，在1.19版本中，移除了垫片。k8s调用docker的O-CRI接口，如果没有就不调了，docker忍气吞声发了声明，说支持O_CRI，反过来支持k8s。</p></blockquote><h2 id="k8s基本介绍"><a href="#k8s基本介绍" class="headerlink" title="k8s基本介绍"></a><strong>k8s基本介绍</strong></h2><p>kubernetes，简称K8s。k8s 这个缩写是因为 k 和 s 之间有八个字符的关系。 Google 在 2014 年开源了 Kubernetes 项目。</p><p>Kubernetes 建立在Google 大规模运行生产工作负载十几年经验的基础上， 结合了社区中最优秀的想法和实践。</p><p>是一个可移植的，可扩展的开源平台，用于管理云平台中多个主机上的容器化的应用，Kubernetes 的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes 提供了应用部署，规划，更新，维护的一种机制。</p><p>Kubernetes 是Google 开源的一个<strong>容器编排引擎</strong>，它支持<strong>自动化部署、大规模可伸缩、应用容器化管理</strong>。</p><p>在Kubernetes 中，可以创建多个容器，每个容器里面运行一个应用实例，然后通过内置的负载均衡策略，实现对这一组应用实例的管理、发现、访问，而这些细节都不需要人为的手工配置和处理。</p><h2 id="应用部署发展"><a href="#应用部署发展" class="headerlink" title="应用部署发展"></a><strong>应用部署发展</strong></h2><img src="/2021/07/24/kubernetes%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B8%8E%E4%BB%8B%E7%BB%8D/image-1024x388.png" class="" title="img"><p><strong>传统部署</strong></p><p>各个组织机构在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资源边界，这会导致资源分配问题。</p><p><strong>虚拟化部署时代</strong></p><p>允许在单个物理服务器的 CPU 上运行多个虚拟机（VM）。 虚拟化允许应用程序在 VM 之间隔离，并提供一定程度的安全，因为一个应用程序的信息 不能被另一应用程序随意访问。</p><p><strong>容器部署时代</strong></p><p>轻量级，容器类似于 VM，但是它们具有被放宽的隔离属性，可以在应用程序之间共享操作系统（OS）。 与 VM 类似，具有自己的文件系统、CPU、内存、进程空间等。 由于与基础架构分离，因此可以跨云和 OS 发行版本进行移植。</p><p><em>好处：</em></p><ul><li>敏捷应用程序的创建和部署</li><li>持续开发、集成和部署</li><li>关注开发与运维的分离</li><li>可观察性</li><li>跨开发、测试和生产的环境一致性</li><li>跨云和操作系统发行版本的可移植性</li><li>以应用程序为中心的管理</li><li>松散耦合、分布式、弹性、解放的微服务</li><li>资源隔离</li><li>资源利用</li></ul><h2 id="k8s的优势"><a href="#k8s的优势" class="headerlink" title="k8s的优势"></a><strong>k8s的优势</strong></h2><ul><li>开源</li><li>轻量级</li><li>弹性伸缩</li><li>负载均衡</li></ul><h2 id="K8s-功能"><a href="#K8s-功能" class="headerlink" title="K8s 功能"></a><strong>K8s 功能</strong></h2><p><strong>自动装箱</strong></p><p>基于容器对应用运行环境的资源配置要求自动部署应用容器</p><p><strong>自我修复(自愈能力)</strong></p><p>当容器失败时，会对容器进行重启当所部署的Node 节点有问题时，会对容器进行重新部署和重新调度当容器未通过监控检查时，会关闭此容器直到容器正常运行时，才会对外提供服务</p><p><strong>水平扩展</strong></p><p>通过简单的命令、用户UI 界面或基于CPU 等资源使用情况，对应用容器进行规模扩大或规模剪裁</p><p><strong>服务发现和负载均衡</strong></p><p>Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果进入容器的流量很大， Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。</p><p><strong>滚动更新</strong></p><p>可以根据应用的变化，对应用容器运行的应用，进行一次性或批量式更新</p><p><strong>版本回退</strong></p><p>可以根据应用部署情况，对应用容器运行的应用，进行历史版本即时回退</p><p><strong>密钥和配置管理</strong></p><p>在不需要重新构建镜像的情况下，可以部署和更新密钥和应用配置，类似热部署。</p><p><strong>存储编排</strong></p><p>自动实现存储系统挂载及应用，特别对有状态应用实现数据持久化非常重要存储系统可以来自于本地目录、网络存储(NFS、Gluster、Ceph 等)、公共云存储服务</p><p><strong>批处理</strong></p><p>提供一次性任务，定时任务；满足批量数据处理和分析的场景</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes控制器Job与CronJob</title>
    <link href="/2021/07/17/kubernetes%E6%8E%A7%E5%88%B6%E5%99%A8Job%E4%B8%8ECronJob/"/>
    <url>/2021/07/17/kubernetes%E6%8E%A7%E5%88%B6%E5%99%A8Job%E4%B8%8ECronJob/</url>
    
    <content type="html"><![CDATA[<h1 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h1><p>Job负责批处理任务,即仅执行一次的任务,它保证批处理任务的一个或多个Pod成功结束</p><p>特殊说明</p><ul><li>spec.template格式同Pod</li><li>RestartPolicy仅支持NeverdOnFailure</li><li>单个Pod时,默认Pod成功运行后Job即结束</li><li>.spec. completions 标志Job结束需要成功运行的Pod个数,默认为1</li><li>.spec. parallelism 标志并行运行的Pod的个数,默认为1</li><li>spec.activeDeadlineSeconds标志失败Pod的重试最大时间,超过这个时间不会继续重试</li></ul><p>例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Job</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pi</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">pi</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">pi</span><br>        <span class="hljs-attr">image: harborcloud.com/library/perl:</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;perl&quot;</span>,<span class="hljs-string">&quot;-Mbignum=bpi&quot;</span>,<span class="hljs-string">&quot;-wle&quot;</span>,<span class="hljs-string">&quot;print bpi(2000)&quot;</span>]<br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br></code></pre></td></tr></table></figure><h2 id="Spec"><a href="#Spec" class="headerlink" title="Spec"></a>Spec</h2><ul><li>spec.template格式同Pod</li><li>RestartPolicy仅支持Never或OnFailure</li><li>单个Pod时,默认Pod成功运行后Job即结束</li><li>spec. completions 标志Job结束需要成功运行的Pod个数,默认为1</li><li>spec. parallelism标志并行运行的Pod的个数,默认为1</li><li>spec.activeDeadlineSeconds标志失败Pod的重试最大时间,超过这个时间不会继续重试</li></ul><h1 id="CronJob"><a href="#CronJob" class="headerlink" title="CronJob"></a>CronJob</h1><p>CronJob管理基于时间的Job,即:</p><ul><li>在给定时间点只运行一次</li><li>周期性地在给定时间点运行</li></ul><p>使用条件:当前使用的Kubernetes 集群,版本&gt;=1.8 (对Cronjob)</p><p>典型的用法如下所示:<br>在给定的时间点调度Job运行<br>创建周期性运行的Job,例如:数据库备份、发送邮件</p><h2 id="CronJob-Spec"><a href="#CronJob-Spec" class="headerlink" title="CronJob Spec"></a>CronJob Spec</h2><ul><li>spec. schedule:调度,必需字段,指定任务运行周期,格式同Cron</li><li>spec. jobTemplate: Job模板,必需字段,指定需要运行的任务,格式同Job</li><li>spec. startingDeadlineSeconds:启动 Job 的期限(秒级别) ,该字段是可选的。如果因为任何原因而错过了被调度的时间,那么错过执行时间的Job将被认为是失败的。如果没有指定,则没有期限</li><li>spec. concurrencyPolicy：并发策略,该字段也是可选的。它指定了如何处理被CronJob创建的Job的并发执行。只允许指定下面策略中的一种:Allow (默认) :允许并发运行 Job；Forbid ：禁止并发运行,如果前一个还没有完成,则直接跳过下一个；Replace：取消当前正在运行的Job,用一个新的来替换。<br>注意：当前策略只能应用于同一个Cron Job 创建的Job。如果存在多个Cron Job,它们创建的Job之间总是允许并发运行。</li><li>spec. suspend：挂起,该字段也是可选的。如果设置为true,后续所有执行都会被挂起。它对已经开始执行的Job不起作用。默认值为false。</li><li>spec. successfullobsHistoryLimit.spec.failedJobsHistoryLimit ：历史限制,是可选的字段。它们指定了可以保留多少完成和失败的Job。默认情况下,它们分别设置为3和1，设置限制的值为e,相关类型的Job完成后将不会被保留。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CronJob</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hello</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">schedule:</span> <span class="hljs-string">&quot;*/1 * * * *&quot;</span><br>  <span class="hljs-attr">jobTemplate:</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">template:</span><br>        <span class="hljs-attr">spec:</span><br>          <span class="hljs-attr">containers:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">hello</span><br>            <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/busybox:v1.35</span><br>            <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">date;</span> <span class="hljs-string">echo</span> <span class="hljs-string">Hello</span> <span class="hljs-string">from</span> <span class="hljs-string">the</span> <span class="hljs-string">Kubernetes</span> <span class="hljs-string">cluster</span><br>          <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">OnFailure</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>job</tag>
      
      <tag>cronjob</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RC与RS与Deployment关联</title>
    <link href="/2021/07/16/RC%E4%B8%8ERS%E4%B8%8EDeployment%E5%85%B3%E8%81%94/"/>
    <url>/2021/07/16/RC%E4%B8%8ERS%E4%B8%8EDeployment%E5%85%B3%E8%81%94/</url>
    
    <content type="html"><![CDATA[<h1 id="RC"><a href="#RC" class="headerlink" title="RC"></a>RC</h1><p>RC (ReplicationController )主要的作用就是用来确保容器应用的副本数始终保持在用户定义的副本数。即如果有容器异常退出,会自动创建新的Pod来替代:而如果异常多出来的容器也会自动回收</p><p>Kubernetes 官方建议使用RS (ReplicaSet)替代RC (ReplicationController)进行部署,RS跟RC没有本质的不同,只是名字不一样,并且RS支持集合式的selector</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ReplicaSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">frontend</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">php-redis</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">gcr.io/google_samples/gb-frontend:v3</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GET_HOSTS_FROM</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">dns</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">88</span><br></code></pre></td></tr></table></figure><p>操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 data5]# kubectl <span class="hljs-keyword">create</span> <span class="hljs-operator">-</span>f rs.yaml <br>[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 data5]# kubectl <span class="hljs-keyword">get</span> pod <span class="hljs-operator">-</span>o wide<br>NAME             READY   STATUS    RESTARTS   AGE   IP           NODE         NOMINATED NODE   READINESS GATES<br>frontend<span class="hljs-operator">-</span>dflfh   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>m   <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.6</span>   k8s<span class="hljs-operator">-</span>node02   <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>frontend<span class="hljs-operator">-</span>vnjfd   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>m   <span class="hljs-number">10.244</span><span class="hljs-number">.1</span><span class="hljs-number">.9</span>   k8s<span class="hljs-operator">-</span>node01   <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>frontend<span class="hljs-operator">-</span>x9kfr   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>m   <span class="hljs-number">10.244</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>   k8s<span class="hljs-operator">-</span>node01   <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>修改label过程</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master01 data5]# kubectl <span class="hljs-built_in">get</span> pod --show-labels<br>NAME             READY   STATUS              RESTARTS   AGE    LABELS<br>frontend-dflfh   0/1     ContainerCreating   0          109s   <span class="hljs-attribute">tier</span>=frontend<br>frontend-vnjfd   0/1     ContainerCreating   0          109s   <span class="hljs-attribute">tier</span>=frontend<br>frontend-x9kfr   0/1     ContainerCreating   0          109s   <span class="hljs-attribute">tier</span>=frontend<br>[root@k8s-master01 data5]# kubectl label pod frontend-vnjfd <span class="hljs-attribute">tier</span>=frontend1 --overwrite<br>pod/frontend-vnjfd labeled<br>[root@k8s-master01 data5]# kubectl <span class="hljs-built_in">get</span> pod --show-labels<br>NAME             READY   STATUS    RESTARTS   AGE   LABELS<br>frontend-dflfh   1/1     Running   0          15m   <span class="hljs-attribute">tier</span>=frontend<br>frontend-vnjfd   1/1     Running   0          15m   <span class="hljs-attribute">tier</span>=frontend1<br>frontend-x9kfr   1/1     Running   0          15m   <span class="hljs-attribute">tier</span>=frontend<br>frontend-zqxxj   1/1     Running   0          40s   <span class="hljs-attribute">tier</span>=frontend<br></code></pre></td></tr></table></figure><p>结论：当label修改为frontend1后，rs将会创建一个新的pod，因为rs通过label控制pod，当其中一个pod的label修改了，rs就会自动创建一个</p><p>将pod的label修改回frontend：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master01 data5]# kubectl label pod frontend-vnjfd <span class="hljs-attribute">tier</span>=frontend --overwrite <br>pod/frontend-vnjfd labeled<br>[root@k8s-master01 data5]# kubectl <span class="hljs-built_in">get</span> pod --show-labels                             <br>NAME             READY   STATUS    RESTARTS   AGE   LABELS<br>frontend-dflfh   1/1     Running   0          17m   <span class="hljs-attribute">tier</span>=frontend<br>frontend-vnjfd   1/1     Running   0          17m   <span class="hljs-attribute">tier</span>=frontend<br>frontend-x9kfr   1/1     Running   0          17m   <span class="hljs-attribute">tier</span>=frontend<br></code></pre></td></tr></table></figure><p>结论：rs会自动的缩减pod，将上面新增的pod去掉。</p><h1 id="RS-与Deployment-的关联"><a href="#RS-与Deployment-的关联" class="headerlink" title="RS 与Deployment 的关联"></a>RS 与Deployment 的关联</h1><img src="/2021/07/16/RC%E4%B8%8ERS%E4%B8%8EDeployment%E5%85%B3%E8%81%94/1657973507960.png" class="" width="1657973507960"><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><p>Deployment为Pod和ReplicaSet提供了一个声明式定义(declarative)方法,用来替代以前的ReplicationController 来方便的管理应用。典型的应用场景包括:</p><ul><li>定义Deployment来创建Pod和ReplicaSet</li><li>滚动升级和回滚应用</li><li>扩容和缩容</li><li>暂停和继续Deployment</li></ul><h2 id="1、部署一个简单的Nginx应用"><a href="#1、部署一个简单的Nginx应用" class="headerlink" title="1、部署一个简单的Nginx应用"></a>1、部署一个简单的Nginx应用</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.7.9</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">88</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">create</span> <span class="hljs-string">-f</span> <span class="hljs-string">nginx-deployment.yaml</span> <span class="hljs-string">-record</span><br><span class="hljs-comment"># --record参数可以记录命令,我们可以很方便的查看每次revision的变化</span><br></code></pre></td></tr></table></figure><h2 id="2、扩容"><a href="#2、扩容" class="headerlink" title="2、扩容"></a>2、扩容</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@k8s-master01</span> data5]<span class="hljs-comment"># kubectl scale deployment nginx-deployment --replicas 10</span><br>[root<span class="hljs-meta">@k8s-master01</span> data5]<span class="hljs-comment"># kubectl get pod -o wide</span><br>NAME                                READY   STATUS    RESTARTS   AGE     IP            NODE         NOMINATED NODE   READINESS GATES<br>nginx-deployment-56bd657787-4qvb6   1/1     Running   0          17m     10.244.1.11   k8s-node01   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-777rm   1/1     Running   0          17m     10.244.1.10   k8s-node01   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-78hq6   1/1     Running   0          2m36s   10.244.2.13   k8s-node02   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-86wzj   1/1     Running   0          2m36s   10.244.2.11   k8s-node02   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-98tn6   1/1     Running   0          2m36s   10.244.1.12   k8s-node01   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-9wnvc   1/1     Running   0          2m36s   10.244.1.13   k8s-node01   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-n5b9r   1/1     Running   0          2m36s   10.244.2.14   k8s-node02   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-phd6z   1/1     Running   0          2m36s   10.244.1.14   k8s-node01   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-rdzst   1/1     Running   0          2m36s   10.244.2.12   k8s-node02   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-xbfqr   1/1     Running   0          9m4s    10.244.2.10   k8s-node02   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、如果集群支持horizontal-pod-autoscaling-的话-还可以为Deployment设置自动扩展"><a href="#3、如果集群支持horizontal-pod-autoscaling-的话-还可以为Deployment设置自动扩展" class="headerlink" title="3、如果集群支持horizontal pod autoscaling 的话,还可以为Deployment设置自动扩展"></a>3、如果集群支持horizontal pod autoscaling 的话,还可以为Deployment设置自动扩展</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl autoscale deployment nginx-deployment <span class="hljs-attribute">--min</span>=10 <span class="hljs-attribute">--max</span>=15 <span class="hljs-attribute">--cpu-percent</span>=80<br></code></pre></td></tr></table></figure><h2 id="4、更新镜像也比较简单"><a href="#4、更新镜像也比较简单" class="headerlink" title="4、更新镜像也比较简单"></a>4、更新镜像也比较简单</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">set</span> image deployment/nginx-deployment <span class="hljs-attribute">nginx</span>=harborcloud.com/library/nginx:1.9.1<br></code></pre></td></tr></table></figure><h2 id="5、回滚"><a href="#5、回滚" class="headerlink" title="5、回滚"></a>5、回滚</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@k8s-master01 data5]<span class="hljs-comment"># kubectl rollout undo deployment/nginx-deployment</span><br>deployment.apps/nginx-deployment rolled <span class="hljs-keyword">back</span><br></code></pre></td></tr></table></figure><h2 id="6、删除deployment"><a href="#6、删除deployment" class="headerlink" title="6、删除deployment"></a>6、删除deployment</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">kubectl <span class="hljs-keyword">delete</span> -f nginx-deployment.yaml <br></code></pre></td></tr></table></figure><h1 id="更新Deployment"><a href="#更新Deployment" class="headerlink" title="更新Deployment"></a>更新Deployment</h1><p>假如我们现在想要让nginx pod使用nginx:1.9.1的镜像来代替原来的nginx:1.7.9的镜像</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-built_in">set</span> image deployment/nginx-deployment <span class="hljs-attribute">nginx</span>=harborcloud.com/library/nginx:1.9.1<br></code></pre></td></tr></table></figure><p>可以使用 edit 命令来编辑Deployment</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-built_in">edit</span> deployment/nginx-deployment<br></code></pre></td></tr></table></figure><p>查看更新记录</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@k8s-master01</span> data5]<span class="hljs-comment"># kubectl rollout history deployment nginx-deployment</span><br>deployment.apps/nginx-deployment <br>REVISION  CHANGE-CAUSE<br>1         <span class="hljs-variable">&lt;none&gt;</span><br>2         <span class="hljs-variable">&lt;none&gt;</span><br></code></pre></td></tr></table></figure><p>查看rollout的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl rollout status deployment/nginx-deployment</span><br></code></pre></td></tr></table></figure><p>查看历史RS</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-built_in">get</span> rs<br></code></pre></td></tr></table></figure><p>回滚到指定版本 </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl rollout undo deployment nginx-deployment <span class="hljs-attribute">--to-revision</span>=2<br></code></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@k8s-master01</span> data5]<span class="hljs-comment"># kubectl rollout history deployment nginx-deployment</span><br>deployment.apps/nginx-deployment <br>REVISION  CHANGE-CAUSE<br>2         <span class="hljs-variable">&lt;none&gt;</span><br>3         <span class="hljs-variable">&lt;none&gt;</span><br><br>[root<span class="hljs-meta">@k8s-master01</span> data5]<span class="hljs-comment"># kubectl rollout undo deployment nginx-deployment --to-revision=2</span><br>deployment.apps/nginx-deployment rolled back<br>[root<span class="hljs-meta">@k8s-master01</span> data5]<span class="hljs-comment"># kubectl rollout history deployment nginx-deployment             </span><br>deployment.apps/nginx-deployment <br>REVISION  CHANGE-CAUSE<br>3         <span class="hljs-variable">&lt;none&gt;</span><br>4         <span class="hljs-variable">&lt;none&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Deployment-更新策略"><a href="#Deployment-更新策略" class="headerlink" title="Deployment 更新策略"></a>Deployment 更新策略</h1><p>Deployment 可以保证在升级时只有一定数量的Pod 是 down的。默认的,它会确保至少有比期望的Pod数量少一个是up状态(最多一个不可用)</p><p>Deployment同时也可以确保只创建出超过期望数量的一定数量的Pod。默认的,它会确保最多比期望的Pod数量多一个的Pod是up的(最多1个surge)<br>未来的Kuberentes版本中,将从1-1变成25%-25%</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>kubectl describe deployments<br></code></pre></td></tr></table></figure><h1 id="Rollover-多个rollout并行"><a href="#Rollover-多个rollout并行" class="headerlink" title="Rollover (多个rollout并行)"></a>Rollover (多个rollout并行)</h1><p>假如您创建了一个有5个niginx:1.7.9 replica的Deployment,但是当还只有3个nginx:1.7.9的replica创建出来的时候您就开始更新含有5个 nginx:1.9.1 replica的Deployment.在这种情况下, Deployment会立即杀掉已创建的3个nginx:1.7.9的Pod,并开始创建nginx:1.9.1的Pod。它不会等到所有的5个nginx:1.7.9的<br>Pod都创建完成后才开始改变航道</p><h1 id="回退Deployment"><a href="#回退Deployment" class="headerlink" title="回退Deployment"></a>回退Deployment</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl <span class="hljs-built_in">set</span> image deployment/nginx-deployment nginx=harborcloud.com/library/nginx:1.91<br>kubectl rollout status deployments nginx-deployment <span class="hljs-comment">## 回退状态</span><br>kubectl get pods<br>kubectl rollout <span class="hljs-built_in">history</span> deployment/nginx-deployment <span class="hljs-comment">## 历史 版本 </span><br>kubectl rollout undo deployment/nginx-deployment <span class="hljs-comment">##回退版本</span><br>kubectl rollout undo deployment/nginx-deployment --to-revision=2 <span class="hljs-comment">## 可以使用--revision参数指定某个历史版本</span><br>kubectl rollout pause deployment/nginx-deployment<span class="hljs-comment">## 暂停deployment更新</span><br></code></pre></td></tr></table></figure><p>您可以用 kubectl rollout status Deployment 是否完成。如果 rollout 成完成, kubectl rollout status将返回一个0值的Exit Code</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl rollout status deploy/nginx</span><br></code></pre></td></tr></table></figure><h1 id="清理Policy"><a href="#清理Policy" class="headerlink" title="清理Policy"></a>清理Policy</h1><p>您可以通过设置.spec. revisonHistoryLimit项来指定deployment 最多保留多少 revision历史记录。默认的会保留所有的revision;如果将该项设置为0, Deployment就不允许回退了</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes控制器DaemonSet</title>
    <link href="/2021/07/13/kubernetes%E6%8E%A7%E5%88%B6%E5%99%A8DaemonSet/"/>
    <url>/2021/07/13/kubernetes%E6%8E%A7%E5%88%B6%E5%99%A8DaemonSet/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是DaemonSet？"><a href="#什么是DaemonSet？" class="headerlink" title="什么是DaemonSet？"></a>什么是DaemonSet？</h1><p>DaemonSet 确保全部(或者一些) Node上运行一个Pod的副本。当有Node加入集群时,也会为他们新增一个Pod.当有Node从集群移除时,这些Pod也会被回收。删除DaemonSet将会删除它创建的所有Pod。</p><p>DaemonSet 的一些典型用法：</p><ul><li>在每个节点上运行集群守护进程，集群存储daemon,例如在每个Node上运行glusterd,ceph。</li><li>在每个节点上运行日志收集守护进程，例如fluentd,logstash。</li><li>在每个节点上运行监控守护进程，例如Prometheus Node Exporter, collectd, Datadog 代理、New Relic 代理,或 Ganglia gmond</li></ul><p>一种简单的用法是为每种类型的守护进程在所有的节点上都启动一个 DaemonSet。 一个稍微复杂的用法是为同一种守护进程部署多个 DaemonSet；每个具有不同的标志， 并且对不同硬件类型具有不同的内存、CPU 要求。 </p><h1 id="编写-DaemonSet-Spec"><a href="#编写-DaemonSet-Spec" class="headerlink" title="编写 DaemonSet Spec"></a>编写 DaemonSet Spec</h1><p>简单DaemonSet资源配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">deamonset-example</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">daemonset</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">deamonset-example</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">deamonset-example</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">daemonset-example</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br></code></pre></td></tr></table></figure><p>详细 DaemonSet 资源配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-elasticsearch</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">fluentd-logging</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-elasticsearch</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-elasticsearch</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">tolerations:</span><br>      <span class="hljs-comment"># 这些容忍度设置是为了让该守护进程集在控制平面节点上运行</span><br>      <span class="hljs-comment"># 如果你不希望自己的控制平面节点运行 Pod，可以删除它们</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">node-role.kubernetes.io/control-plane</span><br>        <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>        <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">node-role.kubernetes.io/master</span><br>        <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>        <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-elasticsearch</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">quay.io/fluentd_elasticsearch/fluentd:v2.5.2</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlog</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/log</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlibdockercontainers</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/docker/containers</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlog</span><br>        <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/var/log</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlibdockercontainers</span><br>        <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/docker/containers</span><br></code></pre></td></tr></table></figure><h2 id="仅在某些节点上运行-Pod"><a href="#仅在某些节点上运行-Pod" class="headerlink" title="仅在某些节点上运行 Pod"></a>仅在某些节点上运行 Pod</h2><p>如果指定了 .spec.template.spec.nodeSelector，DaemonSet 控制器将在能够与 Node 选择算符 匹配的节点上创建 Pod。 类似这种情况，可以指定 .spec.template.spec.affinity，之后 DaemonSet 控制器 将在能够与节点亲和性 匹配的节点上创建 Pod。 如果根本就没有指定，则 DaemonSet Controller 将在所有节点上创建 Pod</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>daemonset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes基础控制器</title>
    <link href="/2021/06/30/kubernetes%E5%9F%BA%E7%A1%80%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    <url>/2021/06/30/kubernetes%E5%9F%BA%E7%A1%80%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p><strong>ReplicationController</strong></p><p>ReplicationController 用来确保容器应用的副本数始终保持在用户定义的副本数,即如果有容器异常退出，会自动创建新的Pod来替代；而如果异常多出来的容器也会自动回收。<br>在新版本的Kubernetes 中建议使用ReplicaSet取代ReplicationController。</p><p><strong>ReplicaSet</strong></p><p>ReplicaSet 和ReplicationController 没有本质的不同,只是名字不一样,并且ReplicaSet支持集合式的selector<br>虽然ReplicaSet 可以独立使用，但一般还是建议使用Deployment来自动管理ReplicaSet ，这样就无需担心跟其他机制的不兼容问题(比如ReplicaSet不支持rolling-update，但Deployment 支持)</p><p><strong>Deployment</strong></p><p>Deployment Pod和ReplicaSet提供了一个声明式定义(declarative)方法,用来替代以前的ReplicationController来方便的管理应用。</p><p>Deployment 是Kubenetes v1.2 引入的新概念，引入的目的是为了更好的解决Pod 的编排问题，Deployment 内部使用了Replica Set 来实现。</p><p>典型的应用场景包括：</p><ul><li>定义Deployment 来创建Pod和ReplicaSet</li><li>滚动升级和回滚应用</li><li>扩容和缩容</li><li>暂停和继续Deployment</li></ul><p><strong>Horizontal Pod Autoscaling</strong></p><p>Horizontal Pod Autoscaling 仅适用于Deployment和ReplicaSet ,在V1版本中仅支持根据Pod的CPU利用率扩所容,在vlalpha版本中,支持根据内存和用户自定义的metric扩缩容。</p><p><strong>StatefulSet</strong></p><p>StatefulSet是为了解决有状态服务的问题(对应Deployments和ReplicaSets是为无状态服务而设计) ,其应用场景包括:</p><ul><li>稳定的持久化存储,即Pod重新调度后还是能访问到相同的持久化数据,基于PVC来实现</li><li>稳定的网络标志,即Pod重新调度后其PodName和HostNameT变,基于Headless Service(即没有Cluster IP的Service)来实现</li><li>有序部署,有序扩展,即Pod是有顺序的,在部署或者扩展的时候要依据定义的顺序依次依次进行(即从0到N-1,在下一个Pod运行之前所有之前的Pod必须都是Running和Ready状态)基于init containers来实现</li><li>有序收缩,有序删除(即从N-1到0)</li></ul><p><strong>DaemonSet</strong></p><p>DaemonSet确保全部(或者一些)Node上运行一个Pod的副本。当有Node加入集群时,也会为他们新增一个Pod。当有Node从集群移除时,这些Pod也会被回收。删除DaemonSet将会删除它创建的所有Pod<br>使用DaemonSet的一些典型用法:</p><ul><li>运行集群存储daemon,例如在每个Node上运行 glusterd,ceph.</li><li>在每个Node上运行日志收集daemon,例如fluentd、 logstash</li><li>在 Node上运行监控 daemon,例如Prometheus Node Exporter</li></ul><p><strong>Job</strong></p><p>Job负责批处理任务,即仅执行一次的任务,它保证批处理任务的一个或多个Pod成功结束</p><p>**Cron Job **</p><p>管理基于时间的Job,即:</p><ul><li>在给定时间点只运行一次</li><li>周期性地在给定时间点运行</li></ul>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubernetes</tag>
      
      <tag>控制器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何用hexo在github上搭建自己的博客</title>
    <link href="/2019/01/23/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2019/01/23/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="一、github仓库创建"><a href="#一、github仓库创建" class="headerlink" title="一、github仓库创建"></a>一、github仓库创建</h1><p>在github创建仓库，仓库名称为[username].github.io。</p><img src="/2019/01/23/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20220923174506204.png" class="" title="image-20220923174506204"><p>然后选择设置</p><img src="/2019/01/23/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20220923175440656.png" class="" title="image-20220923175440656"><p>设置网站的访问host并且制定分支为主分支</p><img src="/2019/01/23/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20220923175557661.png" class="" title="image-20220923175557661"><p>配置git免登录认证信息</p><img src="/2019/01/23/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20220923180413762.png" class="" title="image-20220923180413762"><h1 id="二、hexo使用"><a href="#二、hexo使用" class="headerlink" title="二、hexo使用"></a>二、hexo使用</h1><h2 id="1-1-安装hexo"><a href="#1-1-安装hexo" class="headerlink" title="1.1 安装hexo"></a>1.1 安装hexo</h2><p>全局安装hexo</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g hexo<br><span class="hljs-comment"># 发布支持</span><br>npm <span class="hljs-keyword">install</span> --save hexo-deployer-git<br><br></code></pre></td></tr></table></figure><h2 id="1-2-创建hexo项目并且推到github上"><a href="#1-2-创建hexo项目并且推到github上" class="headerlink" title="1.2 创建hexo项目并且推到github上"></a>1.2 创建hexo项目并且推到github上</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 创建文件夹 [username].github.io</span><br>mkdir [username]<span class="hljs-string">.github.io</span><br><span class="hljs-comment"># 执行hexo初始化操作</span><br>hexo init<br><span class="hljs-comment"># 将 github [username].github.io的.git的文件夹放入项目中，指定分支developer或其它分支作为hexo项目源码存放分支</span><br><br><span class="hljs-comment"># 构建静态页面</span><br>hexo generate<br><br><span class="hljs-comment"># 发布 到master</span><br>hexo <span class="hljs-keyword">deploy</span><br></code></pre></td></tr></table></figure><h2 id="1-3-hexo-配置修改"><a href="#1-3-hexo-配置修改" class="headerlink" title="1.3 hexo 配置修改"></a>1.3 hexo 配置修改</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">青叶水间</span> <span class="hljs-bullet">-</span> <span class="hljs-string">一个IT技术文章分享博客</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">keywords:</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">leellun</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">## 主题配置，我这里用的fluid主题</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <br><br><span class="hljs-comment"># 发布信息 git，地址是repo配置，分支branch ，需要发布必须配置了git的ssh-gen</span><br><span class="hljs-comment"># 这里还需要安装了 插件hexo-deployer-git，npm install --save hexo-deployer-git</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:leellun/leellun.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h2 id="1-4-markdown图片支持"><a href="#1-4-markdown图片支持" class="headerlink" title="1.4 markdown图片支持"></a>1.4 markdown图片支持</h2><p>修改_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>安装依赖支持：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">npm install hexo-<span class="hljs-built_in">image</span>-link --<span class="hljs-built_in">save</span><br></code></pre></td></tr></table></figure><h2 id="1-5-主题添加"><a href="#1-5-主题添加" class="headerlink" title="1.5 主题添加"></a>1.5 主题添加</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-theme-fluid <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>主题配置：_config.fluid.yml</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">favicon:</span> <span class="hljs-keyword">/img/</span>leaf_icon.png<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">navbar:</span><br>  <span class="hljs-meta"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span><br>  <span class="hljs-meta"># The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config</span><br><span class="hljs-symbol">  blog_title:</span> <span class="hljs-string">&quot;青叶水间&quot;</span><br><span class="hljs-symbol">index:</span><br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><span class="hljs-symbol">  slogan:</span><br><span class="hljs-symbol">    enable:</span> true<br><br>    <span class="hljs-meta"># 为空则按 hexo config.subtitle 显示</span><br>    <span class="hljs-meta"># If empty, text based on `subtitle` in hexo config</span><br><span class="hljs-symbol">    text:</span> <span class="hljs-string">&quot;一个Java、SpringBoot、SpringCloud、服务器等文章分享博客网站&quot;</span><br><span class="hljs-symbol">post:</span><br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><span class="hljs-symbol">archive:</span><br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><span class="hljs-symbol">category:</span><br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><span class="hljs-symbol">tag:</span><br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><span class="hljs-symbol">about:</span><br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><span class="hljs-symbol">page:</span><br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><span class="hljs-symbol">page404:</span><br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">links:</span><br><span class="hljs-symbol">  enable:</span> true<br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><br><span class="hljs-meta">#---------------------------</span><br><span class="hljs-meta"># 页脚</span><br><span class="hljs-meta"># Footer</span><br><span class="hljs-meta">#---------------------------</span><br><span class="hljs-symbol">footer:</span><br>  <span class="hljs-meta"># 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题</span><br>  <span class="hljs-meta"># HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people</span><br><span class="hljs-symbol">  content:</span> &#x27;<br>    <span class="hljs-params">&lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;</span><span class="hljs-params">&lt;span&gt;</span>Hexo<span class="hljs-params">&lt;/span&gt;</span><span class="hljs-params">&lt;/a&gt;</span><br>    <span class="hljs-params">&lt;i class=&quot;iconfont icon-love&quot;&gt;</span><span class="hljs-params">&lt;/i&gt;</span><br>    <span class="hljs-params">&lt;a href=&quot;https://github.com/leellun&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;</span><span class="hljs-params">&lt;span&gt;</span>我的github<span class="hljs-params">&lt;/span&gt;</span><span class="hljs-params">&lt;/a&gt;</span><br></code></pre></td></tr></table></figure><h1 id="三、页面与文章"><a href="#三、页面与文章" class="headerlink" title="三、页面与文章"></a>三、页面与文章</h1><p>创建页面：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-meta"># 创建about页面</span><br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></td></tr></table></figure><p>创建文章：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>文章头信息：</p><table><thead><tr><th>Data</th><th>Description</th></tr></thead><tbody><tr><td><code>title</code></td><td>标题</td></tr><tr><td><code>slug</code></td><td>地址</td></tr><tr><td><code>layout</code></td><td>布局</td></tr><tr><td><code>path</code></td><td>路径。Hexo默认情况下基于new_post_path设置构建post路径。</td></tr><tr><td><code>date</code></td><td>日期 默认当前</td></tr><tr><td>tags</td><td>标签</td></tr><tr><td>categories</td><td>类别</td></tr><tr><td>author</td><td>作者</td></tr></tbody></table><p>更多：<a href="https://hexo.io/docs/variables.html">https://hexo.io/docs/variables.html</a></p><p>启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>构建静态文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>推送到github，提供网页浏览：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>这里是我的博客网站源码配置（deveploer分支）：<a href="https://github.com/leellun/leellun.github.io">https://github.com/leellun/leellun.github.io</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
