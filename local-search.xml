<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>rabbitmq常见使用场景</title>
    <link href="/2022/09/28/%E5%90%8E%E7%AB%AF/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2022-09-28-rabbitmq%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <url>/2022/09/28/%E5%90%8E%E7%AB%AF/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2022-09-28-rabbitmq%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>应用场景</category>
      
      <category>mq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rabbitmq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高并发redis分布式锁实战进阶之路</title>
    <link href="/2022/09/27/nosql/redis/2022-09-27-%E9%AB%98%E5%B9%B6%E5%8F%91redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E6%88%98%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/"/>
    <url>/2022/09/27/nosql/redis/2022-09-27-%E9%AB%98%E5%B9%B6%E5%8F%91redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E6%88%98%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="1-分布式锁基础方案"><a href="#1-分布式锁基础方案" class="headerlink" title="1 分布式锁基础方案"></a>1 分布式锁基础方案</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@Override<br><span class="hljs-built_in">public</span> String payment(String account, <span class="hljs-type">int</span> <span class="hljs-type">money</span>, String orderId) &#123;<br>    //redis 核心原理还是setnx orderId TokenLock 命令方式<br>    <span class="hljs-type">boolean</span> <span class="hljs-keyword">lock</span> = redisTemplate.opsForValue().setIfAbsent(orderId, &quot;lock&quot;);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">lock</span>) &#123;<br>        <span class="hljs-keyword">return</span> &quot;锁具被上锁&quot;;<br>    &#125;<br>    try &#123;<br>        <span class="hljs-type">int</span> balance = <span class="hljs-type">Integer</span>.valueOf(redisTemplate.opsForValue().<span class="hljs-keyword">get</span>(&quot;balance&quot;));<br>        <span class="hljs-keyword">if</span>(balance-<span class="hljs-type">money</span>&gt;<span class="hljs-number">0</span>)&#123;<br>            redisTemplate.opsForValue().<span class="hljs-keyword">set</span>(&quot;balance&quot;,String.valueOf(balance-<span class="hljs-type">money</span>));<br>            <span class="hljs-keyword">return</span> &quot;扣减成功&quot;;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> &quot;扣减失败，金额不足&quot;;<br>        &#125;<br>    &#125; finally &#123;<br>        redisTemplate.<span class="hljs-keyword">delete</span>(orderId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>基础redis的实现方案原理：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">setnx orderId <span class="hljs-keyword">lock</span><br></code></pre></td></tr></table></figure><p>问题一：通过redis的命令setnx来实现基础分布式锁，但未设置过期时间，redis 宕机或者代码异常导致订单锁未被成功释放，导致订单支付不能重新支付。</p><img src="/2022/09/27/nosql/redis/2022-09-27-%E9%AB%98%E5%B9%B6%E5%8F%91redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E6%88%98%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/1664289299857.png" class="" width="1664289299857"><h1 id="2-基础方案优化"><a href="#2-基础方案优化" class="headerlink" title="2 基础方案优化"></a>2 基础方案优化</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 虽然payment2解决了redis宕机或者异常导致锁不能释放的问题，但还有其它问题，</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">payment2</span><span class="hljs-params">(String account, <span class="hljs-type">int</span> money, String orderId)</span> &#123;<br>    <span class="hljs-comment">//redis 核心原理还是setnx orderId TokenLock 命令方式</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(orderId, <span class="hljs-string">&quot;lock&quot;</span>,<span class="hljs-number">30</span>, TimeUnit.SECONDS);<br>    <span class="hljs-keyword">if</span> (!lock) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;锁具被上锁&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> Integer.valueOf(redisTemplate.opsForValue().get(<span class="hljs-string">&quot;balance&quot;</span>));<br>        <span class="hljs-keyword">if</span>(balance-money&gt;<span class="hljs-number">0</span>)&#123;<br>            redisTemplate.opsForValue().set(<span class="hljs-string">&quot;balance&quot;</span>,String.valueOf(balance-money));<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;扣减成功&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;扣减失败，金额不足&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        redisTemplate.delete(orderId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>redis命令执行：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">setnx <span class="hljs-keyword">orderId </span>lock<br>expire <span class="hljs-keyword">orderId </span>时间<br></code></pre></td></tr></table></figure><p>虽然加上了过期时间，但是如果在特殊场景下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> Integer.valueOf(redisTemplate.opsForValue().get(<span class="hljs-string">&quot;balance&quot;</span>));<br><span class="hljs-keyword">if</span>(balance-money&gt;<span class="hljs-number">0</span>)&#123;<br>    redisTemplate.opsForValue().set(<span class="hljs-string">&quot;balance&quot;</span>,String.valueOf(balance-money));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;扣减成功&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;扣减失败，金额不足&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>问题二：线程一执行时间过长，导致分布式锁设置的key失效，而线程二进入执行创建了一把新的分布式锁，而这个时候线程一执行完成通过finally中的代码删除分布式锁，然后这个时候的锁已经不是之前线程一创建的锁了。所以在高并发中，如果出现一个任务执行时间超过30s，redis锁出现自动过期，就会导致：</p><p>线程1删除线程2的锁，线程2删除线程3的锁，线程3删除线程4的锁，线程n-1删除线程n的锁，可能会出现 同一把锁中执行了x个任务（出现锁过期数+1）</p><img src="/2022/09/27/nosql/redis/2022-09-27-%E9%AB%98%E5%B9%B6%E5%8F%91redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E6%88%98%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/1664289566134.png" class="" width="1664289566134"><h1 id="3-继续优化"><a href="#3-继续优化" class="headerlink" title="3 继续优化"></a>3 继续优化</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">payment3</span><span class="hljs-params">(String account, <span class="hljs-type">int</span> money, String orderId)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(orderId, uuid, <span class="hljs-number">30</span>, TimeUnit.SECONDS);<br>    <span class="hljs-keyword">if</span> (!lock) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;锁具被上锁&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> Integer.valueOf(redisTemplate.opsForValue().get(<span class="hljs-string">&quot;balance&quot;</span>));<br>        <span class="hljs-keyword">if</span> (balance - money &gt; <span class="hljs-number">0</span>) &#123;<br>            redisTemplate.opsForValue().set(<span class="hljs-string">&quot;balance&quot;</span>, String.valueOf(balance - money));<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;扣减成功&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;扣减失败，金额不足&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (uuid.equals(redisTemplate.opsForValue().get(orderId))) &#123;<br>            redisTemplate.delete(orderId);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在payment2的基础上加入一个唯一的value，当删除当前锁的时候判断是否持有。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (uuid.equals(redisTemplate.opsForValue().get(orderId))) &#123;<br>                redisTemplate.delete(orderId);<br>            &#125;<br></code></pre></td></tr></table></figure><p>但还是不能保证，如果当执行redisTemplate.opsForValue().get(orderId)返回成功后，之前设置的分布式锁突然过期了，这个时候其它线程还是会涌入进来创建新锁，所以payment2出现的问题还是没有解决</p><h1 id="4-锁续期解决方案"><a href="#4-锁续期解决方案" class="headerlink" title="4 锁续期解决方案"></a>4 锁续期解决方案</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">payment4</span><span class="hljs-params">(String account, <span class="hljs-type">int</span> money, String orderId)</span> &#123;<br>    <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(orderId);<br>    <span class="hljs-keyword">try</span> &#123;<br>        lock.lock();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> Integer.valueOf(redisTemplate.opsForValue().get(<span class="hljs-string">&quot;balance&quot;</span>));<br>        <span class="hljs-keyword">if</span> (balance - money &gt; <span class="hljs-number">0</span>) &#123;<br>            redisTemplate.opsForValue().set(<span class="hljs-string">&quot;balance&quot;</span>, String.valueOf(balance - money));<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;扣减成功&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;扣减失败，金额不足&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里用到了redission的方案。</p><h1 id="5-redission的源码实现"><a href="#5-redission的源码实现" class="headerlink" title="5 redission的源码实现"></a>5 redission的源码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;T&gt; RFuture&lt;T&gt; <span class="hljs-title function_">tryLockInnerAsync</span><span class="hljs-params">(<span class="hljs-type">long</span> waitTime, <span class="hljs-type">long</span> leaseTime, TimeUnit unit, <span class="hljs-type">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, command,<br>            <span class="hljs-string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +<br>                    <span class="hljs-string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +<br>                    <span class="hljs-string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +<br>                    <span class="hljs-string">&quot;return nil; &quot;</span> +<br>                    <span class="hljs-string">&quot;end; &quot;</span> +<br>                    <span class="hljs-string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +<br>                    <span class="hljs-string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +<br>                    <span class="hljs-string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +<br>                    <span class="hljs-string">&quot;return nil; &quot;</span> +<br>                    <span class="hljs-string">&quot;end; &quot;</span> +<br>                    <span class="hljs-string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>,<br>            Collections.singletonList(getRawName()), unit.toMillis(leaseTime), getLockName(threadId));<br>&#125;<br></code></pre></td></tr></table></figure><p>具体执行的就是lua脚本，通过以上命令可以看出，</p><img src="/2022/09/27/nosql/redis/2022-09-27-%E9%AB%98%E5%B9%B6%E5%8F%91redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E6%88%98%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/1664290664102.png" class="" width="1664290664102"><p>源码：<a href="https://github.com/leellun/redis-clean.git">https://github.com/leellun/redis-clean.git</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java工程师学习路线图</title>
    <link href="/2022/09/27/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/2022-09-27-Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE/"/>
    <url>/2022/09/27/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/2022-09-27-Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>Java架构路线图</p><p><a href="https://www.processon.com/view/link/617be37ee0b34d7894fcf545#map">https://www.processon.com/view/link/617be37ee0b34d7894fcf545#map</a></p><p>面试视频+面试题和简历模板资料: </p><p><a href="https://pan.baidu.com/s/1V1cTOj2CGEv0h_Ue4WKlGA">https://pan.baidu.com/s/1V1cTOj2CGEv0h_Ue4WKlGA</a> 提取码: kgi6 </p><p>所有文档最新技术资料链接：</p><p><a href="https://pan.baidu.com/s/1S3SbGwR0XEn-E__z5Cis6w%E6%8F%90%E5%8F%96%E7%A0%81%EF%BC%9A73wr">https://pan.baidu.com/s/1S3SbGwR0XEn-E__z5Cis6w提取码：73wr</a></p><p>mysql课程学习资料总链接: </p><p><a href="https://pan.baidu.com/s/1pKfmE24KyzzzV5EjGwnjgw?pwd=x6c2">https://pan.baidu.com/s/1pKfmE24KyzzzV5EjGwnjgw?pwd=x6c2</a> 提取码: x6c2</p><p>mysql脑图</p><p><a href="https://www.processon.com/view/link/5fcdf9f5f346fb50b8351db0">https://www.processon.com/view/link/5fcdf9f5f346fb50b8351db0</a></p><p>Redis脑图点这个链接:</p><p> <a href="https://pan.baidu.com/s/1y12Q-5GE4gYs9HOzt9Fjug">https://pan.baidu.com/s/1y12Q-5GE4gYs9HOzt9Fjug</a> 提取码: g6wk</p><p>Mysql事务与锁机制原理以及阿里内部事务优化最佳实践】总视频+文档资料链接:</p><p><a href="https://pan.baidu.com/s/18LywyL99gs8or6cZep5L5w?pwd=xshi">https://pan.baidu.com/s/18LywyL99gs8or6cZep5L5w?pwd=xshi</a> 提取码: xshi </p><p>【BAT一线大厂生产环境分布式ID三高架构实战】回放+总资料链接: </p><p><a href="https://pan.baidu.com/s/1aJuFVOoOetBylm6sU5rrig?pwd=xshi">https://pan.baidu.com/s/1aJuFVOoOetBylm6sU5rrig?pwd=xshi</a> 提取码: xshi</p><p>Redis命令手册，思维导图，面试题合集链接: </p><p><a href="https://pan.baidu.com/s/1HktSeV8KceAE7PFvR78jUQ?pwd=q9ep">https://pan.baidu.com/s/1HktSeV8KceAE7PFvR78jUQ?pwd=q9ep</a> 提取码: q9ep</p><p>凤凰架构：构建可靠的大型分布式系统链接:</p><p> <a href="https://pan.baidu.com/s/1WgsOFZojJjMLUPBq8usvpw">https://pan.baidu.com/s/1WgsOFZojJjMLUPBq8usvpw</a> 提取码: 2wh7</p><p>Spring Boot底层核心s源码深入剖析视频+总资料文档链接:</p><p> <a href="https://pan.baidu.com/s/1p1qS0DDdCk6t7zVfL52sLw?pwd=xshi">https://pan.baidu.com/s/1p1qS0DDdCk6t7zVfL52sLw?pwd=xshi</a> 提取码: xshi</p><p>架构师如何开发一个自己的RPC框架<br>链接: <a href="https://pan.baidu.com/s/15rSPLrRM0nKD_38Q7yUoDQ">https://pan.baidu.com/s/15rSPLrRM0nKD_38Q7yUoDQ</a> 提取码: 2mxn</p><p>电商下单黄金链路Redis高并发分布式锁实战:</p><p> <a href="https://pan.baidu.com/s/1lt36tp0PGcOuxLC64kt_MA?pwd=xshi">https://pan.baidu.com/s/1lt36tp0PGcOuxLC64kt_MA?pwd=xshi</a> 提取码: xshi</p><p>阿里微服务最新视频+资料总链接: </p><p><a href="https://pan.baidu.com/s/1bnmPid694IMjgE8NJeC_og?pwd=xshi">https://pan.baidu.com/s/1bnmPid694IMjgE8NJeC_og?pwd=xshi</a> 提取码: xshi</p><p>【从面试角度分析电商下单链路高并发架构的坑+京东线上生产环境Redis高并发缓存架构实战】链接:</p><p><a href="https://pan.baidu.com/s/1jLqAv_FqlA-rIqYmtCkipw?pwd=xshi">https://pan.baidu.com/s/1jLqAv_FqlA-rIqYmtCkipw?pwd=xshi</a> 提取码: xshi</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>路线</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis常见使用场景</title>
    <link href="/2022/09/27/%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF/2022-09-28-redis%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <url>/2022/09/27/%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF/2022-09-28-redis%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="1、数据缓存"><a href="#1、数据缓存" class="headerlink" title="1、数据缓存"></a>1、数据缓存</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br><span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>    RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;String, Object&gt;();<br>    template.setConnectionFactory(factory);<br>    <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>    om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>    jackson2JsonRedisSerializer.setObjectMapper(om);<br>    <span class="hljs-type">StringRedisSerializer</span> <span class="hljs-variable">stringRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br><br>    <span class="hljs-comment">// key采用String的序列化方式</span><br>    template.setKeySerializer(stringRedisSerializer);<br><br>    <span class="hljs-comment">// hash的key也采用String的序列化方式</span><br>    template.setHashKeySerializer(stringRedisSerializer);<br><br>    <span class="hljs-comment">// value序列化方式采用jackson</span><br>    template.setValueSerializer(jackson2JsonRedisSerializer);<br><br>    <span class="hljs-comment">// hash的value序列化方式采用jackson</span><br>    template.setHashValueSerializer(jackson2JsonRedisSerializer);<br><br>    template.afterPropertiesSet();<br>    <span class="hljs-keyword">return</span> template;<br>&#125;<br></code></pre></td></tr></table></figure><p>设置序列化和反序列化，通过对key和value进行序列化存储和反序列化给应用程序。</p><h2 id="2、共享session"><a href="#2、共享session" class="headerlink" title="2、共享session"></a>2、共享session</h2><p>String 类型，因为 Redis 是分布式的独立服务，可以在多个应用之间共享</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-variable">&lt;dependency&gt;</span> <br> <span class="hljs-variable">&lt;groupId&gt;</span>org.springframework.session<span class="hljs-variable">&lt;/groupId&gt;</span> <br> <span class="hljs-variable">&lt;artifactId&gt;</span>spring-session-data-redis<span class="hljs-variable">&lt;/artifactId&gt;</span> <br><span class="hljs-variable">&lt;/dependency&gt;</span><span class="hljs-comment">#通过在启动类开启redissession支持</span><br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableRedisHttpSession</span>(maxInactiveIntervalInSeconds = <span class="hljs-number">1800</span>, flushMode = FlushMode.IMMEDIATE,redisNamespace = <span class="hljs-string">&quot;mall&quot;</span>)<br>public class AuthServerApplication &#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(AuthServerApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置redissession类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GulimallSessionConfig</span> &#123;<br>    <span class="hljs-comment">//配置一个默认的序列化处理器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">RedisSerializer</span>&lt;<span class="hljs-title class_">Object</span>&gt; <span class="hljs-title function_">springSessionDefaultRedisSerializer</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>();<br>    &#125;<br>    <span class="hljs-comment">//设置cookiename MALLSESSIONID，domain mall.com</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">CookieSerializer</span> <span class="hljs-title function_">cookieSerializer</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">DefaultCookieSerializer</span> serializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultCookieSerializer</span>();<br>        serializer.<span class="hljs-title function_">setCookieName</span>(<span class="hljs-string">&quot;MALLSESSIONID&quot;</span>);<br>        serializer.<span class="hljs-title function_">setDomainName</span>(<span class="hljs-string">&quot;mall.com&quot;</span>);<br>        <span class="hljs-keyword">return</span> serializer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：上面的依赖配置在每一个需要启动的服务都需要</p><h2 id="3、分布式锁"><a href="#3、分布式锁" class="headerlink" title="3、分布式锁"></a>3、分布式锁</h2><p>分布式锁有多种方式实现：</p><p>mysql方式</p><p>需要一个mysql表作为锁表，利用mysql的键的唯一性及insert的原子性，得到同一时刻，只会有一个线程插入相同的记录</p><p>zk方式</p><p>采取zk的临时路径，推荐curator-framework</p><p>redis方式</p><p>这个redisson主要思想：通过setnx创建一个30s的key，并且创建一个守护线程10s续命分布式锁执行一次setnx，放置key因为过期造成其它线程进入访问引起业务数据异常。比较注意的是，redession加入pub/sub 消息发布订阅机制，当客户端释放锁时会pub一个消息，其它客户端收到消息，又会去竞争锁。这里运用的思想还是AQS。</p><p>非常重要：通过分布式锁，再一次说明了AQS的重要性。</p><h2 id="4、全局ID"><a href="#4、全局ID" class="headerlink" title="4、全局ID"></a>4、全局ID</h2><p>int类型，incrby，利用原子性</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">incrby</span> userid <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>分库分表的场景，一次性拿一段</p><h2 id="5、计数器"><a href="#5、计数器" class="headerlink" title="5、计数器"></a>5、计数器</h2><p>int类型，incr方法</p><p>例如：文章的阅读量、微博点赞数、允许一定的延迟，先写入Redis再定时同步到数据库。</p><p>在 Redis 的数据结构中，<code>string</code>、<code>hash</code>和<code>sorted set</code>都提供了<code>incr</code>方法用于原子性的自增操作。</p><ul><li>如果应用需要显示每天的注册用户数，便可以使用string作为计数器，设定一个名为REGISTERED_COUNT_TODAY的 key，并在初始化时给它设置一个到凌晨 0 点的过期时间，每当用户注册成功后便使用incr命令使该 key 增长 1，同时当每天凌晨 0 点后，这个计数器都会因为 key 过期使值清零。</li><li>每条微博都有点赞数、评论数、转发数和浏览数四条属性，这时用hash进行计数会更好，将该计数器的 key 设为weibo:weibo_id，hash的 field 为like_number、comment_number、forward_number和view_number，在对应操作后通过hincrby使hash 中的 field 自增。</li><li>如果应用有一个发帖排行榜的功能，便选择sorted set吧，将集合的 key 设为POST_RANK。当用户发帖后，使用zincrby将该用户 id 的 score 增长 1。sorted set会重新进行排序，用户所在排行榜的位置也就会得到实时的更新。</li></ul><h2 id="6、限流"><a href="#6、限流" class="headerlink" title="6、限流"></a>6、限流</h2><p>incr访问次数，当超过次数false</p><h2 id="7、位统计（在线用户）"><a href="#7、位统计（在线用户）" class="headerlink" title="7、位统计（在线用户）"></a>7、位统计（在线用户）</h2><p>String类型的bitcount</p><p><strong>setbit</strong></p><p><code>setbit key offset value</code>：给对应的位设置值</p><p><strong>getbit</strong></p><p><code>getbit key offset</code> 获取指定位的值</p><p><strong>bitcount</strong></p><p><code>bitcount key [start] [end]</code> 获取指定范围为1的个数</p><p>例如：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">//设置用户id为3的用户在2022<span class="hljs-string">-5</span><span class="hljs-string">-17</span>登录<br>$ setbit user:view:2022<span class="hljs-string">-5</span><span class="hljs-string">-17</span> 3 1<br>//查看用户id为3的用户在2022<span class="hljs-string">-5</span><span class="hljs-string">-17</span>是否登录<br>$ getbit user:view:2022<span class="hljs-string">-5</span><span class="hljs-string">-17</span> 3<br>//查看2022<span class="hljs-string">-5</span><span class="hljs-string">-17</span>有多少人登录<br>$ bitcount user:view:2022<span class="hljs-string">-5</span><span class="hljs-string">-17</span><br></code></pre></td></tr></table></figure><p><strong>Bitmaps间的操作</strong>：不过生产环境很难用上，生产环境现在大多都是集群，所以交集并集之类的用不上</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">bitop <span class="hljs-built_in">op</span> destkey <span class="hljs-built_in">key</span> [<span class="hljs-built_in">key</span> ...]<br></code></pre></td></tr></table></figure><p><code>bitop</code>命令可以对多个bitmaps做交集（and)、并集（or）、非（not）、异或（xor），并将操作结果存放在<code>destkey</code>中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 将<span class="hljs-number">17</span>、<span class="hljs-number">18</span>、<span class="hljs-number">19</span>集合结果放到three:<span class="hljs-keyword">and</span>上<br>$ bitop <span class="hljs-keyword">and</span> three:<span class="hljs-keyword">and</span> <span class="hljs-keyword">user</span>:<span class="hljs-keyword">view</span>:<span class="hljs-number">2022</span><span class="hljs-number">-5</span><span class="hljs-number">-17</span> <span class="hljs-keyword">user</span>:<span class="hljs-keyword">view</span>:<span class="hljs-number">2022</span><span class="hljs-number">-5</span><span class="hljs-number">-18</span> <span class="hljs-keyword">user</span>:<span class="hljs-keyword">view</span>:<span class="hljs-number">2022</span><span class="hljs-number">-5</span><span class="hljs-number">-19</span><br>$ bitcount three:<span class="hljs-keyword">and</span><br></code></pre></td></tr></table></figure><h2 id="8、时间轴（Timeline）"><a href="#8、时间轴（Timeline）" class="headerlink" title="8、时间轴（Timeline）"></a>8、时间轴（Timeline）</h2><p>list为双向链表。</p><p>如果将list用作时间轴，用户通过lpush发完消息，可以通过lrange拉取最新的消息。lrange可以指定需要多少length。</p><p>例如：微博消息发布后，通过lrange获取最新微博。</p><h2 id="9-消息队列"><a href="#9-消息队列" class="headerlink" title="9. 消息队列"></a>9. 消息队列</h2><p>有序消息队列：Redis 中list的数据结构实现是双向链表，消息的生产者只需要通过lpush将消息放入 list，消费者便可以通过rpop取出该消息，并且可以保证消息的有序性。</p><p>优先级消息队列：带有优先级的消息队列也可以选择sorted set。</p><p>pub/sub用作发布者 / 订阅者模型的消息，不需要担心由于服务器故障导致消息丢失的情况，Redis 拥有持久化功能。</p><p>Redis 中list的数据结构实现是双向链表，所以可以非常便捷的应用于消息队列（生产者 / 消费者模型）。消息的生产者只需要通过lpush将消息放入 list，消费者便可以通过rpop取出该消息，并且可以保证消息的有序性。如果需要实现带有优先级的消息队列也可以选择sorted set。而pub/sub功能也可以用作发布者 / 订阅者模型的消息。无论使用何种方式，由于 Redis 拥有持久化功能，也不需要担心由于服务器故障导致消息丢失的情况。</p><p>List提供了两个阻塞的弹出操作：blpop/brpop，可以设置超时时间：</p><ul><li>blpop：blpop key1 timeout 移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</li><li>brpop：brpop key1 timeout 移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</li></ul><p>队列：先进先除：rpush blpop，左头右尾，右边进入队列，左边出队列<br>栈：先进后出：rpush brpop</p><h2 id="10、抽奖"><a href="#10、抽奖" class="headerlink" title="10、抽奖"></a>10、抽奖</h2><p>利用set结构的无序性,通过 Spop（ Redis Spop 命令用于移除集合中的指定 key 的一个或多个随机元素，移除后会返回移除的元素。 ） 随机获得值。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&gt; smembers key1<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;4&quot;</span><br><span class="hljs-number">5</span>) <span class="hljs-string">&quot;5&quot;</span><br><span class="hljs-number">6</span>) <span class="hljs-string">&quot;7&quot;</span><br><span class="hljs-number">7</span>) <span class="hljs-string">&quot;8&quot;</span><br>&gt; spop key1<br><span class="hljs-string">&quot;8&quot;</span><br>&gt; spop key1<br><span class="hljs-string">&quot;3&quot;</span><br></code></pre></td></tr></table></figure><h2 id="11、点赞、签到、打卡"><a href="#11、点赞、签到、打卡" class="headerlink" title="11、点赞、签到、打卡"></a>11、点赞、签到、打卡</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs axapta">假如上面的微博ID是t1001，用户ID是u3001<br><br>用 <span class="hljs-keyword">like</span>:t1001 来维护 t1001 这条微博的所有点赞用户<br><br>点赞了这条微博：sadd <span class="hljs-keyword">like</span>:t1001 u3001<br>取消点赞：srem <span class="hljs-keyword">like</span>:t1001 u3001<br>是否点赞：sismember <span class="hljs-keyword">like</span>:t1001 u3001<br>点赞的所有用户：smembers <span class="hljs-keyword">like</span>:t1001<br>点赞数：scard <span class="hljs-keyword">like</span>:t1001<br></code></pre></td></tr></table></figure><h2 id="12-商品标签"><a href="#12-商品标签" class="headerlink" title="12 商品标签"></a>12 商品标签</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">sadd <span class="hljs-keyword">tag</span><span class="hljs-variable">s:i5001</span> 画面清晰细腻<br>sadd <span class="hljs-keyword">tag</span><span class="hljs-variable">s:i5001</span> 真彩清晰显示屏<br>sadd <span class="hljs-keyword">tag</span><span class="hljs-variable">s:i5001</span> 流程至极<br></code></pre></td></tr></table></figure><h2 id="13、好友关系、用户关注、推荐模型"><a href="#13、好友关系、用户关注、推荐模型" class="headerlink" title="13、好友关系、用户关注、推荐模型"></a>13、好友关系、用户关注、推荐模型</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-keyword">A</span>:follow：存放 <span class="hljs-keyword">A</span> 所有关注的用户 id<br><br><span class="hljs-keyword">A</span>:follower：存放 <span class="hljs-keyword">A</span> 所有粉丝的用户 id<br><br>那么通过sinter命令便可以根据<span class="hljs-keyword">A</span>:follow和<span class="hljs-keyword">A</span>:follower的交集得到与 <span class="hljs-keyword">A</span> 互相关注的用户。当 <span class="hljs-keyword">A</span> 进入另一个用户 B 的主页后，<span class="hljs-keyword">A</span>:follow和B:follow的交集便是 <span class="hljs-keyword">A</span> 和 B 的共同专注，<span class="hljs-keyword">A</span>:follow和B:follower的交集便是 <span class="hljs-keyword">A</span> 关注的人也关注了 B。<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs elixir">相互关注：<br><br>sadd <span class="hljs-number">1</span><span class="hljs-symbol">:follow</span> <span class="hljs-number">2</span><br>sadd <span class="hljs-number">1</span><span class="hljs-symbol">:follower</span> <span class="hljs-number">2</span><br>sadd <span class="hljs-number">2</span><span class="hljs-symbol">:follower</span> <span class="hljs-number">1</span><br>sadd <span class="hljs-number">2</span><span class="hljs-symbol">:follow</span> <span class="hljs-number">1</span><br><span class="hljs-number">1</span>关注的人也关注了他(取交集)：<br><br>交集：sinter <span class="hljs-number">1</span><span class="hljs-symbol">:follow</span> <span class="hljs-number">2</span><span class="hljs-symbol">:follower</span><br><br>用户<span class="hljs-number">1</span>可能认识的人(差集)：sdiff <span class="hljs-number">2</span><span class="hljs-symbol">:follow</span> <span class="hljs-number">1</span><span class="hljs-symbol">:follow</span><br>用户<span class="hljs-number">2</span>可能认识的人：sdiff <span class="hljs-number">1</span><span class="hljs-symbol">:follow</span> <span class="hljs-number">2</span><span class="hljs-symbol">:follow</span><br></code></pre></td></tr></table></figure><h2 id="14-排行榜"><a href="#14-排行榜" class="headerlink" title="14 .排行榜"></a>14 .排行榜</h2><p>id 为6001 的新闻点击数加1：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">zincrby</span> hotNews:<span class="hljs-number">20190926</span> <span class="hljs-number">1</span> n6001<br></code></pre></td></tr></table></figure><p>获取今天点击最多的15条：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">zrevrange</span> hotNews:<span class="hljs-number">20190926</span> <span class="hljs-number">0</span> <span class="hljs-number">15</span> withscores<br></code></pre></td></tr></table></figure><h2 id="15-倒排索引"><a href="#15-倒排索引" class="headerlink" title="15 .倒排索引"></a>15 .倒排索引</h2><p>可以通过分词器把对应的分词 设置set key id，然后通过id找到对应的数据。一般用es</p><h2 id="16、电商实际应用场景"><a href="#16、电商实际应用场景" class="headerlink" title="16、电商实际应用场景"></a>16、电商实际应用场景</h2><h3 id="16-1-商品维度和用户维度计数"><a href="#16-1-商品维度和用户维度计数" class="headerlink" title="16.1 商品维度和用户维度计数"></a>16.1 商品维度和用户维度计数</h3><p>商品（喜欢数，评论数，鉴定数，浏览数,etc） 采用Redis 的类型: <code>Hash</code>. </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>喜欢数=<span class="hljs-number">5</span><br>$ HSET product:<span class="hljs-number">10001</span> favor <span class="hljs-number">5</span><br><span class="hljs-regexp">//</span>喜欢数+<span class="hljs-number">1</span><br>$ HINCRBY product:<span class="hljs-number">10001</span> favor <span class="hljs-number">1</span><br><span class="hljs-regexp">//</span>获取hashkey value<br>$ HGETALL product:<span class="hljs-number">10001</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;favor&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;6&quot;</span><br></code></pre></td></tr></table></figure><p>用户维度计数（动态数、关注数、粉丝数、喜欢商品数、发帖数 等）采用 <code>Hash</code>  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>关注=<span class="hljs-number">5</span><br>$ HSET user:<span class="hljs-number">10001</span> follow <span class="hljs-number">5</span><br><span class="hljs-regexp">//</span>关注+<span class="hljs-number">1</span><br>$ HINCRBY user:<span class="hljs-number">10001</span> favor <span class="hljs-number">1</span><br><span class="hljs-regexp">//</span>获取hashkey value<br>$ HGETALL user:<span class="hljs-number">10001</span><br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;follow&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;6&quot;</span><br></code></pre></td></tr></table></figure><h3 id="16-2-存储社交关系"><a href="#16-2-存储社交关系" class="headerlink" title="16.2 存储社交关系"></a>16.2 存储社交关系</h3><p>将用戶的好友/粉丝/关注，可以存在一个<code>sorted set</code>中，score可以是timestamp，这样求两个人的共同好友的操作，可能就只需要用求交集命令即可。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>score 为<span class="hljs-type">timestamp</span><br>redis<span class="hljs-operator">&gt;</span> ZADD <span class="hljs-keyword">user</span>:<span class="hljs-number">100000</span>:follow <span class="hljs-number">61307510400000</span> &quot;100001&quot; <br>redis<span class="hljs-operator">&gt;</span> ZADD <span class="hljs-keyword">user</span>:<span class="hljs-number">100000</span>:follow <span class="hljs-number">61307510402300</span> &quot;100002&quot;<br>redis<span class="hljs-operator">&gt;</span> ZADD <span class="hljs-keyword">user</span>:<span class="hljs-number">100000</span>:follow <span class="hljs-number">61307510405600</span> &quot;100003&quot;<br>redis<span class="hljs-operator">&gt;</span> ZADD <span class="hljs-keyword">user</span>:<span class="hljs-number">200000</span>:follow <span class="hljs-number">61307510400000</span> &quot;100001&quot;<br>redis<span class="hljs-operator">&gt;</span> ZADD <span class="hljs-keyword">user</span>:<span class="hljs-number">200000</span>:follow <span class="hljs-number">61307510402300</span> &quot;100005&quot;<br>redis<span class="hljs-operator">&gt;</span> ZADD <span class="hljs-keyword">user</span>:<span class="hljs-number">200000</span>:follow <span class="hljs-number">61307510405600</span> &quot;100004&quot;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>交集命令，获得共同关注<br>redis<span class="hljs-operator">&gt;</span> ZINTERSTORE <span class="hljs-keyword">out</span>:<span class="hljs-number">100000</span>:<span class="hljs-number">200000</span> <span class="hljs-number">1</span> <span class="hljs-keyword">user</span>:<span class="hljs-number">100000</span>:follow <span class="hljs-keyword">user</span>:<span class="hljs-number">200000</span>:follow <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>输出所有的共同关注 <span class="hljs-number">-1</span>表示无右边界<br>redis<span class="hljs-operator">&gt;</span> ZRANGE <span class="hljs-keyword">out</span>:<span class="hljs-number">100000</span>:<span class="hljs-number">200000</span> <span class="hljs-number">0</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><h3 id="16-3-用作缓存"><a href="#16-3-用作缓存" class="headerlink" title="16.3 用作缓存"></a>16.3 用作缓存</h3><p>代替memcached（商品列表，评论列表，@提示列表，etc）相对memcached，redis数据结构（list,set,sorted set,hash, etc）可以更方便cache各种业务数据，性能也不亚于memcached。</p><h3 id="16-4-反spam系统"><a href="#16-4-反spam系统" class="headerlink" title="16.4 反spam系统"></a>16.4 反spam系统</h3><p>评论，发布商品，论坛发贴，etc</p><p>将会有各种spam攻击 ，垃圾评论、发布垃圾商品、广告、刷自家商品排名等。针对这些spam制定一系列anti-spam规则，其中有些规则可以利用redis做实时分析， 1分钟评论不得超过2次、5分钟评论少于5次等（更多机制/规则需要结合drools ） </p><p>采用sorted set将最近一天用户操作记录起来（全部操作记录到log，后续利用hadoop进行更全面分析统计），通过</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">//获取大于<span class="hljs-number">61307510405600</span>的评论    -<span class="hljs-literal">inf</span>等同于负无穷大  +<span class="hljs-literal">inf</span>等同于正无穷大  “<span class="hljs-number">61307510405600</span> +<span class="hljs-literal">inf</span>” 则表示&gt;=<span class="hljs-number">61307510405600</span><br>ZRANGEBYSCORE user:<span class="hljs-number">200000</span>:operation:comment <span class="hljs-number">61307510405600</span> +<span class="hljs-literal">inf</span><br></code></pre></td></tr></table></figure><p> 获得1分钟内的操作记录。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ZADD</span> user:<span class="hljs-number">200000</span>:operation:comment <span class="hljs-number">61307510402300</span><br></code></pre></td></tr></table></figure><p>更复杂一点的实时计算可以采用Storm。</p><h3 id="16-5-用户Timeline-Feeds"><a href="#16-5-用户Timeline-Feeds" class="headerlink" title="16.5 用户Timeline/Feeds"></a>16.5 用户Timeline/Feeds</h3><p>在逛 有个类似微博的栏目我关注，里面包括关注的人、主题、品牌的动态。redis在这边主要当作cache使用。 注意设置过期时间。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ZADD</span> user:<span class="hljs-number">100000</span>:feed:topic  <span class="hljs-number">61307510400000</span> &lt;feedId&gt;<br></code></pre></td></tr></table></figure><h3 id="16-6-最新列表-amp-排行榜（用户刚刚喜欢的商品，etc）"><a href="#16-6-最新列表-amp-排行榜（用户刚刚喜欢的商品，etc）" class="headerlink" title="16.6 最新列表&amp;排行榜（用户刚刚喜欢的商品，etc）"></a>16.6 最新列表&amp;排行榜（用户刚刚喜欢的商品，etc）</h3><p>这里采用Redis的<code>List</code>数据结构或<code>sorted set</code> 结构, 方便实现最新列表or排行榜 等业务场景。 </p><h3 id="16-7-消息通知"><a href="#16-7-消息通知" class="headerlink" title="16.7 消息通知"></a>16.7 消息通知</h3><p>其实这业务场景也可以算在计数上，也是采用<code>Hash</code>。如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">redis&gt; HSET user:&lt;userId&gt;:message:ur system <span class="hljs-number">1</span><span class="hljs-regexp">//</span><span class="hljs-number">1</span>条未读系统消息<br>redis&gt; HINCRBY user:&lt;userId&gt;:message:ur system <span class="hljs-number">1</span> <span class="hljs-regexp">//</span>未读系统消息+<span class="hljs-number">1</span><br>redis&gt; HINCRBY user:&lt;userId&gt;:message:ur comment <span class="hljs-number">1</span> <span class="hljs-regexp">//</span>未读评论消息+<span class="hljs-number">1</span><br>redis&gt; HSET user:&lt;userId&gt;:message:ur system <span class="hljs-number">0</span><span class="hljs-regexp">//</span>设为系统消息已读<br>redis&gt; HGETALL user:&lt;userId&gt;:message:ur <span class="hljs-regexp">//</span>获取这key hashkey 和value<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;system&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;comment&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;1&quot;</span><br></code></pre></td></tr></table></figure><h3 id="16-8-将Redis用作消息队列"><a href="#16-8-将Redis用作消息队列" class="headerlink" title="16.8. 将Redis用作消息队列"></a>16.8. 将Redis用作消息队列</h3><p>当在集群环境时候，java <code>ConcurrentLinkedQueue</code> 就无法满足需求时，可以采用Redis的List数据结构实现分布式的消息队列。</p><h2 id="17-Redis-在金融系统的应用场景"><a href="#17-Redis-在金融系统的应用场景" class="headerlink" title="17 Redis 在金融系统的应用场景"></a>17 Redis 在金融系统的应用场景</h2><h3 id="17-1-session共享"><a href="#17-1-session共享" class="headerlink" title="17.1 session共享"></a>17.1 session共享</h3><h3 id="17-2-活动抢券"><a href="#17-2-活动抢券" class="headerlink" title="17.2 活动抢券"></a>17.2 活动抢券</h3><p>需要解决问题：</p><ul><li>系统的高并发压力</li><li>大量用户抢同一张优惠券带来数据一致性问题</li><li>券不能超发、重复发</li><li>由于券涉及到资金,也带资金安全的问题</li></ul><p>场景主要的技术挑战是高并发、高响应、一致性、安全性等。</p><p>解决方案：</p><p>(1)提前把访问量蓄水,预热活跃用户,降低活动开始后的登录和风控压力。</p><img src="/2022/09/27/%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF/2022-09-28-redis%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/1664371757403.png" class="" width="1664371757403"><p>(2)对Redis进行全局数据化处理,基于Redis内存高读写高QPS的特性,解决热点数据的高并发问题。热点数据均存储在内存中,采取Redis CLUSTER 特性,进行多分片部署，通过高并发读写特性，提升系统吞吐量。下图为热数据的结构和场景描述。</p><table><thead><tr><th>存储数据</th><th>数据结构</th><th>场景描述</th></tr></thead><tbody><tr><td>卷数量</td><td>STRING</td><td>热数据初始化卷数量，抢卷时通过DECR扣减</td></tr><tr><td>抢卷资格</td><td>HASH</td><td>抢卷时判断计数器进行资格校验拦截不符合资格</td></tr><tr><td>卷类型</td><td>LIST</td><td>按顺序从LIST获取卷类型</td></tr><tr><td>卷基本信息</td><td>HASH</td><td>抢卷时初始化卷总数、总类型等信息</td></tr><tr><td>卷分布式锁</td><td>STRING</td><td>抢卷时加锁，抢完后删除锁，一个用户只允许有一个线程在抢卷</td></tr><tr><td>抢卷记录</td><td>STRING</td><td>判断用户是否抢卷，抢卷后新增抢卷记录信息</td></tr></tbody></table><p>（3）分布式锁的应用</p><p>问题：在抢卷时，可能出现多个用户同时在抢同一张卷，或同一用户抢多张卷的问题。当用户点击过快时，可能同一用户的两个线程同时通过了抢卷资格的校验，这种情况下该用户可以同时抢两张卷。</p><p>针对上面问题可以通过对抢卷号码、用户账号两个维度进行加分布式锁来解决。</p><h3 id="17-3-支付渠道限额"><a href="#17-3-支付渠道限额" class="headerlink" title="17.3 支付渠道限额"></a>17.3 支付渠道限额</h3><p>本场景是支付路由场景下支付渠道限额的设计,是为了通过执行渠道路由支付时,避免资金不足时缺乏渠道控制,造成大量交易失败,导致处理异常。以下为路由示例图。</p><img src="/2022/09/27/%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF/2022-09-28-redis%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/1664372570217.png" class="" width="1664372570217"><table><thead><tr><th>命令</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>INCR KEY</td><td>在原字段上加1</td><td>只能对整数操作</td></tr><tr><td>INCRBY KEY INCREMENT</td><td>在原字段上加上整数(INCREMENT)</td><td>只能对整数操作</td></tr><tr><td>DECR KEY</td><td>在原字段上减1</td><td>只能对整数操作</td></tr><tr><td>DECRBY KEY DECREMENT</td><td>在原字段上减去 整数(DECREMENT)</td><td>只能对整数操作</td></tr></tbody></table><pre><code class="hljs">二、活动抢券是互联网金融公司最常用的营销手段,对于互联网金融公司来说,本业务场景带来了几个需要解决的问题,;;;。由此可见,本我们引用了电力行业的一种措施“削峰填谷”,顾名思义,就是在流量洪峰到来之前在系统负载较低的时候进行冷热数据的交换,和券数据的预热,用来分担领券活动后的高并发流量。而领券销售活动的业务特点是定时的洪峰流量对关联系统造成的巨大的并发访问的冲击。在此,从业务场景来说,如下图所示。</code></pre><p>参考文章：</p><p><a href="https://blog.csdn.net/agonie201218/article/details/123640871">https://blog.csdn.net/agonie201218/article/details/123640871</a></p>]]></content>
    
    
    <categories>
      
      <category>应用场景</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis常见面试题</title>
    <link href="/2022/09/26/%E9%9D%A2%E8%AF%95%E9%A2%98/2022-09-26-Redis%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2022/09/26/%E9%9D%A2%E8%AF%95%E9%A2%98/2022-09-26-Redis%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><strong>1、什么是Redis？</strong></p><p>Redis本质上是一个Key-Value类型的内存数据库，很像memcached，整个数据库统统加载在内存当中进行操作，定期通过异步操作把数据库数据flush到硬盘上进行保存。因为是纯内存操作，Redis的性能非常出色，<strong>每秒可以处理超过10万次读写操作，是已知性能最快的Key-Value DB</strong>。 Redis的出色之处不仅仅是性能，Redis最大的魅力是支持保存多种数据结构，此外单个value的最大限制是1GB，不像 memcached只能保存1MB的数据，因此Redis可以用来实现很多有用的功能，比方说用他的List来做FIFO双向链表，实现一个轻量级的高性能消息队列服务，用他的Set可以做高性能的tag系统等等。另外Redis也可以对存入的Key-Value设置expire时间，因此也可以被当作一 个功能加强版的memcached来用。 </p><p>Redis的主要缺点是数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。 </p><p><strong>2、Redis相比memcached有哪些优势？</strong></p><p>(1) memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型</p><p>(2) redis的速度比memcached快很多 </p><p>(3) redis可以持久化其数据 </p><p><strong>3、Redis支持哪几种数据类型？</strong> </p><p>String、List、Set、Sorted Set、hashes </p><p><strong>4、Redis主要消耗什么物理资源？</strong> </p><p>内存。 </p><p><strong>5、Redis的全称是什么？</strong> </p><p>Remote Dictionary Server。 </p><p><strong>6、Redis有哪几种数据淘汰策略？</strong> </p><blockquote><ul><li>noeviction：返回错误当内存限制达到，并且客户端尝试执行会让更多内存被使用的命令（大部分的写入指令，但DEL和几个例外） </li><li>allkeys-lru：尝试回收最少使用的键（LRU），使得新添加的数据有空间存放。</li><li>volatile-lru：尝试回收最少使用的键（LRU），但仅限于在过期集合的键,使得新添加的数据有空间存放。 </li><li>allkeys-random：回收随机的键使得新添加的数据有空间存放。 （如果需要从所有的 key 中进行淘汰，并且 key 的访问没有明显热点，被随机访问，即可采用这种策略。 ）</li><li>volatile-random：回收随机的键使得新添加的数据有空间存放，但仅限于在过期集合的键。</li><li>volatile-lfu：4.0版本新增，当内存不足以容纳新写入数据时，在过期的key中，使用LFU算法进行删除key。</li><li>allkeys-lfu：4.0版本新增，当内存不足以容纳新写入数据时，从所有key中使用LFU算法进行淘汰；</li><li>volatile-ttl：回收在过期集合的键，并且优先回收存活时间（TTL）较短的键，使得新添加的数据有空间存放。 </li></ul></blockquote><p><strong>7、Redis官方为什么不提供Windows版本？</strong> </p><p>因为目前Linux版本已经相当稳定，而且用户量很大，无需开发windows版本，反而会带来兼容性等问题。 </p><p><strong>8、一个字符串类型的值能存储最大容量是多少？</strong> </p><p>512M </p><p><strong>9、为什么Redis需要把所有数据放到内存中？</strong> </p><p>Redis为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据写入磁盘。 </p><p>所以redis具有快速和数据持久化的特征。如果不将数据放在内存中，磁盘I/O速度为严重影响redis的性能。在内存越来越便宜的今天，redis将会越来越受欢迎。 如果设置了最大使用的内存，则数据已有记录数达到内存限值后不能继续插入新值。 </p><p><strong>10、Redis集群方案应该怎么做？都有哪些方案？</strong> </p><p>（1）twemproxy，大概概念是，它类似于一个代理方式，使用方法和普通redis无任何区别，设置好它下属的多个redis实例后，使用时在本需要连接redis的地方改为连接twemproxy，它会以一个代理的身份接收请求并使用一致性hash算法，将请求转接到具体redis，将结果再返回twemproxy。使用方式简便(相对redis只需修改连接端口)，对旧项目扩展的首选。 </p><p>问题：twemproxy自身单端口实例的压力，使用一致性hash后，对redis节点数量改变时候的计算值的改变，数据无法自动移动到新的节点。 </p><p>（2）codis，目前用的最多的集群方案，基本和twemproxy一致的效果，但它支持在节点数量改变情况下，旧节点数据可恢复到新hash节点。</p><p>（3）redis cluster3.0自带的集群，特点在于他的分布式算法不是一致性hash，而是hash槽的概念，以及自身支持节点设置从节点。具体看官方文档介绍。 </p><p>（4）在业务代码层实现，起几个毫无关联的redis实例，在代码层，对key 进行hash计算，然后去对应的redis实例操作数据。 这种方式对hash层代码要求比较高，考虑部分包括，节点失效后的替代算法方案，数据震荡后的自动脚本恢复，实例的监控，等等。 </p><p><strong>11、Redis集群方案什么情况下会导致整个集群不可用？</strong> </p><p>有A，B，C三个节点的集群,在没有复制模型的情况下,如果节点B失败了，那么整个集群就会以为缺少5501-11000这个范围的槽而不可用。 </p><p><strong>12、MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据？</strong> </p><p>redis内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。 </p><p><strong>13、Redis有哪些适合的场景？</strong> </p><p>（1）、会话缓存（Session Cache） </p><p>最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？</p><p>幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。 </p><p>（2）、全页缓存（FPC） </p><p>除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。 </p><p>再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。此外，对WordPress的用户来说，Pantheon有一个非常好的插件 wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。 </p><p>（3）、队列 </p><p>Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。 </p><p>如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。 </p><p>（4），排行榜/计数器 </p><p>Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合 （Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的10个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可： </p><p>当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ZRANGE</span> user_scores <span class="hljs-number">0</span> <span class="hljs-number">10</span> WITHSCORES <br></code></pre></td></tr></table></figure><p>Agora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。 </p><p>（5）、发布/订阅 </p><p>最后（但肯定不是最不重要的）是Redis的发布/订阅功能。发布/订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用 Redis的发布/订阅功能来建立聊天系统！（不，这是真的，你可以去核实）。 </p><p><strong>14、Redis支持的Java客户端都有哪些？官方推荐用哪个？</strong></p><p>Redisson、Jedis、lettuce等等，官方推荐使用Redisson。 </p><p><strong>15、Redis和Redisson有什么关系？</strong> </p><p>Redisson是一个高级的分布式协调Redis客服端，能帮助用户在分布式环境中轻松实现一些Java的对象 (Bloom filter, BitSet, Set, SetMultimap, ScoredSortedSet, SortedSet, Map,ConcurrentMap, List, ListMultimap, Queue, BlockingQueue, Deque, BlockingDeque, Semaphore, Lock, ReadWriteLock, AtomicLong, CountDownLatch, Publish / Subscribe, HyperLogLog)。 </p><p><strong>16、Jedis与Redisson对比有什么优缺点？</strong> </p><p>Jedis是Redis的Java实现的客户端，其API提供了比较全面的Redis命令的支持；Redisson实现了分布式和可扩展的Java数据结构，和Jedis相比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、分区等Redis特性。Redisson的宗旨是促进使用者对Redis的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。 </p><p><strong>17、Redis如何设置密码及验证密码？</strong> </p><p>设置密码：config set requirepass 123456 </p><p>授权密码：auth 123456 </p><p><strong>18、说说Redis哈希槽的概念？</strong> </p><p>Redis集群没有使用一致性hash,而是引入了哈希槽的概念，Redis集群有16384个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽，集群的每个节点负责一部分hash槽。 </p><p><strong>19、Redis集群的主从复制模型是怎样的？</strong> </p><p>为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，所以集群使用了主从复制模型,每个节点都会有N-1个复制品. </p><p><strong>20、Redis集群会有写操作丢失吗？为什么？</strong> </p><p>Redis并不能保证数据的强一致性，这意味这在实际中集群在特定的条件下可能会丢失写操作。</p><p><strong>21、Redis集群之间是如何复制的？</strong> </p><p>异步复制</p><p><strong>22、Redis集群最大节点个数是多少？</strong> </p><p>16384个。 </p><p><strong>23、Redis集群如何选择数据库？</strong> </p><p>Redis集群目前无法做数据库选择，默认在0数据库。 </p><p><strong>24、怎么测试Redis的连通性？</strong> </p><p>ping </p><p><strong>25、Redis中的管道有什么用？</strong> </p><p>一次请求/响应服务器能实现处理新的请求即使旧的请求还未被响应。这样就可以将多个命令发送到服务器，而不用等待回复，最后在一个步骤中读取该答复。 </p><p>这就是管道（pipelining），是一种几十年来广泛使用的技术。例如许多POP3协议已经实现支持这个功能，大大加快了从服务器下载新邮件的过程。 </p><p><strong>26、怎么理解Redis事务？</strong> </p><p>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 </p><p>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。 </p><p><strong>27、Redis事务相关的命令有哪几个？</strong> </p><p>MULTI、EXEC、DISCARD、WATCH </p><p><strong>28、Redis key的过期时间和永久有效分别怎么设置？</strong> </p><p>EXPIRE和PERSIST命令。 </p><p><strong>29、Redis如何做内存优化？</strong> </p><p>尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。比如你的web系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的key,而是应该把这个用户的所有信息存储到一张散列表里面.</p><p><strong>30、Redis回收进程如何工作的？</strong> </p><p>一个客户端运行了新的命令，添加了新的数据。 </p><p>Redi检查内存使用情况，如果大于maxmemory的限制, 则根据设定好的策略进行回收。 </p><p>一个新的命令被执行，等等。 </p><p>所以我们不断地穿越内存限制的边界，通过不断达到边界然后不断地回收回到边界以下。 </p><p>如果一个命令的结果导致大量内存被使用（例如很大的集合的交集保存到一个新的键），不用多久内存限制就会被这个内存使用量超越。 </p><p><strong>31、Redis回收使用的是什么算法？</strong> </p><p>LRU算法 </p><p><strong>32、Redis如何做大量数据插入？</strong> </p><p>Redis2.6开始redis-cli支持一种新的被称之为pipe mode的新模式用于执行大量数据插入工作。</p><p><strong>33、为什么要做Redis分区？</strong> </p><p>分区可以让Redis管理更大的内存，Redis将可以使用所有机器的内存。如果没有分区，你最多只能使用一台机器的内存。分区使Redis的计算能力通过简单地增加计算机得到成倍提升,Redis的网络带宽也会随着计算机和网卡的增加而成倍增长。 </p><p><strong>34、你知道有哪些Redis分区实现方案？</strong> </p><p>客户端分区就是在客户端就已经决定数据会被存储到哪个redis节点或者从哪个redis节点读取。大多数客户端已经实现了客户端分区。 </p><p>代理分区 意味着客户端将请求发送给代理，然后代理决定去哪个节点写数据或者读数据。 </p><p>代理根据分区规则决定请求哪些Redis实例，然后根据Redis的响应结果返回给客户端。 </p><p>redis和memcached的一种代理实现就是Twemproxy </p><p>查询路由(Query routing) 的意思是客户端随机地请求任意一个redis实例，然后由Redis将请求转发给正确的Redis节点。Redis Cluster实现了一种混合形式的查询路由，但并不是直接将请求从一个redis节点转发到另一个redis节点，而是在客户端的帮助下直接redirected到正确的redis节点。 </p><p><strong>35、Redis分区有什么缺点？</strong> </p><p>涉及多个key的操作通常不会被支持。例如你不能对两个集合求交集，因为他们可能被存储到不同的Redis实例（实际上这种情况也有办法，但是不能直接使用交集指令）。 </p><p>同时操作多个key,则不能使用Redis事务. </p><p>分区使用的粒度是key，不能使用一个非常长的排序key存储一个数据集（The partitioning granularity is the key, so it is not possible to shard a dataset with a single huge key like a very big sorted set）. </p><p>当使用分区的时候，数据处理会非常复杂，例如为了备份你必须从不同的Redis实例和主机同时收集RDB / AOF文件。 </p><p>分区时动态扩容或缩容可能非常复杂。Redis集群在运行时增加或者删除Redis节点，能做到最大程度对用户透明地数据再平衡，但其他一些客户端分区或者代理分区方法则不支持这种特性。然而，有一种预分片的技术也可以较好的解决这个问题。 </p><p><strong>36、Redis持久化数据和缓存怎么做扩容？</strong> </p><p>如果Redis被当做缓存使用，使用一致性哈希实现动态扩容缩容。 </p><p>如果Redis被当做一个持久化存储使用，必须使用固定的keys-to-nodes映射关系，节点的数量一旦确定不能变化。否则的话(即Redis节点需要动态变化的情况），必须使用可以在运行时进行数据再平衡的一套系统，而当前只有Redis集群可以做到这样。 </p><p><strong>37、分布式Redis是前期做还是后期规模上来了再做好？为什么？</strong> </p><p>既然Redis是如此的轻量（单实例只使用1M内存）,为防止以后的扩容，最好的办法就是一开始就启动较多实例。即便你只有一台服务器，你也可以一开始就让Redis以分布式的方式运行，使用分区，在同一台服务器上启动多个实例。 </p><p>一开始就多设置几个Redis实例，例如32或者64个实例，对大多数用户来说这操作起来可能比较麻烦，但是从长久来看做这点牺牲是值得的。这样的话，当你的数据不断增长，需要更多的Redis服务器时，你需要做的就是仅仅将Redis实例从一台服务迁移到另外一台服务器而已（而不用考虑重新分区的问题）。一旦你添加了另一台服务器，你需要将你一半的Redis实例从第一台机器迁移到第二台机器。 </p><p><strong>38、Twemproxy是什么？</strong> </p><p>Twemproxy是Twitter维护的（缓存）代理系统，代理Memcached的ASCII协议和Redis协议。它是单线程程序，使用c语言编写，运行起来非常快。它是采用Apache 2.0 license的开源软件。 Twemproxy支持自动分区，如果其代理的其中一个Redis节点不可用时，会自动将该节点排除（这将改变原来的keys-instances的映射关系，所以你应该仅在把Redis当缓存时使用Twemproxy)。 Twemproxy本身不存在单点问题，因为你可以启动多个Twemproxy实例，然后让你的客户端去连接任意一个Twemproxy实例。 Twemproxy是Redis客户端和服务器端的一个中间层，由它来处理分区功能应该不算复杂，并且应该算比较可靠的。 </p><p><strong>39、支持一致性哈希的客户端有哪些？</strong> </p><p>Redis-rb、Predis等。 </p><p><strong>40、Redis与其他key-value存储有什么不同？</strong> </p><p>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。 </p><p>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，应为数据量不能大于硬件内存。在内存数据库方面的另一个优点是， 相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。 同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。 </p><p><strong>41、Redis的内存占用情况怎么样？</strong> </p><p>给你举个例子： 100万个键值对（键是0到999999值是字符串“hello world”）在我的32位的Mac笔记本上 用了100MB。同样的数据放到一个key里只需要16MB， 这是因为键值有一个很大的开销。 在Memcached上执行也是类似的结果，但是相对Redis的开销要小一点点，因为Redis会记录类型信息引用计数等等。 </p><p>当然，大键值对时两者的比例要好很多。64位的系统比32位的需要更多的内存开销，尤其是键值对都较小时，这是因为64位的系统 里指针占用了8个字节。 但是，当然，64位系统支持更大的内存，所以为了运行大型的Redis服务器或多或少的需要使用64位的系统。 </p><p><strong>42、都有哪些办法可以降低Redis的内存使用情况呢？</strong> </p><p>如果你使用的是32位的Redis实例，可以好好利用Hash,list,sorted set,set等集合类型数据，因为通常情况下很多小的Key-Value可以用更紧凑的方式存放到一起。 </p><p><strong>43、查看Redis使用情况及状态信息用什么命令？</strong> </p><p>info </p><p><strong>44、Redis的内存用完了会发生什么？</strong> </p><p>如果达到设置的上限，Redis的写命令会返回错误信息（但是读命令还可以正常返回。）或者你可以将Redis当缓存来使用配置淘汰机制，当Redis达到内存上限时会冲刷掉旧的内容。</p><p><strong>45、Redis是单线程的，如何提高多核CPU的利用率？</strong> </p><p>可以在同一个服务器部署多个Redis的实例，并把他们当作不同的服务器来使用，在某些时候，无论如何一个服务器是不够的， 所以，如果你想使用多个CPU，你可以考虑一下分片（shard）。 </p><p>46、一个Redis实例最多能存放多少的keys？List、Set、Sorted Set他们最多能存放多少元素？ </p><p>理论上Redis可以处理多达232的keys，并且在实际中进行了测试，每个实例至少存放了2亿 5千万的keys。</p><p>任何list、set、和sorted set都可以放232个元素。 </p><p>换句话说，Redis的存储极限是系统中的可用内存值。 </p><p><strong>47、Redis常见性能问题和解决方案？</strong> </p><p>(1) Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件 </p><p>(2) 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次</p><p>(3) 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内 </p><p>(4) 尽量避免在压力很大的主库上增加从库 </p><p>(5) 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master &lt;- Slave1 &lt;- Slave2 &lt;- Slave3… </p><p>这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。 </p><p><strong>48、Redis提供了哪几种持久化方式？</strong> </p><p>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储. </p><p>AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾.Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大. </p><p>如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式. </p><p>你也可以同时开启两种持久化方式, 在这种情况下, 当redis重启的时候会优先载入AOF文件来恢复原始的数据,因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整. </p><p>最重要的事情是了解RDB和AOF持久化方式的不同,让我们以RDB持久化方式开始。 </p><p><strong>49、如何选择合适的持久化方式？</strong> </p><p>一般来说， 如果想达到足以媲美PostgreSQL的数据安全性， 你应该同时使用两种持久化功能。如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失，那么你可以只使用RDB持久化。 </p><p>有很多用户都只使用AOF持久化，但并不推荐这种方式：因为定时生成RDB快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比AOF恢复的速度要快，除此之外， 使用RDB还可以避免之前提到的AOF程序的bug。50、修改配置不重启Redis会实时生效吗？ </p><p>针对运行实例，有许多配置选项可以通过 CONFIG SET 命令进行修改，而无需执行任何形式的重启。 从 Redis 2.2 开始，可以从 AOF 切换到 RDB 的快照持久性或其他方式而不需 要重启 Redis。检索 ‘CONFIG GET *’ 命令获取更多信息。 </p><p>但偶尔重新启动是必须的，如为升级 Redis 程序到新的版本，或者当你需要修改某些目前CONFIG 命令还不支持的配置参数的时候</p><p><strong>50、redis查询为什么速度快</strong></p><p>1、redis查询完全基于内存；</p><p>​     数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)； </p><p>2、redis中的数据结构简单； </p><p>3、redis采用单线程；</p><p>​     避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</p><p>4、redis使用多路I/O复用模型；</p><p>多路I/O复用模型是利用 select、poll、epoll 可以同时监察多个流的 I/O 事件的能力 采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求 </p><p>5、redis构建了VM机制。 </p>]]></content>
    
    
    <categories>
      
      <category>面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s私有环境中通过OpenELB 暴露服务端口并结合ingress配置路由规则访问</title>
    <link href="/2022/09/25/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/k8s%E7%A7%81%E6%9C%89%E7%8E%AF%E5%A2%83%E4%B8%AD%E9%80%9A%E8%BF%87OpenELB%20%E6%9A%B4%E9%9C%B2%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%A3%E5%B9%B6%E7%BB%93%E5%90%88ingress%E9%85%8D%E7%BD%AE%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%99%E8%AE%BF%E9%97%AE/"/>
    <url>/2022/09/25/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/k8s%E7%A7%81%E6%9C%89%E7%8E%AF%E5%A2%83%E4%B8%AD%E9%80%9A%E8%BF%87OpenELB%20%E6%9A%B4%E9%9C%B2%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%A3%E5%B9%B6%E7%BB%93%E5%90%88ingress%E9%85%8D%E7%BD%AE%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%99%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="一、节点信息"><a href="#一、节点信息" class="headerlink" title="一、节点信息"></a>一、节点信息</h1><table><thead><tr><th>节点</th><th>ip</th></tr></thead><tbody><tr><td>k8s-master01</td><td>192.168.66.10</td></tr></tbody></table><p>说明：当前搭建的微服务项目服务太多，资源有限就只搭建了一个节点</p><h1 id="二、在-kube-proxy-设置strictARP"><a href="#二、在-kube-proxy-设置strictARP" class="headerlink" title="二、在 kube-proxy 设置strictARP"></a>二、在 kube-proxy 设置strictARP</h1><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">kubectl <span class="hljs-keyword">edit</span> configmap kube-proxy -n kube-<span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><p>修改：</p><p><code>data.config.conf.ipvs.strictARP</code> to <code>true</code>. </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ipvs:</span><br>  <span class="hljs-attr">strictARP:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>重启 kube-proxy:</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">kubectl rollout <span class="hljs-built_in">restart</span> daemonset kube-proxy -n kube-<span class="hljs-built_in">system</span><br></code></pre></td></tr></table></figure><h1 id="三、对存在多个网卡的节点添加一个-annotation-来指定网卡"><a href="#三、对存在多个网卡的节点添加一个-annotation-来指定网卡" class="headerlink" title="三、对存在多个网卡的节点添加一个 annotation 来指定网卡"></a>三、对存在多个网卡的节点添加一个 annotation 来指定网卡</h1><p>如果只有一个网卡可以跳过此步骤。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kubectl annotate nodes k8s-master01 layer2<span class="hljs-selector-class">.openelb</span><span class="hljs-selector-class">.kubesphere</span>.io/v1alpha1=<span class="hljs-string">&quot;192.168.66.10&quot;</span><br></code></pre></td></tr></table></figure><h1 id="四、创建Eip-对象"><a href="#四、创建Eip-对象" class="headerlink" title="四、创建Eip 对象"></a>四、创建Eip 对象</h1><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># vi layer2-eip.yaml</span><br><span class="hljs-symbol">apiVersion:</span> network.kubesphere.io/v1alpha2<br><span class="hljs-symbol">kind:</span> Eip<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> layer2-eip<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  address:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.66</span><span class="hljs-number">.91</span><span class="hljs-number">-192.168</span><span class="hljs-number">.66</span><span class="hljs-number">.100</span><br><span class="hljs-symbol">  interface:</span> eno16777736<br><span class="hljs-symbol">  protocol:</span> layer2<br></code></pre></td></tr></table></figure><p>注意：</p><p>（1）address指定的ip域为未使用的同一网段下的ip范围</p><p>（2）interface为本地网卡名</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f layer2-eip.yaml<br></code></pre></td></tr></table></figure><h1 id="五、搭建测试服务"><a href="#五、搭建测试服务" class="headerlink" title="五、搭建测试服务"></a>五、搭建测试服务</h1><p>layer2-openelb.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">layer2-openelb</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">layer2-openelb</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">layer2-openelb</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">luksa/kubia</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">kubia</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p>layer2-svc.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">layer2-svc</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">lb.kubesphere.io/v1alpha1:</span> <span class="hljs-string">openelb</span><br>    <span class="hljs-attr">protocol.openelb.kubesphere.io/v1alpha1:</span> <span class="hljs-string">layer2</span><br>    <span class="hljs-attr">eip.openelb.kubesphere.io/v1alpha2:</span> <span class="hljs-string">layer2-eip</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">layer2-openelb</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">LoadBalancer</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">externalTrafficPolicy:</span> <span class="hljs-string">Cluster</span><br></code></pre></td></tr></table></figure><p>重要提示：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">lb<span class="hljs-selector-class">.kubesphere</span>.io/v1alpha1: openelb 用来指定该 Service 使用 OpenELB。<br>protocol<span class="hljs-selector-class">.openelb</span><span class="hljs-selector-class">.kubesphere</span>.io/v1alpha1: layer2 表示指定 OpenELB 用于 Layer2 模式。<br>eip<span class="hljs-selector-class">.openelb</span><span class="hljs-selector-class">.kubesphere</span>.io/v1alpha2: layer2-eip 用来指定了 OpenELB 使用的 Eip 对象，如果未配置此注解，<br></code></pre></td></tr></table></figure><p>创建开始：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f layer2-openelb.yaml layer2-svc.yaml<br></code></pre></td></tr></table></figure><h1 id="六、结果查看"><a href="#六、结果查看" class="headerlink" title="六、结果查看"></a>六、结果查看</h1><ol><li><p>服务查看</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># kubectl get svc</span><br><span class="hljs-attribute">NAME</span>         TYPE           CLUSTER-IP      EXTERNAL-IP    PORT(S)        AGE<br><span class="hljs-attribute">kubernetes</span>   ClusterIP      <span class="hljs-number">10.233.0.1</span>      &lt;none&gt;         <span class="hljs-number">443</span>/TCP        <span class="hljs-number">20</span>h<br><span class="hljs-attribute">layer2</span>-svc   LoadBalancer   <span class="hljs-number">10.233.13.139</span>   <span class="hljs-number">192.168.66.91</span>   <span class="hljs-number">80</span>:<span class="hljs-number">32658</span>/TCP   <span class="hljs-number">14</span>s<br></code></pre></td></tr></table></figure></li><li><p>curl 192.168.66.91可以得到结果，在局域网下，访问192.168.66.91也可以得到结果</p></li></ol><h1 id="七、ingress整合"><a href="#七、ingress整合" class="headerlink" title="七、ingress整合"></a>七、ingress整合</h1><p>找到ingress 的kind: Service项</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">lb.kubesphere.io/v1alpha1</span><span class="hljs-punctuation">:</span> <span class="hljs-string">openelb</span><br>    <span class="hljs-attribute">protocol.openelb.kubesphere.io/v1alpha1</span><span class="hljs-punctuation">:</span> <span class="hljs-string">layer2</span><br>    <span class="hljs-attribute">eip.openelb.kubesphere.io/v1alpha2</span><span class="hljs-punctuation">:</span> <span class="hljs-string">layer2-eip</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>ingress</tag>
      
      <tag>openeelb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis高并发缓存设计问题与性能优化</title>
    <link href="/2022/09/07/nosql/redis/2022-09-07-Redis%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2022/09/07/nosql/redis/2022-09-07-Redis%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>缓存穿透 </p><h1 id="一、缓存穿透"><a href="#一、缓存穿透" class="headerlink" title="一、缓存穿透"></a>一、缓存穿透</h1><h2 id="1-1-说明"><a href="#1-1-说明" class="headerlink" title="1.1 说明"></a>1.1 说明</h2><p>缓存穿透是指查询一个根本不存在的数据， 缓存层和存储层都不会命中， 通常出于容错的考虑， 如果从存储层查不到数据则不写入缓存层。 </p><p>缓存穿透将导致不存在的数据每次请求都要到存储层去查询， 失去了缓存保护后端存储的意义。 </p><p>造成缓存穿透的基本原因有两个： </p><ul><li>第一， 自身业务代码或者数据出现问题。 </li><li>第二， 一些恶意攻击、 爬虫等造成大量空命中。 </li></ul><h2 id="1-2-解决方案"><a href="#1-2-解决方案" class="headerlink" title="1.2 解决方案"></a>1.2 解决方案</h2><h3 id="1-2-1-缓存空对象"><a href="#1-2-1-缓存空对象" class="headerlink" title="1.2.1 缓存空对象"></a>1.2.1 缓存空对象</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>    public Product get<span class="hljs-constructor">Product(Long <span class="hljs-params">productId</span>)</span> &#123;<br>        String productCacheKey = RedisKeyPrefixconst.PRODUCT_CACHE + productId;<br>        Product product = get<span class="hljs-constructor">ProductFromCache(<span class="hljs-params">productCacheKey</span>)</span>;<br>        <span class="hljs-keyword">if</span> (product != null) &#123;<br>            <span class="hljs-keyword">if</span> (product.get<span class="hljs-constructor">Id()</span><span class="hljs-operator"> == </span>null) return null;<br>            return product;<br>        &#125;<br>        RLock hotCacheCreateLock = redissonClient.get<span class="hljs-constructor">Lock(LOCK_PRODUCT_HOT_CACHE_CLEAR_PREFIX + <span class="hljs-params">productId</span>)</span>;<br>        hotCacheCreateLock.lock<span class="hljs-literal">()</span>;<br>        <span class="hljs-comment">//如果采用trylock，当数据库查找存在偶尔延迟操作可以提高效率；弊端：存在同一时刻查询mysql量陡增的风险</span><br><span class="hljs-comment">//        hotCacheCreateLock.tryLock(3, TimeUnit.MINUTES);</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            product = get<span class="hljs-constructor">ProductFromCache(<span class="hljs-params">productCacheKey</span>)</span>;<br>            <span class="hljs-keyword">if</span> (product != null) &#123;<br>                <span class="hljs-keyword">if</span> (product.get<span class="hljs-constructor">Id()</span><span class="hljs-operator"> == </span>null) return null;<br>                return product;<br>            &#125;<br>            RReadWriteLock productUpdateLock = redissonClient.get<span class="hljs-constructor">ReadWriteLock(LOCK_PRODUCT_UPDATE_PREFIX + <span class="hljs-params">product</span>.<span class="hljs-params">getId</span>()</span>);<br>            RLock rLock = productUpdateLock.read<span class="hljs-constructor">Lock()</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * 数据库数据查询</span><br><span class="hljs-comment">                 */</span><br>                product = baseMapper.select<span class="hljs-constructor">ById(<span class="hljs-params">productId</span>)</span>;<br>                <span class="hljs-keyword">if</span> (product != null) &#123;<br>                    redisutil.set(productCacheKey, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">JSONString(<span class="hljs-params">product</span>)</span>, get<span class="hljs-constructor">ProductCacheTimeout()</span>);<br>                    cacheMap.put(productCacheKey, product);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">/**</span><br><span class="hljs-comment">                     * 防止内存穿透 带来的性能消耗问题</span><br><span class="hljs-comment">                     */</span><br>                    redisutil.set(productCacheKey, EMPTY_CACHE, get<span class="hljs-constructor">EmptyCacheTimeout()</span>);<br>                    cacheMap.put(productCacheKey, <span class="hljs-keyword">new</span> <span class="hljs-constructor">Product()</span>);<br>                &#125;<br>            &#125; finally &#123;<br>                cacheMap.remove(productCacheKey);<br>                rLock.unlock<span class="hljs-literal">()</span>;<br>            &#125;<br>        &#125; finally &#123;<br>            hotCacheCreateLock.unlock<span class="hljs-literal">()</span>;<br>        &#125;<br><br><br>        return product;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Product get<span class="hljs-constructor">ProductFromCache(String <span class="hljs-params">productCacheKey</span>)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * JVM进程级别缓存</span><br><span class="hljs-comment">         */</span><br>        Product product = cacheMap.get(productCacheKey);<br>        <span class="hljs-keyword">if</span> (product != null) &#123;<br>            return product;<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * redis 内存数据库级别缓存</span><br><span class="hljs-comment">         */</span><br>        String productStr = (String) redisutil.get(productCacheKey);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">productStr</span>)</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EMPTY_CACHE</span>.</span></span>equals(productStr)) &#123;<br>                return <span class="hljs-keyword">new</span> <span class="hljs-constructor">Product()</span>;<br>            &#125;<br>            product = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse<span class="hljs-constructor">Object(<span class="hljs-params">productStr</span>, Product.<span class="hljs-params">class</span>)</span>;<br>        &#125;<br>        return product;<br>    &#125;<br></code></pre></td></tr></table></figure><p>过程说明：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//1 从jvm进程级别缓存</span><br>Product product = cacheMap.get(productCacheKey);<br><span class="hljs-comment">//2 redis 内存数据库级别缓存</span><br>String productStr = (String) redisutil.get(productCacheKey);<br><span class="hljs-comment">//3 当1和2都未获取到数据时就查询数据库</span><br>product = baseMapper.select<span class="hljs-constructor">ById(<span class="hljs-params">productId</span>)</span>;<br><span class="hljs-comment">//4.1 更新缓存</span><br>redisutil.set(productCacheKey, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">JSONString(<span class="hljs-params">product</span>)</span>, get<span class="hljs-constructor">ProductCacheTimeout()</span>);<br>cacheMap.put(productCacheKey, product);<br><span class="hljs-comment">//4.2 数据库未查找缓存空对象</span><br>redisutil.set(productCacheKey, EMPTY_CACHE, get<span class="hljs-constructor">EmptyCacheTimeout()</span>);<br>cacheMap.put(productCacheKey, <span class="hljs-keyword">new</span> <span class="hljs-constructor">Product()</span>);<br></code></pre></td></tr></table></figure><p>总体代码思路：Java的double checked lock思路</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">查找缓存<br><span class="hljs-built_in">if</span>(缓存不存在)&#123;<br>  查找缓存<br>  <span class="hljs-built_in">if</span>(缓存不存在)&#123;<br>     <span class="hljs-comment">//这里加入了读写锁，当数据更新时，为了查找数据为最新引入读写机制</span><br>     查找数据库   <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-2-布隆过滤器"><a href="#1-2-2-布隆过滤器" class="headerlink" title="1.2.2 布隆过滤器"></a>1.2.2 布隆过滤器</h3><p>对于不存在的数据布隆过滤器一般都能够过滤掉，不让请求再往后端发送。当布隆过滤器说某个值存在时，这个值可能不存在；当它说不存在时，那就肯定不存在。</p><img src="/2022/09/07/nosql/redis/2022-09-07-Redis%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/1664121076150.png" class="" width="1664121076150"><p> 向布隆过滤器中添加 key 时，会使用多个 hash 函数对 key 进行 hash 算得一个整数索引值然后对位数组长度 进行取模运算得到一个位置，每个 hash 函数都会算得一个不同的位置。再把位数组的这几个位置都置为 1 就 完成了 add 操作。 向布隆过滤器询问 key 是否存在时，跟 add 一样，也会把 hash 的几个位置都算出来，看看位数组中这几个 位置是否都为 1，只要有一个位为 0，那么说明布隆过滤器中这个key 不存在。如果都是 1，这并不能说明这 个 key 就一定存在，只是极有可能存在，因为这些位被置为 1 可能是因为其它的 key 存在所致。如果这个位数组比较稀疏，这个概率就会很大，如果这个位数组比较拥挤，这个概率就会降低。</p><p>这种方法适用于数据命中不高、 数据相对固定、 实时性低（通常是数据集较大） 的应用场景， 代码维护较为 复杂， 但是缓存空间占用很少。</p><p>简单来说：</p><p>就是把一个key通过多个hash函数得到值，和布隆过滤器中的size进行mod运算，得到多个位置，把状态置为1。</p><p>由于不同的key的hash可能相同，所以当前key的hash得到1时，不一定当前key一定存在；相反如果得到0时，肯定不存在。</p><p>所以在具体的项目中在需要对存储空间 和误差率做一个权衡，</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public Product get<span class="hljs-constructor">Product2(Long <span class="hljs-params">productId</span>)</span> &#123;<br><span class="hljs-comment">//这两句代码需要放到初始化中</span><br>        RBloomFilter&lt;Long&gt; bloomFilter = redissonClient.get<span class="hljs-constructor">BloomFilter(PRODUCT_CACHE_BLOOM_FILTER)</span>;<br>        bloomFilter.<span class="hljs-keyword">try</span><span class="hljs-constructor">Init(100000000L, 0.03)</span>;<br><br>        String productCacheKey = RedisKeyPrefixconst.PRODUCT_CACHE + productId;<br>        Product product = get<span class="hljs-constructor">ProductFromCache(<span class="hljs-params">productCacheKey</span>)</span>;<br>        <span class="hljs-keyword">if</span> (product != null<span class="hljs-operator"> || </span>bloomFilter.contains(productId)) &#123;<br>            return product;<br>        &#125;<br>        RLock hotCacheCreateLock = redissonClient.get<span class="hljs-constructor">Lock(LOCK_PRODUCT_HOT_CACHE_CLEAR_PREFIX + <span class="hljs-params">productId</span>)</span>;<br>        hotCacheCreateLock.lock<span class="hljs-literal">()</span>;<br>        <span class="hljs-comment">//如果采用trylock，当数据库查找存在偶尔延迟操作可以提高效率；弊端：存在同一时刻查询mysql量陡增的风险</span><br><span class="hljs-comment">//        hotCacheCreateLock.tryLock(3, TimeUnit.MINUTES);</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            product = get<span class="hljs-constructor">ProductFromCache(<span class="hljs-params">productCacheKey</span>)</span>;<br>            <span class="hljs-keyword">if</span> (product != null<span class="hljs-operator"> || </span>bloomFilter.contains(productId)) &#123;<br>                return product;<br>            &#125;<br>            RReadWriteLock productUpdateLock = redissonClient.get<span class="hljs-constructor">ReadWriteLock(LOCK_PRODUCT_UPDATE_PREFIX + <span class="hljs-params">product</span>.<span class="hljs-params">getId</span>()</span>);<br>            RLock rLock = productUpdateLock.read<span class="hljs-constructor">Lock()</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * 数据库数据查询</span><br><span class="hljs-comment">                 */</span><br>                product = baseMapper.select<span class="hljs-constructor">ById(<span class="hljs-params">productId</span>)</span>;<br>                <span class="hljs-keyword">if</span> (product != null) &#123;<br>                    redisutil.set(productCacheKey, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">JSONString(<span class="hljs-params">product</span>)</span>, get<span class="hljs-constructor">ProductCacheTimeout()</span>);<br>                    cacheMap.put(productCacheKey, product);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    bloomFilter.add(productId);<br>                &#125;<br>            &#125; finally &#123;<br>                cacheMap.remove(productCacheKey);<br>                rLock.unlock<span class="hljs-literal">()</span>;<br>            &#125;<br>        &#125; finally &#123;<br>            hotCacheCreateLock.unlock<span class="hljs-literal">()</span>;<br>        &#125;<br><br><br>        return product;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Product get<span class="hljs-constructor">ProductFromCache(String <span class="hljs-params">productCacheKey</span>)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * JVM进程级别缓存</span><br><span class="hljs-comment">         */</span><br>        Product product = cacheMap.get(productCacheKey);<br>        <span class="hljs-keyword">if</span> (product != null) &#123;<br>            return product;<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * redis 内存数据库级别缓存</span><br><span class="hljs-comment">         */</span><br>        String productStr = (String) redisutil.get(productCacheKey);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">productStr</span>)</span>) &#123;<br>            product = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse<span class="hljs-constructor">Object(<span class="hljs-params">productStr</span>, Product.<span class="hljs-params">class</span>)</span>;<br>        &#125;<br>        return product;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="二、缓存击穿"><a href="#二、缓存击穿" class="headerlink" title="二、缓存击穿"></a>二、缓存击穿</h1><p>由于大批量缓存在同一时间失效可能导致大量请求同时穿透缓存直达数据库，可能会造成数据库瞬间压力过大甚至挂掉，对于这种情况我们在批量增加缓存时最好将这一批数据的缓存过期时间设置为一个时间段内的不同时间。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//获取一个随机时间，避免同一时间段</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> Long <span class="hljs-title">getProductCacheTimeout</span>()</span> &#123;<br><span class="hljs-keyword">return</span> PRODUCT_CACHE_TIMEOUT + <span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">30</span>) * <span class="hljs-number">60</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加分布式锁机制：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">RLock hotCacheCreateLock = redissonClient.get<span class="hljs-constructor">Lock(LOCK_PRODUCT_HOT_CACHE_CLEAR_PREFIX + <span class="hljs-params">productId</span>)</span>;<br>hotCacheCreateLock.lock<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure><p>上面1.2.1的算法思路</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">查找缓存<br><span class="hljs-built_in">if</span>(缓存不存在)&#123;<br>  查找缓存<br>  <span class="hljs-built_in">if</span>(缓存不存在)&#123;<br>     <span class="hljs-comment">//这里加入了读写锁，当数据更新时，为了查找数据为最新引入读写机制</span><br>     查找数据库   <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、缓存雪崩"><a href="#三、缓存雪崩" class="headerlink" title="三、缓存雪崩"></a>三、缓存雪崩</h1><p>缓存雪崩指的是缓存层支撑不住或宕掉后， 流量会像奔逃的野牛一样， 打向后端存储层。 </p><p>由于缓存层承载着大量请求， 有效地保护了存储层， 但是如果缓存层由于某些原因不能提供服务(比如超大并发过来，缓存层支撑不住，或者由于缓存设计不好，类似大量请求访问bigkey，导致缓存能支撑的并发急剧下降)， 于是大量请求都会打到存储层， 存储层的调用量会暴增， 造成存储层也会级联宕机的情况。 </p><p>预防和解决缓存雪崩问题， 可以从以下三个方面进行着手。 </p><ul><li><p>1） 保证缓存层服务高可用性，比如使用Redis Sentinel或Redis Cluster。 </p></li><li><p>2） 依赖隔离组件为后端限流熔断并降级。比如使用Sentinel或Hystrix限流降级组件。 </p><p>比如服务降级，我们可以针对不同的数据采取不同的处理方式。当业务应用访问的是非核心数据（例如电商商品属性，用户信息等）时，暂时停止从缓存中查询这些数据，而是直接返回预定义的默认降级信息、空值或是错误提示信息；当业务应用访问的是核心数据（例如电商商品库存）时，仍然允许查询缓存，如果缓存缺失，也可以继续通过数据库读取。 </p></li><li><p>3） 提前演练。 在项目上线前， 演练缓存层宕掉后， 应用以及后端的负载情况以及可能出现的问题， 在此基础上做一些预案设定。</p></li></ul><h1 id="四、热点缓存key重建优化"><a href="#四、热点缓存key重建优化" class="headerlink" title="四、热点缓存key重建优化"></a>四、热点缓存key重建优化</h1><p>问题：</p><ul><li>当前key是一个热点key，并发量非常大。 </li><li>重建缓存不能在短时间完成， 可能是一个复杂计算， 例如复杂的SQL、 多次IO、 多个依赖等。</li></ul><p>在缓存失效的瞬间， 有大量线程来重建缓存， 造成后端负载加大， 甚至可能会让应用崩溃。 </p><p>要解决这个问题主要就是要避免大量线程同时重建缓存。 </p><p>可以利用互斥锁来解决，此方法只允许一个线程重建缓存， 其他线程等待重建缓存的线程执行完， 重新从缓存获取数据即可</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">RLock hotCacheCreateLock = redissonClient.get<span class="hljs-constructor">Lock(LOCK_PRODUCT_HOT_CACHE_CLEAR_PREFIX + <span class="hljs-params">productId</span>)</span>;<br>hotCacheCreateLock.lock<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure><h1 id="五、缓存与数据库双写不一致"><a href="#五、缓存与数据库双写不一致" class="headerlink" title="五、缓存与数据库双写不一致"></a>五、缓存与数据库双写不一致</h1><p>在大并发下，同时操作数据库与缓存会存在数据不一致性问题 </p><p>1、双写不一致情况 </p><img src="/2022/09/07/nosql/redis/2022-09-07-Redis%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/1664123235310.png" class="" width="1664123235310"><p>2、读写并发不一致 </p><img src="/2022/09/07/nosql/redis/2022-09-07-Redis%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/1664123273996.png" class="" width="1664123273996"><p>解决方案： </p><p>1、对于并发几率很小的数据(如用户数据等)，这种几乎不用考虑这个问题，很少会发生缓存不一致，可以给缓存数据加上过期时间，每隔一段时间触发读的主动更新即可。 </p><p>2、就算并发很高，如果业务上能容忍短时间的缓存数据不一致(如商品名称，商品分类菜单等)，缓存加上过期时间依然可以解决大部分业务对于缓存的要求。 </p><p>3、如果不能容忍缓存数据不一致，可以通过加读写锁保证并发读写或写写的时候按顺序排好队，读读的时候相当于无锁。 </p><p>4、也可以用阿里开源的canal通过监听数据库的binlog日志及时的去修改缓存，但是引入了新的中间件，增加了系统的复杂度。 </p><p>总结：</p><p>对于读多写少的情况加入缓存提高性能，如果写多读多的情况又不能容忍缓存数据不一致，那就没必要加缓存了，可以直接操作数据库。如果数据库抗不住压力，还可以把缓存作为数据读写的主存储，异步将数据同步到数据库，数据库只是作为数据的备份。 </p><p>放入缓存的数据应该是对实时性、一致性要求不是很高的数据。切记不要为了用缓存，同时又要保证绝对的一致性做大量的过度设计和控制，增加系统复杂性！</p><h1 id="六、redis开发规范说明"><a href="#六、redis开发规范说明" class="headerlink" title="六、redis开发规范说明"></a>六、redis开发规范说明</h1><h2 id="6-1-键值设计"><a href="#6-1-键值设计" class="headerlink" title="6.1 键值设计"></a>6.1 键值设计</h2><p><strong>key名设计</strong></p><p>(1)【建议】: 可读性和可管理性 </p><p>以业务名(或数据库名)为前缀(防止key冲突)，用冒号分隔，比如业务名:表名:id </p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">trade:</span><span class="hljs-keyword">order</span>:<span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><p>(2)【建议】：简洁性 </p><p>保证语义的前提下，控制key的长度，当key较多时，内存占用也不容忽视，例如： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">user:&#123;uid&#125;:friends:messages:&#123;mid&#125; 简化为 u:&#123;uid&#125;:frm:&#123;mid&#125; <br></code></pre></td></tr></table></figure><p>(3)【强制】：不要包含特殊字符 </p><p>反例：包含空格、换行、单双引号以及其他转义字符 </p><p><strong>value设计</strong></p><p>(1)【强制】：拒绝bigkey(防止网卡流量、慢查询) </p><p>在Redis中，一个字符串最大512MB，一个二级数据结构（例如hash、list、set、zset）可以存储大约40亿个(2^32-1)个元素，但实际中如果下面两种情况，我就会认为它是bigkey。 </p><ol><li>字符串类型：它的big体现在单个value值很大，一般认为超过10KB就是bigkey。 </li><li>非字符串类型：哈希、列表、集合、有序集合，它们的big体现在元素个数太多。 </li></ol><p>一般来说，string类型控制在10KB以内，hash、list、set、zset元素个数不要超过5000。 </p><p>反例：一个包含200万个元素的list。 </p><h2 id="6-2-bigkey的危害"><a href="#6-2-bigkey的危害" class="headerlink" title="6.2 bigkey的危害"></a>6.2 bigkey的危害</h2><p>1 导致redis阻塞 </p><p>2 网络拥塞 </p><p>bigkey也就意味着每次获取要产生的网络流量较大，假设一个bigkey为1MB，客户端每秒访问量为1000，那么每秒产生1000MB的流量，对于普通的千兆网卡(按照字节算是128MB/s)的服务器来说简直是灭顶之灾，而且一般服务器会采用单机多实例的方式来部署，也就是说一个bigkey可能会对其他实例也造成影响，其后果不堪设想。 </p><p>3 过期删除 </p><p>有个bigkey，它安分守己（只执行简单的命令，例如hget、lpop、zscore等），但它设置了过期时间，当它过期后，会被删除，如果没有使用Redis 4.0的过期异步删除(lazyfree-lazy-expire yes)，就会存在阻塞Redis的可能性。 </p><p>bigkey的产生： </p><p>一般来说，bigkey的产生都是由于程序设计不当，或者对于数据规模预料不清楚造成的，来看几个例子： </p><p>(1) 社交类：粉丝列表，如果某些明星或者大v不精心设计下，必是bigkey。 </p><p>(2) 统计类：例如按天存储某项功能或者网站的用户集合，除非没几个人用，否则必是bigkey。 </p><p>(3) 缓存类：将数据从数据库load出来序列化放到Redis里，这个方式非常常用，但有两个地方需要注意，第一，是不是有必要把所有字段都缓存；第二，有没有相关关联的数据，有的同学为了图方便把相关数据都存一个key下，产生bigkey。 </p><h2 id="6-3-如何优化bigkey"><a href="#6-3-如何优化bigkey" class="headerlink" title="6.3 如何优化bigkey"></a>6.3 如何优化bigkey</h2><ol><li>拆</li></ol><ul><li>big list： list1、list2、…listN </li><li>big hash：可以讲数据分段存储，比如一个大的key，假设存了1百万的用户数据，可以拆分成200个key，每个key下面存放5000个用户数据 </li></ul><ol start="2"><li>如果bigkey不可避免，也要思考一下要不要每次把所有元素都取出来(例如有时候仅仅需要hmget，而不是hgetall)，删除也是一样，尽量使用优雅的方式来处理。 </li></ol><h2 id="6-4-选择适合的数据类型。"><a href="#6-4-选择适合的数据类型。" class="headerlink" title="6.4 选择适合的数据类型。"></a>6.4 选择适合的数据类型。</h2><p>例如：实体类型(要合理控制和使用数据结构，但也要注意节省内存和性能之间的平衡) </p><p>反例：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">user</span>:<span class="hljs-number">1</span>:<span class="hljs-type">name</span> tom <br><span class="hljs-keyword">set</span> <span class="hljs-keyword">user</span>:<span class="hljs-number">1</span>:age <span class="hljs-number">19</span> <br><span class="hljs-keyword">set</span> <span class="hljs-keyword">user</span>:<span class="hljs-number">1</span>:favor football <br></code></pre></td></tr></table></figure><p>正例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hmset</span> user:<span class="hljs-number">1</span> name tom age <span class="hljs-number">19</span> favor football<br></code></pre></td></tr></table></figure><h2 id="6-5-控制key的生命周期，打散过期时间。"><a href="#6-5-控制key的生命周期，打散过期时间。" class="headerlink" title="6.5 控制key的生命周期，打散过期时间。"></a>6.5 控制key的生命周期，打散过期时间。</h2><h1 id="七、命令使用"><a href="#七、命令使用" class="headerlink" title="七、命令使用"></a>七、命令使用</h1><p>1.【推荐】 O(N)命令关注N的数量 </p><p>例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但是需要明确N的值。有 </p><p>遍历的需求可以使用hscan、sscan、zscan代替。 </p><p>2.【推荐】：禁用命令 </p><p>禁止线上使用keys、flushall、flushdb等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理。 </p><p>3.【推荐】合理使用select </p><p>redis的多数据库较弱，使用数字进行区分，很多客户端支持较差，同时多业务用多数据库实际还是单线程处理，会有干扰。 </p><p>4.【推荐】使用批量操作提高效率 </p><p>1 原生命令：例如mget、mset。 </p><p>2 非原生命令：可以使用pipeline提高效率。 </p><p>但要注意控制一次批量操作的元素个数(例如500以内，实际也和元素字节数有关)。 </p><p>注意两者不同： </p><ul><li>原生命令是原子操作，pipeline是非原子操作。 </li><li>pipeline可以打包不同的命令，原生命令做不到 </li><li>pipeline需要客户端和服务端同时支持。 </li></ul><p>5.【建议】Redis事务功能较弱，不建议过多使用，可以用lua替代 </p><p>例如：setNX和setnxAndExpire，setnxAndExpire可以通过lua脚本实现同时向redis发送setnx和过期时间，这样能够避免setnx后过期时间设置失败的尴尬局面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SETNX_EXPIRE_SCRIPT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;if redis.call(&#x27;setnx&#x27;, KEYS[1], ARGV[1]) == 1 then\n&quot;</span><br>          + <span class="hljs-string">&quot;return redis.call(&#x27;expire&#x27;, KEYS[1], ARGV[2]);\n&quot;</span> + <span class="hljs-string">&quot;end\n&quot;</span> + <span class="hljs-string">&quot;return 0;&quot;</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setNX</span><span class="hljs-params">(String key, <span class="hljs-type">int</span> timeout)</span> &#123;<br>      <span class="hljs-type">Boolean</span> <span class="hljs-variable">notExists</span> <span class="hljs-operator">=</span> redisTemplate.getConnectionFactory().getConnection().setNX(key.getBytes(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>]);<br>      <span class="hljs-type">Boolean</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> redisTemplate.expire(key, timeout, TimeUnit.SECONDS);<br>      <span class="hljs-keyword">return</span> notExists != <span class="hljs-literal">null</span>?notExists.booleanValue():<span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setnxAndExpire</span><span class="hljs-params">(String key,Object value,<span class="hljs-type">int</span> seconds)</span>&#123;<br>      RedisScript&lt;Long&gt; script = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;Long&gt;(SETNX_EXPIRE_SCRIPT, Long.class);<br>      <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (Long)redisTemplate.execute(script,Collections.singletonList(key),value,seconds);<br>      <span class="hljs-keyword">return</span> result&gt;<span class="hljs-number">0</span>?<span class="hljs-literal">true</span>:<span class="hljs-literal">false</span>;<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s部署seata</title>
    <link href="/2022/09/06/k8s/%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/2022-09-06-k8s%E9%83%A8%E7%BD%B2seata/"/>
    <url>/2022/09/06/k8s/%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/2022-09-06-k8s%E9%83%A8%E7%BD%B2seata/</url>
    
    <content type="html"><![CDATA[<h1 id="一、选择版本"><a href="#一、选择版本" class="headerlink" title="一、选择版本"></a>一、选择版本</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">seataio</span>/seata-server:<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="二、参数配置"><a href="#二、参数配置" class="headerlink" title="二、参数配置"></a>二、参数配置</h1><p>单配置：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">MODE:</span> standalone <br><span class="hljs-symbol">JVM_XMS:</span> <span class="hljs-number">2048</span>M<br><span class="hljs-symbol">JVM_XMX:</span> <span class="hljs-number">2048</span>M<br></code></pre></td></tr></table></figure><h1 id="三、nacos配置"><a href="#三、nacos配置" class="headerlink" title="三、nacos配置"></a>三、nacos配置</h1><p>创建空间seata-server,得到：f303fe99-86f9-41b5-8fa3-41e66f1d61b3</p><p>在seata的github得到nacos-config.sh脚本执行如下命令：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">nacos-config.sh -h <span class="hljs-number">192.168</span><span class="hljs-number">.66</span><span class="hljs-number">.10</span> -p <span class="hljs-number">31462</span> -g SEATA_GROUP -t f303fe99-86f9-<span class="hljs-number">41b5</span>-8fa3-41e66f1d61b3 -u nacos -w nacos<br></code></pre></td></tr></table></figure><img src="/2022/09/06/k8s/%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/2022-09-06-k8s%E9%83%A8%E7%BD%B2seata/1664101731429.png" class="" width="1664101731429"><h1 id="四、服务创建"><a href="#四、服务创建" class="headerlink" title="四、服务创建"></a>四、服务创建</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">seata-server</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">gulimall</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">seata-server</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8091</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30091</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">seata-server</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">seata-server</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">seata-server</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">seata-server</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">seata-server</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">seata-server</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">docker.io/seataio/seata-server:1.5.0</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SEATA_CONFIG_NAME</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">file:/root/seata-config/registry</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8091</span><br>              <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">seata-config</span><br>              <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/root/seata-config</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">seata-config</span><br>          <span class="hljs-attr">configMap:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">seata-server-config</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">seata-server-config</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">registry.conf:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    registry &#123;</span><br><span class="hljs-string">        type = &quot;nacos&quot;</span><br><span class="hljs-string">        nacos &#123;</span><br><span class="hljs-string">            application = &quot;seata-server&quot;</span><br><span class="hljs-string">            serverAddr = &quot;nacos-server-arf6.mall&quot;</span><br><span class="hljs-string">            group = &quot;SEATA_GROUP&quot;</span><br><span class="hljs-string">            namespace = &quot;f303fe99-86f9-41b5-8fa3-41e66f1d61b3&quot;</span><br><span class="hljs-string">            cluster = &quot;default&quot;</span><br><span class="hljs-string">            username = &quot;nacos&quot;</span><br><span class="hljs-string">            password = &quot;nacos&quot;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    config &#123;</span><br><span class="hljs-string">      type = &quot;nacos&quot;</span><br><span class="hljs-string">      nacos &#123;</span><br><span class="hljs-string">        serverAddr = &quot;nacos-server-arf6.mall&quot;</span><br><span class="hljs-string">        namespace = &quot;f303fe99-86f9-41b5-8fa3-41e66f1d61b3&quot;</span><br><span class="hljs-string">        group = &quot;SEATA_GROUP&quot;</span><br><span class="hljs-string">        username = &quot;nacos&quot;</span><br><span class="hljs-string">        password = &quot;nacos&quot;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br></code></pre></td></tr></table></figure><h1 id="五、修改配置"><a href="#五、修改配置" class="headerlink" title="五、修改配置"></a>五、修改配置</h1><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">service.default.grouplist</span>=seata-server.mall<br><br><span class="hljs-attr">store.mode</span>=db<br><span class="hljs-attr">store.lock.mode</span>=db<br><span class="hljs-attr">store.session.mode</span>=db<br><br><span class="hljs-attr">store.db.driverClassName</span>=com.mysql.cj.jdbc.Driver<br><span class="hljs-attr">store.db.url</span>=jdbc:mysql://mysql-master-ne5h.gulimall:<span class="hljs-number">3306</span>/seata-server?useUnicode=<span class="hljs-literal">true</span>&amp;rewriteBatchedStatements=<span class="hljs-literal">true</span><br><span class="hljs-attr">store.db.user</span>=leellun<br><span class="hljs-attr">store.db.password</span>=liulun666<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>seata</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubesphere快速部署redis</title>
    <link href="/2022/07/27/k8s/devops/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2redis/"/>
    <url>/2022/07/27/k8s/devops/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2redis/</url>
    
    <content type="html"><![CDATA[<h1 id="一、配置文件创建"><a href="#一、配置文件创建" class="headerlink" title="一、配置文件创建"></a>一、配置文件创建</h1><p>redis-conf：redis.conf</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">cluster-enabled yes <span class="hljs-comment">#开启集群</span><br>cluster-config-file nodes.conf <span class="hljs-comment">#集群node</span><br>cluster-<span class="hljs-keyword">node</span><span class="hljs-title">-timeout</span> <span class="hljs-number">5000</span> <span class="hljs-comment"># 集群延迟</span><br>appendonly yes <span class="hljs-comment"># aof文件开启</span><br>masterauth <span class="hljs-number">123456</span> <span class="hljs-comment"># 密码</span><br>requirepass <span class="hljs-number">123456</span> <span class="hljs-comment"># 认证密码</span><br></code></pre></td></tr></table></figure><h1 id="二、redis有状态服务副本集创建"><a href="#二、redis有状态服务副本集创建" class="headerlink" title="二、redis有状态服务副本集创建"></a>二、redis有状态服务副本集创建</h1><p>存储卷模板：</p><img src="/2022/07/27/k8s/devops/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2redis/1663220903688.png" class="" width="1663220903688"><p>redis 容器设置即启动命令配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">redis-server <span class="hljs-regexp">/etc/</span>redis/redis.conf<br></code></pre></td></tr></table></figure><img src="/2022/07/27/k8s/devops/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2redis/1663213016039.png" class="" width="1663213016039"><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@k8s-master01 kubesphere]# kubectl get pod,pvc -n gulimall<br>NAME                    READY   STATUS    RESTARTS   AGE<br>pod/mysql-master-v1<span class="hljs-string">-0</span>   1/1     Running   0          13h<br>pod/redis-cluster<span class="hljs-string">-0</span>     1/1     Running   0          30m<br>pod/redis-cluster<span class="hljs-string">-1</span>     1/1     Running   0          26m<br>pod/redis-cluster<span class="hljs-string">-2</span>     1/1     Running   0          26m<br>pod/redis-cluster<span class="hljs-string">-3</span>     1/1     Running   0          26m<br>pod/redis-cluster<span class="hljs-string">-4</span>     1/1     Running   0          26m<br>pod/redis-cluster<span class="hljs-string">-5</span>     1/1     Running   0          26m<br><br>NAME                                              STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS       AGE<br>persistentvolumeclaim/mysql-pvc                   Bound    pvc-c912ac48-fce5<span class="hljs-string">-4</span>ced<span class="hljs-string">-9763</span><span class="hljs-string">-2</span>b4c31687fab   30Gi       RWO            openebs-hostpath   14h<br>persistentvolumeclaim/pvc-redis-redis-cluster<span class="hljs-string">-0</span>   Bound    pvc<span class="hljs-string">-9638569</span>c<span class="hljs-string">-0095</span><span class="hljs-string">-4022</span><span class="hljs-string">-9</span>a10<span class="hljs-string">-31</span>b50602ad6d   10Gi       RWO            openebs-hostpath   30m<br>persistentvolumeclaim/pvc-redis-redis-cluster<span class="hljs-string">-1</span>   Bound    pvc-b2f190ed<span class="hljs-string">-720</span>b<span class="hljs-string">-491</span>b<span class="hljs-string">-8</span>d09<span class="hljs-string">-7350854</span>c3f46   10Gi       RWO            openebs-hostpath   26m<br>persistentvolumeclaim/pvc-redis-redis-cluster<span class="hljs-string">-2</span>   Bound    pvc<span class="hljs-string">-36</span>a96ab2<span class="hljs-string">-7</span>dc1<span class="hljs-string">-4</span>cfd<span class="hljs-string">-8</span>c7d<span class="hljs-string">-7</span>f733d37e817   10Gi       RWO            openebs-hostpath   26m<br>persistentvolumeclaim/pvc-redis-redis-cluster<span class="hljs-string">-3</span>   Bound    pvc<span class="hljs-string">-0</span>a37fdd9<span class="hljs-string">-4</span>b74<span class="hljs-string">-4</span>fc0-b009-a5ed06ecac9c   10Gi       RWO            openebs-hostpath   26m<br>persistentvolumeclaim/pvc-redis-redis-cluster<span class="hljs-string">-4</span>   Bound    pvc-ff8a3d3b<span class="hljs-string">-2</span>ec2<span class="hljs-string">-4132</span><span class="hljs-string">-9</span>d09<span class="hljs-string">-498</span>a25dcc506   10Gi       RWO            openebs-hostpath   26m<br>persistentvolumeclaim/pvc-redis-redis-cluster<span class="hljs-string">-5</span>   Bound    pvc<span class="hljs-string">-20635271</span>-fb88<span class="hljs-string">-4904</span>-af26<span class="hljs-string">-77754</span>bd64385   10Gi       RWO            openebs-hostpath   26m<br></code></pre></td></tr></table></figure><h1 id="三、查看ip"><a href="#三、查看ip" class="headerlink" title="三、查看ip"></a>三、查看ip</h1><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">[root@k8s-master01 kubesphere]# kubectl get pods -l app=redis-cluster -n gulimall -o jsonpath=&#x27;&#123;range.items[*]&#125;&#123;.status.podIP&#125;:<span class="hljs-number">6379</span> &#x27;      <br><span class="hljs-number">10.244.0.79</span>:<span class="hljs-number">6379 10.244</span>.<span class="hljs-number">0.81:6379</span> <span class="hljs-number">10.244.0.83</span>:<span class="hljs-number">6379 10.244</span>.<span class="hljs-number">0.85:6379</span> <span class="hljs-number">10.244.0.87</span>:<span class="hljs-number">6379 10.244</span>.<span class="hljs-number">0.89:6379</span><br></code></pre></td></tr></table></figure><h1 id="四、集群"><a href="#四、集群" class="headerlink" title="四、集群"></a>四、集群</h1><p>这里通过ip集群，最好通过pod.svc。例如：redis-cluster-0.redis-cluster-85pg,redis-cluster-1.redis-cluster-85pg,redis-cluster-2.redis-cluster-85pg,redis-cluster-3.redis-cluster-85pg,redis-cluster-4.redis-cluster-85pg,redis-cluster-5.redis-cluster-85pg</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">kubectl exec -it redis-cluster-<span class="hljs-number">0</span> -n gulimall -- redis-cli --cluster create --cluster-replicas <span class="hljs-number">1</span> <span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">pods</span> -<span class="hljs-params">l</span> <span class="hljs-params">app</span>=<span class="hljs-params">redis</span>-<span class="hljs-params">cluster</span> -<span class="hljs-params">n</span> <span class="hljs-params">gulimall</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=&#x27;&#123;<span class="hljs-params">range</span>.<span class="hljs-params">items</span>[<span class="hljs-operator">*</span>]&#125;&#123;.<span class="hljs-params">status</span>.<span class="hljs-params">podIP</span>&#125;:6379 &#x27;)</span> -a <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>结果打印：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">Warning:</span> <span class="hljs-keyword">Using</span> a password <span class="hljs-keyword">with</span> <span class="hljs-comment">&#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br>&gt;&gt;&gt; Performing hash slots allocation <span class="hljs-keyword">on</span> <span class="hljs-number">6</span> nodes...<br>Master[<span class="hljs-number">0</span>] -&gt; Slots <span class="hljs-number">0</span> - <span class="hljs-number">5460</span><br>Master[<span class="hljs-number">1</span>] -&gt; Slots <span class="hljs-number">5461</span> - <span class="hljs-number">10922</span><br>Master[<span class="hljs-number">2</span>] -&gt; Slots <span class="hljs-number">10923</span> - <span class="hljs-number">16383</span><br>Adding replica <span class="hljs-number">10.244</span>.<span class="hljs-number">0.87</span>:<span class="hljs-number">6379</span> <span class="hljs-keyword">to</span> <span class="hljs-number">10.244</span>.<span class="hljs-number">0.79</span>:<span class="hljs-number">6379</span><br>Adding replica <span class="hljs-number">10.244</span>.<span class="hljs-number">0.89</span>:<span class="hljs-number">6379</span> <span class="hljs-keyword">to</span> <span class="hljs-number">10.244</span>.<span class="hljs-number">0.81</span>:<span class="hljs-number">6379</span><br>Adding replica <span class="hljs-number">10.244</span>.<span class="hljs-number">0.85</span>:<span class="hljs-number">6379</span> <span class="hljs-keyword">to</span> <span class="hljs-number">10.244</span>.<span class="hljs-number">0.83</span>:<span class="hljs-number">6379</span><br><span class="hljs-symbol">M:</span> <span class="hljs-number">6</span>a8be8e3baaff7e6569484b68173f9ae929687a4 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.79</span>:<span class="hljs-number">6379</span><br>   slots:[<span class="hljs-number">0</span>-<span class="hljs-number">5460</span>] (<span class="hljs-number">5461</span> slots) master<br><span class="hljs-symbol">M:</span> c902a47a859884e9d8e9e98463c998bafa8c456b <span class="hljs-number">10.244</span>.<span class="hljs-number">0.81</span>:<span class="hljs-number">6379</span><br>   slots:[<span class="hljs-number">5461</span>-<span class="hljs-number">10922</span>] (<span class="hljs-number">5462</span> slots) master<br><span class="hljs-symbol">M:</span> edbddb2005e23a357f371fed804fc490bcabbdc0 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.83</span>:<span class="hljs-number">6379</span><br>   slots:[<span class="hljs-number">10923</span>-<span class="hljs-number">16383</span>] (<span class="hljs-number">5461</span> slots) master<br><span class="hljs-symbol">S:</span> <span class="hljs-number">6255</span>f444e9f53ba7d4e0c3714111820347f60ab8 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.85</span>:<span class="hljs-number">6379</span><br>   replicates edbddb2005e23a357f371fed804fc490bcabbdc0<br><span class="hljs-symbol">S:</span> <span class="hljs-number">4563856</span>b15f4a6325c9f22dcc4f3b49b5867adc4 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.87</span>:<span class="hljs-number">6379</span><br>   replicates <span class="hljs-number">6</span>a8be8e3baaff7e6569484b68173f9ae929687a4<br><span class="hljs-symbol">S:</span> db1d355eb2cf0ffa12240658aceadf737e00cfd3 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.89</span>:<span class="hljs-number">6379</span><br>   replicates c902a47a859884e9d8e9e98463c998bafa8c456b<br>Can I <span class="hljs-keyword">set</span> the above configuration? (type <span class="hljs-comment">&#x27;yes&#x27; to accept): yes</span><br>&gt;&gt;&gt; Nodes configuration updated<br>&gt;&gt;&gt; Assign a different config epoch <span class="hljs-keyword">to</span> <span class="hljs-keyword">each</span> node<br>&gt;&gt;&gt; Sending CLUSTER MEET messages <span class="hljs-keyword">to</span> <span class="hljs-keyword">join</span> the cluster<br>Waiting <span class="hljs-keyword">for</span> the cluster <span class="hljs-keyword">to</span> <span class="hljs-keyword">join</span><br>.<br>&gt;&gt;&gt; Performing Cluster Check (<span class="hljs-keyword">using</span> node <span class="hljs-number">10.244</span>.<span class="hljs-number">0.79</span>:<span class="hljs-number">6379</span>)<br><span class="hljs-symbol">M:</span> <span class="hljs-number">6</span>a8be8e3baaff7e6569484b68173f9ae929687a4 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.79</span>:<span class="hljs-number">6379</span><br>   slots:[<span class="hljs-number">0</span>-<span class="hljs-number">5460</span>] (<span class="hljs-number">5461</span> slots) master<br>   <span class="hljs-number">1</span> additional replica(s)<br><span class="hljs-symbol">S:</span> db1d355eb2cf0ffa12240658aceadf737e00cfd3 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.89</span>:<span class="hljs-number">6379</span><br>   slots: (<span class="hljs-number">0</span> slots) slave<br>   replicates c902a47a859884e9d8e9e98463c998bafa8c456b<br><span class="hljs-symbol">S:</span> <span class="hljs-number">6255</span>f444e9f53ba7d4e0c3714111820347f60ab8 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.85</span>:<span class="hljs-number">6379</span><br>   slots: (<span class="hljs-number">0</span> slots) slave<br>   replicates edbddb2005e23a357f371fed804fc490bcabbdc0<br><span class="hljs-symbol">S:</span> <span class="hljs-number">4563856</span>b15f4a6325c9f22dcc4f3b49b5867adc4 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.87</span>:<span class="hljs-number">6379</span><br>   slots: (<span class="hljs-number">0</span> slots) slave<br>   replicates <span class="hljs-number">6</span>a8be8e3baaff7e6569484b68173f9ae929687a4<br><span class="hljs-symbol">M:</span> c902a47a859884e9d8e9e98463c998bafa8c456b <span class="hljs-number">10.244</span>.<span class="hljs-number">0.81</span>:<span class="hljs-number">6379</span><br>   slots:[<span class="hljs-number">5461</span>-<span class="hljs-number">10922</span>] (<span class="hljs-number">5462</span> slots) master<br>   <span class="hljs-number">1</span> additional replica(s)<br><span class="hljs-symbol">M:</span> edbddb2005e23a357f371fed804fc490bcabbdc0 <span class="hljs-number">10.244</span>.<span class="hljs-number">0.83</span>:<span class="hljs-number">6379</span><br>   slots:[<span class="hljs-number">10923</span>-<span class="hljs-number">16383</span>] (<span class="hljs-number">5461</span> slots) master<br>   <span class="hljs-number">1</span> additional replica(s)<br>[OK] All nodes agree about slots configuration.<br>&gt;&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...<br>&gt;&gt;&gt; Check slots coverage...<br>[OK] All <span class="hljs-number">16384</span> slots covered.<br></code></pre></td></tr></table></figure><p>验证集群：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">kubectl exec -<span class="hljs-keyword">it</span> redis-cluster<span class="hljs-number">-0</span> -n gulimall <span class="hljs-comment">-- redis-cli cluster info </span><br></code></pre></td></tr></table></figure><p>角色查看：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master01 src]# <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> $(seq <span class="hljs-number">0</span> <span class="hljs-number">5</span>); <span class="hljs-keyword">do</span> echo &quot;redis-cluster-$x&quot;; kubectl exec redis-<span class="hljs-keyword">cluster</span>-$x -n gulimall <span class="hljs-comment">-- redis-cli -a 123456 role; echo; done </span><br>redis-<span class="hljs-keyword">cluster</span><span class="hljs-number">-0</span><br><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">Using</span> a <span class="hljs-keyword">password</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;-a&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;-u&#x27;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">on</span> the command <span class="hljs-type">line</span> interface may <span class="hljs-keyword">not</span> be safe.<br>master<br><span class="hljs-number">2215</span><br><span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.87</span><br><span class="hljs-number">6379</span><br><span class="hljs-number">2215</span><br><br>redis-<span class="hljs-keyword">cluster</span><span class="hljs-number">-1</span><br>master<br><span class="hljs-number">2156</span><br><span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.89</span><br><span class="hljs-number">6379</span><br><span class="hljs-number">2156</span><br><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">Using</span> a <span class="hljs-keyword">password</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;-a&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;-u&#x27;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">on</span> the command <span class="hljs-type">line</span> interface may <span class="hljs-keyword">not</span> be safe.<br><br>redis-<span class="hljs-keyword">cluster</span><span class="hljs-number">-2</span><br><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">Using</span> a <span class="hljs-keyword">password</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;-a&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;-u&#x27;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">on</span> the command <span class="hljs-type">line</span> interface may <span class="hljs-keyword">not</span> be safe.<br>master<br><span class="hljs-number">2156</span><br><span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.85</span><br><span class="hljs-number">6379</span><br><span class="hljs-number">2156</span><br><br>redis-<span class="hljs-keyword">cluster</span><span class="hljs-number">-3</span><br><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">Using</span> a <span class="hljs-keyword">password</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;-a&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;-u&#x27;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">on</span> the command <span class="hljs-type">line</span> interface may <span class="hljs-keyword">not</span> be safe.<br>slave<br><span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.83</span><br><span class="hljs-number">6379</span><br>connected<br><span class="hljs-number">2156</span><br><br>redis-<span class="hljs-keyword">cluster</span><span class="hljs-number">-4</span><br><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">Using</span> a <span class="hljs-keyword">password</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;-a&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;-u&#x27;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">on</span> the command <span class="hljs-type">line</span> interface may <span class="hljs-keyword">not</span> be safe.<br>slave<br><span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.79</span><br><span class="hljs-number">6379</span><br>connected<br><span class="hljs-number">2229</span><br><br>redis-<span class="hljs-keyword">cluster</span><span class="hljs-number">-5</span><br>slave<br><span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.81</span><br><span class="hljs-number">6379</span><br>connected<br><span class="hljs-number">2156</span><br><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">Using</span> a <span class="hljs-keyword">password</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;-a&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;-u&#x27;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">on</span> the command <span class="hljs-type">line</span> interface may <span class="hljs-keyword">not</span> be safe.<br></code></pre></td></tr></table></figure><p>启动集群：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">kubectl exec -it redis-<span class="hljs-keyword">cluster</span>-0 -<span class="hljs-keyword">n</span> gulimall -- redis-<span class="hljs-keyword">cli</span> redis-<span class="hljs-keyword">cli</span> -c -p 6379<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master01 src]# kubectl exec redis-<span class="hljs-keyword">cluster</span><span class="hljs-number">-3</span> -n gulimall -it <span class="hljs-comment">-- /bin/sh</span><br># redis-cli -c -a <span class="hljs-number">123456</span><br><span class="hljs-built_in">Warning</span>: <span class="hljs-keyword">Using</span> a <span class="hljs-keyword">password</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;-a&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;-u&#x27;</span> <span class="hljs-keyword">option</span> <span class="hljs-keyword">on</span> the command <span class="hljs-type">line</span> interface may <span class="hljs-keyword">not</span> be safe.<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-keyword">get</span> aa<br>-&gt; Redirected <span class="hljs-keyword">to</span> slot [<span class="hljs-number">1180</span>] located at <span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.79</span>:<span class="hljs-number">6379</span><br>&quot;234234&quot;<br></code></pre></td></tr></table></figure><h1 id="五、整理操作"><a href="#五、整理操作" class="headerlink" title="五、整理操作"></a>五、整理操作</h1><p>软件版本：redis:5.0</p><p>配置文件：redis-conf：redis.conf</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">cluster-enabled yes <span class="hljs-comment">#开启集群</span><br>cluster-config-file nodes.conf <span class="hljs-comment">#集群node</span><br>cluster-<span class="hljs-keyword">node</span><span class="hljs-title">-timeout</span> <span class="hljs-number">5000</span> <span class="hljs-comment"># 集群延迟</span><br>appendonly yes <span class="hljs-comment"># aof文件开启</span><br>masterauth <span class="hljs-number">123456</span> <span class="hljs-comment"># 密码</span><br>requirepass <span class="hljs-number">123456</span> <span class="hljs-comment"># 认证密码</span><br></code></pre></td></tr></table></figure><p>配置文件挂载：/etc/redis/redis.conf</p><p>数据挂载：/data</p><p>启动命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">redis-server <span class="hljs-regexp">/etc/</span>redis/redis.conf<br></code></pre></td></tr></table></figure><p>集群：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kubectl exec -it redis-cluster-<span class="hljs-number">0</span> -n gulimall -- redis-cli <span class="hljs-attr">--cluster</span> create <span class="hljs-attr">--cluster-replicas</span> <span class="hljs-number">1</span> redis-cluster-<span class="hljs-number">0</span><span class="hljs-selector-class">.redis-cluster</span><span class="hljs-selector-class">.gulimall</span>,redis-cluster-<span class="hljs-number">1</span><span class="hljs-selector-class">.redis-cluster</span><span class="hljs-selector-class">.gulimall</span>,redis-cluster-<span class="hljs-number">2</span><span class="hljs-selector-class">.redis-cluster</span><span class="hljs-selector-class">.gulimall</span>,redis-cluster-<span class="hljs-number">3</span><span class="hljs-selector-class">.redis-cluster</span><span class="hljs-selector-class">.gulimall</span>,redis-cluster-<span class="hljs-number">4</span><span class="hljs-selector-class">.redis-cluster</span><span class="hljs-selector-class">.gulimall</span>,redis-cluster-<span class="hljs-number">5</span><span class="hljs-selector-class">.redis-cluster</span><span class="hljs-selector-class">.gulimall</span> -<span class="hljs-selector-tag">a</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>验证集群：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">kubectl exec -<span class="hljs-keyword">it</span> redis-cluster<span class="hljs-number">-0</span> -n gulimall <span class="hljs-comment">-- redis-cli cluster info </span><br></code></pre></td></tr></table></figure><p>角色查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 0 5); <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;redis-cluster-<span class="hljs-variable">$x</span>&quot;</span>; kubectl <span class="hljs-built_in">exec</span> redis-cluster-<span class="hljs-variable">$x</span> -n gulimall -- redis-cli -a 123456 role; <span class="hljs-built_in">echo</span>; <span class="hljs-keyword">done</span> <br></code></pre></td></tr></table></figure><p>启动集群：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">kubectl exec -it redis-<span class="hljs-keyword">cluster</span>-0 -<span class="hljs-keyword">n</span> gulimall -- redis-<span class="hljs-keyword">cli</span> redis-<span class="hljs-keyword">cli</span> -c -p 6379<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>kubesphere</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubesphere快速部署mysql</title>
    <link href="/2022/07/26/k8s/devops/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2mysql/"/>
    <url>/2022/07/26/k8s/devops/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="一、docker部署方式"><a href="#一、docker部署方式" class="headerlink" title="一、docker部署方式"></a>一、docker部署方式</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> --name some-mysql -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=my-secret-pw -d mysql:8.0 <span class="hljs-attribute">--character-set-server</span>=utf8mb4 <span class="hljs-attribute">--collation-server</span>=utf8mb4_unicode_ci<br></code></pre></td></tr></table></figure><h1 id="二、k8s有状态部署方式"><a href="#二、k8s有状态部署方式" class="headerlink" title="二、k8s有状态部署方式"></a>二、k8s有状态部署方式</h1><h2 id="2-1-准备配置文件"><a href="#2-1-准备配置文件" class="headerlink" title="2.1 准备配置文件"></a>2.1 准备配置文件</h2><p>创建my-cnf的ConfigMap，键为my.cnf</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs gams">[client]<br>default-character-<span class="hljs-keyword">set</span>=utf8mb4<br>[mysql]<br>default-character-<span class="hljs-keyword">set</span>=utf8mb4<br>[mysqld]<br>max_connections <span class="hljs-comment">= 2000</span><br>secure_file_priv=/var/lib/mysql<br>basedir=/var/lib/mysql<br>datadir=/var/lib/mysql/data<br>sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION<br>skip-name-resolve<br>open_files_limit <span class="hljs-comment">= 65535</span><br>table_open_cache <span class="hljs-comment">= 128</span><br>log_error <span class="hljs-comment">=</span> /var/<span class="hljs-comment">lib</span>/mysql/<span class="hljs-comment">mysql-error.log</span><br>slow_query_log <span class="hljs-comment">= 1</span><br>long_query_time <span class="hljs-comment">= 1</span><br>slow_query_log_file <span class="hljs-comment">=</span> /var/<span class="hljs-comment">lib</span>/mysql/<span class="hljs-comment">mysql-slow.log</span><br>default-storage-engine <span class="hljs-comment">= InnoDB</span><br>innodb_file_per_table <span class="hljs-comment">= 1</span><br>innodb_open_files <span class="hljs-comment">= 500</span><br>innodb_buffer_pool_size <span class="hljs-comment">= 64M</span><br>innodb_write_io_threads <span class="hljs-comment">= 4</span><br>innodb_read_io_threads <span class="hljs-comment">= 4</span><br>innodb_thread_concurrency <span class="hljs-comment">= 0</span><br>innodb_purge_threads <span class="hljs-comment">= 1</span><br>innodb_flush_log_at_trx_commit <span class="hljs-comment">= 2</span><br>innodb_log_buffer_size <span class="hljs-comment">= 2M</span><br>innodb_log_file_size <span class="hljs-comment">= 32M</span><br>innodb_log_files_in_group <span class="hljs-comment">= 3</span><br>innodb_max_dirty_pages_pct <span class="hljs-comment">= 90</span><br>innodb_lock_wait_timeout <span class="hljs-comment">= 120</span><br>bulk_insert_buffer_size <span class="hljs-comment">= 8M</span><br>myisam_sort_buffer_size <span class="hljs-comment">= 8M</span><br>myisam_max_sort_file_size <span class="hljs-comment">= 10G</span><br>myisam_repair_threads <span class="hljs-comment">= 1</span><br>interactive_timeout <span class="hljs-comment">= 28800</span><br>wait_timeout <span class="hljs-comment">= 28800</span><br>[mysqldump]<br>quick<br>max_allowed_packet <span class="hljs-comment">= 16M</span><br>[myisamchk]<br>key_buffer_size <span class="hljs-comment">= 8M</span><br>sort_buffer_size <span class="hljs-comment">= 8M</span><br>read_buffer <span class="hljs-comment">= 4M</span><br>write_buffer <span class="hljs-comment">= 4M</span><br></code></pre></td></tr></table></figure><img src="/2022/07/26/k8s/devops/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2mysql/1663167746173.png" class="" width="1663167746173"><img src="/2022/07/26/k8s/devops/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2mysql/1663170735856.png" class="" width="1663170735856"><h2 id="2-2-mysql有状态持久卷创建"><a href="#2-2-mysql有状态持久卷创建" class="headerlink" title="2.2 mysql有状态持久卷创建"></a>2.2 mysql有状态持久卷创建</h2><img src="/2022/07/26/k8s/devops/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2mysql/1663167951290.png" class="" width="1663167951290"><h2 id="2-3-创建mysql服务"><a href="#2-3-创建mysql服务" class="headerlink" title="2.3 创建mysql服务"></a>2.3 创建mysql服务</h2><img src="/2022/07/26/k8s/devops/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2mysql/1663168060307.png" class="" width="1663168060307"><p>配置文件挂在：持久卷可以创建也可以指定持久卷模板，地址 /var/lib/mysql</p><img src="/2022/07/26/k8s/devops/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2mysql/1663169165653.png" class="" width="1663169165653"><p>存储卷挂载：挂载配置文件my.cnf，挂载/etc/mysql/my.cnf</p><img src="/2022/07/26/k8s/devops/kubesphere%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2mysql/1663169211109.png" class="" width="1663169211109"><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>kubesphere</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>devops之KubeSphere流水线部署</title>
    <link href="/2022/07/26/k8s/devops/devops%E4%B9%8BKubeSphere%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/07/26/k8s/devops/devops%E4%B9%8BKubeSphere%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<img src="/2022/07/26/k8s/devops/devops%E4%B9%8BKubeSphere%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2/pipeline-overview.png" class="" title="流水线概览"> <ul><li><strong>阶段 1：Checkout SCM</strong>：从 GitHub 仓库检出源代码。</li><li><strong>阶段 2：单元测试</strong>：待该测试通过后才会进行下一阶段。</li><li><strong>阶段 3：SonarQube 分析</strong>：SonarQube 代码质量分析。</li><li><strong>阶段 4：构建并推送快照镜像</strong>：根据<strong>策略设置</strong>中选定的分支来构建镜像，并将 <code>SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER</code> 标签推送至 Docker Hub，其中 <code>$BUILD_NUMBER</code> 为流水线活动列表中的运行序号。</li><li><strong>阶段 5：推送最新镜像</strong>：将 SonarQube 分支标记为 <code>latest</code>，并推送至 Docker Hub。</li><li><strong>阶段 6：部署至开发环境</strong>：将 SonarQube 分支部署到开发环境，此阶段需要审核。</li><li><strong>阶段 7：带标签推送</strong>：生成标签并发布到 GitHub，该标签会推送到 Docker Hub。</li><li><strong>阶段 8：部署至生产环境</strong>：将已发布的标签部署到生产环境。</li></ul><h1 id="一、开启devops"><a href="#一、开启devops" class="headerlink" title="一、开启devops"></a>一、开启devops</h1><p>cluster-configuration.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">devops:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 将“false”更改为“true”。</span><br></code></pre></td></tr></table></figure><p>执行：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl apply -f <span class="hljs-keyword">cluster</span>-<span class="hljs-keyword">configuration</span>.yaml<br></code></pre></td></tr></table></figure><p>查看安装情况：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">kubectl logs -n kubesphere-system <span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">pod</span> -<span class="hljs-params">n</span> <span class="hljs-params">kubesphere</span>-<span class="hljs-params">system</span> -<span class="hljs-params">l</span> &#x27;<span class="hljs-params">app</span> <span class="hljs-params">in</span> (<span class="hljs-params">ks</span>-<span class="hljs-params">install</span>, <span class="hljs-params">ks</span>-<span class="hljs-params">installer</span>)</span>&#x27; -o jsonpath=&#x27;&#123;.items<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>.metadata.name&#125;&#x27;) -f<br></code></pre></td></tr></table></figure><p>查看结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 kubesphere]# kubectl <span class="hljs-keyword">get</span> pod <span class="hljs-comment">--all-namespaces</span><br>NAMESPACE                      NAME                                                              READY   STATUS      RESTARTS         AGE<br>argocd                         devops<span class="hljs-operator">-</span>argocd<span class="hljs-operator">-</span>application<span class="hljs-operator">-</span>controller<span class="hljs-number">-0</span>                            <span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">9</span> (<span class="hljs-number">29</span>s ago)      <span class="hljs-number">24</span>m<br>argocd                         devops<span class="hljs-operator">-</span>argocd<span class="hljs-operator">-</span>applicationset<span class="hljs-operator">-</span>controller<span class="hljs-operator">-</span>b88d4b875<span class="hljs-operator">-</span>hztm8           <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>                <span class="hljs-number">24</span>m<br>argocd                         devops<span class="hljs-operator">-</span>argocd<span class="hljs-operator">-</span>dex<span class="hljs-operator">-</span>server<span class="hljs-number">-5</span>f4c69cdb8<span class="hljs-number">-26</span>d9x                         <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>                <span class="hljs-number">24</span>m<br>argocd                         devops<span class="hljs-operator">-</span>argocd<span class="hljs-operator">-</span>notifications<span class="hljs-operator">-</span>controller<span class="hljs-number">-6</span>d86f8974f<span class="hljs-operator">-</span>twlk6           <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>                <span class="hljs-number">24</span>m<br>argocd                         devops<span class="hljs-operator">-</span>argocd<span class="hljs-operator">-</span>redis<span class="hljs-number">-655969589</span>d<span class="hljs-operator">-</span>vbzfq                              <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>                <span class="hljs-number">24</span>m<br>argocd                         devops<span class="hljs-operator">-</span>argocd<span class="hljs-operator">-</span>repo<span class="hljs-operator">-</span>server<span class="hljs-operator">-</span>f77687668<span class="hljs-operator">-</span>l46fj                         <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>                <span class="hljs-number">24</span>m<br>argocd                         devops<span class="hljs-operator">-</span>argocd<span class="hljs-operator">-</span>server<span class="hljs-number">-6</span>c55bbb84f<span class="hljs-operator">-</span>tgdv6                             <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>                <span class="hljs-number">24</span>m<br>....<br></code></pre></td></tr></table></figure><img src="/2022/07/26/k8s/devops/devops%E4%B9%8BKubeSphere%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2/1662990207401.png" class="" width="1662990207401"><p>jdk11:</p><p>在<strong>配置字典</strong>页面的搜索框中输入 <code>jenkins-casc-config</code> 并按<strong>回车键</strong>。 </p><h1 id="二、创建凭证"><a href="#二、创建凭证" class="headerlink" title="二、创建凭证"></a>二、创建凭证</h1><h2 id="1-1-创建dockerhub凭证"><a href="#1-1-创建dockerhub凭证" class="headerlink" title="1.1 创建dockerhub凭证"></a>1.1 创建dockerhub凭证</h2><ol><li><p>登录 Docker Hub，点击右上角的帐户，并从菜单中选择 <strong>Account Settings</strong>。</p></li><li><p>在左侧导航栏点击 <strong>Security</strong>，然后点击 <strong>New Access Token</strong>。</p></li><li><p>在弹出的对话框中，输入令牌名称（<code>go-project-token</code>），点击 <strong>Create</strong>。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">dockerhub-<span class="hljs-built_in">id</span><br>用户名：leellun<br>密码：dckr_pat_P9abXAwRM9TU96yyERoODoyThRY<br></code></pre></td></tr></table></figure></li><li><p>点击 <strong>Copy and Close</strong> 并务必保存该访问令牌。</p></li></ol><img src="/2022/07/26/k8s/devops/devops%E4%B9%8BKubeSphere%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2/1662995312671.png" class="" width="1662995312671"><h2 id="1-2-github凭证"><a href="#1-2-github凭证" class="headerlink" title="1.2 github凭证"></a>1.2 github凭证</h2><p>github-id</p><p>用户名和token添加</p><h2 id="1-3-kubeconfig凭证添加"><a href="#1-3-kubeconfig凭证添加" class="headerlink" title="1.3 kubeconfig凭证添加"></a>1.3 kubeconfig凭证添加</h2><p>可以用root/.kube/config内容，也可以生成用户认证kubeconfig</p><img src="/2022/07/26/k8s/devops/devops%E4%B9%8BKubeSphere%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2/1662995264415.png" class="" width="1662995264415"><h2 id="1-4-SonarQube凭证添加"><a href="#1-4-SonarQube凭证添加" class="headerlink" title="1.4 SonarQube凭证添加"></a>1.4 SonarQube凭证添加</h2><p>sonar-token</p><p>进入sonarqube添加项目并且生成token：<strong>caea718fe1c8d61628c85cc642998605247c4de9</strong> </p><img src="/2022/07/26/k8s/devops/devops%E4%B9%8BKubeSphere%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2/1662997272162.png" class="" width="1662997272162"> <p>配置sonarqube凭证：</p><p>用户名和token添加</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">user:</span> <br><span class="hljs-symbol">token:</span> caea<span class="hljs-number">718</span>fe<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">8</span>d<span class="hljs-number">61628</span><span class="hljs-keyword">c</span><span class="hljs-number">85</span><span class="hljs-keyword">cc</span><span class="hljs-number">642998605247</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span>de<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h1 id="三、修改-Jenkinsfile"><a href="#三、修改-Jenkinsfile" class="headerlink" title="三、修改 Jenkinsfile"></a>三、修改 Jenkinsfile</h1><img src="/2022/07/26/k8s/devops/devops%E4%B9%8BKubeSphere%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%83%A8%E7%BD%B2/jenkins-edit--2.png" class="" title="jenkins-edit--2"><table><thead><tr><th>条目</th><th>值</th><th>描述信息</th></tr></thead><tbody><tr><td>DOCKER_CREDENTIAL_ID</td><td>dockerhub-id</td><td>您在 KubeSphere 中为 Docker Hub 帐户设置的<strong>名称</strong>。</td></tr><tr><td>GITHUB_CREDENTIAL_ID</td><td>github-id</td><td>您在 KubeSphere 中为 GitHub 帐户设置的<strong>名称</strong>，用于将标签推送至您的 GitHub 仓库。</td></tr><tr><td>KUBECONFIG_CREDENTIAL_ID</td><td>demo-kubeconfig</td><td>您在 KubeSphere 中为 kubeconfig 设置的<strong>名称</strong>，用于访问运行中的 Kubernetes 集群。</td></tr><tr><td>REGISTRY</td><td>docker.io</td><td>默认为 <code>docker.io</code>，用作推送镜像的地址。</td></tr><tr><td>DOCKERHUB_NAMESPACE</td><td>your-dockerhub-account</td><td>请替换为您的 Docker Hub 帐户名，也可以替换为该帐户下的 Organization 名称。</td></tr><tr><td>GITHUB_ACCOUNT</td><td>your-github-account</td><td>请替换为您的 GitHub 帐户名。例如，如果您的 GitHub 地址是 <code>https://github.com/kubesphere/</code>，则您的 GitHub 帐户名为 <code>kubesphere</code>，也可以替换为该帐户下的 Organization 名称。</td></tr><tr><td>APP_NAME</td><td>devops-maven-sample</td><td>应用名称。</td></tr><tr><td>SONAR_CREDENTIAL_ID</td><td>sonar-token</td><td>您在 KubeSphere 中为 SonarQube 令牌设置的<strong>名称</strong>，用于代码质量检测。</td></tr></tbody></table><h1 id="四、具体Jenkinsfile根据项目而定"><a href="#四、具体Jenkinsfile根据项目而定" class="headerlink" title="四、具体Jenkinsfile根据项目而定"></a>四、具体Jenkinsfile根据项目而定</h1><p>下面选用的代码仓库是码云、docker镜像仓库是dockerhub、代码分析sonar是自己部署的</p><p>流水线步骤：拉取镜像——单元测试——代码质量分析——编译 &amp; 推送——推送最新——发布开发环境——推送正式版本——发布生产环境</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">pipeline</span> &#123;<br>  agent &#123;<br>    <span class="hljs-keyword">node</span> &#123;<br>      label <span class="hljs-string">&#x27;maven&#x27;</span><br>    &#125;<br><br>  &#125;<br>  <span class="hljs-keyword">environment</span> &#123;<br>    DOCKER_CREDENTIAL_ID = <span class="hljs-string">&#x27;dockerhub-id&#x27;</span><br>    GITEE_CREDENTIAL_ID = <span class="hljs-string">&#x27;gitee-id&#x27;</span><br>    KUBECONFIG_CREDENTIAL_ID = <span class="hljs-string">&#x27;kubeconfig&#x27;</span><br>    REGISTRY = <span class="hljs-string">&#x27;docker.io&#x27;</span><br>    DOCKERHUB_NAMESPACE = <span class="hljs-string">&#x27;leellun&#x27;</span><br>    GIT_ACCOUNT = <span class="hljs-string">&#x27;myselfyou&#x27;</span><br>    SONAR_CREDENTIAL_ID = <span class="hljs-string">&#x27;sonar-token&#x27;</span><br>    BRANCH_NAME = <span class="hljs-string">&#x27;master&#x27;</span><br>  &#125;<br>  <span class="hljs-keyword">parameters</span> &#123;<br>    string(<span class="hljs-literal">name</span>: <span class="hljs-string">&#x27;PROJECT_VERSION&#x27;</span>, defaultValue: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-literal">description</span>: <span class="hljs-string">&#x27;版本&#x27;</span>)<br>    string(<span class="hljs-literal">name</span>: <span class="hljs-string">&#x27;PROJECT_NAME&#x27;</span>, defaultValue: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-literal">description</span>: <span class="hljs-string">&#x27;项目名称&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">stages</span> &#123;<br>    stage(<span class="hljs-string">&#x27;拉取代码&#x27;</span>) &#123;<br>      steps &#123;<br>        sh <span class="hljs-string">&quot;echo 正在构建 <span class="hljs-variable">$PROJECT_NAME</span> 版本号：<span class="hljs-variable">$PROJECT_VERSION</span> 将会提交给 <span class="hljs-variable">$REGISTRY</span> 镜像仓库&quot;</span><br>        git(url: <span class="hljs-string">&#x27;https://gitee.com/myselfyou/gulimall-learng.git&#x27;</span>, credentialsId: <span class="hljs-string">&quot;<span class="hljs-variable">$GITEE_CREDENTIAL_ID</span>&quot;</span>, branch: <span class="hljs-string">&#x27;master&#x27;</span>, changelog: <span class="hljs-keyword">true</span>, poll: <span class="hljs-keyword">false</span>)<br>      &#125;<br>    &#125;<br>    stage (<span class="hljs-string">&#x27;单元测试&#x27;</span>) &#123;<br>        <span class="hljs-keyword">steps</span> &#123;<br>            container (<span class="hljs-string">&#x27;maven&#x27;</span>) &#123;<br>                sh <span class="hljs-string">&#x27;java -version&#x27;</span><br>                sh <span class="hljs-string">&#x27;mvn clean test&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;代码质量分析&#x27;</span>) &#123;<br>      <span class="hljs-keyword">steps</span> &#123;<br>        container(<span class="hljs-string">&#x27;maven&#x27;</span>) &#123;<br>          withCredentials([string(credentialsId: <span class="hljs-string">&quot;<span class="hljs-variable">$SONAR_CREDENTIAL_ID</span>&quot;</span>, variable: <span class="hljs-string">&#x27;SONAR_TOKEN&#x27;</span>)]) &#123;<br>            withSonarQubeEnv(<span class="hljs-string">&#x27;sonar&#x27;</span>) &#123;<br>              sh <span class="hljs-string">&quot;mvn sonar:sonar -Dsonar.login=<span class="hljs-variable">$SONAR_TOKEN</span>&quot;</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    stage (<span class="hljs-string">&#x27;编译 &amp; 推送&#x27;</span>) &#123;<br>        <span class="hljs-keyword">steps</span> &#123;<br>            container (<span class="hljs-string">&#x27;maven&#x27;</span>) &#123;<br>                sh <span class="hljs-string">&#x27;mvn clean package -DskipTests&#x27;</span><br>                sh <span class="hljs-string">&#x27;cd <span class="hljs-variable">$PROJECT_NAME</span> &amp;&amp; docker build -f Dockerfile -t <span class="hljs-variable">$REGISTRY</span>/<span class="hljs-variable">$DOCKERHUB_NAMESPACE</span>/<span class="hljs-variable">$PROJECT_NAME</span>:SNAPSHOT-<span class="hljs-variable">$BRANCH_NAME</span>-<span class="hljs-variable">$BUILD_NUMBER</span> .&#x27;</span><br>                withCredentials([usernamePassword(passwordVariable : <span class="hljs-string">&#x27;DOCKER_PASSWORD&#x27;</span> ,usernameVariable : <span class="hljs-string">&#x27;DOCKER_USERNAME&#x27;</span> ,credentialsId : <span class="hljs-string">&quot;<span class="hljs-variable">$DOCKER_CREDENTIAL_ID</span>&quot;</span> ,)]) &#123;<br>                    sh <span class="hljs-string">&#x27;echo &quot;<span class="hljs-variable">$DOCKER_PASSWORD</span>&quot; | docker login <span class="hljs-variable">$REGISTRY</span> -u &quot;<span class="hljs-variable">$DOCKER_USERNAME</span>&quot; --password-stdin&#x27;</span><br>                    sh <span class="hljs-string">&#x27;docker push  <span class="hljs-variable">$REGISTRY</span>/<span class="hljs-variable">$DOCKERHUB_NAMESPACE</span>/<span class="hljs-variable">$PROJECT_NAME</span>:SNAPSHOT-<span class="hljs-variable">$BRANCH_NAME</span>-<span class="hljs-variable">$BUILD_NUMBER</span>&#x27;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;推送最新&#x27;</span>)&#123;<br>       when&#123;<br>         branch <span class="hljs-string">&#x27;master&#x27;</span><br>       &#125;<br>       steps&#123;<br>            container (<span class="hljs-string">&#x27;maven&#x27;</span>) &#123;<br>              sh <span class="hljs-string">&#x27;docker tag  <span class="hljs-variable">$REGISTRY</span>/<span class="hljs-variable">$DOCKERHUB_NAMESPACE</span>/<span class="hljs-variable">$PROJECT_NAME</span>:SNAPSHOT-<span class="hljs-variable">$BRANCH_NAME</span>-<span class="hljs-variable">$BUILD_NUMBER</span> <span class="hljs-variable">$REGISTRY</span>/<span class="hljs-variable">$DOCKERHUB_NAMESPACE</span>/<span class="hljs-variable">$PROJECT_NAME</span>:latest &#x27;</span><br>              sh <span class="hljs-string">&#x27;docker push  <span class="hljs-variable">$REGISTRY</span>/<span class="hljs-variable">$DOCKERHUB_NAMESPACE</span>/<span class="hljs-variable">$PROJECT_NAME</span>:latest &#x27;</span><br>            &#125;<br>       &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;发布开发环境&#x27;</span>) &#123;<br>      when&#123;<br>        branch <span class="hljs-string">&#x27;master&#x27;</span><br>      &#125;<br>      <span class="hljs-keyword">steps</span> &#123;<br>        input(<span class="hljs-built_in">id</span>: <span class="hljs-string">&#x27;deploy-to-dev&#x27;</span>, <span class="hljs-literal">message</span>: <span class="hljs-string">&#x27;是否发布到开发环境?&#x27;</span>)<br>        container (<span class="hljs-string">&#x27;maven&#x27;</span>) &#123;<br>            withCredentials([<br>                kubeconfigFile(<br>                credentialsId: env.KUBECONFIG_CREDENTIAL_ID,<br>                variable: <span class="hljs-string">&#x27;KUBECONFIG&#x27;</span>)<br>                ]) &#123;<br>                sh <span class="hljs-string">&#x27;envsubst &lt; <span class="hljs-variable">$PROJECT_NAME</span>/deploy/<span class="hljs-variable">$PROJECT_NAME</span>-deploy.yaml | kubectl apply -f -&#x27;</span><br>            &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    stage(<span class="hljs-string">&#x27;推送正式版本&#x27;</span>)&#123;<br>      when&#123;<br>        expression&#123;<br>          return params.PROJECT_VERSION =~ /v.*/<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">steps</span> &#123;<br>          container (<span class="hljs-string">&#x27;maven&#x27;</span>) &#123;<br>            input(<span class="hljs-built_in">id</span>: <span class="hljs-string">&#x27;release-image-with-tag&#x27;</span>, <span class="hljs-literal">message</span>: <span class="hljs-string">&#x27;是否发布镜像版本<span class="hljs-variable">$PROJECT_NAME</span>:<span class="hljs-variable">$PROJECT_VERSION</span>?&#x27;</span>)<br>              withCredentials([usernamePassword(credentialsId: <span class="hljs-string">&quot;<span class="hljs-variable">$GITEE_CREDENTIAL_ID</span>&quot;</span>, passwordVariable: <span class="hljs-string">&#x27;GIT_PASSWORD&#x27;</span>, usernameVariable: <span class="hljs-string">&#x27;GIT_USERNAME&#x27;</span>)]) &#123;<br>                sh <span class="hljs-string">&#x27;git config --global user.email &quot;kubesphere@qq.com&quot; &#x27;</span><br>                sh <span class="hljs-string">&#x27;git config --global user.name &quot;kubesphere&quot; &#x27;</span><br>                sh <span class="hljs-string">&#x27;git tag -a <span class="hljs-variable">$PROJECT_NAME</span>-<span class="hljs-variable">$PROJECT_VERSION</span> -m &quot;<span class="hljs-variable">$PROJECT_NAME</span>-<span class="hljs-variable">$PROJECT_VERSION</span>&quot; &#x27;</span><br>                sh <span class="hljs-string">&#x27;echo <span class="hljs-variable">$GIT_ACCOUNT</span>&#x27;</span><br>                sh <span class="hljs-string">&#x27;git push http://<span class="hljs-variable">$GIT_USERNAME</span>:<span class="hljs-variable">$GIT_PASSWORD</span>@gitee.com/<span class="hljs-variable">$GIT_ACCOUNT</span>/gulimall-learng.git --tags --ipv4&#x27;</span><br>              &#125;<br>            <span class="hljs-keyword">sh</span> &#x27;docker tag  <span class="hljs-variable">$REGISTRY</span>/<span class="hljs-variable">$DOCKERHUB_NAMESPACE</span>/<span class="hljs-variable">$PROJECT_NAME</span>:SNAPSHOT-<span class="hljs-variable">$BRANCH_NAME</span>-<span class="hljs-variable">$BUILD_NUMBER</span> <span class="hljs-variable">$REGISTRY</span>/<span class="hljs-variable">$DOCKERHUB_NAMESPACE</span>/<span class="hljs-variable">$PROJECT_NAME</span>:<span class="hljs-variable">$PROJECT_VERSION</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">            sh &#x27;</span>docker push  <span class="hljs-variable">$REGISTRY</span>/<span class="hljs-variable">$DOCKERHUB_NAMESPACE</span>/<span class="hljs-variable">$PROJECT_NAME</span>:<span class="hljs-variable">$PROJECT_VERSION</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    stage(&#x27;</span>发布生产环境<span class="hljs-string">&#x27;) &#123;</span><br><span class="hljs-string">      when&#123;</span><br><span class="hljs-string">        expression&#123;</span><br><span class="hljs-string">          return params.PROJECT_VERSION =~ /v.*/</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">      steps &#123;</span><br><span class="hljs-string">        input(id: &#x27;</span>deploy-to-production<span class="hljs-string">&#x27;, message: &#x27;</span>是否发布生产环境?<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">        container (&#x27;</span>maven<span class="hljs-string">&#x27;) &#123;</span><br><span class="hljs-string">            withCredentials([</span><br><span class="hljs-string">                kubeconfigFile(</span><br><span class="hljs-string">                credentialsId: env.KUBECONFIG_CREDENTIAL_ID,</span><br><span class="hljs-string">                variable: &#x27;</span>KUBECONFIG<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">                ]) &#123;</span><br><span class="hljs-string">                sh &#x27;</span>envsubst &lt; <span class="hljs-variable">$PROJECT_NAME</span>/deploy/<span class="hljs-variable">$PROJECT_NAME</span>-deploy.yaml | kubectl apply -f -<span class="hljs-string">&#x27;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>kubesphere</tag>
      
      <tag>流水线</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>devops安装配置SonarQube</title>
    <link href="/2022/07/25/k8s/devops/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/"/>
    <url>/2022/07/25/k8s/devops/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/</url>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>SonarQube 是一种主流的代码质量持续检测工具。您可以将其用于代码库的静态和动态分析。SonarQube 集成到 KubeSphere 流水线后，如果在运行的流水线中检测到问题，您可以直接在仪表板上查看常见代码问题，例如 Bug 和漏洞。</p><p>需要启用 KubeSphere DevOps 系统。</p><h1 id="二、安装-SonarQube-服务器"><a href="#二、安装-SonarQube-服务器" class="headerlink" title="二、安装 SonarQube 服务器"></a>二、安装 SonarQube 服务器</h1><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">helm upgrade <span class="hljs-params">--install</span> sonarqube sonarqube <span class="hljs-params">--repo</span> https:<span class="hljs-string">//charts.kubesphere.io/main</span> -n kubesphere-devops-system  <span class="hljs-params">--create-namespace</span> <span class="hljs-params">--set</span> service.type=NodePort<br></code></pre></td></tr></table></figure><p>查看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 kubesphere]# kubectl <span class="hljs-keyword">get</span> pod  <span class="hljs-operator">-</span>n kubesphere<span class="hljs-operator">-</span>devops<span class="hljs-operator">-</span><span class="hljs-keyword">system</span><br>NAME                                   READY   STATUS      RESTARTS        AGE<br>...<br>sonarqube<span class="hljs-operator">-</span>postgresql<span class="hljs-number">-0</span>                 <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>               <span class="hljs-number">7</span>m6s<br>sonarqube<span class="hljs-operator">-</span>sonarqube<span class="hljs-number">-84</span>f6585f85<span class="hljs-operator">-</span>jnsz6   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">1</span> (<span class="hljs-number">2</span>m59s ago)   <span class="hljs-number">7</span>m8s<br></code></pre></td></tr></table></figure><p>获取 SonarQube 控制台地址:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">export NODE_PORT=<span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> --<span class="hljs-params">namespace</span> <span class="hljs-params">kubesphere</span>-<span class="hljs-params">devops</span>-<span class="hljs-params">system</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=<span class="hljs-string">&quot;&#123;.spec.ports[0].nodePort&#125;&quot;</span> <span class="hljs-params">services</span> <span class="hljs-params">sonarqube</span>-<span class="hljs-params">sonarqube</span>)</span><br>export NODE_IP=<span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">nodes</span> --<span class="hljs-params">namespace</span> <span class="hljs-params">kubesphere</span>-<span class="hljs-params">devops</span>-<span class="hljs-params">system</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=<span class="hljs-string">&quot;&#123;.items[0].status.addresses[0].address&#125;&quot;</span>)</span><br>echo http:<span class="hljs-comment">//$NODE_IP:$NODE_PORT</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">66.10</span>:<span class="hljs-number">30759</span><br></code></pre></td></tr></table></figure><h1 id="三、配置-SonarQube-服务器"><a href="#三、配置-SonarQube-服务器" class="headerlink" title="三、配置 SonarQube 服务器"></a>三、配置 SonarQube 服务器</h1><h2 id="3-1-访问-SonarQube-控制台"><a href="#3-1-访问-SonarQube-控制台" class="headerlink" title="3.1 访问 SonarQube 控制台"></a>3.1 访问 SonarQube 控制台</h2><ol><li>在浏览器中访问 SonarQube 控制台 <code>http://&lt;Node IP&gt;:&lt;NodePort&gt;</code>。</li><li>点击右上角的 <strong>Log in</strong>，然后使用默认帐户 <code>admin/admin</code> 登录。</li></ol><h2 id="3-2-创建-SonarQube-管理员令牌-Token"><a href="#3-2-创建-SonarQube-管理员令牌-Token" class="headerlink" title="3.2 创建 SonarQube 管理员令牌 (Token)"></a>3.2 创建 SonarQube 管理员令牌 (Token)</h2><ol><li><p>点击右上角字母 <strong>A</strong>，然后从菜单中选择 <strong>My Account</strong> 以转到 <strong>Profile</strong> 页面。</p><img src="/2022/07/25/k8s/devops/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/sonarqube-config-1.png" class="" title="SonarQube 配置-1"></li><li><p>点击 <strong>Security</strong> 并输入令牌名称，例如 <code>kubesphere</code>。得到：68b67a9ac9f2fcfc6e2dd956b3a969a440996cf9 </p><img src="/2022/07/25/k8s/devops/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/sonarqube-config-2.png" class="" title="SonarQube 配置-2"></li></ol><h2 id="3-3-创建-Webhook-服务器"><a href="#3-3-创建-Webhook-服务器" class="headerlink" title="3.3 创建 Webhook 服务器"></a>3.3 创建 Webhook 服务器</h2><ol><li><p>执行以下命令获取 SonarQube Webhook 的地址。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">export NODE_PORT=<span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> --<span class="hljs-params">namespace</span> <span class="hljs-params">kubesphere</span>-<span class="hljs-params">devops</span>-<span class="hljs-params">system</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=<span class="hljs-string">&quot;&#123;.spec.ports[0].nodePort&#125;&quot;</span> <span class="hljs-params">services</span> <span class="hljs-params">devops</span>-<span class="hljs-params">jenkins</span>)</span><br>export NODE_IP=<span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">nodes</span> --<span class="hljs-params">namespace</span> <span class="hljs-params">kubesphere</span>-<span class="hljs-params">devops</span>-<span class="hljs-params">system</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=<span class="hljs-string">&quot;&#123;.items[0].status.addresses[0].address&#125;&quot;</span>)</span><br>echo http:<span class="hljs-comment">//$NODE_IP:$NODE_PORT/sonarqube-webhook/</span><br></code></pre></td></tr></table></figure></li><li><p>预期输出结果：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">66.10</span>:<span class="hljs-number">30180</span><span class="hljs-regexp">/sonarqube-webhook/</span><br></code></pre></td></tr></table></figure></li><li><p>依次点击 <strong>Administration</strong>、<strong>Configuration</strong> 和 <strong>Webhooks</strong> 创建一个 Webhook。</p><img src="/2022/07/25/k8s/devops/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/sonarqube-webhook-1.png" class="" title="SonarQube Webhook-1"></li><li><p>点击 <strong>Create</strong>。</p><img src="/2022/07/25/k8s/devops/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/sonarqube-webhook-2.png" class="" title="SonarQube Webhook-2"></li><li><p>在弹出的对话框中输入 <strong>Name</strong> 和 <strong>Jenkins Console URL</strong>（即 SonarQube Webhook 地址）。点击 <strong>Create</strong> 完成操作。</p><img src="/2022/07/25/k8s/devops/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/webhook-page-info.png" class="" title="Webhook 页面信息"></li></ol><h2 id="3-4-将-SonarQube-配置添加到-ks-installer"><a href="#3-4-将-SonarQube-配置添加到-ks-installer" class="headerlink" title="3.4 将 SonarQube 配置添加到 ks-installer"></a>3.4 将 SonarQube 配置添加到 ks-installer</h2><ol><li><p>执行以下命令编辑 <code>ks-installer</code>。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">kubectl <span class="hljs-keyword">edit</span> <span class="hljs-keyword">cc</span> -n kubesphere-<span class="hljs-built_in">system</span> ks-installer<br></code></pre></td></tr></table></figure></li><li><p>搜寻至 <code>devops</code>。添加字段 <code>sonarqube</code> 并在其下方指定 <code>externalSonarUrl</code> 和 <code>externalSonarToken</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">devops:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">jenkinsJavaOpts_MaxRAM:</span> <span class="hljs-string">2g</span><br>  <span class="hljs-attr">jenkinsJavaOpts_Xms:</span> <span class="hljs-string">512m</span><br>  <span class="hljs-attr">jenkinsJavaOpts_Xmx:</span> <span class="hljs-string">512m</span><br>  <span class="hljs-attr">jenkinsMemoryLim:</span> <span class="hljs-string">2Gi</span><br>  <span class="hljs-attr">jenkinsMemoryReq:</span> <span class="hljs-string">1500Mi</span><br>  <span class="hljs-attr">jenkinsVolumeSize:</span> <span class="hljs-string">8Gi</span><br>  <span class="hljs-attr">sonarqube:</span> <span class="hljs-comment"># Add this field manually.</span><br>    <span class="hljs-attr">externalSonarUrl:</span> <span class="hljs-string">http://192.168.66.10:30759</span> <span class="hljs-comment"># The SonarQube IP address.</span><br>    <span class="hljs-attr">externalSonarToken:</span> <span class="hljs-string">68b67a9ac9f2fcfc6e2dd956b3a969a440996cf9</span>  <span class="hljs-comment"># The SonarQube admin token created above.</span><br></code></pre></td></tr></table></figure></li><li><p>完成操作后保存此文件。</p></li></ol><h2 id="3-5-将-SonarQube-服务器添加至-Jenkins"><a href="#3-5-将-SonarQube-服务器添加至-Jenkins" class="headerlink" title="3.5 将 SonarQube 服务器添加至 Jenkins"></a>3.5 将 SonarQube 服务器添加至 Jenkins</h2><ol><li><p>执行以下命令获取 Jenkins 的地址。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">export NODE_PORT=<span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> --<span class="hljs-params">namespace</span> <span class="hljs-params">kubesphere</span>-<span class="hljs-params">devops</span>-<span class="hljs-params">system</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=<span class="hljs-string">&quot;&#123;.spec.ports[0].nodePort&#125;&quot;</span> <span class="hljs-params">services</span> <span class="hljs-params">devops</span>-<span class="hljs-params">jenkins</span>)</span><br>export NODE_IP=<span class="hljs-constructor">$(<span class="hljs-params">kubectl</span> <span class="hljs-params">get</span> <span class="hljs-params">nodes</span> --<span class="hljs-params">namespace</span> <span class="hljs-params">kubesphere</span>-<span class="hljs-params">devops</span>-<span class="hljs-params">system</span> -<span class="hljs-params">o</span> <span class="hljs-params">jsonpath</span>=<span class="hljs-string">&quot;&#123;.items[0].status.addresses[0].address&#125;&quot;</span>)</span><br>echo http:<span class="hljs-comment">//$NODE_IP:$NODE_PORT</span><br></code></pre></td></tr></table></figure></li><li><p>您可以获得以下输出，获取 Jenkins 的端口号。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">66.10</span>:<span class="hljs-number">30180</span><br></code></pre></td></tr></table></figure></li><li><p>可以直接用kubesphere账号登录<code>admin/P@88w0rd</code></p><img src="/2022/07/25/k8s/devops/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/1663084944194.png" class="" width="1663084944194"></li><li><p>点击左侧导航栏中的<strong>系统管理</strong>—<strong>系统配置</strong>。搜寻到 <strong>SonarQube servers</strong>，然后点击 <strong>Add SonarQube</strong>。</p></li><li><p>输入 <strong>Name</strong> 和 <strong>Server URL</strong> (<code>http://&lt;Node IP&gt;:&lt;NodePort&gt;</code>)。点击<strong>添加</strong>，选择 <strong>Jenkins</strong>，然后在弹出的对话框中用 SonarQube 管理员令牌创建凭证（如下方第二张截图所示）。创建凭证后，从 <strong>Server authentication token</strong> 旁边的下拉列表中选择该凭证。点击<strong>应用</strong>完成操作。</p><img src="/2022/07/25/k8s/devops/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/sonarqube-jenkins-settings.png" class="" title="sonarqube-jenkins-settings"><p>配置id为sonarqube的密钥：</p><img src="/2022/07/25/k8s/devops/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/add-credentials.png" class="" title="add-credentials"></li></ol><h2 id="3-6-将-sonarqubeURL-添加到-KubeSphere-控制台"><a href="#3-6-将-sonarqubeURL-添加到-KubeSphere-控制台" class="headerlink" title="3.6 将 sonarqubeURL 添加到 KubeSphere 控制台"></a>3.6 将 sonarqubeURL 添加到 KubeSphere 控制台</h2><p>您需要指定 <code>sonarqubeURL</code>，以便可以直接从 KubeSphere 控制台访问 SonarQube。</p><p>1 执行以下命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">kubectl <span class="hljs-keyword">edit</span>  <span class="hljs-keyword">cm</span> -n kubesphere-<span class="hljs-built_in">system</span>  ks-console-config<br></code></pre></td></tr></table></figure><p>2 搜寻到 <code>data.client.enableKubeConfig</code>，在下方添加 <code>devops</code> 字段并指定 <code>sonarqubeURL</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">client:</span><br>  <span class="hljs-attr">enableKubeConfig:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">devops:</span> <span class="hljs-comment"># 手动添加该字段。</span><br>    <span class="hljs-attr">sonarqubeURL:</span> <span class="hljs-string">http://192.168.66.10:30759</span> <span class="hljs-comment"># SonarQube IP 地址。</span><br></code></pre></td></tr></table></figure><p>3 重启服务</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">kubectl -n kubesphere-devops-<span class="hljs-built_in">system</span> rollout <span class="hljs-built_in">restart</span> deploy devops-apiserver<br>kubectl -n kubesphere-<span class="hljs-built_in">system</span> rollout <span class="hljs-built_in">restart</span> deploy ks-console<br></code></pre></td></tr></table></figure><img src="/2022/07/25/k8s/devops/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/1663953257964.png" class="" width="1663953257964"><h2 id="3-7-为新项目创建-SonarQube-Token"><a href="#3-7-为新项目创建-SonarQube-Token" class="headerlink" title="3.7 为新项目创建 SonarQube Token"></a>3.7 为新项目创建 SonarQube Token</h2><p>您需要一个 SonarQube 令牌，以便您的流水线可以在运行时与 SonarQube 通信。</p><ol><li><p>在 SonarQube 控制台上，点击 <strong>Create new project</strong>。</p><img src="/2022/07/25/k8s/devops/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/sonarqube-create-project.png" class="" title="SonarQube 创建项目"></li><li><p>输入项目密钥，例如 <code>java-demo</code>，然后点击 <strong>Set Up</strong>。</p><img src="/2022/07/25/k8s/devops/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/jenkins-projet-key.png" class="" title="Jenkins 项目密钥"></li><li><p>输入项目名称，例如 <code>java-sample</code>，然后点击 <strong>Generate</strong>。token：b0aa4ba3f0661297c10640f3e4e1e2c918a7b188</p><img src="/2022/07/25/k8s/devops/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/generate-a-token.png" class="" title="创建令牌"></li><li><p>创建令牌后，点击 <strong>Continue</strong>。</p><img src="/2022/07/25/k8s/devops/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/token-created.png" class="" title="令牌已创建"></li><li><p>分别选择 <strong>Java</strong> 和 <strong>Maven</strong>。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mvn sonar:sonar \<br>  -Dsonar.<span class="hljs-attribute">projectKey</span>=java-demo \<br>  -Dsonar.host.<span class="hljs-attribute">url</span>=http://192.168.66.10:30759 \<br>  -Dsonar.<span class="hljs-attribute">login</span>=b0aa4ba3f0661297c10640f3e4e1e2c918a7b188<br></code></pre></td></tr></table></figure><img src="/2022/07/25/k8s/devops/devops%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESonarQube/sonarqube-example.png" class="" title="sonarqube-example"></li></ol>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>sonarqube</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s快速集成KubeSphere</title>
    <link href="/2022/07/24/k8s/devops/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/"/>
    <url>/2022/07/24/k8s/devops/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/</url>
    
    <content type="html"><![CDATA[<h1 id="一、KubeSphere-介绍"><a href="#一、KubeSphere-介绍" class="headerlink" title="一、KubeSphere 介绍"></a>一、KubeSphere 介绍</h1><p>KubeSphere 是在 Kubernetes 之上构建的面向云原生应用的<strong>分布式操作系统</strong>，完全开源，支持多云与多集群管理，提供全栈的 IT 自动化运维能力，简化企业的 DevOps 工作流。它的架构可以非常方便地使第三方应用与云原生生态组件进行即插即用 (plug-and-play) 的集成。 </p><p>功能：</p><ul><li>多云与多集群管理</li><li>Kubernetes 资源管理</li><li>DevOps</li><li>应用生命周期管理</li><li>微服务治理（服务网格）</li><li>日志查询与收集</li><li>服务与网络</li><li>多租户管理</li><li>监控告警</li><li>事件与审计查询</li><li>存储管理</li><li>访问权限控制</li><li>GPU 支持</li><li>网络策略</li><li>镜像仓库管理</li><li>安全管理等 </li></ul><h1 id="二、部署-KubeSphere"><a href="#二、部署-KubeSphere" class="headerlink" title="二、部署 KubeSphere"></a>二、部署 KubeSphere</h1><p>当卸载重新安装时，执行下面 的脚本全面卸载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kubesphere/</span>ks-installer<span class="hljs-regexp">/edit/m</span>aster<span class="hljs-regexp">/scripts/</span>kubesphere-<span class="hljs-keyword">delete</span>.sh<br></code></pre></td></tr></table></figure><h2 id="2-1-执行以下命令以开始安装："><a href="#2-1-执行以下命令以开始安装：" class="headerlink" title="2.1 执行以下命令以开始安装："></a>2.1 执行以下命令以开始安装：</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">kubectl apply -f https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kubesphere/</span>ks-installer<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v3.2.1/</span>kubesphere-installer.yaml<br>kubectl apply -f https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kubesphere/</span>ks-installer<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v3.2.1/</span>cluster-configuration.yaml<br><br><span class="hljs-comment">#默认sc</span><br> kubectl patch sc openebs-hostpath -p <span class="hljs-string">&#x27;&#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;: &#123;&quot;storageclass.beta.kubernetes.io/is-default-class&quot;: &quot;true&quot;&#125;&#125;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="2-2-检查安装"><a href="#2-2-检查安装" class="headerlink" title="2.2 检查安装"></a>2.2 检查安装</h2><p>日志查看：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean">kubectl logs -n kubesphere-<span class="hljs-keyword">system</span> $(kubectl get pod -n kubesphere-<span class="hljs-keyword">system</span> -l <span class="hljs-string">&#x27;app in (ks-install, ks-installer)&#x27;</span> -o jsonpath=<span class="hljs-string">&#x27;&#123;.items[0].metadata.name&#125;&#x27;</span>) -f<br><br>结果：<br>Collecting installation results ...<br>#####################################################<br>###              Welcome to KubeSphere!           ###<br>#####################################################<br><br>Console: http:<span class="hljs-comment">//192.168.66.10:30880</span><br>Account: admin<br>Password: P@<span class="hljs-number">88</span>w0rd<br></code></pre></td></tr></table></figure><p>安装服务查看：</p><p>使用 <code>kubectl get pod --all-namespaces</code> 查看所有 Pod 在 KubeSphere 相关的命名空间是否正常运行。如果是正常运行，请通过以下命令来检查控制台的端口（默认为 30880，可以通过默认帐户和密码 (<code>admin/P@88w0rd</code>) 访问 Web 控制台。）：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">kubectl <span class="hljs-built_in">get</span> svc/ks-console -n kubesphere-<span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><p>重置密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl patch <span class="hljs-built_in">users</span> &lt;USERNAME&gt; -p <span class="hljs-string">&#x27;&#123;&quot;spec&quot;:&#123;&quot;password&quot;:&quot;&lt;YOURPASSWORD&gt;&quot;&#125;&#125;&#x27;</span> --<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;merge&#x27;</span> &amp;&amp; kubectl annotate <span class="hljs-built_in">users</span> &lt;USERNAME&gt; iam.kubesphere.io/password-encrypted-<br><br>kubectl patch <span class="hljs-built_in">users</span> admin -p <span class="hljs-string">&#x27;&#123;&quot;spec&quot;:&#123;&quot;password&quot;:&quot;P@88w0rd&quot;&#125;&#125;&#x27;</span> --<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;merge&#x27;</span> &amp;&amp; kubectl annotate <span class="hljs-built_in">users</span> admin iam.kubesphere.io/password-encrypted-<br></code></pre></td></tr></table></figure><h1 id="三、示例wordpress部署"><a href="#三、示例wordpress部署" class="headerlink" title="三、示例wordpress部署"></a>三、示例wordpress部署</h1><p>这里使用project-regular权限账号进行登录，可以通过admin用户添加指定账号，然后创建空间demo-wordspace，并且创建demo-project项目</p><h2 id="3-1-密钥创建"><a href="#3-1-密钥创建" class="headerlink" title="3.1 密钥创建"></a>3.1 密钥创建</h2><p>选择<strong>类型</strong>为 Opaque（默认）</p><p>mysql密钥：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">名称：mysql-secret<br>键值：<span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=123456<br></code></pre></td></tr></table></figure><p>创建 WordPress 密钥：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">名称：wordpress-secret<br>键值：WORDPRESS_DB_PASSWORD <span class="hljs-operator">=</span><span class="hljs-number">123456</span><br>   <br></code></pre></td></tr></table></figure><img src="/2022/07/24/k8s/devops/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662953701465.png" class="" width="1662953701465"><h2 id="3-2-创建持久卷声明"><a href="#3-2-创建持久卷声明" class="headerlink" title="3.2 创建持久卷声明"></a>3.2 创建持久卷声明</h2><p>创建持久券：wordpress-pvc ，选择（存储类、访问模式、卷容量）</p><h2 id="3-3-创建应用程序"><a href="#3-3-创建应用程序" class="headerlink" title="3.3 创建应用程序"></a>3.3 创建应用程序</h2><h3 id="3-3-1-添加-MySQL-后端组件"><a href="#3-3-1-添加-MySQL-后端组件" class="headerlink" title="3.3.1 添加 MySQL 后端组件"></a>3.3.1 添加 MySQL 后端组件</h3><p>（1）创建应用</p><img src="/2022/07/24/k8s/devops/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662954670517.png" class="" width="1662954670517"><p>（2）创建mysql服务</p><img src="/2022/07/24/k8s/devops/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662954686176.png" class="" width="1662954686176"><p>（3）选择有状态服务</p><img src="/2022/07/24/k8s/devops/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662954729101.png" class="" width="1662954729101"><p>（4）容器配置</p><p>在搜索框中输入 <code>mysql:5.6</code>，按下<strong>回车键</strong>，然后点击<strong>使用默认端口</strong>。</p><img src="/2022/07/24/k8s/devops/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662954919071.png" class="" width="1662954919071"><p>（5）环境变量配置</p><p>向下滚动到<strong>环境变量</strong>，点击<strong>来自保密字典</strong>。输入名称 <code>MYSQL_ROOT_PASSWORD</code>，然后选择资源 <code>mysql-secret</code> 和前面步骤中创建的密钥 <code>MYSQL_ROOT_PASSWORD</code></p><img src="/2022/07/24/k8s/devops/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662955108731.png" class="" width="1662955108731"><p>（6）存储设置</p><p>选择<strong>存储设置</strong>中的<strong>添加持久卷声明模板</strong>，输入 PVC 名称前缀 (<code>mysql</code>) 和<strong>挂载路径</strong>（模式：<code>读写</code>，路径：/var/lib/mysql）的值。</p><img src="/2022/07/24/k8s/devops/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662955217850.png" class="" width="1662955217850"><p>（7）随后直接添加</p><h3 id="3-3-2-wordpress服务添加"><a href="#3-3-2-wordpress服务添加" class="headerlink" title="3.3.2 wordpress服务添加"></a>3.3.2 wordpress服务添加</h3><p>（1）无状态服务添加</p><img src="/2022/07/24/k8s/devops/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662955316163.png" class="" width="1662955316163"><p>（2）容器配置</p><p>在搜索栏中输入 wordpress:4.8-apache 并按下<strong>回车键</strong>，然后点击<strong>使用默认端口</strong>。</p><img src="/2022/07/24/k8s/devops/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662955481272.png" class="" width="1662955481272"><p>(3) 环境变量</p><p>向下滚动到<strong>环境变量</strong>，点击<strong>来自保密字典</strong>。这里需要添加两个环境变量，请输入以下值：</p><ul><li>对于 <code>WORDPRESS_DB_PASSWORD</code>，请选择在步骤 1 中创建的 <code>wordpress-secret</code> 和 <code>WORDPRESS_DB_PASSWORD</code>。</li><li>点击<strong>添加环境变量</strong>，分别输入 <code>WORDPRESS_DB_HOST</code> 和 <code>mysql</code> 作为键 (Key) 和值 (Value)。</li></ul><img src="/2022/07/24/k8s/devops/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662955721051.png" class="" width="1662955721051"><p>(4) 存储设置</p><p>选择上一步创建的 <code>wordpress-pvc</code>，将模式设置为<code>读写</code>，并输入挂载路径 <code>/var/www/html</code></p><img src="/2022/07/24/k8s/devops/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662956356797.png" class="" width="1662956356797"><p>（5）路由设置</p><p><strong>路由设置</strong>中设置路由规则（应用路由 Ingress），也可以直接点击<strong>创建</strong>。创建成功后，应用将显示在应用列表中。</p><h3 id="3-3-3-验证资源"><a href="#3-3-3-验证资源" class="headerlink" title="3.3.3 验证资源"></a>3.3.3 验证资源</h3><p>在<strong>工作负载</strong>中，分别检查<strong>部署</strong>和<strong>有状态副本集</strong>中 <code>wordpress-v1</code> 和 <code>mysql-v1</code> 的状态。如果它们的运行状态为<strong>运行中</strong>，就意味着 WordPress 已经成功创建。</p><h3 id="3-3-4-通过-NodePort-访问-WordPress"><a href="#3-3-4-通过-NodePort-访问-WordPress" class="headerlink" title="3.3.4 通过 NodePort 访问 WordPress"></a>3.3.4 通过 NodePort 访问 WordPress</h3><ol><li>若要在集群外访问服务，选择左侧导航栏中的<strong>应用负载 &gt; 服务</strong>。点击 <code>wordpress</code> 右侧的三个点后，选择<strong>编辑外部访问</strong>。</li><li>在<strong>访问方式</strong>中选择 <code>NodePort</code>，然后点击<strong>确定</strong>。</li><li>点击<strong>服务</strong>进入详情页，可以在<strong>端口</strong>处查看暴露的端口。</li><li>通过 <code>&#123;Node IP&#125;:&#123;NodePort&#125;</code> 访问此应用程序，可以看到下图：</li></ol><h1 id="四、查看结果"><a href="#四、查看结果" class="headerlink" title="四、查看结果"></a>四、查看结果</h1><img src="/2022/07/24/k8s/devops/k8s%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90KubeSphere/1662979858086.png" class="" width="1662979858086">]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>kubesphere</tag>
      
      <tag>kubernetes </tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s持久化存储之OpenEBS</title>
    <link href="/2022/07/23/k8s/persistence/k8s%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E4%B9%8BOpenEBS/"/>
    <url>/2022/07/23/k8s/persistence/k8s%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E4%B9%8BOpenEBS/</url>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>OpenEBS 是 CNCF 项目的一部分，采用 Apache v2 许可证。是 Kubernetes 部署使用最广泛且易用的开源存储解决方案。</p><p><strong>目的：</strong></p><p>让持久化工作负载的存储和存储服务完全集成到环境中，这样每个团队和工作负载都可以从控制的粒度和 Kubernetes 原生行为中获益。</p><p><strong>特点：</strong></p><ul><li><p>微服务架构，使用 Kubernetes 自身的能力来编排管理 OpenEBS 组件。</p></li><li><p>OpenEBS 支持一系列存储引擎，以便开发人员能够部署适合其应用程序设计目标的存储技术。</p><p>像 Cassandra 这样的分布式应用程序可以使用 LocalPV 引擎实现最低延迟的写操作。</p><p>像 MySQL 和 PostgreSQL 这样的独立应用程序可以使用 ZFS 引擎 (cStor) 进行恢复。</p><p>像 Kafka 这样的流媒体应用程序可以使用 NVMe 引擎 Mayastor 在边缘环境中获得最佳性能。</p><p>在各种引擎类型中，OpenEBS 为高可用性、快照、克隆和易管理性提供了一致的框架。</p></li><li><p>管理员和开发人员可以使用 Kubernetes 提供的所有工具来交互和管理 OpenEBS。</p></li></ul><h1 id="二、OpenEBS-存储引擎建议"><a href="#二、OpenEBS-存储引擎建议" class="headerlink" title="二、OpenEBS 存储引擎建议"></a>二、OpenEBS 存储引擎建议</h1><table><thead><tr><th>应用需求</th><th>存储类型</th><th>OpenEBS 卷类型</th></tr></thead><tbody><tr><td>低时延、高可用性、同步复制、快照、克隆、精简配置</td><td>SSD/ 云存储卷</td><td>OpenEBS Mayastor</td></tr><tr><td>高可用性、同步复制、快照、克隆、精简配置</td><td>机械 /SSD/ 云存储卷</td><td>OpenEBS cStor</td></tr><tr><td>高可用性、同步复制、精简配置</td><td>主机路径或外部挂载存储</td><td>OpenEBS Jiva</td></tr><tr><td>低时延、本地 PV</td><td>主机路径或外部挂载存储</td><td>Dynamic Local PV - Hostpath, Dynamic Local PV - Rawfile</td></tr><tr><td>低时延、本地 PV</td><td>本地机械 /SSD/ 云存储卷等块设备</td><td>Dynamic Local PV - Device</td></tr><tr><td>低延迟，本地 PV，快照，克隆</td><td>本地机械 /SSD/ 云存储卷等块设备</td><td>OpenEBS Dynamic Local PV - ZFS , OpenEBS Dynamic Local PV - LVM</td></tr></tbody></table><ul><li>多机环境，如果有额外的块设备（非系统盘块设备）作为数据盘，选用 <code>OpenEBS Mayastor</code>、<code>OpenEBS cStor</code></li><li>多机环境，如果没有额外的块设备（非系统盘块设备）作为数据盘，仅单块系统盘块设备，选用 <code>OpenEBS Jiva</code></li><li>单机环境，建议本地路径 <code>Dynamic Local PV - Hostpath, Dynamic Local PV - Rawfile</code>，由于单机多用于测试环境，数据可靠性要求较低。</li></ul><h1 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h1><p><a href="https://openebs.io/docs/2.12.x/user-guides/cstor">openobs官方安装文档</a></p><p>在安装openebs之前先去除污点，然后等安装完成再添加回来污点</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 去除污点</span><br>kubectl taint nodes k8s-master01 <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span>:NoSchedule-<br><span class="hljs-comment"># 添加污点</span><br>kubectl taint nodes k8s-master01 <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span>:NoSchedule<br></code></pre></td></tr></table></figure><p>添加helm repo</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">helm</span> repo <span class="hljs-keyword">add</span> openebs https:<span class="hljs-comment">//openebs.github.io/charts</span><br><span class="hljs-symbol">helm</span> repo update<br></code></pre></td></tr></table></figure><p>安装openebs（这里只会安装Jiva和Local组件）</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">helm install openebs</span> <span class="hljs-literal">--</span><span class="hljs-comment">namespace openebs openebs/openebs</span> <span class="hljs-literal">--</span><span class="hljs-comment">create</span><span class="hljs-literal">-</span><span class="hljs-comment">namespace</span> <span class="hljs-literal">--</span><span class="hljs-comment">version 3</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">x</span><br></code></pre></td></tr></table></figure><p>添加cstor支持</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">helm install openebs <span class="hljs-params">--namespace</span> openebs openebs/openebs <span class="hljs-params">--create-namespace</span> <span class="hljs-params">--set</span> cstor.enabled=<span class="hljs-literal">true</span> <span class="hljs-params">--version</span> 3.2.0<br></code></pre></td></tr></table></figure><p>查看安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 查看安装pod</span><br>kubectl <span class="hljs-built_in">get</span> pod -n openebs<br><span class="hljs-comment"># 查看安装blockdevice，这里的blockdevice是磁盘，当添加一块未分配的磁盘，就会有值</span><br>kubectl <span class="hljs-built_in">get</span> bd -n openebs<br></code></pre></td></tr></table></figure><p>OpenEBS依赖与iSCSI做存储管理，因此需要先确保您的集群上已有安装openiscsi。 （这里当报错的时候可以安装试试）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">yum -y install iscsi-initiator-utils<br>systemctl <span class="hljs-keyword">enable</span> iscsid <span class="hljs-comment">--now</span><br>systemctl <span class="hljs-keyword">start</span> iscsid<br></code></pre></td></tr></table></figure><p>查看安装状况：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get pod -n openebs</span><br>NAME                                            READY   STATUS    RESTARTS         AGE<br>openebs-cstor-admission-server-b74f5487-lkz84   1/1     Running  <span class="hljs-number"> 1 </span>(6m21s ago)    8h<br>openebs-cstor-csi-controller-0                  6/6     Running  <span class="hljs-number"> 0 </span>               4m44s<br>openebs-cstor-csi-node-4df4w                    2/2     Running  <span class="hljs-number"> 2 </span>(61m ago)      8h<br>openebs-cstor-csi-node-x8bmt                    2/2     Running  <span class="hljs-number"> 6 </span>(16m ago)      8h<br>openebs-cstor-csi-node-zzn4k                    2/2     Running  <span class="hljs-number"> 2 </span>(6m21s ago)    8h<br>openebs-cstor-cspc-operator-84464fb479-fh949    1/1     Running  <span class="hljs-number"> 3 </span>(16m ago)      8h<br>openebs-cstor-cvc-operator-646f6f676b-xhd44     1/1     Running  <span class="hljs-number"> 2 </span>(16m ago)      46m<br>openebs-localpv-provisioner-55b65f8b55-zqj29    1/1     Running  <span class="hljs-number"> 13 </span>(6m23s ago)   8h<br>openebs-ndm-429hl                               1/1     Running  <span class="hljs-number"> 2 </span>(4m28s ago)    8h<br>openebs-ndm-9kkzd                               1/1     Running  <span class="hljs-number"> 1 </span>(6m21s ago)    8h<br>openebs-ndm-operator-6c944d87b6-5ddxz           1/1     Running  <span class="hljs-number"> 2 </span>(16m ago)      46m<br>openebs-ndm-sqnwx                               1/1     Running  <span class="hljs-number"> 6 </span>(15m ago)      8h<br></code></pre></td></tr></table></figure><h1 id="四、添加磁盘"><a href="#四、添加磁盘" class="headerlink" title="四、添加磁盘"></a>四、添加磁盘</h1><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[root<span class="hljs-title">@k8s-master01</span> ~]# kubectl get bd -n openebs<br>NAME                                           NODENAME       SIZE           CLAIMSTATE   STATUS     AGE<br>blockdevice<span class="hljs-number">-57886</span>fae<span class="hljs-number">032</span>a<span class="hljs-number">3</span>d<span class="hljs-number">3638</span>badeb<span class="hljs-number">1282</span>dd<span class="hljs-number">67</span>e   k<span class="hljs-number">8</span>s-node<span class="hljs-number">02</span>     <span class="hljs-number">21473771008</span>    Unclaimed    Active     <span class="hljs-number">53</span>s<br>blockdevice-d<span class="hljs-number">923</span>fc<span class="hljs-number">382</span>d<span class="hljs-number">96</span>ff<span class="hljs-number">6</span>eea<span class="hljs-number">7</span>d<span class="hljs-number">9</span>ab<span class="hljs-number">8</span>efb<span class="hljs-number">66224</span>   k<span class="hljs-number">8</span>s-master<span class="hljs-number">01</span>   <span class="hljs-number">21473771008</span>    Unclaimed    Active     <span class="hljs-number">11</span>m<br>blockdevice-e<span class="hljs-number">5009</span>ce<span class="hljs-number">419</span><span class="hljs-keyword">c</span><span class="hljs-number">80719025</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span><span class="hljs-keyword">cc</span><span class="hljs-number">9409253</span>ab   k<span class="hljs-number">8</span>s-node<span class="hljs-number">01</span>     <span class="hljs-number">21473771008</span>    Unclaimed    Active     <span class="hljs-number">33</span>s<br></code></pre></td></tr></table></figure><h1 id="五、配置"><a href="#五、配置" class="headerlink" title="五、配置"></a>五、配置</h1><h2 id="5-1-创建cStor存储池"><a href="#5-1-创建cStor存储池" class="headerlink" title="5.1 创建cStor存储池"></a>5.1 创建cStor存储池</h2><p>cspc.yaml ：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cstor.openebs.io/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">CStorPoolCluster</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cstor-disk-pool</span><br> <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">openebs</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">pools</span><span class="hljs-punctuation">:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">nodeSelector:</span><br>       <span class="hljs-attribute">kubernetes.io/hostname</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s-master01&quot;</span><br>     <span class="hljs-attribute">dataRaidGroups</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">blockDevices:</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-string">blockDeviceName: &quot;blockdevice-d923fc382d96ff6eea7d9ab8efb66224&quot;</span><br>     <span class="hljs-attribute">poolConfig</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-attribute">dataRaidGroupType</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stripe&quot;</span><br><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">nodeSelector:</span><br>       <span class="hljs-attribute">kubernetes.io/hostname</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s-node01&quot;</span><br>     <span class="hljs-attribute">dataRaidGroups</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">blockDevices:</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-string">blockDeviceName: &quot;blockdevice-e5009ce419c80719025c4cc9409253ab&quot;</span><br>     <span class="hljs-attribute">poolConfig</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-attribute">dataRaidGroupType</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stripe&quot;</span><br><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">nodeSelector:</span><br>       <span class="hljs-attribute">kubernetes.io/hostname</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s-node02&quot;</span><br>     <span class="hljs-attribute">dataRaidGroups</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">blockDevices:</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-string">blockDeviceName: &quot;blockdevice-57886fae032a3d3638badeb1282dd67e&quot;</span><br>     <span class="hljs-attribute">poolConfig</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-attribute">dataRaidGroupType</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stripe&quot;</span><br></code></pre></td></tr></table></figure><p>dataRaidGroupType:可以根据您的需要设置为 <code>stripe</code> or <code>mirror</code> 。下面以配置为stripe为例。 </p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-master01 openebs]<span class="hljs-comment"># kubectl get CStorPoolCluster -n openebs</span><br>NAME              HEALTHYINSTANCES   PROVISIONEDINSTANCES   DESIREDINSTANCES   AGE<br>cstor-disk-pool                     <span class="hljs-number"> 3 </span>                    <span class="hljs-number"> 3 </span>                 42s<br></code></pre></td></tr></table></figure><h2 id="5-2-storageclass创建"><a href="#5-2-storageclass创建" class="headerlink" title="5.2 storageclass创建"></a>5.2 storageclass创建</h2><h3 id="5-2-1-cstor的创建"><a href="#5-2-1-cstor的创建" class="headerlink" title="5.2.1 cstor的创建"></a>5.2.1 cstor的创建</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cstor-csi-disk</span><br><span class="hljs-attr">provisioner:</span> <span class="hljs-string">cstor.csi.openebs.io</span><br><span class="hljs-attr">allowVolumeExpansion:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">parameters:</span><br>  <span class="hljs-attr">cas-type:</span> <span class="hljs-string">cstor</span><br>  <span class="hljs-comment"># cstorPoolCluster should have the name of the CSPC</span><br>  <span class="hljs-attr">cstorPoolCluster:</span> <span class="hljs-string">cstor-disk-pool</span><br>  <span class="hljs-comment"># replicaCount should be &lt;= no. of CSPI created in the selected CSPC</span><br>  <span class="hljs-attr">replicaCount:</span> <span class="hljs-string">&quot;3&quot;</span><br></code></pre></td></tr></table></figure><p>添加硬盘后查看磁盘情况</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">磁盘 /dev/sdb：21.5 GB,<span class="hljs-number"> 21474836480 </span>字节，41943040 个扇区<br>Units = 扇区 of<span class="hljs-number"> 1 </span>*<span class="hljs-number"> 512 </span>=<span class="hljs-number"> 512 </span>bytes<br>扇区大小(逻辑/物理)：512 字节 /<span class="hljs-number"> 512 </span>字节<br>I/O 大小(最小/最佳)：512 字节 /<span class="hljs-number"> 512 </span>字节<br>磁盘标签类型：gpt<br>Disk identifier: ADA9C10B-8C31-4EE2-A29B-F2701E9554DC<br><br><br><span class="hljs-comment">#         Start          End    Size  Type            Name</span><br><span class="hljs-number"> 1 </span>       <span class="hljs-number"> 2048 </span>   <span class="hljs-number"> 41943006 </span>    20G  Linux filesyste OpenEBS_NDM<br></code></pre></td></tr></table></figure><h3 id="5-2-2-jiva"><a href="#5-2-2-jiva" class="headerlink" title="5.2.2 jiva"></a>5.2.2 jiva</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">jiva-storageclass</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">openebs.io/cas-type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">jiva</span><br>    <span class="hljs-attribute">cas.openebs.io/config</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: StoragePool</span><br>        <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">provisioner</span><span class="hljs-punctuation">:</span> <span class="hljs-string">openebs.io/provisioner-iscsi</span><br></code></pre></td></tr></table></figure><h3 id="5-2-3-hostpath"><a href="#5-2-3-hostpath" class="headerlink" title="5.2.3  hostpath"></a>5.2.3  hostpath</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">localpv-hostpath-sc</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">openebs.io/cas-type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">local</span><br>    <span class="hljs-attribute">cas.openebs.io/config</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: BasePath</span><br>        <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/openebs/local&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: StorageType</span><br>        <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hostpath&quot;</span><br><span class="hljs-attribute">provisioner</span><span class="hljs-punctuation">:</span> <span class="hljs-string">openebs.io/local</span><br></code></pre></td></tr></table></figure><h3 id="5-2-4-device"><a href="#5-2-4-device" class="headerlink" title="5.2.4 device"></a>5.2.4 device</h3><p>下面的类型需要添加硬盘</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">磁盘 /dev/sdc：21.5 GB,<span class="hljs-number"> 21474836480 </span>字节，41943040 个扇区<br>Units = 扇区 of<span class="hljs-number"> 1 </span>*<span class="hljs-number"> 512 </span>=<span class="hljs-number"> 512 </span>bytes<br>扇区大小(逻辑/物理)：512 字节 /<span class="hljs-number"> 512 </span>字节<br>I/O 大小(最小/最佳)：512 字节 /<span class="hljs-number"> 512 </span>字节<br>磁盘标签类型：gpt<br>Disk identifier: BAD0A706-0A9D-478A-85C6-319224EC5D1F<br><br><br><span class="hljs-comment">#         Start          End    Size  Type            Name</span><br><span class="hljs-number"> 1 </span>       <span class="hljs-number"> 2048 </span>   <span class="hljs-number"> 41943006 </span>    20G  Linux filesyste OpenEBS_NDM<br></code></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">localpv-device-sc</span><br>  <span class="hljs-attribute">annotations</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">openebs.io/cas-type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">local</span><br>    <span class="hljs-attribute">cas.openebs.io/config</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: StorageType</span><br>        <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;device&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">name: FSType</span><br>        <span class="hljs-attribute">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ext4</span><br><span class="hljs-attribute">provisioner</span><span class="hljs-punctuation">:</span> <span class="hljs-string">openebs.io/local</span><br></code></pre></td></tr></table></figure><p>查看：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master01 openebs]# kubectl <span class="hljs-keyword">get</span> sc -n openebs<br><span class="hljs-type">NAME</span>               PROVISIONER            RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE<br>cstor-csi-disk     cstor.csi.openebs.io   <span class="hljs-keyword">Delete</span>          <span class="hljs-keyword">Immediate</span>              <span class="hljs-keyword">true</span>                   <span class="hljs-number">43</span>s<br>openebs-device     openebs.io/<span class="hljs-keyword">local</span>       <span class="hljs-keyword">Delete</span>          WaitForFirstConsumer   <span class="hljs-keyword">false</span>                  <span class="hljs-number">9</span>h<br>openebs-hostpath   openebs.io/<span class="hljs-keyword">local</span>       <span class="hljs-keyword">Delete</span>          WaitForFirstConsumer   <span class="hljs-keyword">false</span>                  <span class="hljs-number">9</span>h<br></code></pre></td></tr></table></figure><h3 id="5-2-5-cStor、Jiva、LocalPV-特性比较："><a href="#5-2-5-cStor、Jiva、LocalPV-特性比较：" class="headerlink" title="5.2.5 cStor、Jiva、LocalPV 特性比较："></a>5.2.5 cStor、Jiva、LocalPV 特性比较：</h3><table><thead><tr><th>特性</th><th>Jiva</th><th>cStor</th><th>Local PV</th></tr></thead><tbody><tr><td>轻量级运行于用户空间</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>同步复制</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>适合低容量工作负载</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>支持快照，克隆</td><td>Basic</td><td>Advanced</td><td>No</td></tr><tr><td>数据一致性</td><td>Yes</td><td>Yes</td><td>NA</td></tr><tr><td>使用 Velero 恢复备份</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>适合高容量工作负载</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>自动精简配置</td><td></td><td>Yes</td><td>No</td></tr><tr><td>磁盘池或聚合支持</td><td></td><td>Yes</td><td>No</td></tr><tr><td>动态扩容</td><td></td><td>Yes</td><td>Yes</td></tr><tr><td>数据弹性 (RAID 支持)</td><td></td><td>Yes</td><td>No</td></tr><tr><td>接近原生磁盘性能</td><td>No</td><td>No</td><td>Yes</td></tr></tbody></table><p>大多数场景推荐 <code>cStor</code>，因其提供了强大的功能，包括快照 / 克隆、存储池功能（如精简资源调配、按需扩容等）。</p><p><code>Jiva</code> 适用于低容量需求的工作负载场景，例如 <code>5</code> 到 <code>50G</code>。尽管使用 <code>Jiva</code> 没有空间限制，但建议将其用于低容量工作负载。<code>Jiva</code> 非常易于使用，并提供企业级容器本地存储，而不需要专用硬盘。有快照和克隆功能的需求的场景，优先考虑使用 <code>cStor</code> 而不是 <code>Jiva</code>。</p><h2 id="5-3-默认sc"><a href="#5-3-默认sc" class="headerlink" title="5.3 默认sc"></a>5.3 默认sc</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">kubectl patch storage<span class="hljs-keyword">class</span> <span class="hljs-title class_">cstor</span>-<span class="hljs-title">csi</span>-<span class="hljs-title">disk</span> -<span class="hljs-title">p</span> &#x27;&#123;<span class="hljs-string">&quot;metadata&quot;</span>: &#123;<span class="hljs-string">&quot;annotations&quot;</span>:&#123;<span class="hljs-string">&quot;storageclass.kubernetes.io/is-default-class&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;&#125;&#125;<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>推荐文章：</p><p><a href="https://blog.csdn.net/easylife206/article/details/125213855">https://blog.csdn.net/easylife206/article/details/125213855</a></p><p><a href="https://zhuanlan.zhihu.com/p/519172233">https://zhuanlan.zhihu.com/p/519172233</a></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>openebs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis持久化方式及原理</title>
    <link href="/2022/06/06/nosql/redis/2022-06-06-redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
    <url>/2022/06/06/nosql/redis/2022-06-06-redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Redis持久化方式"><a href="#一、Redis持久化方式" class="headerlink" title="一、Redis持久化方式"></a>一、Redis持久化方式</h1><h2 id="1-1-RDB快照（snapshot）"><a href="#1-1-RDB快照（snapshot）" class="headerlink" title="1.1 RDB快照（snapshot）"></a>1.1 RDB快照（snapshot）</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">###################################SNAPSHOTTING快照###################################</span><br><span class="hljs-comment"># RDB是整个内存的压缩过的Snapshot快照配置</span><br><span class="hljs-comment"># 注释掉“save”这一行配置项就可以让保存数据库功能失效</span><br><span class="hljs-comment"># 设置sedis进行数据库镜像的频率。</span><br><span class="hljs-comment"># 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化） </span><br><span class="hljs-comment"># 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化） </span><br><span class="hljs-comment"># 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）</span><br><span class="hljs-comment"># 如果想禁用RDB持久化的策略，只要不设置任何save指令，或者给save传入一个空字符串参数也可以</span><br><span class="hljs-comment"># 配置自动生成rdb文件后台使用的是bgsave方式。</span><br><span class="hljs-attr">save</span> <span class="hljs-string">900 1</span><br><span class="hljs-attr">save</span> <span class="hljs-string">300 10</span><br><span class="hljs-attr">save</span> <span class="hljs-string">60 10000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#当RDB持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误</span><br><span class="hljs-attr">stop-writes-on-bgsave-error</span> <span class="hljs-string">yes</span><br><span class="hljs-comment"># 对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能</span><br><span class="hljs-attr">rdbcompression</span> <span class="hljs-string">yes</span><br><span class="hljs-comment">#是否校验rdb文件。从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64的校验和。这跟有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置。</span><br><span class="hljs-attr">rdbchecksum</span> <span class="hljs-string">yes</span><br><span class="hljs-comment">#rdb文件的名称</span><br><span class="hljs-attr">dbfilename</span> <span class="hljs-string">dump.rdb</span><br><span class="hljs-comment">#数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录</span><br><span class="hljs-attr">dir</span> <span class="hljs-string">/var/lib/redis</span><br></code></pre></td></tr></table></figure><p>在默认情况下， Redis 将内存数据库快照保存在名字为 dump.rdb 的二进制文件中。 </p><p>还可以手动执行命令生成RDB快照，进入redis客户端执行命令<strong>save</strong>或<strong>bgsave</strong>可以生成dump.rdb文件， </p><p>每次命令执行都会将所有redis内存快照到一个新的rdb文件里，并覆盖原有rdb快照文件。 </p><p><strong>bgsave的写时复制(COW)机制</strong> </p><p>Redis 借助操作系统提供的写时复制技术（Copy-On-Write, COW），在生成快照的同时，依然可以正常处理写命令。简单来说，bgsave 子进程是由主线程 fork 生成的，可以共享主线程的所有内存数据。 </p><p>bgsave 子进程运行后，开始读取主线程的内存数据，并把它们写入 RDB 文件。此时，如果主线程对这些数据也都是读操作，那么，主线程和 bgsave 子进程相互不影响。但是，如果主线程要修改一块数据，那么，这块数据就会被复制一份，生成该数据的副本。然后，bgsave 子进程会把这个副本数据写入 RDB 文件，而在这个过程中，主线程仍然可以直接修改原来的数据。 </p><p><strong>save与bgsave对比：</strong> </p><table><thead><tr><th>类型</th><th>save</th><th>bgsave</th></tr></thead><tbody><tr><td>io</td><td>同步</td><td>一异步</td></tr><tr><td>是否阻塞redis其它命令</td><td>是</td><td>否(在生成子进程执行调用fork函数时会有短暂阻塞)</td></tr><tr><td>复杂度</td><td>O(n)</td><td>O(n)</td></tr><tr><td>优点</td><td>不会消耗额外内存</td><td>不阻塞客户端命令</td></tr><tr><td>缺点</td><td>阻塞客户端命令</td><td>需要fork子进程，消耗内存</td></tr></tbody></table><h2 id="1-2-AOF（append-only-file）"><a href="#1-2-AOF（append-only-file）" class="headerlink" title="1.2 AOF（append-only file）"></a>1.2 AOF（append-only file）</h2><p>快照功能并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、且仍未保存到快照中的那些数据。从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化，将修改的每一条指令记录进文件appendonly.aof中(先写入os cache，每隔一段时间fsync到磁盘) </p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> zhuge <span class="hljs-comment">666</span><br></code></pre></td></tr></table></figure><p>这是一种resp协议格式数据，星号后面的数字代表命令有多少个参数，$号后面的数字代表这个参数有几个字符</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-number">*3</span><br><span class="hljs-variable">$3</span><br><span class="hljs-built_in">set</span><br><span class="hljs-variable">$5</span><br>zhuge<br><span class="hljs-variable">$3</span><br>666<br></code></pre></td></tr></table></figure><p>注意，如果执行带过期时间的set命令，aof文件里记录的是并不是执行的原始命令，而是记录key过期的时间戳。</p><p>例如:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">set</span> tuling <span class="hljs-number">888</span> ex <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p> 记录(实际执行了两条指令)：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-number">*3</span> <br><span class="hljs-variable">$3</span> <br><span class="hljs-built_in">set</span> <br><span class="hljs-variable">$6</span> <br>tuling <br><span class="hljs-variable">$3</span> <br>888 <br><span class="hljs-number">*3</span> <br><span class="hljs-variable">$9</span> <br>PEXPIREAT <br><span class="hljs-variable">$6</span> <br>tuling <br><span class="hljs-variable">$13</span> <br>1604249786301 <br></code></pre></td></tr></table></figure><p>打开aof功能：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs clean">############################## APPEND ONLY MODE ###############################<br>#默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。<br>appendonly yes<br>#aof文件名<br>appendfilename <span class="hljs-string">&quot;appendonly.aof&quot;</span><br><br>#aof持久化策略的配置<br>#no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。<br>#always表示每次写入都执行fsync，以保证数据同步到磁盘。<br>#everysec表示每秒执行一次fsync，可能会导致丢失这<span class="hljs-number">1</span>s数据。<br>appendfsync everysec<br># 重写时是否可以运用Appendfsync，用默认no即可，保证数据安全性。<br>no-appendfsync-on-rewrite no<br></code></pre></td></tr></table></figure><p><strong>AOF重写</strong> </p><p>AOF文件里可能有太多没用指令，所以AOF会定期根据<strong>内存的最新数据</strong>生成aof文件 </p><p>例如，执行了如下几条命令： </p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; incr readcount <br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; incr readcount <br>(integer) <span class="hljs-number">2</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; incr readcount <br>(integer) <span class="hljs-number">3</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; incr readcount <br>(integer) <span class="hljs-number">4</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; incr readcount <br>(integer) <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>重写后AOF文件里变成 </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-number">*3</span> <br><span class="hljs-variable">$3</span> <br><span class="hljs-built_in">SET</span> <br><span class="hljs-variable">$2</span> <br>readcount <br><span class="hljs-variable">$1</span> <br>5 <br></code></pre></td></tr></table></figure><p>如下两个配置可以控制AOF自动重写频率 </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">#设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写<br><span class="hljs-keyword">auto</span>-aof-rewrite-min-size <span class="hljs-number">64</span>mb<br><span class="hljs-meta">#aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。</span><br><span class="hljs-keyword">auto</span>-aof-rewrite-percentage <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>RDB 和 AOF ，我应该用哪一个？</p><table><thead><tr><th>命令</th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>启动优先级</td><td>低</td><td>高</td></tr><tr><td>体积</td><td>小</td><td>大</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>容易丢数据</td><td>根据策略决定</td></tr></tbody></table><p>生产环境可以都启用，redis启动时如果既有rdb文件又有aof文件则优先选择aof文件恢复数据，因为aof 一般来说数据更全一点。 </p><p><strong>Redis 4.0 混合持久化</strong> </p><p>重启 Redis 时，我们很少使用 RDB来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 RDB来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。 Redis 4.0 为了解决这个问题，带来了一个新的持久化选项——混合持久化。 </p><p>通过如下配置可以开启混合持久化(必须先开启aof)： </p><p>1 aof‐use‐rdb‐preamble yes</p><p>如果开启了混合持久化，AOF在重写时，不再是单纯将内存数据转换为RESP命令写入AOF文件，而是将重写这一刻之前的内存做RDB快照处理，并且将RDB快照内容和增量的AOF修改内存数据的命令存在一起，都写入新的AOF文件，新的文件一开始不叫appendonly.aof，等到重写完新的AOF文件才会进行改名，覆盖原有的AOF文件，完成新旧两个AOF文件的替换。 </p><p>于是在 Redis 重启的时候，可以先加载 RDB 的内容，然后再重放增量 AOF 日志就可以完全替代之前的AOF 全量文件重放，因此重启效率大幅得到提升。 </p><p>混合持久化AOF文件结构如下 </p><img src="/2022/06/06/nosql/redis/2022-06-06-redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%8E%9F%E7%90%86/image-20220926175722082.png" class="" title="image-20220926175722082"><p>Redis数据备份策略：</p><ol><li><p>写crontab定时调度脚本，每小时都copy一份rdb或aof的备份到一个目录中去，仅仅保留最近48 小时的备份 </p></li><li><p>每天都保留一份当日的数据备份到一个目录中去，可以保留最近1个月的备份 </p></li><li><p>每次copy备份的时候，都把太旧的备份给删了 </p></li><li><p>每天晚上将当前机器上的备份复制一份到其他机器上，以防机器损坏 </p></li></ol>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>minio入门文档</title>
    <link href="/2022/04/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%AD%98%E5%82%A8/minio%E5%85%A5%E9%97%A8%E6%96%87%E6%A1%A3/"/>
    <url>/2022/04/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%AD%98%E5%82%A8/minio%E5%85%A5%E9%97%A8%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>MinIO 是在 GNU Affero 通用公共许可证 v3.0 下发布的高性能对象存储。  对于 Kubernetes 环境，请使用 <a href="https://github.com/minio/operator/blob/master/README.md">MinIO Kubernetes Operator</a>。 </p><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><p>非k8s</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum install -y podman<br>wget -c https:<span class="hljs-regexp">//</span>dl.min.io<span class="hljs-regexp">/server/mi</span>nio<span class="hljs-regexp">/release/</span>linux-amd64/minio<br><span class="hljs-comment">#启动</span><br>podman run   -p <span class="hljs-number">9000</span>:<span class="hljs-number">9000</span>  -p <span class="hljs-number">9001</span>:<span class="hljs-number">9001</span> minio server <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/containerd/</span>data --console-address <span class="hljs-string">&quot;:9001&quot;</span><br><span class="hljs-comment">#启动2</span><br>.<span class="hljs-regexp">/minio server /m</span>nt/data<br></code></pre></td></tr></table></figure><p>k8s</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#单机</span><br>helm install stable/minio<br><span class="hljs-comment">#集群</span><br>helm install --<span class="hljs-built_in">set</span> <span class="hljs-attribute">mode</span>=distributed,replicas=4 stable/minio<br></code></pre></td></tr></table></figure><p>java客户端</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.minio<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>minio<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="三、查看"><a href="#三、查看" class="headerlink" title="三、查看"></a>三、查看</h1><img src="/2022/04/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%AD%98%E5%82%A8/minio%E5%85%A5%E9%97%A8%E6%96%87%E6%A1%A3/1661489911832.png" class="" width="1661489911832"><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Versioning</span> 允许将同一对象的多个版本保留在同一键下。<br>Object Locking  可防止删除对象。需要支持保留和法定保留。只能在创建存储桶时启用。<br>Quota 限制存储桶中的数据量。<br>Retention 会施加规则，以在一段时间内阻止对象删除。必须启用版本控制才能设置存储桶保留策略。<br><br>存储桶命名规则<br>存储桶名称的长度必须介于 <span class="hljs-number">3</span>（最小）到 <span class="hljs-number">63</span>（最大）个字符之间。<br>存储桶名称只能由小写字母、数字、点 （.） 和连字符 （-） 组成。<br>存储桶名称不得包含两个相邻的句点。<br>存储桶名称不得格式化为 IP 地址 （例如，<span class="hljs-number">192.168.5.4</span>）。<br>存储桶名称不得以前缀 xn 开头--.<br>存储桶名称不得以后缀 -s3alias 结尾。此后缀是为接入点别名保留的。<br>存储桶名称在分区中必须是唯一的。<br></code></pre></td></tr></table></figure><h1 id="四、Java客户端"><a href="#四、Java客户端" class="headerlink" title="四、Java客户端"></a>四、Java客户端</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.bootminio.upload;<br><br><span class="hljs-keyword">import</span> io.minio.BucketExistsArgs;<br><span class="hljs-keyword">import</span> io.minio.MakeBucketArgs;<br><span class="hljs-keyword">import</span> io.minio.MinioClient;<br><span class="hljs-keyword">import</span> io.minio.PutObjectArgs;<br><span class="hljs-keyword">import</span> io.minio.errors.MinioException;<br><span class="hljs-keyword">import</span> okhttp3.OkHttpClient;<br><br><span class="hljs-keyword">import</span> javax.net.ssl.*;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.security.InvalidKeyException;<br><span class="hljs-keyword">import</span> java.security.KeyManagementException;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><span class="hljs-keyword">import</span> java.security.SecureRandom;<br><span class="hljs-keyword">import</span> java.security.cert.CertificateException;<br><span class="hljs-keyword">import</span> java.security.cert.X509Certificate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUploader</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException, IOException, InvalidKeyException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">MinioClient</span> <span class="hljs-variable">minioClient</span> <span class="hljs-operator">=</span> MinioClient.builder()<br>                    .httpClient(getUnsafeOkHttpsClient())<br>                    .credentials(<span class="hljs-string">&quot;K8sgt80o0TzhWRGg&quot;</span>, <span class="hljs-string">&quot;t7l2L6l3pVptLEWsfdZa4iaxadptD2aB&quot;</span>)<br>                    .endpoint(<span class="hljs-string">&quot;192.168.66.31&quot;</span>, <span class="hljs-number">9000</span>, <span class="hljs-literal">false</span>)<br>                    .build();<br><br>            <span class="hljs-comment">// 检查存储桶是否已经存在</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isExist</span> <span class="hljs-operator">=</span> minioClient.bucketExists(BucketExistsArgs.builder().bucket(<span class="hljs-string">&quot;test&quot;</span>).build());<br>            <span class="hljs-keyword">if</span> (isExist) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Bucket already exists.&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 创建一个名为asiatrip的存储桶，用于存储照片的zip文件。</span><br>                minioClient.makeBucket(MakeBucketArgs.builder().bucket(<span class="hljs-string">&quot;test&quot;</span>).build());<br>            &#125;<br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./pom.xml&quot;</span>);<br>            <span class="hljs-comment">// 使用putObject上传一个文件到存储桶中。</span><br>            minioClient.putObject(PutObjectArgs.builder()<br>                    .bucket(<span class="hljs-string">&quot;test&quot;</span>)<br>                    .object(<span class="hljs-string">&quot;pom.xml&quot;</span>)<br>                    .stream(fis, fis.available(), -<span class="hljs-number">1</span>)<br>                    .build());<br>            System.out.println(<span class="hljs-string">&quot;pom.xml is successfully uploaded as pom.xml to `test` bucket.&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (MinioException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Error occurred: &quot;</span> + e);<br>        &#125; <span class="hljs-keyword">catch</span> (KeyManagementException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> OkHttpClient <span class="hljs-title function_">getUnsafeOkHttpsClient</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> KeyManagementException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">final</span> TrustManager[] trustAllCerts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrustManager</span>[]&#123;<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">X509TrustManager</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkClientTrusted</span><span class="hljs-params">(X509Certificate[] x509Certificates, String s)</span> <span class="hljs-keyword">throws</span> CertificateException &#123;<br><br>                        &#125;<br><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkServerTrusted</span><span class="hljs-params">(X509Certificate[] x509Certificates, String s)</span> <span class="hljs-keyword">throws</span> CertificateException &#123;<br><br>                        &#125;<br><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">X509Certificate</span>[]&#123;&#125;;<br>                        &#125;<br>                    &#125;<br>            &#125;;<br><br><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">SSLContext</span> <span class="hljs-variable">sslContext</span> <span class="hljs-operator">=</span> SSLContext.getInstance(<span class="hljs-string">&quot;SSL&quot;</span>);<br>            sslContext.init(<span class="hljs-literal">null</span>, trustAllCerts, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandom</span>());<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">SSLSocketFactory</span> <span class="hljs-variable">sslSocketFactory</span> <span class="hljs-operator">=</span> sslContext.getSocketFactory();<br>            OkHttpClient.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>.Builder();<br>            builder.sslSocketFactory(sslSocketFactory,<span class="hljs-keyword">new</span> <span class="hljs-title class_">X509TrustManager</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkClientTrusted</span><span class="hljs-params">(X509Certificate[] x509Certificates, String s)</span> <span class="hljs-keyword">throws</span> CertificateException &#123;<br><br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkServerTrusted</span><span class="hljs-params">(X509Certificate[] x509Certificates, String s)</span> <span class="hljs-keyword">throws</span> CertificateException &#123;<br><br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">X509Certificate</span>[]&#123;&#125;;<br>                &#125;<br>            &#125;);<br><br><br>            builder.hostnameVerifier(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HostnameVerifier</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verify</span><span class="hljs-params">(String s, SSLSession sslSession)</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;);<br>            <span class="hljs-keyword">return</span> builder.build();<br><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>api文档：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">API文档: 操作存储桶</span><br>makeBucket<br>listBuckets<br>bucketExists<br>removeBucket<br>listObjects<br>listIncompleteUploads<br><span class="hljs-section">API文档: 操作文件对象</span><br>getObject<br>putObject<br>copyObject<br>statObject<br>removeObject<br>removeIncompleteUpload<br><span class="hljs-section">API文档: Presigned操作</span><br>presignedGetObject<br>presignedPutObject<br>presignedPostPolicy<br><span class="hljs-section">API文档: 操作存储桶策略</span><br>getBucketPolicy<br>setBucketPolicy<br></code></pre></td></tr></table></figure><p>更多示例：</p><p><a href="https://github.com/minio/minio-java/tree/master/examples">https://github.com/minio/minio-java/tree/master/examples</a></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>存储</category>
      
    </categories>
    
    
    <tags>
      
      <tag>minio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制部署kubernetes集群</title>
    <link href="/2022/03/16/k8s/%E9%9B%86%E7%BE%A4/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2kubernetes%E9%9B%86%E7%BE%A4/"/>
    <url>/2022/03/16/k8s/%E9%9B%86%E7%BE%A4/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2kubernetes%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="一、系统环境"><a href="#一、系统环境" class="headerlink" title="一、系统环境"></a>一、系统环境</h1><h2 id="1-1-环境准备"><a href="#1-1-环境准备" class="headerlink" title="1.1 环境准备"></a>1.1 环境准备</h2><table><thead><tr><th>角色</th><th>IP</th><th>服务</th></tr></thead><tbody><tr><td>k8s-master01</td><td>192.168.66.31</td><td>etcd、containerd、kube-apiserver、kube-scheduler、kube-controller-manager、kubele、kube-proxy</td></tr><tr><td>k8s-node01</td><td>192.168.66.41</td><td>etcd、containerd、kubele、kube-proxy</td></tr><tr><td>k8s-node02</td><td>192.168.66.42</td><td>etcd、containerd、kubele、kube-proxy</td></tr></tbody></table><h2 id="1-2-环境初始化"><a href="#1-2-环境初始化" class="headerlink" title="1.2 环境初始化"></a>1.2 环境初始化</h2><h3 id="1-2-1-综合完整设置"><a href="#1-2-1-综合完整设置" class="headerlink" title="1.2.1 综合完整设置"></a>1.2.1 综合完整设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop firewalld<br>systemctl <span class="hljs-built_in">disable</span> firewalld<br>sed -i <span class="hljs-string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config  <br>setenforce 0 <br>swapoff -a  <br>sed -ri <span class="hljs-string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab<br>sudo modprobe br_netfilter<br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="hljs-string">br_netfilter</span><br><span class="hljs-string">EOF</span><br><span class="hljs-built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br>sysctl --system <br>yum install ntpdate -y<br>ntpdate time.windows.com<br>clock -w<br>yum install ipset ipvsadm -y <br></code></pre></td></tr></table></figure><h3 id="1-2-2-分布设置"><a href="#1-2-2-分布设置" class="headerlink" title="1.2.2 分布设置"></a>1.2.2 分布设置</h3><p>关闭防火墙：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭防火墙</span><br>systemctl stop firewalld<br>systemctl disable firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭selinux</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sed -i <span class="hljs-string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config  <span class="hljs-comment"># 永久</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">setenforce 0  <span class="hljs-comment"># 临时</span></span><br></code></pre></td></tr></table></figure><p>关闭swap：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">swapoff -a  <span class="hljs-comment"># 临时</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sed -ri <span class="hljs-string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab    <span class="hljs-comment"># 永久</span></span><br></code></pre></td></tr></table></figure><p>将桥接的IPv4流量传递到iptables的链：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 确保 br_netfilter 模块被加载。这一操作可以通过运行 `lsmod | grep br_netfilter` 来完成。若要显式加载该模块，可执行 sudo modprobe br_netfilter。 </span><br>$ sudo modprobe br_netfilter<br>$ <span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="hljs-string">br_netfilter</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">#将桥接的IPv4流量传递到iptables的链</span><br>$ <span class="hljs-built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br>$ sysctl --system  <span class="hljs-comment"># 生效</span><br></code></pre></td></tr></table></figure><p>时间同步：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yum <span class="hljs-keyword">install </span>ntpdate -y<br>ntpdate time.windows.com<br><span class="hljs-comment"># 强制把系统时间写入CMOS</span><br><span class="hljs-keyword">clock </span>-w<br></code></pre></td></tr></table></figure><p>安装ipvs：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> ipset ipvsadm -y <br></code></pre></td></tr></table></figure><h3 id="1-2-3-host设置"><a href="#1-2-3-host设置" class="headerlink" title="1.2.3 host设置"></a>1.2.3 host设置</h3><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># k8smaster节点执行</span><br>$ <span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-master01</span><br><span class="hljs-comment"># k8snode1节点执行</span><br>$ <span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-node01</span><br><span class="hljs-comment"># k8snode2节点执行</span><br>$ <span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-node02</span><br><br>$ <span class="hljs-string">cat</span> &gt;&gt; /<span class="hljs-string">etc</span>/<span class="hljs-string">hosts</span> &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">192</span>.<span class="hljs-string">168</span>.<span class="hljs-string">66</span>.<span class="hljs-string">31</span> <span class="hljs-string">k8s-master01</span><br><span class="hljs-string">192</span>.<span class="hljs-string">168</span>.<span class="hljs-string">66</span>.<span class="hljs-string">41</span> <span class="hljs-string">k8s-node01</span><br><span class="hljs-string">192</span>.<span class="hljs-string">168</span>.<span class="hljs-string">66</span>.<span class="hljs-string">42</span> <span class="hljs-string">k8s-node02</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="1-2-4-文件夹初始化"><a href="#1-2-4-文件夹初始化" class="headerlink" title="1.2.4 文件夹初始化"></a>1.2.4 文件夹初始化</h3><p>准备文件夹</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/usr/</span>local/k8s-install<br></code></pre></td></tr></table></figure><p>环境文件夹</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/opt/</span>kubernetes/&#123;bin,ssl,cfg,logs&#125;<br>mkdir -p <span class="hljs-regexp">/opt/</span>etcd/&#123;bin,ssl,cfg,data,wal&#125;<br></code></pre></td></tr></table></figure><h1 id="二、软件下载"><a href="#二、软件下载" class="headerlink" title="二、软件下载"></a>二、软件下载</h1><p>containerd安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -c https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/containerd/</span>containerd<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v1.6.5/</span>cri-containerd-cni-<span class="hljs-number">1.6</span>.<span class="hljs-number">5</span>-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><p>etcd安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -c https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/etcd-io/</span>etcd<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v3.5.0/</span>etcd-v3.<span class="hljs-number">5.0</span>-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><p>k8s二进制包下载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -c https:<span class="hljs-regexp">//</span>dl.k8s.io<span class="hljs-regexp">/v1.24.0/</span>kubernetes-server-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><h1 id="三、生成证书"><a href="#三、生成证书" class="headerlink" title="三、生成证书"></a>三、生成证书</h1><p><a href="https://kubernetes.io/zh-cn/docs/setup/best-practices/certificates/">PKI 证书和要求 | Kubernetes</a></p><h2 id="3-1-CA证书生成"><a href="#3-1-CA证书生成" class="headerlink" title="3.1 CA证书生成"></a>3.1 CA证书生成</h2><p>CA是证书的签发机构，它是公钥基础设施（Public Key Infrastructure，PKI）的核心。CA是负责签发证书、认证证书、管理已颁发证书的机关。</p><p>（1） CA 证书签名请求（CSR）对应JSON</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> &gt; ca<span class="hljs-literal">-csr</span>.json &lt;&lt;<span class="hljs-keyword">END</span>   <br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;      <br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,     <br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,             <br>  <span class="hljs-string">&quot;names&quot;</span>:[&#123;         <br>    <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,     <br>    <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>    <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,          <br>    <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,         <br>    <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span>     <br>  &#125;]      <br>&#125;                        <br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><p>（2）生成 CA 秘钥文件（<code>ca-key.pem</code>）和证书文件（<code>ca.pem</code>） </p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">$ cfssl gencert -initca <span class="hljs-keyword">ca</span>-csr.json | cfssljson -bare <span class="hljs-keyword">ca</span><br></code></pre></td></tr></table></figure><p>生成文件：</p><ul><li>ca-key.pem 秘钥文件</li><li>ca.pem 证书文件</li><li>ca.csr 证书签名请求文件</li></ul><p>（3）创建请求证书的json文件</p><p>作用：用作证书签发的配置文件。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> &gt; ca<span class="hljs-literal">-config</span>.json &lt;&lt;<span class="hljs-keyword">END</span><br>&#123;<br>  <span class="hljs-string">&quot;signing&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;8760h&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;profiles&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;kubernetes&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;usages&quot;</span>: [<br>          <span class="hljs-string">&quot;signing&quot;</span>,<br>          <span class="hljs-string">&quot;key encipherment&quot;</span>,<br>          <span class="hljs-string">&quot;server auth&quot;</span>,<br>          <span class="hljs-string">&quot;client auth&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;8760h&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><h2 id="3-2-apiserver"><a href="#3-2-apiserver" class="headerlink" title="3.2 apiserver"></a>3.2 apiserver</h2><p>（1） 创建证书签名请求（CSR）对应JSON</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cat &gt; <span class="hljs-keyword">server</span>-csr.json &lt;&lt; <span class="hljs-keyword">END</span><br>&#123;<br>  &quot;CN&quot;: &quot;kubernetes&quot;,<br>  &quot;hosts&quot;: [<br>    &quot;127.0.0.1&quot;,<br>    &quot;10.0.0.1&quot;,<br>    &quot;192.168.66.31&quot;,<br>    &quot;192.168.66.41&quot;,<br>    &quot;192.168.66.42&quot;,<br>    &quot;k8s-master01&quot;,<br>    &quot;k8s-node01&quot;,<br>    &quot;k8s-node02&quot;,<br>    &quot;kubernetes&quot;,<br>    &quot;kubernetes.default&quot;,<br>    &quot;kubernetes.default.svc&quot;,<br>    &quot;kubernetes.default.svc.cluster&quot;,<br>    &quot;kubernetes.default.svc.cluster.local&quot;<br>  ],<br>  &quot;key&quot;: &#123;<br>    &quot;algo&quot;: &quot;rsa&quot;,<br>    &quot;size&quot;: <span class="hljs-number">2048</span><br>  &#125;,<br>  &quot;names&quot;: [&#123;<br>    &quot;C&quot;: &quot;CN&quot;,<br>    &quot;ST&quot;: &quot;Beijing&quot;,<br>    &quot;L&quot;: &quot;Beijing&quot;,<br>    &quot;O&quot;: &quot;k8s&quot;,<br>    &quot;OU&quot;: &quot;System&quot;<br>  &#125;]<br>&#125;<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><p>（2）签发证书</p><p>说明：通过CA的  证书文件和密钥文件、证书签发配置、证书申请文件  来为PI 服务器生成秘钥和证书签发</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cfssl gencert <span class="hljs-attribute">-ca</span>=ca.pem <span class="hljs-attribute">-ca-key</span>=ca-key.pem  <span class="hljs-attribute">--config</span>=ca-config.json <span class="hljs-attribute">-profile</span>=kubernetes      server-csr.json | cfssljson -bare server<br></code></pre></td></tr></table></figure><p>生成文件：</p><ul><li>server-key.pem 秘钥文件</li><li>server.pem 证书文件</li><li>server.csr 证书签名请求文件</li></ul><p>（3）证书放置指定地方</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cp</span> &#123;<span class="hljs-keyword">ca</span>.pem,server.pem,server-key.pem&#125; /<span class="hljs-keyword">opt</span>/kubernetes/ssl<br></code></pre></td></tr></table></figure><h2 id="3-2-kube-proxy"><a href="#3-2-kube-proxy" class="headerlink" title="3.2 kube-proxy"></a>3.2 kube-proxy</h2><p>（1） 创建证书签名请求（CSR）对应JSON</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cat &gt; kube-proxy-csr.json &lt;&lt; <span class="hljs-keyword">END</span><br>&#123;<br>  &quot;CN&quot;: &quot;system:kube-proxy&quot;,<br>  &quot;hosts&quot;: [],<br>  &quot;key&quot;: &#123;<br>    &quot;algo&quot;: &quot;rsa&quot;,<br>    &quot;size&quot;: <span class="hljs-number">2048</span><br>  &#125;,<br>  &quot;names&quot;: [&#123;<br>    &quot;C&quot;: &quot;CN&quot;,<br>    &quot;ST&quot;: &quot;Beijing&quot;,<br>    &quot;L&quot;: &quot;Beijing&quot;,<br>    &quot;O&quot;: &quot;k8s&quot;,<br>    &quot;OU&quot;: &quot;System&quot;<br>  &#125;]<br>&#125;<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><p>2 签发证书</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cfssl gencert <span class="hljs-attribute">-ca</span>=ca.pem <span class="hljs-attribute">-ca-key</span>=ca-key.pem  <span class="hljs-attribute">--config</span>=ca-config.json <span class="hljs-attribute">-profile</span>=kubernetes   kube-proxy-csr.json | cfssljson -bare kube-proxy<br></code></pre></td></tr></table></figure><p>3 迁移</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">cp</span> &#123;kube-<span class="hljs-literal">proxy</span>.pem,kube-<span class="hljs-literal">proxy</span>-key.pem&#125; /opt/kubernetes/ssl<br></code></pre></td></tr></table></figure><h2 id="3-3-etcd"><a href="#3-3-etcd" class="headerlink" title="3.3 etcd"></a>3.3 etcd</h2><p>（1）使用自签 CA 签发 Etcd HTTPS 证书</p><p>创建证书申请文件：  </p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs prolog">cat &gt; etcd-csr.json&lt;&lt; <span class="hljs-symbol">EOF</span><br>&#123;<br>    <span class="hljs-string">&quot;CN&quot;</span>:<span class="hljs-string">&quot;etcd&quot;</span>,<br>    <span class="hljs-string">&quot;hosts&quot;</span>:[<br>        <span class="hljs-string">&quot;192.168.66.31&quot;</span>,<br>        <span class="hljs-string">&quot;192.168.66.41&quot;</span>,<br>        <span class="hljs-string">&quot;192.168.66.42&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;key&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;algo&quot;</span>:<span class="hljs-string">&quot;rsa&quot;</span>,<br>        <span class="hljs-string">&quot;size&quot;</span>:<span class="hljs-number">2048</span><br>    &#125;,<br>    <span class="hljs-string">&quot;names&quot;</span>:[<br>        &#123;<br>            <span class="hljs-string">&quot;C&quot;</span>:<span class="hljs-string">&quot;CN&quot;</span>,<br>            <span class="hljs-string">&quot;L&quot;</span>:<span class="hljs-string">&quot;BeiJing&quot;</span>,<br>            <span class="hljs-string">&quot;ST&quot;</span>:<span class="hljs-string">&quot;BeiJing&quot;</span>,<br>            <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>            <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>        &#125;<br>    ]<br>&#125;<br><span class="hljs-symbol">EOF</span><br></code></pre></td></tr></table></figure><p>生成证书： 为 API 服务器生成秘钥和证书，默认会分别存储为<code>etcd-key.pem</code> 和 <code>etcd.pem</code> 两个文件。 </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cfssl gencert <span class="hljs-attribute">-ca</span>=ca.pem <span class="hljs-attribute">-ca-key</span>=ca-key.pem <span class="hljs-attribute">-config</span>=ca-config.json <span class="hljs-attribute">-profile</span>=kubernetes etcd-csr.json | cfssljson -bare etcd<br></code></pre></td></tr></table></figure><p>为etcd放置证书</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp &#123;ca.pem,etcd-key.pem,etcd.pem&#125; <span class="hljs-regexp">/opt/</span>etcd<span class="hljs-regexp">/ssl/</span><br></code></pre></td></tr></table></figure><h2 id="3-4-admin"><a href="#3-4-admin" class="headerlink" title="3.4 admin"></a>3.4 admin</h2><p>一般默认我们在root用户下执行的kubectl的操作需要用到权限配置。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cat &gt; <span class="hljs-keyword">admin</span>-csr.json &lt;&lt;EOF<br>&#123;<br>  &quot;CN&quot;: &quot;admin&quot;,<br>  &quot;hosts&quot;: [],<br>  &quot;key&quot;: &#123;<br>    &quot;algo&quot;: &quot;rsa&quot;,<br>    &quot;size&quot;: <span class="hljs-number">2048</span><br>  &#125;,<br>  &quot;names&quot;: [<br>    &#123;<br>      &quot;C&quot;: &quot;CN&quot;,<br>      &quot;L&quot;: &quot;BeiJing&quot;,<br>      &quot;ST&quot;: &quot;BeiJing&quot;,<br>      &quot;O&quot;: &quot;system:masters&quot;,<br>      &quot;OU&quot;: &quot;System&quot;<br>    &#125;<br>  ]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>生成证书：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cfssl gencert <span class="hljs-attribute">-ca</span>=ca.pem <span class="hljs-attribute">-ca-key</span>=ca-key.pem <span class="hljs-attribute">-config</span>=ca-config.json <span class="hljs-attribute">-profile</span>=kubernetes admin-csr.json | cfssljson -bare admin<br></code></pre></td></tr></table></figure><h2 id="3-5-kube-scheduler"><a href="#3-5-kube-scheduler" class="headerlink" title="3.5 kube-scheduler"></a>3.5 kube-scheduler</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 创建证书请求文件</span><br>cat &gt; kube-scheduler-csr.json &lt;&lt; EOF<br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-scheduler&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: 2048<br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;system:masters&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>    &#125;<br>  ]<br>&#125;<br>EOF<br><br><span class="hljs-comment"># 生成证书</span><br>cfssl gencert <span class="hljs-attribute">-ca</span>=ca.pem <span class="hljs-attribute">-ca-key</span>=ca-key.pem <span class="hljs-attribute">-config</span>=ca-config.json <span class="hljs-attribute">-profile</span>=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler<br>cp &#123;kube-scheduler.pem,kube-scheduler-key.pem&#125; /opt/kubernetes/ssl<br></code></pre></td></tr></table></figure><h2 id="3-6-kube-controller-manager"><a href="#3-6-kube-controller-manager" class="headerlink" title="3.6 kube-controller-manager"></a>3.6 kube-controller-manager</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat &gt; kube-controller-manager-csr.json &lt;&lt; EOF<br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-controller-manager&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: 2048<br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>, <br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;system:masters&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>    &#125;<br>  ]<br>&#125;<br>EOF<br><br><span class="hljs-comment"># 生成证书</span><br>cfssl gencert <span class="hljs-attribute">-ca</span>=ca.pem <span class="hljs-attribute">-ca-key</span>=ca-key.pem <span class="hljs-attribute">-config</span>=ca-config.json <span class="hljs-attribute">-profile</span>=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager<br>cp &#123;kube-controller-manager.pem,kube-controller-manager-key.pem&#125; /opt/kubernetes/ssl<br></code></pre></td></tr></table></figure><h1 id="四、k8s-权限配置config"><a href="#四、k8s-权限配置config" class="headerlink" title="四、k8s 权限配置config"></a>四、k8s 权限配置config</h1><h2 id="4-1-admin-config"><a href="#4-1-admin-config" class="headerlink" title="4.1 admin.config"></a>4.1 admin.config</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">mkdir /root/.kube<br>KUBE_CONFIG<span class="hljs-operator">=</span><span class="hljs-string">&quot;/root/.kube/config&quot;</span><br>KUBE_APISERVER<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://192.168.66.31:6443&quot;</span><br></code></pre></td></tr></table></figure><p>设置集群参数：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> <span class="hljs-string">kubernetes</span> \<br>  <span class="hljs-built_in">--certificate-authority=/opt/kubernetes/ssl/ca.pem</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--server=$&#123;KUBE_APISERVER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br></code></pre></td></tr></table></figure><p>设置客户端认证参数：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> <span class="hljs-string">cluster-admin</span> \<br>  <span class="hljs-built_in">--client-certificate=./admin.pem</span> \<br>  <span class="hljs-built_in">--client-key=./admin-key.pem</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br></code></pre></td></tr></table></figure><p>设置上下文参数：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> <span class="hljs-string">default</span> \<br>  <span class="hljs-built_in">--cluster=kubernetes</span> \<br>  <span class="hljs-built_in">--user=cluster-admin</span> \<br>  <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br></code></pre></td></tr></table></figure><p>设置默认上下文:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl<span class="hljs-built_in"> config </span>use-context<span class="hljs-built_in"> default </span><span class="hljs-attribute">--kubeconfig</span>=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-2-kube-scheduler-config"><a href="#4-2-kube-scheduler-config" class="headerlink" title="4.2 kube-scheduler.config"></a>4.2 kube-scheduler.config</h2><p>kube-scheduler权限配置</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">KUBE_CONFIG</span>=<span class="hljs-string">&quot;/opt/kubernetes/cfg/kube-scheduler.kubeconfig&quot;</span><br><span class="hljs-string">KUBE_APISERVER</span>=<span class="hljs-string">&quot;https://192.168.66.31:6443&quot;</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> <span class="hljs-string">kubernetes</span> \<br>  <span class="hljs-built_in">--certificate-authority=/opt/kubernetes/ssl/ca.pem</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--server=$&#123;KUBE_APISERVER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> <span class="hljs-string">kube-scheduler</span> \<br>  <span class="hljs-built_in">--client-certificate=/opt/kubernetes/ssl/kube-scheduler.pem</span> \<br>  <span class="hljs-built_in">--client-key=/opt/kubernetes/ssl/kube-scheduler-key.pem</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> <span class="hljs-string">default</span> \<br>  <span class="hljs-built_in">--cluster=kubernetes</span> \<br>  <span class="hljs-built_in">--user=kube-scheduler</span> \<br>  <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">use-context</span> <span class="hljs-string">default</span> <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-3-kube-controller-manager-config"><a href="#4-3-kube-controller-manager-config" class="headerlink" title="4.3 kube-controller-manager.config"></a>4.3 kube-controller-manager.config</h2><p>kube-controller-manager权限配置</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">KUBE_CONFIG</span>=<span class="hljs-string">&quot;/opt/kubernetes/cfg/kube-controller-manager.kubeconfig&quot;</span><br><span class="hljs-string">KUBE_APISERVER</span>=<span class="hljs-string">&quot;https://192.168.66.31:6443&quot;</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> <span class="hljs-string">kubernetes</span> \<br>  <span class="hljs-built_in">--certificate-authority=/opt/kubernetes/ssl/ca.pem</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--server=$&#123;KUBE_APISERVER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> <span class="hljs-string">kube-controller-manager</span> \<br>  <span class="hljs-built_in">--client-certificate=./kube-controller-manager.pem</span> \<br>  <span class="hljs-built_in">--client-key=./kube-controller-manager-key.pem</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> <span class="hljs-string">default</span> \<br>  <span class="hljs-built_in">--cluster=kubernetes</span> \<br>  <span class="hljs-built_in">--user=kube-controller-manager</span> \<br>  <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">use-context</span> <span class="hljs-string">default</span> <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-4-kube-proxy-config"><a href="#4-4-kube-proxy-config" class="headerlink" title="4.4 kube-proxy.config"></a>4.4 kube-proxy.config</h2><p>kube-proxy权限配置</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">KUBE_CONFIG</span>=<span class="hljs-string">&quot;/opt/kubernetes/cfg/kube-proxy.kubeconfig&quot;</span><br><span class="hljs-string">KUBE_APISERVER</span>=<span class="hljs-string">&quot;https://192.168.66.31:6443&quot;</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> <span class="hljs-string">kubernetes</span> \<br>  <span class="hljs-built_in">--certificate-authority=/opt/kubernetes/ssl/ca.pem</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--server=$&#123;KUBE_APISERVER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> <span class="hljs-string">kube-proxy</span> \<br>  <span class="hljs-built_in">--client-certificate=./kube-proxy.pem</span> \<br>  <span class="hljs-built_in">--client-key=./kube-proxy-key.pem</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> <span class="hljs-string">default</span> \<br>  <span class="hljs-built_in">--cluster=kubernetes</span> \<br>  <span class="hljs-built_in">--user=kube-proxy</span> \<br>  <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">use-context</span> <span class="hljs-string">default</span> <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-5-bootstrap-config"><a href="#4-5-bootstrap-config" class="headerlink" title="4.5 bootstrap.config"></a>4.5 bootstrap.config</h2><p>用于kublet TLS bootstraping 机制来自动颁发客户端证书</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">KUBE_CONFIG</span>=<span class="hljs-string">&quot;/opt/kubernetes/cfg/bootstrap.kubeconfig&quot;</span><br><span class="hljs-string">KUBE_APISERVER</span>=<span class="hljs-string">&quot;https://192.168.66.31:6443&quot;</span><br><span class="hljs-string">TOKEN</span>=<span class="hljs-string">&quot;2883dba522d43d742dd88f3ce07cf52e&quot;</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> <span class="hljs-string">kubernetes</span> \<br>  <span class="hljs-built_in">--certificate-authority=/opt/kubernetes/ssl/ca.pem</span> \<br>  <span class="hljs-built_in">--embed-certs=true</span> \<br>  <span class="hljs-built_in">--server=$&#123;KUBE_APISERVER&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> <span class="hljs-string">&quot;kubelet-bootstrap&quot;</span> \<br>  <span class="hljs-built_in">--token=$&#123;TOKEN&#125;</span> \<br>  <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> <span class="hljs-string">default</span> \<br>  <span class="hljs-built_in">--cluster=kubernetes</span> \<br>  <span class="hljs-built_in">--user=&quot;kubelet-bootstrap&quot;</span> \<br>  <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-string">use-context</span> <span class="hljs-string">default</span> <span class="hljs-built_in">--kubeconfig=$&#123;KUBE_CONFIG&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-6-Bootstrapping-token-csv"><a href="#4-6-Bootstrapping-token-csv" class="headerlink" title="4.6 Bootstrapping token.csv"></a>4.6 Bootstrapping token.csv</h2><p><strong>TLS Bootstrapping</strong></p><p>启用 TLS Bootstrapping 机制 TLS Bootstraping：Master apiserver 启用 TLS 认证后，Node 节点 kubelet 和 kube- proxy 要与 kube-apiserver 进行通信，必须使用 CA 签发的有效证书才可以，当 Node 节点很多时，这种客户端证书颁发需要大量工作，同样也会增加集群扩展复杂度。为了简化流程，Kubernetes 引入了 TLS bootstraping 机制来自动颁发客户端证书，kubelet 会以一个低权限用户自动向 apiserver 申请证书，kubelet 的证书由 apiserver 动态签署。<br>所以强烈建议在 Node 上使用这种方式，目前主要用于 kubelet，kube-proxy 还是由我们统一颁发一个证书。</p><p>TLS bootstraping 工作流程： </p><img src="/2022/03/16/k8s/%E9%9B%86%E7%BE%A4/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2kubernetes%E9%9B%86%E7%BE%A4/1659365157408.png" class="" width="1659365157408"><p>授权kubelet-bootstrap用户允许请求证书</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create clusterrolebinding kubelet-bootstrap \<br><span class="hljs-attribute">--clusterrole</span>=system:node-bootstrapper \<br><span class="hljs-attribute">--user</span>=kubelet-bootstrap<br></code></pre></td></tr></table></figure><p>创建上述配置文件中 token 文件： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt; token.csv &lt;&lt; <span class="hljs-string">EOF </span><br><span class="hljs-string">2883dba522d43d742dd88f3ce07cf52e,kubelet-bootstrap,10001,system:node-bootstrapper</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>格式：token，用户名，UID，用户组 </p><p>token 也可自行生成替换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">head</span> -c 16 /dev/urandom | <span class="hljs-built_in">od</span> -An -t x | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27; &#x27;</span><br></code></pre></td></tr></table></figure><h1 id="四、部署containerd"><a href="#四、部署containerd" class="headerlink" title="四、部署containerd"></a>四、部署containerd</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ wget -c https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/containerd/</span>containerd<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v1.6.5/</span>cri-containerd-cni-<span class="hljs-number">1.6</span>.<span class="hljs-number">5</span>-linux-amd64.tar.gz<br>$ tar -zxf cri-containerd-cni-<span class="hljs-number">1.6</span>.<span class="hljs-number">5</span>-linux-amd64.tar.gz  -C /<br>$ systemctl enable containerd --now<br></code></pre></td></tr></table></figure><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm"># 查看文件系统<br><span class="hljs-title">df</span> -<span class="hljs-type">Th</span><br># 查看f<span class="hljs-keyword">type</span><br><span class="hljs-title">xfs_info</span> [filesystem_name]  | grep f<span class="hljs-keyword">type</span><br></code></pre></td></tr></table></figure><h1 id="五、部署etcd"><a href="#五、部署etcd" class="headerlink" title="五、部署etcd"></a>五、部署etcd</h1><h2 id="5-1-文件结构准备"><a href="#5-1-文件结构准备" class="headerlink" title="5.1 文件结构准备"></a>5.1 文件结构准备</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ mkdir <span class="hljs-regexp">/opt/</span>etcd<br>$ mkdir <span class="hljs-regexp">/opt/</span>etcd/&#123;bin,cfg,ssl,data,wal&#125; –p<br>$ wget -c https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/etcd-io/</span>etcd<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v3.5.0/</span>etcd-v3.<span class="hljs-number">5.0</span>-linux-amd64.tar.gz<br>$ tar -zxf etcd-v3.<span class="hljs-number">5.0</span>-linux-amd64.tar.gz -C etcd-v3.<span class="hljs-number">5.0</span><br>$ cd etcd-v3.<span class="hljs-number">5.0</span><br>$ mv .<span class="hljs-regexp">/&#123;etcd,etcdctl,etcdutl&#125; /</span>opt<span class="hljs-regexp">/etcd/</span>bin/<br><span class="hljs-comment"># 将/opt/etcd/bin 加入PATH</span><br>$ vi <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure><h2 id="5-2-证书准备"><a href="#5-2-证书准备" class="headerlink" title="5.2 证书准备"></a>5.2 证书准备</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv &#123;ca.pem , etcd-key.pem , etcd.pem&#125;  <span class="hljs-regexp">/opt/</span>etcd/ssl<br></code></pre></td></tr></table></figure><h2 id="5-3-配置文件"><a href="#5-3-配置文件" class="headerlink" title="5.3 配置文件"></a>5.3 配置文件</h2><p>/opt/etcd/cfg/etcd.yaml 配置文件：<a href="https://github.com/etcd-io/etcd/blob/main/etcd.conf.yml.sample">etcd/etcd.conf.yml.sample at main · etcd-io/etcd · GitHub</a> </p><p>192.168.66.31</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">&quot;etcd-1&quot;</span><br><span class="hljs-attr">data-dir:</span> <span class="hljs-string">&quot;/opt/etcd/data&quot;</span><br><span class="hljs-attr">wal-dir:</span> <span class="hljs-string">&quot;/opt/etcd/wal&quot;</span><br><span class="hljs-comment"># 用于侦听对等流量的逗号分隔的url列表。</span><br><span class="hljs-attr">listen-peer-urls:</span> <span class="hljs-string">https://192.168.66.31:2380</span><br><span class="hljs-comment"># 用于侦听客户机通信的逗号分隔的url列表。</span><br><span class="hljs-attr">listen-client-urls:</span> <span class="hljs-string">https://192.168.66.31:2379</span><br><span class="hljs-comment"># 这个成员的对等url的列表，以通告给集群的其他成员。url需要是逗号分隔的列表。</span><br><span class="hljs-attr">initial-advertise-peer-urls:</span> <span class="hljs-string">https://192.168.66.31:2380</span><br><span class="hljs-comment">#这个成员的对等url的列表，以通告给集群的其他成员。url需要是逗号分隔的列表。</span><br><span class="hljs-attr">advertise-client-urls:</span> <span class="hljs-string">https://192.168.66.31:2379</span><br><span class="hljs-comment"># Initial cluster configuration for bootstrapping.</span><br><span class="hljs-attr">initial-cluster:</span> <span class="hljs-string">&#x27;etcd-1=https://192.168.66.31:2380,etcd-2=https://192.168.66.41:2380,etcd-3=https://192.168.66.42:2380&#x27;</span><br><span class="hljs-comment"># Initial cluster token for the etcd cluster during bootstrap.</span><br><span class="hljs-attr">initial-cluster-token:</span> <span class="hljs-string">&#x27;etcd-cluster&#x27;</span><br><span class="hljs-comment"># Initial cluster state (&#x27;new&#x27; or &#x27;existing&#x27;).</span><br><span class="hljs-attr">initial-cluster-state:</span> <span class="hljs-string">&#x27;new&#x27;</span><br><span class="hljs-attr">client-transport-security:</span><br>  <span class="hljs-comment"># Path to the client server TLS cert file.</span><br>  <span class="hljs-attr">cert-file:</span> <span class="hljs-string">/opt/etcd/ssl/etcd.pem</span><br><br>  <span class="hljs-comment"># Path to the client server TLS key file.</span><br>  <span class="hljs-attr">key-file:</span> <span class="hljs-string">/opt/etcd/ssl/etcd-key.pem</span><br>  <span class="hljs-comment"># Path to the client server TLS trusted CA cert file.</span><br>  <span class="hljs-attr">trusted-ca-file:</span> <span class="hljs-string">/opt/etcd/ssl/ca.pem</span><br><span class="hljs-attr">peer-transport-security:</span><br>  <span class="hljs-comment"># Path to the peer server TLS cert file.</span><br>  <span class="hljs-attr">cert-file:</span> <span class="hljs-string">/opt/etcd/ssl/etcd.pem</span><br><br>  <span class="hljs-comment"># Path to the peer server TLS key file.</span><br>  <span class="hljs-attr">key-file:</span> <span class="hljs-string">/opt/etcd/ssl/etcd-key.pem</span><br><br>  <span class="hljs-comment"># Path to the peer server TLS trusted CA cert file.</span><br>  <span class="hljs-attr">trusted-ca-file:</span> <span class="hljs-string">/opt/etcd/ssl/ca.pem</span><br></code></pre></td></tr></table></figure><p>192.168.66.41</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">&quot;etcd-2&quot;</span><br><span class="hljs-attr">listen-peer-urls:</span> <span class="hljs-string">https://192.168.66.41:2380</span><br><span class="hljs-comment"># 用于侦听客户机通信的逗号分隔的url列表。</span><br><span class="hljs-attr">listen-client-urls:</span> <span class="hljs-string">https://192.168.66.41:2379</span><br><span class="hljs-comment"># 这个成员的对等url的列表，以通告给集群的其他成员。url需要是逗号分隔的列表。</span><br><span class="hljs-attr">initial-advertise-peer-urls:</span> <span class="hljs-string">https://192.168.66.41:2380</span><br><span class="hljs-comment">#这个成员的对等url的列表，以通告给集群的其他成员。url需要是逗号分隔的列表。</span><br><span class="hljs-attr">advertise-client-urls:</span> <span class="hljs-string">https://192.168.66.41:2379</span><br></code></pre></td></tr></table></figure><p>192.168.66.42</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">&quot;etcd-2&quot;</span><br><span class="hljs-attr">listen-peer-urls:</span> <span class="hljs-string">https://192.168.66.42:2380</span><br><span class="hljs-comment"># 用于侦听客户机通信的逗号分隔的url列表。</span><br><span class="hljs-attr">listen-client-urls:</span> <span class="hljs-string">https://192.168.66.42:2379</span><br><span class="hljs-comment"># 这个成员的对等url的列表，以通告给集群的其他成员。url需要是逗号分隔的列表。</span><br><span class="hljs-attr">initial-advertise-peer-urls:</span> <span class="hljs-string">https://192.168.66.42:2380</span><br><span class="hljs-comment">#这个成员的对等url的列表，以通告给集群的其他成员。url需要是逗号分隔的列表。</span><br><span class="hljs-attr">advertise-client-urls:</span> <span class="hljs-string">https://192.168.66.42:2379</span><br></code></pre></td></tr></table></figure><h2 id="5-4-服务配置"><a href="#5-4-服务配置" class="headerlink" title="5.4 服务配置"></a>5.4 服务配置</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat &gt; /usr/lib/systemd/system/etcd.service &lt;&lt; EOF <br>[Unit] <br><span class="hljs-attribute">Description</span>=Etcd<span class="hljs-built_in"> Server </span><br><span class="hljs-attribute">After</span>=network.target <br><span class="hljs-attribute">After</span>=network-online.target <br><span class="hljs-attribute">Wants</span>=network-online.target <br>[Service] <br><span class="hljs-attribute">Type</span>=notify <br><span class="hljs-attribute">ExecStart</span>=/opt/etcd/bin/etcd  --config-file /opt/etcd/cfg/etcd.yml <br><span class="hljs-attribute">Restart</span>=on-failure <br><span class="hljs-attribute">LimitNOFILE</span>=65536 <br>[Install] <br><span class="hljs-attribute">WantedBy</span>=multi-user.target <br>EOF<br></code></pre></td></tr></table></figure><h2 id="5-5-启动服务"><a href="#5-5-启动服务" class="headerlink" title="5.5 启动服务"></a>5.5 启动服务</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">enable</span> etcd <span class="hljs-comment">--now</span><br></code></pre></td></tr></table></figure><h2 id="5-6-集群状态查看"><a href="#5-6-集群状态查看" class="headerlink" title="5.6 集群状态查看"></a>5.6 集群状态查看</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@k8s-master01</span> k8s]<span class="hljs-comment"># etcdctl --cacert=/opt/etcd/ssl/ca.pem --cert=/opt/etcd/ssl/etcd.pem --key=/opt/etcd/ssl/etcd-key.pem --endpoints=&quot;https://192.168.66.31:2379,https://192.168.66.41:2379,https://192.168.66.42:2379&quot; endpoint status --write-out=table</span><br>+------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|<span class="hljs-string">        ENDPOINT        </span>|<span class="hljs-string">        ID        </span>|<span class="hljs-string"> VERSION </span>|<span class="hljs-string"> DB SIZE </span>|<span class="hljs-string"> IS LEADER </span>|<span class="hljs-string"> IS LEARNER </span>|<span class="hljs-string"> RAFT TERM </span>|<span class="hljs-string"> RAFT INDEX </span>|<span class="hljs-string"> RAFT APPLIED INDEX </span>|<span class="hljs-string"> ERRORS </span>|<br>+------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|<span class="hljs-string"> https://192.168.66.31:2379 </span>|<span class="hljs-string"> 1f46bee47a4f04aa </span>|<span class="hljs-string">   3.5.0 </span>|<span class="hljs-string">   20 kB </span>|<span class="hljs-string">     false </span>|<span class="hljs-string">      false </span>|<span class="hljs-string">        15 </span>|<span class="hljs-string">         68 </span>|<span class="hljs-string">                 68 </span>|<span class="hljs-string">        </span>|<br>|<span class="hljs-string"> https://192.168.66.41:2379 </span>|<span class="hljs-string">   b3e5838df5f510 </span>|<span class="hljs-string">   3.5.0 </span>|<span class="hljs-string">   20 kB </span>|<span class="hljs-string">     false </span>|<span class="hljs-string">      false </span>|<span class="hljs-string">        15 </span>|<span class="hljs-string">         68 </span>|<span class="hljs-string">                 68 </span>|<span class="hljs-string">        </span>|<br>|<span class="hljs-string"> https://192.168.66.42:2379 </span>|<span class="hljs-string"> a437554da4f2a14c </span>|<span class="hljs-string">   3.5.0 </span>|<span class="hljs-string">   25 kB </span>|<span class="hljs-string">      true </span>|<span class="hljs-string">      false </span>|<span class="hljs-string">        15 </span>|<span class="hljs-string">         68 </span>|<span class="hljs-string">                 68 </span>|<span class="hljs-string">        </span>|<br>+------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br></code></pre></td></tr></table></figure><h1 id="六、部署k8s-master"><a href="#六、部署k8s-master" class="headerlink" title="六、部署k8s-master"></a>六、部署k8s-master</h1><h2 id="6-1-安装kube-apiserver"><a href="#6-1-安装kube-apiserver" class="headerlink" title="6.1 安装kube-apiserver"></a>6.1 安装kube-apiserver</h2><h3 id="6-1-1-配置文件"><a href="#6-1-1-配置文件" class="headerlink" title="6.1.1 配置文件"></a>6.1.1 配置文件</h3><p>/opt/kubernetes/cfg/kube-apiserver.conf</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">KUBE_APISERVER_OPTS=&quot;</span><span class="hljs-literal">--</span><span class="hljs-comment">logtostderr=false  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">v=2  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">log</span><span class="hljs-literal">-</span><span class="hljs-comment">dir=/opt/kubernetes/logs \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">etcd</span><span class="hljs-literal">-</span><span class="hljs-comment">servers=https://192</span><span class="hljs-string">.</span><span class="hljs-comment">168</span><span class="hljs-string">.</span><span class="hljs-comment">66</span><span class="hljs-string">.</span><span class="hljs-comment">31:2379</span><span class="hljs-string">,</span><span class="hljs-comment">https://192</span><span class="hljs-string">.</span><span class="hljs-comment">168</span><span class="hljs-string">.</span><span class="hljs-comment">66</span><span class="hljs-string">.</span><span class="hljs-comment">41:2379</span><span class="hljs-string">,</span><span class="hljs-comment">https://192</span><span class="hljs-string">.</span><span class="hljs-comment">168</span><span class="hljs-string">.</span><span class="hljs-comment">66</span><span class="hljs-string">.</span><span class="hljs-comment">42:2379 \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">bind</span><span class="hljs-literal">-</span><span class="hljs-comment">address=192</span><span class="hljs-string">.</span><span class="hljs-comment">168</span><span class="hljs-string">.</span><span class="hljs-comment">66</span><span class="hljs-string">.</span><span class="hljs-comment">31 \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">secure</span><span class="hljs-literal">-</span><span class="hljs-comment">port=6443  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">advertise</span><span class="hljs-literal">-</span><span class="hljs-comment">address=192</span><span class="hljs-string">.</span><span class="hljs-comment">168</span><span class="hljs-string">.</span><span class="hljs-comment">66</span><span class="hljs-string">.</span><span class="hljs-comment">31 \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">allow</span><span class="hljs-literal">-</span><span class="hljs-comment">privileged=true  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">service</span><span class="hljs-literal">-</span><span class="hljs-comment">cluster</span><span class="hljs-literal">-</span><span class="hljs-comment">ip</span><span class="hljs-literal">-</span><span class="hljs-comment">range=10</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">0/24  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">admission</span><span class="hljs-literal">-</span><span class="hljs-comment">plugins=NamespaceLifecycle</span><span class="hljs-string">,</span><span class="hljs-comment">LimitRanger</span><span class="hljs-string">,</span><span class="hljs-comment">ServiceAccount</span><span class="hljs-string">,</span><span class="hljs-comment">ResourceQuota</span><span class="hljs-string">,</span><span class="hljs-comment">NodeRestriction  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">authorization</span><span class="hljs-literal">-</span><span class="hljs-comment">mode=RBAC</span><span class="hljs-string">,</span><span class="hljs-comment">Node  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">bootstrap</span><span class="hljs-literal">-</span><span class="hljs-comment">token</span><span class="hljs-literal">-</span><span class="hljs-comment">auth=true  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">token</span><span class="hljs-literal">-</span><span class="hljs-comment">auth</span><span class="hljs-literal">-</span><span class="hljs-comment">file=/opt/kubernetes/cfg/token</span><span class="hljs-string">.</span><span class="hljs-comment">csv  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">service</span><span class="hljs-literal">-</span><span class="hljs-comment">node</span><span class="hljs-literal">-</span><span class="hljs-comment">port</span><span class="hljs-literal">-</span><span class="hljs-comment">range=30000</span><span class="hljs-literal">-</span><span class="hljs-comment">32767  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">kubelet</span><span class="hljs-literal">-</span><span class="hljs-comment">client</span><span class="hljs-literal">-</span><span class="hljs-comment">certificate=/opt/kubernetes/ssl/server</span><span class="hljs-string">.</span><span class="hljs-comment">pem  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">kubelet</span><span class="hljs-literal">-</span><span class="hljs-comment">client</span><span class="hljs-literal">-</span><span class="hljs-comment">key=/opt/kubernetes/ssl/server</span><span class="hljs-literal">-</span><span class="hljs-comment">key</span><span class="hljs-string">.</span><span class="hljs-comment">pem  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">tls</span><span class="hljs-literal">-</span><span class="hljs-comment">cert</span><span class="hljs-literal">-</span><span class="hljs-comment">file=/opt/kubernetes/ssl/server</span><span class="hljs-string">.</span><span class="hljs-comment">pem  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">tls</span><span class="hljs-literal">-</span><span class="hljs-comment">private</span><span class="hljs-literal">-</span><span class="hljs-comment">key</span><span class="hljs-literal">-</span><span class="hljs-comment">file=/opt/kubernetes/ssl/server</span><span class="hljs-literal">-</span><span class="hljs-comment">key</span><span class="hljs-string">.</span><span class="hljs-comment">pem  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">client</span><span class="hljs-literal">-</span><span class="hljs-comment">ca</span><span class="hljs-literal">-</span><span class="hljs-comment">file=/opt/kubernetes/ssl/ca</span><span class="hljs-string">.</span><span class="hljs-comment">pem  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">service</span><span class="hljs-literal">-</span><span class="hljs-comment">account</span><span class="hljs-literal">-</span><span class="hljs-comment">issuer=https://kubernetes</span><span class="hljs-string">.</span><span class="hljs-comment">default</span><span class="hljs-string">.</span><span class="hljs-comment">svc</span><span class="hljs-string">.</span><span class="hljs-comment">cluster</span><span class="hljs-string">.</span><span class="hljs-comment">local \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">service</span><span class="hljs-literal">-</span><span class="hljs-comment">account</span><span class="hljs-literal">-</span><span class="hljs-comment">signing</span><span class="hljs-literal">-</span><span class="hljs-comment">key</span><span class="hljs-literal">-</span><span class="hljs-comment">file=/opt/kubernetes/ssl/ca</span><span class="hljs-literal">-</span><span class="hljs-comment">key</span><span class="hljs-string">.</span><span class="hljs-comment">pem \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">service</span><span class="hljs-literal">-</span><span class="hljs-comment">account</span><span class="hljs-literal">-</span><span class="hljs-comment">key</span><span class="hljs-literal">-</span><span class="hljs-comment">file=/opt/kubernetes/ssl/ca</span><span class="hljs-literal">-</span><span class="hljs-comment">key</span><span class="hljs-string">.</span><span class="hljs-comment">pem  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">etcd</span><span class="hljs-literal">-</span><span class="hljs-comment">cafile=/opt/etcd/ssl/ca</span><span class="hljs-string">.</span><span class="hljs-comment">pem  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">etcd</span><span class="hljs-literal">-</span><span class="hljs-comment">certfile=/opt/etcd/ssl/etcd</span><span class="hljs-string">.</span><span class="hljs-comment">pem  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">etcd</span><span class="hljs-literal">-</span><span class="hljs-comment">keyfile=/opt/etcd/ssl/etcd</span><span class="hljs-literal">-</span><span class="hljs-comment">key</span><span class="hljs-string">.</span><span class="hljs-comment">pem  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">audit</span><span class="hljs-literal">-</span><span class="hljs-comment">log</span><span class="hljs-literal">-</span><span class="hljs-comment">maxage=30  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">audit</span><span class="hljs-literal">-</span><span class="hljs-comment">log</span><span class="hljs-literal">-</span><span class="hljs-comment">maxbackup=3  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">audit</span><span class="hljs-literal">-</span><span class="hljs-comment">log</span><span class="hljs-literal">-</span><span class="hljs-comment">maxsize=100  \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">enable</span><span class="hljs-literal">-</span><span class="hljs-comment">aggregator</span><span class="hljs-literal">-</span><span class="hljs-comment">routing=true \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">audit</span><span class="hljs-literal">-</span><span class="hljs-comment">log</span><span class="hljs-literal">-</span><span class="hljs-comment">path=/opt/kubernetes/logs/k8s</span><span class="hljs-literal">-</span><span class="hljs-comment">audit</span><span class="hljs-string">.</span><span class="hljs-comment">log&quot;</span><br></code></pre></td></tr></table></figure><p>说明：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stata">-logtostderr：启用日志 <br>-v：日志等级 <br>–<span class="hljs-keyword">log</span>-<span class="hljs-keyword">dir</span>：日志目录 <br>–etcd-servers：etcd 集群地址 <br>–bind-address：监听地址 <br>–secure-port：https 安全端口 <br>–advertise-address：集群通告地址 <br>–allow-privileged：启用授权 <br>–service-<span class="hljs-keyword">cluster</span>-ip-<span class="hljs-keyword">range</span>：Service 虚拟 IP 地址段 <br>–enable-admission-plugins：准入控制模块 <br>–authorization-mode：认证授权，启用 RBAC 授权和节点自管理 <br>–enable-<span class="hljs-keyword">bootstrap</span>-<span class="hljs-keyword">token</span>-auth：启用 TLS <span class="hljs-keyword">bootstrap</span> 机制 <br>–<span class="hljs-keyword">token</span>-auth-<span class="hljs-keyword">file</span>：<span class="hljs-keyword">bootstrap</span> <span class="hljs-keyword">token</span> 文件 <br>--service-account-issuer 此参数可作为服务账户令牌发放者的身份标识<br>–service-node-port-<span class="hljs-keyword">range</span>：Service nodeport 类型默认分配端口范围 <br>–kubelet-client-xxx：apiserver 访问 kubelet 客户端证书 <br>–tls-xxx-<span class="hljs-keyword">file</span>：apiserver https 证书 <br>--enable-aggregator-routing=true如果你未在运行 API 服务器的主机上运行 kube-proxy，则必须确保使用以下 kube-apiserver 标志启用系统<br>–etcd-xxxfile：连接 Etcd 集群证书 <br>–audit-<span class="hljs-keyword">log</span>-xxx：审计日志 <br></code></pre></td></tr></table></figure><p>如果你未在运行 API 服务器的主机上运行 kube-proxy，则必须确保使用以下 <code>kube-apiserver</code> 标志启用系统：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">--enable-aggregator-routing</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="6-1-2-kube-apiserver-服务配置"><a href="#6-1-2-kube-apiserver-服务配置" class="headerlink" title="6.1.2 kube-apiserver 服务配置"></a>6.1.2 kube-apiserver 服务配置</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat &gt; <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system/kube-apiserver.service &lt;&lt; EOF <br>[Unit] <br>Description=Kubernetes API Server <br>Documentation=https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kubernetes/</span>kubernetes <br>[Service] <br>EnvironmentFile=<span class="hljs-regexp">/opt/</span>kubernetes<span class="hljs-regexp">/cfg/</span>kube-apiserver.conf <br>ExecStart=<span class="hljs-regexp">/opt/</span>kubernetes<span class="hljs-regexp">/bin/</span>kube-apiserver \<span class="hljs-variable">$KUBE_APISERVER_OPTS</span> <br>Restart=on-failure <br>[Install] <br>WantedBy=multi-user.target <br>EOF<br></code></pre></td></tr></table></figure><h3 id="6-1-3-设置开机启动"><a href="#6-1-3-设置开机启动" class="headerlink" title="6.1.3 设置开机启动"></a>6.1.3 设置开机启动</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload <br><span class="hljs-params">system</span>ctl start kube-apiserver <br><span class="hljs-params">system</span>ctl enable kube-apiserver<br></code></pre></td></tr></table></figure><h3 id="6-1-4-授权-kubelet-bootstrap-用户允许请求证书"><a href="#6-1-4-授权-kubelet-bootstrap-用户允许请求证书" class="headerlink" title="6.1.4 授权 kubelet-bootstrap 用户允许请求证书"></a>6.1.4 授权 kubelet-bootstrap 用户允许请求证书</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create clusterrolebinding kubelet-bootstrap \ <br><span class="hljs-attribute">--clusterrole</span>=system:node-bootstrapper \ <br><span class="hljs-attribute">--user</span>=kubelet-bootstrap<br></code></pre></td></tr></table></figure><h2 id="6-2-部署-kube-controller-manager"><a href="#6-2-部署-kube-controller-manager" class="headerlink" title="6.2 部署 kube-controller-manager"></a>6.2 部署 kube-controller-manager</h2><h3 id="6-2-1-配置文件"><a href="#6-2-1-配置文件" class="headerlink" title="6.2.1 配置文件"></a>6.2.1 配置文件</h3><p>/opt/kubernetes/cfg/kube-controller-manager.conf </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vim">KUBE_CONTROLLER_MANAGER_OPTS=<span class="hljs-comment">&quot;--logtostderr=false \</span><br>--v=<span class="hljs-number">2</span> \<br>--<span class="hljs-built_in">log</span>-dir=/<span class="hljs-keyword">opt</span>/kubernetes/logs  \<br>--leader-elect=true  \<br>--kubeconfig=/<span class="hljs-keyword">opt</span>/kubernetes/cfg/kube-controller-manager.kubeconfig \<br>--bind-address=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>   \<br>--allocate-node-cidrs=true   \<br>--cluster-cidr=<span class="hljs-number">10.244</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">16</span>   \<br>--service-cluster-ip-<span class="hljs-built_in">range</span>=<span class="hljs-number">10.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">24</span>   \<br>--cluster-signing-cert-<span class="hljs-keyword">file</span>=/<span class="hljs-keyword">opt</span>/kubernetes/ssl/<span class="hljs-keyword">ca</span>.pem   \<br>--cluster-signing-key-<span class="hljs-keyword">file</span>=/<span class="hljs-keyword">opt</span>/kubernetes/ssl/<span class="hljs-keyword">ca</span>-key.pem  \<br>--root-<span class="hljs-keyword">ca</span>-<span class="hljs-keyword">file</span>=/<span class="hljs-keyword">opt</span>/kubernetes/ssl/<span class="hljs-keyword">ca</span>.pem  \<br>--service-account-private-key-<span class="hljs-keyword">file</span>=/<span class="hljs-keyword">opt</span>/kubernetes/ssl/<span class="hljs-keyword">ca</span>-key.pem  \<br>--cluster-signing-duration=<span class="hljs-number">87600</span>h0m0s<span class="hljs-comment">&quot;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>–cluster-cidr string</td><td>集群中 Pod 的 CIDR 范围。要求 <code>--allocate-node-cidrs</code> 标志为 true。</td></tr><tr><td>–service-cluster-ip-range</td><td>集群中 Service 对象的 CIDR 范围。要求 <code>--allocate-node-cidrs</code> 标志为 true。</td></tr><tr><td>-v, –v int</td><td>日志级别详细程度取值。</td></tr><tr><td>–kubeconfig</td><td>Kubernetes 认证文件</td></tr><tr><td>–leader-elect</td><td>当该组件启动多个时，自动选举（HA）</td></tr><tr><td>–cluster-signing-cert-file –cluster-signing-key-file</td><td>自动为 kubelet 颁发证书的 CA，与 apiserver 保持一致</td></tr></tbody></table><h3 id="6-2-2-controller-manager-服务配置"><a href="#6-2-2-controller-manager-服务配置" class="headerlink" title="6.2.2 controller-manager 服务配置"></a>6.2.2 controller-manager 服务配置</h3><p>/usr/lib/systemd/system/kube-controller-manager.service </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span> <br><span class="hljs-attr">Description</span>=Kubernetes Controller Manager <br><span class="hljs-attr">Documentation</span>=https://github.com/kubernetes/kubernetes <br><span class="hljs-section">[Service]</span> <br><span class="hljs-attr">EnvironmentFile</span>=/opt/kubernetes/cfg/kube-controller-manager.conf <br><span class="hljs-attr">ExecStart</span>=/opt/kubernetes/bin/kube-controller-manager  \<span class="hljs-variable">$KUBE_CONTROLLER_MANAGER_OPTS</span> <br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure <br><span class="hljs-section">[Install]</span> <br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="6-2-3-启动并设置开机启动"><a href="#6-2-3-启动并设置开机启动" class="headerlink" title="6.2.3 启动并设置开机启动"></a>6.2.3 启动并设置开机启动</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload <br><span class="hljs-params">system</span>ctl enable kube-controller-manager --now<br><br></code></pre></td></tr></table></figure><h2 id="6-3-部署-kube-scheduler"><a href="#6-3-部署-kube-scheduler" class="headerlink" title="6.3 部署 kube-scheduler"></a>6.3 部署 kube-scheduler</h2><h3 id="6-3-1-配置文件"><a href="#6-3-1-配置文件" class="headerlink" title="6.3.1 配置文件"></a>6.3.1 配置文件</h3><p>/opt/kubernetes/cfg/kube-scheduler.conf</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">KUBE_SCHEDULER_OPTS=&quot;</span><span class="hljs-literal">--</span><span class="hljs-comment">logtostderr=false \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">v=2 \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">log</span><span class="hljs-literal">-</span><span class="hljs-comment">dir=/opt/kubernetes/logs \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">kubeconfig=/opt/kubernetes/cfg/kube</span><span class="hljs-literal">-</span><span class="hljs-comment">scheduler</span><span class="hljs-string">.</span><span class="hljs-comment">kubeconfig \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">leader</span><span class="hljs-literal">-</span><span class="hljs-comment">elect \</span><br><span class="hljs-literal">--</span><span class="hljs-comment">bind</span><span class="hljs-literal">-</span><span class="hljs-comment">address=127</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">1&quot;</span><br></code></pre></td></tr></table></figure><p>–master：通过本地非安全本地端口 8080 连接 apiserver。 </p><p>–leader-elect：当该组件启动多个时，自动选举（HA） </p><h3 id="6-3-2-服务配置"><a href="#6-3-2-服务配置" class="headerlink" title="6.3.2 服务配置"></a>6.3.2 服务配置</h3><p>/usr/lib/systemd/system/kube-scheduler.service </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span> <br><span class="hljs-attr">Description</span>=Kubernetes Scheduler <br><span class="hljs-attr">Documentation</span>=https://github.com/kubernetes/kubernetes<br><span class="hljs-section">[Service]</span> <br><span class="hljs-attr">EnvironmentFile</span>=/opt/kubernetes/cfg/kube-scheduler.conf <br><span class="hljs-attr">ExecStart</span>=/opt/kubernetes/bin/kube-scheduler <span class="hljs-variable">$KUBE_SCHEDULER_OPTS</span> <br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure <br><span class="hljs-section">[Install]</span> <br><span class="hljs-attr">WantedBy</span>=multi-user.target <br></code></pre></td></tr></table></figure><h3 id="6-3-3-启动并设置开机启动"><a href="#6-3-3-启动并设置开机启动" class="headerlink" title="6.3.3 启动并设置开机启动"></a>6.3.3 启动并设置开机启动</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload <br><span class="hljs-params">system</span>ctl enable kube-scheduler --now<br><br></code></pre></td></tr></table></figure><h2 id="6-4-查看集群状态"><a href="#6-4-查看集群状态" class="headerlink" title="6.4 查看集群状态"></a>6.4 查看集群状态</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master01 ssl]# kubectl <span class="hljs-built_in">get</span> cs<br>Warning: v1 ComponentStatus is deprecated <span class="hljs-keyword">in</span> v1.19+<br>NAME                 STATUS    MESSAGE                         <span class="hljs-built_in">ERROR</span><br>controller-manager   Healthy   ok                              <br>etcd-2               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>,<span class="hljs-string">&quot;reason&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;   <br>etcd-1               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>,<span class="hljs-string">&quot;reason&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;   <span class="hljs-built_in"></span><br><span class="hljs-built_in">scheduler </span>           Healthy   ok                              <br>etcd-0               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>,<span class="hljs-string">&quot;reason&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125; <br></code></pre></td></tr></table></figure><h1 id="七、部署k8s-node"><a href="#七、部署k8s-node" class="headerlink" title="七、部署k8s-node"></a>七、部署k8s-node</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/opt/</span>kubernetes/&#123;bin,cfg,ssl,logs&#125;<br>cp kubelet kube-proxy <span class="hljs-regexp">/opt/</span>kubernetes/bin<br></code></pre></td></tr></table></figure><h2 id="1-部署-kubelet"><a href="#1-部署-kubelet" class="headerlink" title="1 部署 kubelet"></a>1 部署 kubelet</h2><h3 id="1-1-配置文件"><a href="#1-1-配置文件" class="headerlink" title="1.1 配置文件"></a>1.1 配置文件</h3><p>/opt/kubernetes/cfg/kubelet.conf </p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haml">KUBELET_OPTS=&quot;--v=2 \<br>-<span class="language-ruby">-hostname-override=k8s-master01 \</span><br>-<span class="language-ruby">-kubeconfig=<span class="hljs-regexp">/opt/kubernetes</span><span class="hljs-regexp">/cfg/kubelet</span>.kubeconfig \</span><br>-<span class="language-ruby">-bootstrap-kubeconfig=<span class="hljs-regexp">/opt/kubernetes</span><span class="hljs-regexp">/cfg/bootstrap</span>.kubeconfig \</span><br>-<span class="language-ruby">-config=<span class="hljs-regexp">/opt/kubernetes</span><span class="hljs-regexp">/cfg/kubelet</span>-config.yml \</span><br>-<span class="language-ruby">-cert-dir=<span class="hljs-regexp">/opt/kubernetes</span><span class="hljs-regexp">/ssl \</span></span><br>-<span class="language-ruby"><span class="hljs-regexp">-container-runtime-endpoint=unix:/</span><span class="hljs-regexp">//run</span><span class="hljs-regexp">/containerd/containerd</span>.sock  \</span><br>-<span class="language-ruby">-node-labels=node.kubernetes.io/node=<span class="hljs-string">&#x27;&#x27;</span> \</span><br>-<span class="language-ruby">-feature-gates=IPv6DualStack=<span class="hljs-literal">true</span><span class="hljs-string">&quot;</span></span><br></code></pre></td></tr></table></figure><p>–hostname-override：显示名称，集群中唯一 </p><p>–network-plugin：启用 CNI </p><p>–kubeconfig：空路径，会自动生成，后面用于连接 apiserver </p><p>–bootstrap-kubeconfig：首次启动向 apiserver 申请证书 </p><p>–config：配置参数文件 </p><p>–cert-dir：kubelet 证书生成目录</p><h3 id="1-2-配置参数文件"><a href="#1-2-配置参数文件" class="headerlink" title="1.2 配置参数文件"></a>1.2 配置参数文件</h3><p>/opt/kubernetes/cfg/kubelet-config.yml </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeletConfiguration</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubelet.config.k8s.io/v1beta1</span><br><span class="hljs-attr">address:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">10250</span><br><span class="hljs-attr">serializeImagePulls:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">readOnlyPort:</span> <span class="hljs-number">10255</span><br><span class="hljs-attr">cgroupDriver:</span> <span class="hljs-string">systemd</span><br><span class="hljs-attr">clusterDNS:</span><br><span class="hljs-bullet">-</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><br><span class="hljs-attr">clusterDomain:</span> <span class="hljs-string">cluster.local</span> <br><span class="hljs-attr">failSwapOn:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">authentication:</span><br>  <span class="hljs-attr">anonymous:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">webhook:</span><br>    <span class="hljs-attr">cacheTTL:</span> <span class="hljs-string">2m0s</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">x509:</span><br>    <span class="hljs-attr">clientCAFile:</span> <span class="hljs-string">/opt/kubernetes/ssl/ca.pem</span> <br><span class="hljs-attr">authorization:</span><br>  <span class="hljs-attr">mode:</span> <span class="hljs-string">Webhook</span><br>  <span class="hljs-attr">webhook:</span><br>    <span class="hljs-attr">cacheAuthorizedTTL:</span> <span class="hljs-string">5m0s</span><br>    <span class="hljs-attr">cacheUnauthorizedTTL:</span> <span class="hljs-string">30s</span><br><span class="hljs-attr">evictionHard:</span><br>  <span class="hljs-attr">imagefs.available:</span> <span class="hljs-number">15</span><span class="hljs-string">%</span><br>  <span class="hljs-attr">memory.available:</span> <span class="hljs-string">100Mi</span><br>  <span class="hljs-attr">nodefs.available:</span> <span class="hljs-number">10</span><span class="hljs-string">%</span><br>  <span class="hljs-attr">nodefs.inodesFree:</span> <span class="hljs-number">5</span><span class="hljs-string">%</span><br><span class="hljs-attr">maxOpenFiles:</span> <span class="hljs-number">1000000</span><br><span class="hljs-attr">maxPods:</span> <span class="hljs-number">110</span><br><span class="hljs-attr">runtimeRequestTimeout:</span> <span class="hljs-string">15m0s</span><br></code></pre></td></tr></table></figure><h3 id="1-3-拷贝到配置文件bootstrap-kubeconfig"><a href="#1-3-拷贝到配置文件bootstrap-kubeconfig" class="headerlink" title="1.3 拷贝到配置文件bootstrap.kubeconfig"></a>1.3 拷贝到配置文件bootstrap.kubeconfig</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp bootstrap.kubeconfig <span class="hljs-regexp">/opt/</span>kubernetes/cfg<br></code></pre></td></tr></table></figure><h3 id="1-4-systemd-管理-kubelet"><a href="#1-4-systemd-管理-kubelet" class="headerlink" title="1.4 systemd 管理 kubelet"></a>1.4 systemd 管理 kubelet</h3><p>/usr/lib/systemd/system/kubelet.service </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span> <br><span class="hljs-attr">Description</span>=Kubernetes Kubelet <br><span class="hljs-attr">After</span>=docker.service <br><span class="hljs-section">[Service]</span> <br><span class="hljs-attr">EnvironmentFile</span>=/opt/kubernetes/cfg/kubelet.conf<br><span class="hljs-attr">ExecStart</span>=/opt/kubernetes/bin/kubelet <span class="hljs-variable">$KUBELET_OPTS</span> <br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure <br><span class="hljs-attr">LimitNOFILE</span>=<span class="hljs-number">65536</span> <br><span class="hljs-section">[Install]</span> <br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="1-5-启动服务及开机设置"><a href="#1-5-启动服务及开机设置" class="headerlink" title="1.5 启动服务及开机设置"></a>1.5 启动服务及开机设置</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload <br><span class="hljs-params">system</span>ctl enable kubelet --now<br></code></pre></td></tr></table></figure><h3 id="1-6-批准-kubelet-证书申请并加入集群"><a href="#1-6-批准-kubelet-证书申请并加入集群" class="headerlink" title="1.6 批准 kubelet 证书申请并加入集群"></a>1.6 批准 kubelet 证书申请并加入集群</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 查看 kubelet 证书请求 </span><br>[root@k8s-master01 k8s-install]<span class="hljs-comment"># kubectl get csr</span><br>NAME                                                   AGE     SIGNERNAME                                    REQUESTOR           REQUESTEDDURATION   CONDITION<br><span class="hljs-keyword">node</span><span class="hljs-title">-csr-NrSNw-Gx8kR7VerABxUgHoM1mu71VbB8x598UXWOwM0</span>   <span class="hljs-number">4m</span>12s   kubernetes.io/kube-apiserver-client-kubelet   kubelet-bootstrap   <span class="hljs-tag">&lt;none&gt;</span>              Pending<br><span class="hljs-comment"># 批准申请 </span><br>[root@k8s-master01 k8s-install]<span class="hljs-comment"># kubectl certificate approve node-csr-NrSNw-Gx8kR7VerABxUgHoM1mu71VbB8x598UXWOwM0</span><br>certificatesigningrequest.certificates.k8s.io/<span class="hljs-keyword">node</span><span class="hljs-title">-csr-NrSNw-Gx8kR7VerABxUgHoM1mu71VbB8x598UXWOwM0</span> approved<br><span class="hljs-comment"># 查看节点 </span><br>[root@k8s-master01 k8s-install]<span class="hljs-comment"># kubectl get node</span><br>NAME     STATUS   ROLES    AGE   <span class="hljs-keyword">VERSION</span><br>node01   Ready    <span class="hljs-tag">&lt;none&gt;</span>   <span class="hljs-number">19s</span>   v1.<span class="hljs-number">24.0</span><br></code></pre></td></tr></table></figure><h2 id="2-部署-kube-proxy"><a href="#2-部署-kube-proxy" class="headerlink" title="2 部署 kube-proxy"></a>2 部署 kube-proxy</h2><h3 id="2-1-配置文件"><a href="#2-1-配置文件" class="headerlink" title="2.1 配置文件"></a>2.1 配置文件</h3><p>/opt/kubernetes/cfg/kube-proxy.conf </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">KUBE_PROXY_OPTS</span>=<span class="hljs-string">&quot;--v=2 \</span><br><span class="hljs-string">--config=/opt/kubernetes/cfg/kube-proxy-config.yml&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-配置参数文件"><a href="#2-2-配置参数文件" class="headerlink" title="2.2 配置参数文件"></a>2.2 配置参数文件</h3><p>/opt/kubernetes/cfg/kube-proxy-config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeProxyConfiguration</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeproxy.config.k8s.io/v1alpha1</span><br><span class="hljs-attr">bindAddress:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">metricsBindAddress:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:10249</span><br><span class="hljs-attr">clientConnection:</span><br>  <span class="hljs-attr">kubeconfig:</span> <span class="hljs-string">/opt/kubernetes/cfg/kube-proxy.kubeconfig</span><br><span class="hljs-attr">hostnameOverride:</span> <span class="hljs-string">k8s-master01</span><br><span class="hljs-attr">clusterCIDR:</span> <span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span><br><span class="hljs-attr">mode:</span> <span class="hljs-string">ipvs</span><br><span class="hljs-attr">ipvs:</span><br>  <span class="hljs-attr">scheduler:</span> <span class="hljs-string">&quot;rr&quot;</span><br><span class="hljs-attr">iptables:</span><br>  <span class="hljs-attr">masqueradeAll:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="2-3-kube-proxy-kubeconfig-文件"><a href="#2-3-kube-proxy-kubeconfig-文件" class="headerlink" title="2.3 kube-proxy.kubeconfig 文件"></a>2.3 kube-proxy.kubeconfig 文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp kube-proxy.kubeconfig <span class="hljs-regexp">/opt/</span>kubernetes<span class="hljs-regexp">/cfg/</span><br></code></pre></td></tr></table></figure><h3 id="2-4-服务配置"><a href="#2-4-服务配置" class="headerlink" title="2.4 服务配置"></a>2.4 服务配置</h3><p>/usr/lib/systemd/system/kube-proxy.service</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span> <br><span class="hljs-attr">Description</span>=Kubernetes Proxy <br><span class="hljs-attr">After</span>=network.target <br><span class="hljs-section">[Service]</span> <br><span class="hljs-attr">EnvironmentFile</span>=/opt/kubernetes/cfg/kube-proxy.conf <br><span class="hljs-attr">ExecStart</span>=/opt/kubernetes/bin/kube-proxy <span class="hljs-variable">$KUBE_PROXY_OPTS</span> <br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure <br><span class="hljs-attr">LimitNOFILE</span>=<span class="hljs-number">65536</span> <br><span class="hljs-section">[Install]</span> <br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><h3 id="2-5-启动并设置开机启动"><a href="#2-5-启动并设置开机启动" class="headerlink" title="2.5 启动并设置开机启动"></a>2.5 启动并设置开机启动</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload <br><span class="hljs-params">system</span>ctl enable kube-proxy --now<br><br></code></pre></td></tr></table></figure><h1 id="八、部署-CNI-网络"><a href="#八、部署-CNI-网络" class="headerlink" title="八、部署 CNI 网络"></a>八、部署 CNI 网络</h1><h2 id="8-1-安装ipvs"><a href="#8-1-安装ipvs" class="headerlink" title="8.1 安装ipvs"></a>8.1 安装ipvs</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle">yum install ipset ipvsadm -y <br><br>cat &gt;&gt; <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/modules/i</span>pvs.modules &lt;&lt; EOF<br>#!<span class="hljs-regexp">/bin/</span>bash<br>modprobe -- ip_vs<br>modprobe -- ip_vs_sh<br>modprobe -- ip_vs_rr<br>modprobe -- ip_vs_wrr<br>modprobe -- nf_conntrack_ipv4<br>EOF<br><br>chmod +x <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/modules/i</span>pvs.modules<br></code></pre></td></tr></table></figure><h2 id="8-2-部署calico"><a href="#8-2-部署calico" class="headerlink" title="8.2 部署calico"></a>8.2 部署calico</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">wget <span class="hljs-keyword">https</span>://docs.projectcalico.org/manifests/calico.yaml <span class="hljs-comment">--no-check-certificate</span><br><span class="hljs-comment"># 修改CALICO_IPV4POOL_CIDR  10.244.0.0/16</span><br>kubectl apply -f calico.yaml <br>kubectl <span class="hljs-built_in">get</span> pods -n kube-<span class="hljs-keyword">system</span> <br>kubectl <span class="hljs-built_in">get</span> node <br></code></pre></td></tr></table></figure><h2 id="8-3-授权apiserver访问kubelet"><a href="#8-3-授权apiserver访问kubelet" class="headerlink" title="8.3 授权apiserver访问kubelet"></a>8.3 授权apiserver访问kubelet</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">apiserver-to-kubelet-rbac.yaml</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">rbac.authorization.kubernetes.io/autoupdate:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">kubernetes.io/bootstrapping:</span> <span class="hljs-string">rbac-defaults</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:kube-apiserver-to-kubelet</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/proxy</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/stats</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/log</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/spec</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nodes/metrics</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">pods/log</span><br>    <span class="hljs-attr">verbs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:kube-apiserver</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:kube-apiserver-to-kubelet</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">User</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">apply</span> <span class="hljs-string">-f</span> <span class="hljs-string">apiserver-to-kubelet-rbac.yaml</span><br></code></pre></td></tr></table></figure><h2 id="8-4-部署nginx查看状态"><a href="#8-4-部署nginx查看状态" class="headerlink" title="8.4 部署nginx查看状态"></a>8.4 部署nginx查看状态</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">create</span> <span class="hljs-string">deploy</span> <span class="hljs-string">nginx</span> <span class="hljs-string">--image=harborcloud.com/library/nginx:1.7.9</span><br><span class="hljs-string">cat</span> <span class="hljs-string">&gt;nginx-svc.yaml&lt;&lt;END</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8088</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30500</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-string">END</span><br><br><span class="hljs-string">kubectl</span> <span class="hljs-string">create</span> <span class="hljs-string">-f</span> <span class="hljs-string">nginx-svc.yaml</span><br></code></pre></td></tr></table></figure><p>网络转发规则查看：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-master01 k8s-install]<span class="hljs-comment"># kubectl get pod,svc</span><br>NAME                         READY   STATUS    RESTARTS   AGE<br>pod/nginx-7d45769d94-x4hsz   1/1     Running  <span class="hljs-number"> 0 </span>         10m<br><br>NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE<br>service/kubernetes   ClusterIP   10.0.0.1     &lt;none&gt;        443/TCP          16m<br>service/web          NodePort    10.0.0.38    &lt;none&gt;        8088:30500/TCP   3m13s<br>[root@k8s-master01 k8s-install]<span class="hljs-comment"># ipvsadm -Ln</span><br>IP Virtual Server version 1.2.1 (size=4096)<br>Prot LocalAddress:Port Scheduler Flags<br>  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn<br>TCP  192.168.66.31:30500 rr<br>  -&gt; 10.244.196.130:80            Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>        <span class="hljs-number"> 0 </span>        <br>TCP  10.0.0.1:443 rr<br>  -&gt; 192.168.66.31:6443           Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 5 </span>        <span class="hljs-number"> 0 </span>        <br>TCP  10.0.0.38:8088 rr<br>  -&gt; 10.244.196.130:80            Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>        <span class="hljs-number"> 0 </span>        <br>TCP  10.88.0.1:30500 rr<br>  -&gt; 10.244.196.130:80            Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>        <span class="hljs-number"> 0 </span>        <br>TCP  10.244.196.128:30500 rr<br>  -&gt; 10.244.196.130:80            Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>        <span class="hljs-number"> 0 </span> <br></code></pre></td></tr></table></figure><h1 id="十、新增加-Worker-Node"><a href="#十、新增加-Worker-Node" class="headerlink" title="十、新增加 Worker Node"></a>十、新增加 Worker Node</h1><h2 id="1-拷贝已部署好的-Node-相关文件到新节点"><a href="#1-拷贝已部署好的-Node-相关文件到新节点" class="headerlink" title="1 拷贝已部署好的 Node 相关文件到新节点"></a>1 拷贝已部署好的 Node 相关文件到新节点</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 二进制文件</span><br>scp &#123;kube-proxy,kubelet&#125; root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.66</span>.<span class="hljs-number">41</span><span class="hljs-symbol">:/opt/kubernetes/bin/</span><br>scp &#123;kube-proxy,kubelet&#125; root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.66</span>.<span class="hljs-number">42</span><span class="hljs-symbol">:/opt/kubernetes/bin/</span><br><br><span class="hljs-comment"># CA证书</span><br>scp ca.pem root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.66</span>.<span class="hljs-number">41</span><span class="hljs-symbol">:/opt/kubernetes/ssl/</span><br>scp ca.pem root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.66</span>.<span class="hljs-number">42</span><span class="hljs-symbol">:/opt/kubernetes/ssl/</span><br><br><span class="hljs-comment"># 配置文件</span><br>scp &#123;kube-proxy.conf,kube-proxy.kubeconfig,kube-proxy-config.yml,kubelet.conf,kubelet-config.yml,bootstrap.kubeconfig&#125; root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.66</span>.<span class="hljs-number">41</span><span class="hljs-symbol">:/opt/kubernetes/cfg/</span><br>scp &#123;kube-proxy.conf,kube-proxy.kubeconfig,kube-proxy-config.yml,kubelet.conf,kubelet-config.yml,bootstrap.kubeconfig&#125; root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.66</span>.<span class="hljs-number">42</span><span class="hljs-symbol">:/opt/kubernetes/cfg/</span><br><br><span class="hljs-comment">#服务文件</span><br>scp &#123;kube-proxy.service,kubelet.service&#125; root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.66</span>.<span class="hljs-number">41</span><span class="hljs-symbol">:/usr/lib/systemd/system/</span><br>scp &#123;kube-proxy.service,kubelet.service&#125; root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.66</span>.<span class="hljs-number">42</span><span class="hljs-symbol">:/usr/lib/systemd/system/</span><br></code></pre></td></tr></table></figure><h2 id="2-修改主机名"><a href="#2-修改主机名" class="headerlink" title="2 修改主机名"></a>2 修改主机名</h2><p>k8s-node01:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 修改 --hostname-override=k8s-node01</span><br>vi <span class="hljs-regexp">/opt/</span>kubernetes<span class="hljs-regexp">/cfg/</span>kubelet.conf <br><span class="hljs-comment"># 修改 hostnameOverride: k8s-node01</span><br>vi <span class="hljs-regexp">/opt/</span>kubernetes<span class="hljs-regexp">/cfg/</span>kube-proxy-config.yml <br></code></pre></td></tr></table></figure><p>k8s-node02:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 修改 --hostname-override=k8s-node02</span><br>vi <span class="hljs-regexp">/opt/</span>kubernetes<span class="hljs-regexp">/cfg/</span>kubelet.conf <br><span class="hljs-comment"># 修改 hostnameOverride: k8s-node02</span><br>vi <span class="hljs-regexp">/opt/</span>kubernetes<span class="hljs-regexp">/cfg/</span>kube-proxy-config.yml <br></code></pre></td></tr></table></figure><h2 id="3-ipvs开启"><a href="#3-ipvs开启" class="headerlink" title="3 ipvs开启"></a>3 ipvs开启</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle">yum install ipset ipvsadm -y <br><br>cat &gt;&gt; <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/modules/i</span>pvs.modules &lt;&lt; EOF<br>#!<span class="hljs-regexp">/bin/</span>bash<br>modprobe -- ip_vs<br>modprobe -- ip_vs_sh<br>modprobe -- ip_vs_rr<br>modprobe -- ip_vs_wrr<br>modprobe -- nf_conntrack_ipv4<br>EOF<br><br>chmod +x <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/modules/i</span>pvs.modules<br></code></pre></td></tr></table></figure><h2 id="4-开启服务"><a href="#4-开启服务" class="headerlink" title="4 开启服务"></a>4 开启服务</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">systemctl daemon-reload<br>systemctl <span class="hljs-keyword">enable</span> kubelet <span class="hljs-comment">--now</span><br>systemctl <span class="hljs-keyword">enable</span> kube-proxy <span class="hljs-comment">--now</span><br></code></pre></td></tr></table></figure><h2 id="5-在-Master-上批准新-Node-kubelet-证书申请"><a href="#5-在-Master-上批准新-Node-kubelet-证书申请" class="headerlink" title="5 在 Master 上批准新 Node kubelet 证书申请"></a>5 在 Master 上批准新 Node kubelet 证书申请</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">kubectl get csr<br>kubectl certificate approve <span class="hljs-keyword">node</span><span class="hljs-title">-csr-4zTjsaVSrhuyhIGqsefxzVoZDCNKei-aE2jyTP81Uro</span><br></code></pre></td></tr></table></figure><h1 id="十一-部署CoreDNS"><a href="#十一-部署CoreDNS" class="headerlink" title="十一 部署CoreDNS"></a>十一 部署CoreDNS</h1><p>/opt/kubernetes/cfg/kube-apiserver.conf:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">--service-cluster-ip-range</span>=<span class="hljs-number">10.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>因为在kubelet-config.yml中指定</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">clusterDNS</span>:<br><span class="hljs-literal">-</span> 10.0.0.2<br><span class="hljs-attribute">clusterDomain</span>: cluster.local<br></code></pre></td></tr></table></figure><p>安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/coredns/</span>deployment.git<br>cd deployment/kubernetes<br>.<span class="hljs-regexp">/deploy.sh -r 10.0.0.0/</span><span class="hljs-number">24</span> -i <span class="hljs-number">10.0</span>.<span class="hljs-number">0.2</span> -d cluster.local  &gt;  coredns.yaml<br>kubectl create -f coredns.yaml<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create deployment nginx <span class="hljs-attribute">--image</span>=nginx<br>kubectl expose deployment nginx <span class="hljs-attribute">--port</span>=80 <span class="hljs-attribute">--type</span>=NodePort<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>二进制部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubeadm 创建高可用集群</title>
    <link href="/2022/03/12/k8s/%E9%9B%86%E7%BE%A4/kubeadm%20%E5%88%9B%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/"/>
    <url>/2022/03/12/k8s/%E9%9B%86%E7%BE%A4/kubeadm%20%E5%88%9B%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h1><table><thead><tr><th>服务器</th><th>IP</th></tr></thead><tbody><tr><td>k8s-master01</td><td>10.0.0.101</td></tr><tr><td>k8s-master02</td><td>10.0.0.102</td></tr><tr><td>k8s-master03</td><td>10.0.0.103</td></tr><tr><td>k8s-node01</td><td>10.0.0.201</td></tr><tr><td>k8s-node02</td><td>10.0.0.202</td></tr><tr><td>k8s-node03</td><td>10.0.0.203</td></tr><tr><td>虚拟IP</td><td>10.0.0.150</td></tr></tbody></table><h1 id="二、准备操作"><a href="#二、准备操作" class="headerlink" title="二、准备操作"></a>二、准备操作</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum update<br><span class="hljs-comment"># 关闭selinux</span><br>sed -i <span class="hljs-string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config <br>setenforce 0  <br><br><span class="hljs-comment"># 关闭swap</span><br><span class="hljs-comment"># 临时 永久</span><br>swapoff -a <br>sed -ri <span class="hljs-string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab    <br><br><span class="hljs-comment">#这里可能不存在</span><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="hljs-string">br_netfilter</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">#将桥接的IPv4流量传递到iptables的链</span><br><span class="hljs-built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br>sysctl --system  <span class="hljs-comment"># 生效</span><br><br><span class="hljs-comment"># 强制把系统时间写入CMOS</span><br>yum install ntpdate -y<br>ntpdate time.windows.com<br>clock -w<br></code></pre></td></tr></table></figure><h1 id="三、安装必要软件"><a href="#三、安装必要软件" class="headerlink" title="三、安装必要软件"></a>三、安装必要软件</h1><h2 id="docker-keepalived-haproxy安装"><a href="#docker-keepalived-haproxy安装" class="headerlink" title="docker keepalived haproxy安装"></a>docker keepalived haproxy安装</h2><p>官网：自 1.24 版起，Dockershim 已从 Kubernetes 项目中移除。阅读 Dockershim 移除的常见问题了解更多详情。 </p><p>所有节点安装</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 安装docker支持</span><br><span class="hljs-attribute">yum</span> install docker-ce-<span class="hljs-number">18</span>.<span class="hljs-number">06</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">3</span>.el7 docker-ce-cli-<span class="hljs-number">18</span>.<span class="hljs-number">06</span>.<span class="hljs-number">0</span>.ce-<span class="hljs-number">3</span>.el7 containerd.io docker-compose-plugin -y<br><span class="hljs-comment"># 安装k8s支持 </span><br><span class="hljs-attribute">yum</span> install -y kubeadm-<span class="hljs-number">1</span>.<span class="hljs-number">24</span>.<span class="hljs-number">0</span> kubectl-<span class="hljs-number">1</span>.<span class="hljs-number">24</span>.<span class="hljs-number">0</span> kubelet-<span class="hljs-number">1</span>.<span class="hljs-number">24</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>master软件支持</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># LVS支持</span><br>yum <span class="hljs-keyword">install</span> -y keepalived haproxy<br></code></pre></td></tr></table></figure><h2 id="cri-dockerd-安装启动-所有节点"><a href="#cri-dockerd-安装启动-所有节点" class="headerlink" title="cri-dockerd 安装启动(所有节点)"></a>cri-dockerd 安装启动(所有节点)</h2><p><a href="https://github.com/Mirantis/cri-dockerd">https://github.com/Mirantis/cri-dockerd</a></p><p>下载cri-dockerd源码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Mirantis/</span>cri-dockerd.git<br></code></pre></td></tr></table></figure><p>配置cri-dockerd服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://storage.googleapis.com/golang/getgo/installer_linux<br><span class="hljs-built_in">chmod</span> +x ./installer_linux<br>./installer_linux<br><span class="hljs-built_in">source</span> ~/.bash_profile<br><br><span class="hljs-built_in">cd</span> cri-dockerd<br><span class="hljs-built_in">mkdir</span> bin<br>go get &amp;&amp; go build -o bin/cri-dockerd<br><span class="hljs-built_in">mkdir</span> -p /usr/local/bin<br>install -o root -g root -m 0755 bin/cri-dockerd /usr/local/bin/cri-dockerd<br><span class="hljs-built_in">cp</span> -a packaging/systemd/* /etc/systemd/system<br>sed -i -e <span class="hljs-string">&#x27;s,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,&#x27;</span> /etc/systemd/system/cri-docker.service<br>systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> cri-docker.service<br>systemctl <span class="hljs-built_in">enable</span> --now cri-docker.socket<br></code></pre></td></tr></table></figure><h1 id="四、配置"><a href="#四、配置" class="headerlink" title="四、配置"></a>四、配置</h1><p>官网keepalived+haproxy配置方案：<a href="https://github.com/kubernetes/kubeadm/blob/main/docs/ha-considerations.md#options-for-software-load-balancing">kubeadm/ha-considerations.md at main · kubernetes/kubeadm · GitHub</a> </p><h2 id="keepalived-配置"><a href="#keepalived-配置" class="headerlink" title="keepalived 配置"></a>keepalived 配置</h2><p>vrrp_strict需要注释，不然就必须开启firewalld</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">! Configuration File <span class="hljs-keyword">for</span> keepalived<br><br>global_defs &#123;<br>   smtp_server <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.150</span><br>   smtp_connect_timeout <span class="hljs-number">30</span><br>   router_id LVS_DEVEL<br>   vrrp_skip_check_adv_addr<br>#   vrrp_strict<br>   vrrp_garp_interval <span class="hljs-number">0</span><br>   vrrp_gna_interval <span class="hljs-number">0</span><br>&#125;<br>vrrp_script chk_haproxy &#123;<br>    script <span class="hljs-string">&quot;killall -0 haproxy&quot;</span><br>    <span class="hljs-built_in">int</span>erval <span class="hljs-number">2</span><br>    weight <span class="hljs-number">2</span><br>&#125;<br>vrrp_instance VI_1 &#123;<br>    state MASTER<br>    <span class="hljs-keyword">interface</span> <span class="hljs-symbol">eno16777736</span><br>    <span class="hljs-symbol">virtual_router_id</span> <span class="hljs-symbol">51</span><br>    <span class="hljs-symbol">priority</span> <span class="hljs-symbol">100</span><br>    <span class="hljs-symbol">advert_int</span> <span class="hljs-symbol">1</span><br>    <span class="hljs-symbol">authentication</span> &#123;<br>        auth_type PASS<br>        auth_pass <span class="hljs-number">1111</span><br>    &#125;<br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.150</span>/<span class="hljs-number">24</span><br>    &#125;<br>    track_script &#123;<br>        chk_haproxy<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> keepalived<br></code></pre></td></tr></table></figure><h2 id="haproxy配置"><a href="#haproxy配置" class="headerlink" title="haproxy配置"></a>haproxy配置</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs smali">frontend  main *:16443<br>    mode tcp<br>    default_backend             app<br>backend app<br>    mode        tcp<br>    balance     roundrobin<br>    server  app1 10.0.0.101:6443<span class="hljs-built_in"> check</span><br><span class="hljs-built_in"></span>    server  app2 10.0.0.102:6443<span class="hljs-built_in"> check</span><br><span class="hljs-built_in"></span>    server  app3 10.0.0.103:6443 check<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> haproxy<br></code></pre></td></tr></table></figure><h2 id="k8s-init初始构建文件kubeadm-config-yaml"><a href="#k8s-init初始构建文件kubeadm-config-yaml" class="headerlink" title="k8s init初始构建文件kubeadm-config.yaml"></a>k8s init初始构建文件kubeadm-config.yaml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiServer:</span><br>  <span class="hljs-attr">timeoutForControlPlane:</span> <span class="hljs-string">4m0s</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubeadm.k8s.io/v1beta3</span><br><span class="hljs-attr">certificatesDir:</span> <span class="hljs-string">/etc/kubernetes/pki</span><br><span class="hljs-attr">clusterName:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">controllerManager:</span> &#123;&#125;<br><span class="hljs-attr">dns:</span> &#123;&#125;<br><span class="hljs-attr">etcd:</span><br>  <span class="hljs-attr">local:</span><br>    <span class="hljs-attr">dataDir:</span> <span class="hljs-string">/var/lib/etcd</span><br><span class="hljs-attr">imageRepository:</span> <span class="hljs-string">registry.aliyuncs.com/google_containers</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterConfiguration</span><br><span class="hljs-attr">kubernetesVersion:</span> <span class="hljs-number">1.24</span><span class="hljs-number">.0</span><br><span class="hljs-attr">networking:</span><br>  <span class="hljs-attr">dnsDomain:</span> <span class="hljs-string">cluster.local</span><br>  <span class="hljs-attr">serviceSubnet:</span> <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/12</span><br>  <span class="hljs-attr">podSubnet:</span> <span class="hljs-number">10.244</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">/16</span><br><span class="hljs-attr">controlPlaneEndpoint:</span> <span class="hljs-string">&quot;10.0.0.150:16443&quot;</span><br><span class="hljs-attr">scheduler:</span> &#123;&#125;<br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kubelet.config.k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">KubeletConfiguration</span><br><span class="hljs-attr">cgroupDriver:</span> <span class="hljs-string">systemd</span><br></code></pre></td></tr></table></figure><h1 id="五-安装k8s"><a href="#五-安装k8s" class="headerlink" title="五 安装k8s"></a>五 安装k8s</h1><h2 id="1-在keepalive-master安装k8s"><a href="#1-在keepalive-master安装k8s" class="headerlink" title="1 在keepalive master安装k8s"></a>1 在keepalive master安装k8s</h2><h3 id="初始化安装k8s"><a href="#初始化安装k8s" class="headerlink" title="初始化安装k8s"></a>初始化安装k8s</h3><p>在master01上安装，注意这里master01需保证10.0.0.150绑定到上面</p><p>命令行参数方式：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kubeadm init \<br><span class="hljs-attr">--image-repository</span> registry<span class="hljs-selector-class">.aliyuncs</span>.com/google_containers \<br><span class="hljs-attr">--kubernetes-version</span> v1.<span class="hljs-number">24.0</span> \<br><span class="hljs-attr">--service-cidr</span>=<span class="hljs-number">10.96</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">12</span> \<br><span class="hljs-attr">--pod-network-cidr</span>=<span class="hljs-number">10.244</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">16</span> \<br><span class="hljs-attr">--control-plane-endpoint</span> <span class="hljs-string">&quot;10.0.0.150:16443&quot;</span> \<br><span class="hljs-attr">--upload-certs</span><br></code></pre></td></tr></table></figure><p>配置文件方式：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kubeadm init <span class="hljs-attr">--config</span> kubeadm-config<span class="hljs-selector-class">.yaml</span> <span class="hljs-attr">--upload-certs</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">...<br>Your Kubernetes control-plane has initialized successfully!<br><br>To <span class="hljs-built_in">start</span> <span class="hljs-keyword">using</span> your cluster, you need <span class="hljs-built_in">to</span> run <span class="hljs-keyword">the</span> following <span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> regular user:<br><br>  mkdir -p $HOME/.kube<br>  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>  sudo chown $(id -u):$(id -g) $HOME/.kube/config<br><br>Alternatively, <span class="hljs-keyword">if</span> you are <span class="hljs-keyword">the</span> root user, you can run:<br><br>  export KUBECONFIG=/etc/kubernetes/admin.conf<br><br>You should now deploy <span class="hljs-keyword">a</span> pod network <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> cluster.<br>Run <span class="hljs-string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> <span class="hljs-keyword">with</span> <span class="hljs-literal">one</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> options listed <span class="hljs-keyword">at</span>:<br>  <span class="hljs-keyword">https</span>://kubernetes.io/docs/concepts/cluster-administration/addons/<br><br>You can now join <span class="hljs-keyword">any</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> control-plane node running <span class="hljs-keyword">the</span> following <span class="hljs-keyword">command</span> <span class="hljs-title">on</span> <span class="hljs-title">each</span> <span class="hljs-title">as</span> <span class="hljs-title">root</span>:<br><br>  kubeadm join <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.150</span>:<span class="hljs-number">16443</span> <span class="hljs-comment">--token ahps3w.1pdntr699ijvouxu \</span><br>        <span class="hljs-comment">--discovery-token-ca-cert-hash sha256:e94fee115e9bf7d8f91df2268025fde08bd899e010c27fe97d2ee9e53326d028 \</span><br>        <span class="hljs-comment">--control-plane --certificate-key a24d302107d362c3227c171acbeb6eb613688480e2019c25807d6cc53f8a0dc1</span><br><br>Please note that <span class="hljs-keyword">the</span> certificate-key gives access <span class="hljs-built_in">to</span> cluster sensitive data, keep <span class="hljs-keyword">it</span> secret!<br>As <span class="hljs-keyword">a</span> safeguard, uploaded-certs will be deleted <span class="hljs-keyword">in</span> <span class="hljs-literal">two</span> hours; If necessary, you can use<br><span class="hljs-string">&quot;kubeadm init phase upload-certs --upload-certs&quot;</span> <span class="hljs-built_in">to</span> reload certs afterward.<br><br>Then you can join <span class="hljs-keyword">any</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> worker nodes <span class="hljs-keyword">by</span> running <span class="hljs-keyword">the</span> following <span class="hljs-keyword">on</span> <span class="hljs-title">each</span> <span class="hljs-title">as</span> <span class="hljs-title">root</span>:<br><br>kubeadm join <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.150</span>:<span class="hljs-number">16443</span> <span class="hljs-comment">--token ahps3w.1pdntr699ijvouxu \</span><br>        <span class="hljs-comment">--discovery-token-ca-cert-hash sha256:e94fee115e9bf7d8f91df2268025fde08bd899e010c27fe97d2ee9e53326d028</span><br></code></pre></td></tr></table></figure><h3 id="为root用户配置"><a href="#为root用户配置" class="headerlink" title="为root用户配置"></a>为root用户配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><h3 id="网络插件"><a href="#网络插件" class="headerlink" title="网络插件"></a>网络插件</h3><p>上面提到的kubectl apply -f [podnetwork].yaml，这里采用flannel</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/coreos/</span>flannel<span class="hljs-regexp">/master/</span>Documentation/kube-flannel.yml<br></code></pre></td></tr></table></figure><h3 id="加入control-plane时间过期重新生成认证加入"><a href="#加入control-plane时间过期重新生成认证加入" class="headerlink" title="加入control-plane时间过期重新生成认证加入"></a>加入control-plane时间过期重新生成认证加入</h3><p>集群节点加入认证生成</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">kubeadm <span class="hljs-built_in">token</span> <span class="hljs-keyword">create</span> --certificate-<span class="hljs-built_in">key</span> a24d302107d362c3227c171acbeb6eb613688480e2019c25807d6cc53f8a0dc1 --<span class="hljs-keyword">print</span>-join-command<br></code></pre></td></tr></table></figure><p>普通节点加入认证生成</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">kubeadm <span class="hljs-built_in">token</span> <span class="hljs-keyword">create</span>  --<span class="hljs-keyword">print</span>-join-command<br></code></pre></td></tr></table></figure><h2 id="2-在keepalived-backup上执行加入控制面板"><a href="#2-在keepalived-backup上执行加入控制面板" class="headerlink" title="2 在keepalived backup上执行加入控制面板"></a>2 在keepalived backup上执行加入控制面板</h2><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">kubeadm join <span class="hljs-number">10.0</span>.<span class="hljs-number">0.150</span>:<span class="hljs-number">16443</span> --token ahps<span class="hljs-number">3</span>w.<span class="hljs-number">1</span>pdntr<span class="hljs-number">699</span>ijvouxu \<br>        --discovery-token-ca-cert-hash sha<span class="hljs-number">256</span>:e<span class="hljs-number">94</span>fee<span class="hljs-number">115e9</span>bf<span class="hljs-number">7</span>d<span class="hljs-number">8</span>f<span class="hljs-number">91</span>df<span class="hljs-number">2268025</span>fde<span class="hljs-number">08</span>bd<span class="hljs-number">899e010</span><span class="hljs-keyword">c</span><span class="hljs-number">27</span>fe<span class="hljs-number">97</span>d<span class="hljs-number">2</span>ee<span class="hljs-number">9e53326</span>d<span class="hljs-number">028</span> \<br>        --control-plane --certificate-key a<span class="hljs-number">24</span>d<span class="hljs-number">302107</span>d<span class="hljs-number">362</span><span class="hljs-keyword">c</span><span class="hljs-number">3227</span><span class="hljs-keyword">c</span><span class="hljs-number">171</span>acbeb<span class="hljs-number">6</span>eb<span class="hljs-number">613688480e2019</span><span class="hljs-keyword">c</span><span class="hljs-number">25807</span>d<span class="hljs-number">6</span><span class="hljs-keyword">cc</span><span class="hljs-number">53</span>f<span class="hljs-number">8</span>a<span class="hljs-number">0</span>dc<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>成功结果：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">This node has joined <span class="hljs-keyword">the</span> cluster <span class="hljs-keyword">and</span> <span class="hljs-keyword">a</span> <span class="hljs-built_in">new</span> control plane instance was created:<br><br>* Certificate signing request was sent <span class="hljs-built_in">to</span> apiserver <span class="hljs-keyword">and</span> approval was received.<br>* The Kubelet was informed <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">new</span> secure connection details.<br>* Control plane label <span class="hljs-keyword">and</span> taint were applied <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">new</span> node.<br>* The Kubernetes control plane instances scaled up.<br>* A <span class="hljs-built_in">new</span> etcd member was added <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">local</span>/stacked etcd cluster.<br><br>To <span class="hljs-built_in">start</span> administering your cluster <span class="hljs-built_in">from</span> this node, you need <span class="hljs-built_in">to</span> run <span class="hljs-keyword">the</span> following <span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> regular user:<br><br>        mkdir -p $HOME/.kube<br>        sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>        sudo chown $(id -u):$(id -g) $HOME/.kube/config<br><br>Run <span class="hljs-string">&#x27;kubectl get nodes&#x27;</span> <span class="hljs-built_in">to</span> see this node join <span class="hljs-keyword">the</span> cluster.<br></code></pre></td></tr></table></figure><p>为当前用户配置权限证书之类:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>        sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>        sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br></code></pre></td></tr></table></figure><h2 id="3-普通node节点加入"><a href="#3-普通node节点加入" class="headerlink" title="3 普通node节点加入"></a>3 普通node节点加入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">kubeadm <span class="hljs-keyword">join</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.150</span>:<span class="hljs-number">16443</span> <span class="hljs-comment">--token ahps3w.1pdntr699ijvouxu \</span><br>        <span class="hljs-comment">--discovery-token-ca-cert-hash sha256:e94fee115e9bf7d8f91df2268025fde08bd899e010c27fe97d2ee9e53326d028</span><br></code></pre></td></tr></table></figure><p>如果提示token认证过期就去master重新生成加入认证</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">kubeadm <span class="hljs-built_in">token</span> <span class="hljs-keyword">create</span>  --<span class="hljs-keyword">print</span>-join-command<br></code></pre></td></tr></table></figure><h1 id="六-安装结果"><a href="#六-安装结果" class="headerlink" title="六 安装结果"></a>六 安装结果</h1><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mel">[root@k8s-master01 k8s-install]# kubectl get nodes<br>NAME           STATUS   ROLES           AGE     VERSION<br>k8s-master01   Ready    <span class="hljs-keyword">control</span>-<span class="hljs-keyword">plane</span>   <span class="hljs-number">58</span>m     v1<span class="hljs-number">.24</span><span class="hljs-number">.0</span><br>k8s-master02   Ready    <span class="hljs-keyword">control</span>-<span class="hljs-keyword">plane</span>   <span class="hljs-number">55</span>m     v1<span class="hljs-number">.24</span><span class="hljs-number">.0</span><br>k8s-master03   Ready    <span class="hljs-keyword">control</span>-<span class="hljs-keyword">plane</span>   <span class="hljs-number">41</span>m     v1<span class="hljs-number">.24</span><span class="hljs-number">.0</span><br>k8s-node01     Ready    &lt;none&gt;          <span class="hljs-number">33</span>m     v1<span class="hljs-number">.24</span><span class="hljs-number">.0</span><br>k8s-node02     Ready    &lt;none&gt;          <span class="hljs-number">4</span>m26s   v1<span class="hljs-number">.24</span><span class="hljs-number">.0</span><br>k8s-node03     Ready    &lt;none&gt;          <span class="hljs-number">26</span>m     v1<span class="hljs-number">.24</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><h1 id="七-验证结果"><a href="#七-验证结果" class="headerlink" title="七 验证结果"></a>七 验证结果</h1><p>创建nginx并且暴露服务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 deployment]# kubectl <span class="hljs-keyword">create</span> deployment nginx <span class="hljs-comment">--image=nginx</span><br>deployment.apps<span class="hljs-operator">/</span>nginx created<br>[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 deployment]# kubectl <span class="hljs-keyword">create</span> service nodeport nginx <span class="hljs-comment">--tcp=80:80         </span><br>service<span class="hljs-operator">/</span>nginx created<br>[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 deployment]# kubectl <span class="hljs-keyword">get</span> svc,pod <span class="hljs-operator">-</span>o wide<br>NAME                 TYPE        CLUSTER<span class="hljs-operator">-</span>IP       <span class="hljs-keyword">EXTERNAL</span><span class="hljs-operator">-</span>IP   PORT(S)        AGE    SELECTOR<br>service<span class="hljs-operator">/</span>kubernetes   ClusterIP   <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>        <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>        <span class="hljs-number">443</span><span class="hljs-operator">/</span>TCP        <span class="hljs-number">169</span>m   <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>service<span class="hljs-operator">/</span>nginx        NodePort    <span class="hljs-number">10.109</span><span class="hljs-number">.142</span><span class="hljs-number">.181</span>   <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>        <span class="hljs-number">80</span>:<span class="hljs-number">31454</span><span class="hljs-operator">/</span>TCP   <span class="hljs-number">34</span>s    app<span class="hljs-operator">=</span>nginx<br><br>NAME                        READY   STATUS    RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES<br>pod<span class="hljs-operator">/</span>nginx<span class="hljs-number">-8</span>f458dc5b<span class="hljs-operator">-</span>m65bl   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">3</span>m14s   <span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>   k8s<span class="hljs-operator">-</span>node02   <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>地址访问</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml">[root@k8s-master01 deployment]# curl 10.0.0.202:31454<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">html</span> &#123; <span class="hljs-attribute">color</span>-scheme: light dark; &#125;</span><br><span class="language-css"><span class="hljs-selector-tag">body</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">35em</span>; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css"><span class="hljs-attribute">font-family</span>: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and<br>working. Further configuration is required.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>For online documentation and support please refer to<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;</span>nginx.org<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>Commercial support is available at<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;</span>nginx.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>Thank you for using nginx.<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>高可用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>etcd集群</title>
    <link href="/2022/03/10/k8s/%E9%9B%86%E7%BE%A4/etcd%E9%9B%86%E7%BE%A4/"/>
    <url>/2022/03/10/k8s/%E9%9B%86%E7%BE%A4/etcd%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="一、准备环境"><a href="#一、准备环境" class="headerlink" title="一、准备环境"></a>一、准备环境</h1><table><thead><tr><th>角色</th><th>IP</th></tr></thead><tbody><tr><td>etcd-1</td><td>192.168.66.31</td></tr><tr><td>etcd-2</td><td>192.168.66.41</td></tr><tr><td>etcd-3</td><td>192.168.66.42</td></tr></tbody></table><h1 id="二、软件下载"><a href="#二、软件下载" class="headerlink" title="二、软件下载"></a>二、软件下载</h1><p>单独为etcd放置一个目录，方便后面直接通过scp命令迁移</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/opt/</span>etcd<br>mkdir <span class="hljs-regexp">/opt/</span>etcd/&#123;bin,cfg,ssl,data,wal&#125; –p<br></code></pre></td></tr></table></figure><p>下载</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> -c https://github.com/etcd-io/etcd/releases/download/v3.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>/etcd-v3.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>-linux-amd64.tar.gz<br><span class="hljs-attribute">tar</span> -zxf etcd-v3.<span class="hljs-number">5</span>.<span class="hljs-number">0</span>-linux-amd64.tar.gz -C etcd-v3.<span class="hljs-number">5</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>移动执行文件并配置环境</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cd etcd-v3.<span class="hljs-number">5.0</span><br>mv .<span class="hljs-regexp">/&#123;etcd,etcdctl,etcdutl&#125; /</span>opt<span class="hljs-regexp">/etcd/</span>bin/<br># 将<span class="hljs-regexp">/opt/</span>etcd/bin 加入PATH<br>vi <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure><h1 id="三、证书生成"><a href="#三、证书生成" class="headerlink" title="三、证书生成"></a>三、证书生成</h1><p>工具下载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/cloudflare/</span>cfssl<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v1.5.0/</span>cfssl_1.<span class="hljs-number">5.0</span>_linux_amd64 -o cfssl<br>chmod +x cfssl<br>curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/cloudflare/</span>cfssl<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v1.5.0/</span>cfssljson_1.<span class="hljs-number">5.0</span>_linux_amd64 -o cfssljson<br>chmod +x cfssljson<br>curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/cloudflare/</span>cfssl<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v1.5.0/</span>cfssl-certinfo_1.<span class="hljs-number">5.0</span>_linux_amd64 -o cfssl-certinfo<br>chmod +x cfssl-certinfo<br>mv &#123;cfssl,cfssljson,cfssl-certinfo&#125; <span class="hljs-regexp">/usr/</span>local/bin<br></code></pre></td></tr></table></figure><p>（1）自签证书颁发机构（CA）</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> etcd]<span class="hljs-meta"># cat &gt; ca-config.json&lt;&lt; EOF </span><br>&#123;<br>    <span class="hljs-string">&quot;signing&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;default&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;expiry&quot;</span>:<span class="hljs-string">&quot;87600h&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;profiles&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;kubernetes&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;expiry&quot;</span>:<span class="hljs-string">&quot;87600h&quot;</span>,<br>                <span class="hljs-string">&quot;usages&quot;</span>:[<br>                    <span class="hljs-string">&quot;signing&quot;</span>,<br>                    <span class="hljs-string">&quot;key encipherment&quot;</span>,<br>                    <span class="hljs-string">&quot;server auth&quot;</span>,<br>                    <span class="hljs-string">&quot;client auth&quot;</span><br>                ]<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>EOF<br>[root<span class="hljs-symbol">@localhost</span> etcd]<span class="hljs-meta"># cat &gt; ca-csr.json&lt;&lt; EOF </span><br>&#123;<br>    <span class="hljs-string">&quot;CN&quot;</span>:<span class="hljs-string">&quot;etcd CA&quot;</span>,<br>    <span class="hljs-string">&quot;key&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;algo&quot;</span>:<span class="hljs-string">&quot;rsa&quot;</span>,<br>        <span class="hljs-string">&quot;size&quot;</span>:<span class="hljs-number">2048</span><br>    &#125;,<br>    <span class="hljs-string">&quot;names&quot;</span>:[<br>        &#123;<br>            <span class="hljs-string">&quot;C&quot;</span>:<span class="hljs-string">&quot;CN&quot;</span>,<br>            <span class="hljs-string">&quot;L&quot;</span>:<span class="hljs-string">&quot;Beijing&quot;</span>,<br>            <span class="hljs-string">&quot;ST&quot;</span>:<span class="hljs-string">&quot;Beijing&quot;</span><br>        &#125;<br>    ]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>生成 CA 秘钥文件（<code>ca-key.pem</code>）和证书文件（<code>ca.pem</code>） ：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@localhost etcd]# cfssl gencert -initca ca-csr.json | cfssljson -bare ca<br><span class="hljs-number">2022</span><span class="hljs-regexp">/07/</span><span class="hljs-number">31</span> <span class="hljs-number">17</span>:<span class="hljs-number">15</span>:<span class="hljs-number">14</span> [INFO] generating a <span class="hljs-keyword">new</span> CA key and certificate <span class="hljs-keyword">from</span> CSR<br><span class="hljs-number">2022</span><span class="hljs-regexp">/07/</span><span class="hljs-number">31</span> <span class="hljs-number">17</span>:<span class="hljs-number">15</span>:<span class="hljs-number">14</span> [INFO] generate received request<br><span class="hljs-number">2022</span><span class="hljs-regexp">/07/</span><span class="hljs-number">31</span> <span class="hljs-number">17</span>:<span class="hljs-number">15</span>:<span class="hljs-number">14</span> [INFO] received CSR<br><span class="hljs-number">2022</span><span class="hljs-regexp">/07/</span><span class="hljs-number">31</span> <span class="hljs-number">17</span>:<span class="hljs-number">15</span>:<span class="hljs-number">14</span> [INFO] generating key: rsa-<span class="hljs-number">2048</span><br><span class="hljs-number">2022</span><span class="hljs-regexp">/07/</span><span class="hljs-number">31</span> <span class="hljs-number">17</span>:<span class="hljs-number">15</span>:<span class="hljs-number">15</span> [INFO] encoded CSR<br><span class="hljs-number">2022</span><span class="hljs-regexp">/07/</span><span class="hljs-number">31</span> <span class="hljs-number">17</span>:<span class="hljs-number">15</span>:<span class="hljs-number">15</span> [INFO] signed certificate with serial number <span class="hljs-number">504349668567155459345189436720647214038928670128</span><br></code></pre></td></tr></table></figure><p>（2）使用自签 CA 签发 Etcd HTTPS 证书</p><p>创建证书申请文件：  </p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs prolog">cat &gt; etcd-csr.json&lt;&lt; <span class="hljs-symbol">EOF</span><br>&#123;<br>    <span class="hljs-string">&quot;CN&quot;</span>:<span class="hljs-string">&quot;etcd&quot;</span>,<br>    <span class="hljs-string">&quot;hosts&quot;</span>:[<br>        <span class="hljs-string">&quot;192.168.66.31&quot;</span>,<br>        <span class="hljs-string">&quot;192.168.66.41&quot;</span>,<br>        <span class="hljs-string">&quot;192.168.66.42&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;key&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;algo&quot;</span>:<span class="hljs-string">&quot;rsa&quot;</span>,<br>        <span class="hljs-string">&quot;size&quot;</span>:<span class="hljs-number">2048</span><br>    &#125;,<br>    <span class="hljs-string">&quot;names&quot;</span>:[<br>        &#123;<br>            <span class="hljs-string">&quot;C&quot;</span>:<span class="hljs-string">&quot;CN&quot;</span>,<br>            <span class="hljs-string">&quot;L&quot;</span>:<span class="hljs-string">&quot;BeiJing&quot;</span>,<br>            <span class="hljs-string">&quot;ST&quot;</span>:<span class="hljs-string">&quot;BeiJing&quot;</span><br>        &#125;<br>    ]<br>&#125;<br><span class="hljs-symbol">EOF</span><br></code></pre></td></tr></table></figure><p>生成证书： 为 API 服务器生成秘钥和证书，默认会分别存储为<code>etcd-key.pem</code> 和 <code>etcd.pem</code> 两个文件。 </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@localhost etcd]# cfssl gencert <span class="hljs-attribute">-ca</span>=ca.pem <span class="hljs-attribute">-ca-key</span>=ca-key.pem <span class="hljs-attribute">-config</span>=ca-config.json <span class="hljs-attribute">-profile</span>=kubernetes etcd-csr.json | cfssljson -bare etcd<br>2022/07/31 17:34:11 [<span class="hljs-built_in">INFO</span>] generate received request<br>2022/07/31 17:34:11 [<span class="hljs-built_in">INFO</span>] received CSR<br>2022/07/31 17:34:11 [<span class="hljs-built_in">INFO</span>] generating key: rsa-2048<br>2022/07/31 17:34:11 [<span class="hljs-built_in">INFO</span>] encoded CSR<br>2022/07/31 17:34:11 [<span class="hljs-built_in">INFO</span>] signed certificate with serial number 550588339086205748107774212753833209082394411557<br></code></pre></td></tr></table></figure><p>为etcd放置证书</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv &#123;ca.pem , etcd-key.pem , etcd.pem&#125; <span class="hljs-regexp">/opt/</span>etcd/ssl<br></code></pre></td></tr></table></figure><h1 id="四、etcd配置文件"><a href="#四、etcd配置文件" class="headerlink" title="四、etcd配置文件"></a>四、etcd配置文件</h1><p>命令行参数：<a href="https://etcd.io/docs/v3.5/op-guide/configuration/">Configuration flags | etcd</a> </p><p>yaml配置文件：<a href="https://github.com/etcd-io/etcd/blob/main/etcd.conf.yml.sample">etcd/etcd.conf.yml.sample at main · etcd-io/etcd · GitHub</a> </p><p>这里先在etcd-1配置好，下面的etcd-2、etcd-3等后面再配置</p><p>etcd-1</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">&quot;etcd-1&quot;</span><br><span class="hljs-attr">data-dir:</span> <span class="hljs-string">&quot;/opt/etcd/data&quot;</span><br><span class="hljs-attr">wal-dir:</span> <span class="hljs-string">&quot;/opt/etcd/wal&quot;</span><br><span class="hljs-comment"># 触发磁盘快照的已提交事务数。</span><br><span class="hljs-attr">snapshot-count:</span> <span class="hljs-number">10000</span><br><span class="hljs-comment"># 心跳</span><br><span class="hljs-attr">heartbeat-interval:</span> <span class="hljs-number">100</span><br><span class="hljs-comment"># 选举超时的时间(毫秒)。</span><br><span class="hljs-attr">election-timeout:</span> <span class="hljs-number">1000</span><br><span class="hljs-comment"># 当后端大小超过给定的配额时发出告警。0表示使用默认配额。</span><br><span class="hljs-attr">quota-backend-bytes:</span> <span class="hljs-number">0</span><br><span class="hljs-comment"># 用于侦听对等流量的逗号分隔的url列表。</span><br><span class="hljs-attr">listen-peer-urls:</span> <span class="hljs-string">https://192.168.66.31:2380</span><br><span class="hljs-comment"># 用于侦听客户机通信的逗号分隔的url列表。</span><br><span class="hljs-attr">listen-client-urls:</span> <span class="hljs-string">https://192.168.66.31:2379</span><br><span class="hljs-comment"># 快照文件保留的最大数量(0为无限制)。</span><br><span class="hljs-attr">max-snapshots:</span> <span class="hljs-number">5</span><br><span class="hljs-comment"># 保留wal文件的最大数量(0是无限的)。</span><br><span class="hljs-attr">max-wals:</span> <span class="hljs-number">5</span><br><span class="hljs-comment"># 用于CORS(跨源资源共享)的逗号分隔的源白列表。</span><br><span class="hljs-comment">#cors:</span><br><br><span class="hljs-comment"># 这个成员的对等url的列表，以通告给集群的其他成员。url需要是逗号分隔的列表。</span><br><span class="hljs-attr">initial-advertise-peer-urls:</span> <span class="hljs-string">https://192.168.66.31:2380</span><br><span class="hljs-comment">#这个成员的对等url的列表，以通告给集群的其他成员。url需要是逗号分隔的列表。</span><br><span class="hljs-attr">advertise-client-urls:</span> <span class="hljs-string">https://192.168.66.31:2379</span><br><br><span class="hljs-comment"># 后面做keepalived haproxy vip</span><br><span class="hljs-attr">discovery:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment"># Valid values include &#x27;exit&#x27;, &#x27;proxy&#x27;</span><br><span class="hljs-attr">discovery-fallback:</span> <span class="hljs-string">&#x27;proxy&#x27;</span><br><span class="hljs-comment"># HTTP proxy to use for traffic to discovery service.</span><br><span class="hljs-attr">discovery-proxy:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment"># DNS domain used to bootstrap initial cluster.</span><br><span class="hljs-attr">discovery-srv:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment"># Initial cluster configuration for bootstrapping.</span><br><span class="hljs-attr">initial-cluster:</span> <span class="hljs-string">&#x27;etcd-1=https://192.168.66.31:2380,etcd-2=https://192.168.66.41:2380,etcd-3=https://192.168.66.42:2380&#x27;</span><br><span class="hljs-comment"># Initial cluster token for the etcd cluster during bootstrap.</span><br><span class="hljs-attr">initial-cluster-token:</span> <span class="hljs-string">&#x27;etcd-cluster&#x27;</span><br><span class="hljs-comment"># Initial cluster state (&#x27;new&#x27; or &#x27;existing&#x27;).</span><br><span class="hljs-attr">initial-cluster-state:</span> <span class="hljs-string">&#x27;new&#x27;</span><br><br><span class="hljs-comment"># 拒绝可能导致仲裁丢失的重新配置请求。</span><br><span class="hljs-attr">strict-reconfig-check:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 通过HTTP服务器启用运行时分析数据</span><br><span class="hljs-attr">enable-pprof:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Valid values include &#x27;on&#x27;, &#x27;readonly&#x27;, &#x27;off&#x27;</span><br><span class="hljs-attr">proxy:</span> <span class="hljs-string">&#x27;off&#x27;</span><br><br><span class="hljs-comment"># Time (in milliseconds) an endpoint will be held in a failed state.</span><br><span class="hljs-attr">proxy-failure-wait:</span> <span class="hljs-number">5000</span><br><br><span class="hljs-comment"># Time (in milliseconds) of the endpoints refresh interval.</span><br><span class="hljs-attr">proxy-refresh-interval:</span> <span class="hljs-number">30000</span><br><br><span class="hljs-comment"># Time (in milliseconds) for a dial to timeout.</span><br><span class="hljs-attr">proxy-dial-timeout:</span> <span class="hljs-number">1000</span><br><br><span class="hljs-comment"># Time (in milliseconds) for a write to timeout.</span><br><span class="hljs-attr">proxy-write-timeout:</span> <span class="hljs-number">5000</span><br><br><span class="hljs-comment"># Time (in milliseconds) for a read to timeout.</span><br><span class="hljs-attr">proxy-read-timeout:</span> <span class="hljs-number">0</span><br><br><span class="hljs-attr">client-transport-security:</span><br>  <span class="hljs-comment"># Path to the client server TLS cert file.</span><br>  <span class="hljs-attr">cert-file:</span> <span class="hljs-string">/opt/etcd/ssl/etcd.pem</span><br><br>  <span class="hljs-comment"># Path to the client server TLS key file.</span><br>  <span class="hljs-attr">key-file:</span> <span class="hljs-string">/opt/etcd/ssl/etcd-key.pem</span><br><br>  <span class="hljs-comment"># Enable client cert authentication.</span><br>  <span class="hljs-attr">client-cert-auth:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># Path to the client server TLS trusted CA cert file.</span><br>  <span class="hljs-attr">trusted-ca-file:</span> <span class="hljs-string">/opt/etcd/ssl/ca.pem</span><br><br>  <span class="hljs-comment"># Client TLS using generated certificates</span><br>  <span class="hljs-attr">auto-tls:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">peer-transport-security:</span><br>  <span class="hljs-comment"># Path to the peer server TLS cert file.</span><br>  <span class="hljs-attr">cert-file:</span> <span class="hljs-string">/opt/etcd/ssl/etcd.pem</span><br><br>  <span class="hljs-comment"># Path to the peer server TLS key file.</span><br>  <span class="hljs-attr">key-file:</span> <span class="hljs-string">/opt/etcd/ssl/etcd-key.pem</span><br><br>  <span class="hljs-comment"># Enable peer client cert authentication.</span><br>  <span class="hljs-attr">client-cert-auth:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># Path to the peer server TLS trusted CA cert file.</span><br>  <span class="hljs-attr">trusted-ca-file:</span> <span class="hljs-string">/opt/etcd/ssl/ca.pem</span><br><br>  <span class="hljs-comment"># Peer TLS using generated certificates.</span><br>  <span class="hljs-attr">auto-tls:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># The validity period of the self-signed certificate, the unit is year.</span><br><span class="hljs-attr">self-signed-cert-validity:</span> <span class="hljs-number">1</span><br><br><span class="hljs-comment"># Enable debug-level logging for etcd.</span><br><span class="hljs-attr">log-level:</span> <span class="hljs-string">info</span><br><br><span class="hljs-attr">logger:</span> <span class="hljs-string">zap</span><br><br><span class="hljs-comment"># Specify &#x27;stdout&#x27; or &#x27;stderr&#x27; to skip journald logging even when running under systemd.</span><br><span class="hljs-attr">log-outputs:</span> [<span class="hljs-string">stderr</span>]<br><br><span class="hljs-comment"># Force to create a new one member cluster.</span><br><span class="hljs-attr">force-new-cluster:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">auto-compaction-mode:</span> <span class="hljs-string">periodic</span><br><span class="hljs-attr">auto-compaction-retention:</span> <span class="hljs-string">&quot;1&quot;</span><br></code></pre></td></tr></table></figure><p>etcd-2，其它配置与上面一样</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">&quot;etcd-2&quot;</span><br><span class="hljs-attr">listen-peer-urls:</span> <span class="hljs-string">https://192.168.66.41:2380</span><br><span class="hljs-comment"># 用于侦听客户机通信的逗号分隔的url列表。</span><br><span class="hljs-attr">listen-client-urls:</span> <span class="hljs-string">https://192.168.66.41:2379</span><br><span class="hljs-comment"># 这个成员的对等url的列表，以通告给集群的其他成员。url需要是逗号分隔的列表。</span><br><span class="hljs-attr">initial-advertise-peer-urls:</span> <span class="hljs-string">https://192.168.66.41:2380</span><br><span class="hljs-comment">#这个成员的对等url的列表，以通告给集群的其他成员。url需要是逗号分隔的列表。</span><br><span class="hljs-attr">advertise-client-urls:</span> <span class="hljs-string">https://192.168.66.41:2379</span><br></code></pre></td></tr></table></figure><p>etcd-3</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">&quot;etcd-2&quot;</span><br><span class="hljs-attr">listen-peer-urls:</span> <span class="hljs-string">https://192.168.66.41:2380</span><br><span class="hljs-comment"># 用于侦听客户机通信的逗号分隔的url列表。</span><br><span class="hljs-attr">listen-client-urls:</span> <span class="hljs-string">https://192.168.66.41:2379</span><br><span class="hljs-comment"># 这个成员的对等url的列表，以通告给集群的其他成员。url需要是逗号分隔的列表。</span><br><span class="hljs-attr">initial-advertise-peer-urls:</span> <span class="hljs-string">https://192.168.66.41:2380</span><br><span class="hljs-comment">#这个成员的对等url的列表，以通告给集群的其他成员。url需要是逗号分隔的列表。</span><br><span class="hljs-attr">advertise-client-urls:</span> <span class="hljs-string">https://192.168.66.41:2379</span><br></code></pre></td></tr></table></figure><h1 id="五、配置服务"><a href="#五、配置服务" class="headerlink" title="五、配置服务"></a>五、配置服务</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat &gt; etcd.service &lt;&lt; EOF <br>[Unit] <br><span class="hljs-attribute">Description</span>=Etcd<span class="hljs-built_in"> Server </span><br><span class="hljs-attribute">After</span>=network.target <br><span class="hljs-attribute">After</span>=network-online.target <br><span class="hljs-attribute">Wants</span>=network-online.target <br>[Service] <br><span class="hljs-attribute">Type</span>=notify <br><span class="hljs-attribute">ExecStart</span>=/opt/etcd/bin/etcd  --config-file /opt/etcd/cfg/etcd.yml <br><span class="hljs-attribute">Restart</span>=on-failure <br><span class="hljs-attribute">LimitNOFILE</span>=65536 <br>[Install] <br><span class="hljs-attribute">WantedBy</span>=multi-user.target <br>EOF<br></code></pre></td></tr></table></figure><p>将服务放置该存在的地方：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp etcd.service <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span><br></code></pre></td></tr></table></figure><h1 id="六、文件生成完毕，查看结果"><a href="#六、文件生成完毕，查看结果" class="headerlink" title="六、文件生成完毕，查看结果"></a>六、文件生成完毕，查看结果</h1><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@localhost etcd]<span class="hljs-comment"># pwd</span><br>/opt/etcd<br>[root@localhost etcd]<span class="hljs-comment"># ls -l</span><br>总用量 4<br>drwxr-xr-x.<span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 45 </span>7月 <span class="hljs-number"> 31 </span>18:15 bin<br>drwxr-xr-x.<span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 21 </span>7月 <span class="hljs-number"> 31 </span>19:55 cfg<br>drwxr-xr-x.<span class="hljs-number"> 3 </span>root root <span class="hljs-number"> 19 </span>7月 <span class="hljs-number"> 31 </span>20:35 data<br>-rw-r--r--.<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 283 </span>7月 <span class="hljs-number"> 31 </span>20:49 etcd.service<br>drwxr-xr-x.<span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 57 </span>7月 <span class="hljs-number"> 31 </span>18:55 ssl<br>drwx------.<span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 50 </span>7月 <span class="hljs-number"> 31 </span>20:35 wal<br></code></pre></td></tr></table></figure><ul><li>bin etcd二进制命令，etcd  etcdctl  etcdutl</li><li>cfg 步骤四生成的etcd yaml配置文件 ，etcd.yml</li><li>data etcd数据文件目录</li><li>wal 日志文件目录</li><li>ssl 证书文件，ca.pem  server-key.pem  server.pem</li></ul><h1 id="七、同步文件到其它的node"><a href="#七、同步文件到其它的node" class="headerlink" title="七、同步文件到其它的node"></a>七、同步文件到其它的node</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">scp <span class="hljs-regexp">/opt/</span>etcd root@<span class="hljs-number">192.168</span>.<span class="hljs-number">66.41</span>:<span class="hljs-regexp">/opt/</span><br>scp <span class="hljs-regexp">/opt/</span>etcd root@<span class="hljs-number">192.168</span>.<span class="hljs-number">66.42</span>:<span class="hljs-regexp">/opt/</span><br></code></pre></td></tr></table></figure><p>将服务防止该有地方:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp etcd.service <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span><br></code></pre></td></tr></table></figure><p>执行步骤四，修改etcd-2 etcd-3的配置</p><h1 id="八、启动服务"><a href="#八、启动服务" class="headerlink" title="八、启动服务"></a>八、启动服务</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#分别在每一个node上执行</span><br>systemctl <span class="hljs-literal">start</span> etcd<br></code></pre></td></tr></table></figure><h1 id="九、查看集群状态"><a href="#九、查看集群状态" class="headerlink" title="九、查看集群状态"></a>九、查看集群状态</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">$ etcdctl --cacert=/opt/etcd/ssl/ca.pem --cert=/opt/etcd/ssl/etcd.pem --key=/opt/etcd/ssl/etcd-key.pem --endpoints=<span class="hljs-string">&quot;https://192.168.66.31:2379,https://192.168.66.41:2379,https://192.168.66.42:2379&quot;</span> endpoint status --write-out=table<br>+------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|<span class="hljs-string">        ENDPOINT        </span>|<span class="hljs-string">        ID        </span>|<span class="hljs-string"> VERSION </span>|<span class="hljs-string"> DB SIZE </span>|<span class="hljs-string"> IS LEADER </span>|<span class="hljs-string"> IS LEARNER </span>|<span class="hljs-string"> RAFT TERM </span>|<span class="hljs-string"> RAFT INDEX </span>|<span class="hljs-string"> RAFT APPLIED INDEX </span>|<span class="hljs-string"> ERRORS </span>|<br>+------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|<span class="hljs-string"> https://192.168.66.31:2379 </span>|<span class="hljs-string"> 1f46bee47a4f04aa </span>|<span class="hljs-string">   3.5.0 </span>|<span class="hljs-string">   20 kB </span>|<span class="hljs-string">     false </span>|<span class="hljs-string">      false </span>|<span class="hljs-string">         7 </span>|<span class="hljs-string">         26 </span>|<span class="hljs-string">                 26 </span>|<span class="hljs-string">        </span>|<br>|<span class="hljs-string"> https://192.168.66.41:2379 </span>|<span class="hljs-string">   b3e5838df5f510 </span>|<span class="hljs-string">   3.5.0 </span>|<span class="hljs-string">   20 kB </span>|<span class="hljs-string">     false </span>|<span class="hljs-string">      false </span>|<span class="hljs-string">         7 </span>|<span class="hljs-string">         26 </span>|<span class="hljs-string">                 26 </span>|<span class="hljs-string">        </span>|<br>|<span class="hljs-string"> https://192.168.66.42:2379 </span>|<span class="hljs-string"> a437554da4f2a14c </span>|<span class="hljs-string">   3.5.0 </span>|<span class="hljs-string">   20 kB </span>|<span class="hljs-string">      true </span>|<span class="hljs-string">      false </span>|<span class="hljs-string">         7 </span>|<span class="hljs-string">         26 </span>|<span class="hljs-string">                 26 </span>|<span class="hljs-string">        </span>|<br>+------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br></code></pre></td></tr></table></figure><h1 id="十、问题排查"><a href="#十、问题排查" class="headerlink" title="十、问题排查"></a>十、问题排查</h1><p>1 member a437554da4f2a14c has already been bootstrapped</p><p>三种方式解决。</p><p>(1)修改成  –initial-cluster-state=existing </p><p>(2)删除所有etcd节点的 data-dir 文件（不删也行），重启各个节点的etcd服务，这个时候，每个节点的data-dir的数据都会被更新，就不会有以上故障了 </p><p>(3)第三种方式是复制其他节点的data-dir中的内容，以此为基础上以 –force-new-cluster 的形式强行拉起一个，然后以添加新成员的方式恢复这个集群。 </p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>etcd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Harbor – 企业级 Docker 私有仓库</title>
    <link href="/2022/03/06/centos/Harbor%20%E2%80%93%20%E4%BC%81%E4%B8%9A%E7%BA%A7%20Docker%20%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    <url>/2022/03/06/centos/Harbor%20%E2%80%93%20%E4%BC%81%E4%B8%9A%E7%BA%A7%20Docker%20%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="一、安装底层需求"><a href="#一、安装底层需求" class="headerlink" title="一、安装底层需求"></a>一、安装底层需求</h1><ul><li>Python应该是 应 2.7或更高版本</li><li>Docker引擎应为 引 1.10或更高版本</li><li>DockerCompose需要为 需 1.6.0或更高版本</li></ul><p>Harbor安装组件</p><table><thead><tr><th>Component</th><th>Version</th></tr></thead><tbody><tr><td>Postgresql</td><td>13.3.0</td></tr><tr><td>Redis</td><td>6.0.13</td></tr><tr><td>Beego</td><td>1.9.0</td></tr><tr><td>Chartmuseum</td><td>0.9.0</td></tr><tr><td>Docker/distribution</td><td>2.7.1</td></tr><tr><td>Docker/notary</td><td>0.6.1</td></tr><tr><td>Helm</td><td>2.9.1</td></tr><tr><td>Swagger-ui</td><td>3.22.1</td></tr></tbody></table><h1 id="二、注意问题"><a href="#二、注意问题" class="headerlink" title="二、注意问题"></a>二、注意问题</h1><ul><li>因为harbor需要docker引擎的支持，这里必须确定firewalld防火墙是否安装开启，不然会有各种各样的问题</li></ul><h1 id="三、软件下载"><a href="#三、软件下载" class="headerlink" title="三、软件下载"></a>三、软件下载</h1><p><strong>centos系统</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">CentOS-<span class="hljs-number">7</span>-x86_64-Minimal-<span class="hljs-number">1511</span>.iso <br><br>链接：https:<span class="hljs-regexp">//</span>pan.baidu.com<span class="hljs-regexp">/s/</span><span class="hljs-number">1</span>jN0q1Kz1krbooSGbjOrIEQ <br><br>提取码：o8up<br><br>注意：如果选用此版本，记得安装防火墙 yum install -y firewalld<br></code></pre></td></tr></table></figure><p><strong>docker-compose下载</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -c https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/docker/</span>compose<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v2.6.1/</span>docker-compose-linux-x86_64<br>mv docker-compose-linux-x86_64 <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose   <br>chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></table></figure><p><strong>docker下载更新</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -qa | grep docker<br><span class="hljs-comment"># 如果出现docker版本比较低 需要remove旧版本，下面是我虚拟机中的旧版本</span><br><span class="hljs-attribute">yum</span> remove docker-client-<span class="hljs-number">1</span>.<span class="hljs-number">13</span>.<span class="hljs-number">1</span>-<span class="hljs-number">209</span>.git7d71120.el7.centos.x86_64 docker-common-<span class="hljs-number">1</span>.<span class="hljs-number">13</span>.<span class="hljs-number">1</span>-<span class="hljs-number">209</span>.git7d71120.el7.centos.x86_64<br><span class="hljs-comment"># 通过脚本安装docker</span><br><span class="hljs-attribute">curl</span> -fsSL https://get.docker.com/ | sh<br><span class="hljs-comment"># 开启docker并且开机启动docker</span><br><span class="hljs-attribute">systemctl</span> restart docker &amp;&amp; systemctl enable docker<br></code></pre></td></tr></table></figure><p><strong>harbor下载</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 下载harbor</span><br>wget -c https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/goharbor/</span>harbor<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v2.5.3/</span>harbor-offline-installer-v2.<span class="hljs-number">5.3</span>.tgz<br><span class="hljs-comment"># 解压harbor</span><br>tar -zxf harbor-offline-installer-v2.<span class="hljs-number">5.3</span>.tgz <br></code></pre></td></tr></table></figure><h1 id="四、配置https（可选）"><a href="#四、配置https（可选）" class="headerlink" title="四、配置https（可选）"></a>四、配置https（可选）</h1><p><a href="https://goharbor.io/docs/2.5.0/install-config/configure-https/">官网配置</a></p><p>这里我给配置了一个harborcloud.com的伪域名的 证书</p><p><strong>生成证书颁发机构证书</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata">#生成 <span class="hljs-keyword">CA</span> 证书私钥<br>openssl genrsa -<span class="hljs-keyword">out</span> <span class="hljs-keyword">ca</span>.key 4096<br>#生成 <span class="hljs-keyword">CA</span> 证书<br>openssl req -x509 -new -nodes -sha512 -days 3650 \<br> -subj <span class="hljs-string">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=harborcloud.com&quot;</span> \<br> -key <span class="hljs-keyword">ca</span>.key \<br> -<span class="hljs-keyword">out</span> <span class="hljs-keyword">ca</span>.crt<br></code></pre></td></tr></table></figure><p><strong>生成服务器证书</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#生成私钥</span><br>openssl genrsa -out harborcloud.com.key <span class="hljs-number">4096</span><br><br><span class="hljs-comment">#生成证书签名请求 （CSR）</span><br>openssl req -<span class="hljs-keyword">sha512 </span>-new \<br>    -<span class="hljs-keyword">subj </span><span class="hljs-string">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=harborcloud.com&quot;</span> \<br>    -key harborcloud.com.key \<br>    -out harborcloud.com.csr<br><br><span class="hljs-comment">#生成 x509 v3 扩展名文件</span><br>cat &gt; v3.<span class="hljs-keyword">ext </span>&lt;&lt;-EOF<br>authorityKeyIdentifier=keyid,issuer<br><span class="hljs-keyword">basicConstraints=CA:FALSE</span><br><span class="hljs-keyword"></span>keyUsage = <span class="hljs-keyword">digitalSignature, </span>nonRepudiation, keyEncipherment, dataEncipherment<br><span class="hljs-keyword">extendedKeyUsage </span>= serverAuth<br><span class="hljs-keyword">subjectAltName </span>= @alt_names<br><br>[alt_names]<br>DNS.<span class="hljs-number">1</span>=harborcloud.com<br>DNS.<span class="hljs-number">2</span>=harborcloud<br>DNS.<span class="hljs-number">3</span>=hostname<br>EOF<br><br><span class="hljs-comment"># 使用该文件为 Harbor 主机生成证书</span><br>openssl x509 -req -<span class="hljs-keyword">sha512 </span>-days <span class="hljs-number">3650</span> \<br>    -<span class="hljs-keyword">extfile </span>v3.<span class="hljs-keyword">ext </span>\<br>    -CA ca.crt -CAkey ca.key -CAcreateserial \<br>    -in harborcloud.com.csr \<br>    -out harborcloud.com.crt<br></code></pre></td></tr></table></figure><p><strong>向 Harbor 和 Docker 提供证书</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 将服务器证书和密钥复制到 Harbor 主机上的证书文件夹中</span><br>mkdir -p <span class="hljs-regexp">/data/</span>cert<br>cp harborcloud.com.crt <span class="hljs-regexp">/data/</span>cert/<br>cp harborcloud.com.key <span class="hljs-regexp">/data/</span>cert/<br><br><span class="hljs-comment"># Docker 守护程序将文件解释为 CA 证书，将文件解释为客户端证书。.crt.cert</span><br>openssl x509 -inform PEM -<span class="hljs-keyword">in</span> harborcloud.com.crt -out harborcloud.com.cert<br><br><span class="hljs-comment">#将服务器证书、密钥和 CA 文件复制到 Harbor 主机上的 Docker 证书文件夹中。必须首先创建相应的文件夹。</span><br>mkdir -p <span class="hljs-regexp">/etc/</span>docker<span class="hljs-regexp">/certs.d/</span>harborcloud.com/<br>cp harborcloud.com.cert <span class="hljs-regexp">/etc/</span>docker<span class="hljs-regexp">/certs.d/</span>harborcloud.com/<br>cp harborcloud.com.key <span class="hljs-regexp">/etc/</span>docker<span class="hljs-regexp">/certs.d/</span>harborcloud.com/<br>cp ca.crt <span class="hljs-regexp">/etc/</span>docker<span class="hljs-regexp">/certs.d/</span>harborcloud.com/<br><br><span class="hljs-comment">#重新启动 Docker 引擎</span><br>systemctl restart docker<br></code></pre></td></tr></table></figure><h1 id="五-配置文件"><a href="#五-配置文件" class="headerlink" title="五 配置文件"></a>五 配置文件</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">hostname:</span> <span class="hljs-string">harborcloud.com</span> <span class="hljs-comment">#hostname配置，上面设置的 域名或者ip</span><br><span class="hljs-comment"># http related config</span><br><span class="hljs-attr">http:</span><br>  <span class="hljs-comment"># 如果配置了https会重定向到https</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-comment"># https related config</span><br><span class="hljs-attr">https:</span><br>  <span class="hljs-comment"># https port for harbor, default is 443</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>  <span class="hljs-comment"># nginx配置证书和私钥</span><br>  <span class="hljs-attr">certificate:</span> <span class="hljs-string">/data/cert/harborcloud.com.crt</span><br>  <span class="hljs-attr">private_key:</span> <span class="hljs-string">/data/cert/harborcloud.com.key</span><br><span class="hljs-comment"># The initial password of Harbor admin</span><br><span class="hljs-comment"># It only works in first time to install harbor</span><br><span class="hljs-comment"># 这里是harbor的默认密码</span><br><span class="hljs-attr">harbor_admin_password:</span> <span class="hljs-string">Harbor12345</span><br><br><span class="hljs-comment"># Harbor DB configuration</span><br><span class="hljs-attr">database:</span><br>  <span class="hljs-comment"># The password for the root user of Harbor DB. Change this before any production use.</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">root123</span><br>  <span class="hljs-comment"># The maximum number of connections in the idle connection pool. If it &lt;=0, no idle connections are retained.</span><br>  <span class="hljs-attr">max_idle_conns:</span> <span class="hljs-number">100</span><br>  <span class="hljs-comment"># The maximum number of open connections to the database. If it &lt;= 0, then there is no limit on the number of open connections.</span><br>  <span class="hljs-comment"># <span class="hljs-doctag">Note:</span> the default number of connections is 1024 for postgres of harbor.</span><br>  <span class="hljs-attr">max_open_conns:</span> <span class="hljs-number">900</span><br><br><span class="hljs-comment"># 默认数据卷</span><br><span class="hljs-attr">data_volume:</span> <span class="hljs-string">/data</span><br></code></pre></td></tr></table></figure><h1 id="六-安装"><a href="#六-安装" class="headerlink" title="六 安装"></a>六 安装</h1><p><strong>第一次安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./install.sh<br></code></pre></td></tr></table></figure><p><strong>后面更改配置文件操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 运行启用</span><br>./prepare<br><span class="hljs-comment">#停止并删除现有实例。</span><br>docker-compose down -v<br><span class="hljs-comment"># 重新启动港</span><br>docker-compose up -d<br></code></pre></td></tr></table></figure><h1 id="七-验证-HTTPS-连接"><a href="#七-验证-HTTPS-连接" class="headerlink" title="七 验证 HTTPS 连接"></a>七 验证 HTTPS 连接</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@localhost harbor]<span class="hljs-comment"># docker login harborcloud.com</span><br>Username: admin<br>Password: <br>WARNING! Your password will be stored unencrypted <span class="hljs-keyword">in</span> <span class="hljs-regexp">/root/</span>.docker/config.json.<br>Configure a credential helper to remove this warning. See<br>https:<span class="hljs-regexp">//</span>docs.docker.com<span class="hljs-regexp">/engine/</span>reference<span class="hljs-regexp">/commandline/</span>login/<span class="hljs-comment">#credentials-store</span><br><br>Login Succeeded<br></code></pre></td></tr></table></figure><h1 id="八-安装情况"><a href="#八-安装情况" class="headerlink" title="八 安装情况"></a>八 安装情况</h1><p><strong>服务器服务启动情况</strong></p><p>![img](Harbor – 企业级 Docker 私有仓库/image-19-1024x86.png)docker ps结果图</p><p>![img](Harbor – 企业级 Docker 私有仓库/image-20-1024x75.png)docker 端口映射</p><p><strong>web控制面板</strong></p><p>![img](Harbor – 企业级 Docker 私有仓库/image-21-1024x524.png)web登录界面</p><p>![img](Harbor – 企业级 Docker 私有仓库/image-22-1024x453.png)主控制面板</p><h1 id="九、上传镜像与下载镜像"><a href="#九、上传镜像与下载镜像" class="headerlink" title="九、上传镜像与下载镜像"></a>九、上传镜像与下载镜像</h1><p>通过nginx做演示如下操作：serverip为harborcoud.com</p><p><strong>测试服务器：</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Harbor   <span class="hljs-number">10.0</span>.<span class="hljs-number">0.5</span><br>k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">10</span>.<span class="hljs-number">0.0</span>.<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p><strong>k8s-master:</strong></p><p>1 设置insecure-registries</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">vi /etc/docker/daemon<span class="hljs-selector-class">.json</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;https://onozxvpe.mirror.aliyuncs.com&quot;</span>]</span>,<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>]</span>,<br>  <span class="hljs-string">&quot;insecure-registries&quot;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;harborcoud.com&quot;</span>]</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2 docker拉取镜像查看版本</p><p>地址如下：<a href="https://hub.docker.com/">https://hub.docker.com</a> </p><p>3 拉去nginx镜像到本地，打标签</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker pull nginx<br>docker <span class="hljs-keyword">tag</span> <span class="hljs-title">nginx</span> harborcloud.com/library/myapp<br></code></pre></td></tr></table></figure><p>这里的harborcloud.com/library需要在harbor界面上获取。</p><p>4 登录harbor，push镜像到harbor</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">docker login harborcloud.com<br>docker <span class="hljs-keyword">push</span> harborcloud.com<span class="hljs-regexp">/library/my</span>app:latest<br></code></pre></td></tr></table></figure><h1 id="十、docker环境远程管理地址"><a href="#十、docker环境远程管理地址" class="headerlink" title="十、docker环境远程管理地址"></a>十、docker环境远程管理地址</h1><p>通过修改/usr/lib/systemd/system/docker.service用 -H 指定docker远程管理地址tcp://0.0.0.0:2375</p><p>说明：如果通过jenkins做项目发布部署管理不用在这里指定。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ExecStart=<span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/dockerd -H   tcp:/</span><span class="hljs-regexp">/0.0.0.0:2375  -H fd:/</span><span class="hljs-regexp">/ --containerd=/</span>run<span class="hljs-regexp">/containerd/</span>containerd.sock<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos</tag>
      
      <tag>harbor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>containerd源码编译</title>
    <link href="/2022/03/05/k8s/%E9%9B%86%E7%BE%A4/containerd%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <url>/2022/03/05/k8s/%E9%9B%86%E7%BE%A4/containerd%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h1 id="一、go安装"><a href="#一、go安装" class="headerlink" title="一、go安装"></a>一、go安装</h1><p>yum安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y epel-release<br>yum <span class="hljs-keyword">install</span> -y golang<br></code></pre></td></tr></table></figure><p>源码安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://storage.googleapis.com/golang/getgo/installer_linux<br><span class="hljs-built_in">chmod</span> +x ./installer_linux<br>./installer_linux<br><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure><h1 id="二、runc安装"><a href="#二、runc安装" class="headerlink" title="二、runc安装"></a>二、runc安装</h1><p>编译</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/opencontainers/</span>runc<br>cd runc<br>make&amp;&amp; make install<br></code></pre></td></tr></table></figure><p>出现错误No package ‘libseccomp’ found：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y libseccomp-devel<br></code></pre></td></tr></table></figure><p>验证结果</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">[root@localhost runc]<span class="hljs-meta"># runc --version   </span><br>runc version <span class="hljs-number">1.1</span><span class="hljs-number">.0</span>+dev<br><span class="hljs-symbol">commit:</span> v1<span class="hljs-number">.1</span><span class="hljs-number">.0</span><span class="hljs-number">-254</span>-gf835196<br><span class="hljs-symbol">spec:</span> <span class="hljs-number">1.0</span><span class="hljs-number">.2</span>-dev<br><span class="hljs-symbol">go:</span> go1<span class="hljs-number">.17</span><span class="hljs-number">.10</span><br><span class="hljs-symbol">libseccomp:</span> <span class="hljs-number">2.3</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><h1 id="三、containerd"><a href="#三、containerd" class="headerlink" title="三、containerd"></a>三、containerd</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/containerd/</span>containerd<br>wget -c https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/protocolbuffers/</span>protobuf<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v3.11.4/</span>protoc-<span class="hljs-number">3.11</span>.<span class="hljs-number">4</span>-linux-x86_64.zip<br>sudo unzip protoc-<span class="hljs-number">3.11</span>.<span class="hljs-number">4</span>-linux-x86_64.zip -d <span class="hljs-regexp">/usr/</span>local<br></code></pre></td></tr></table></figure><p>centos环境</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> btrfs-progs-devel<br></code></pre></td></tr></table></figure><p>编译</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> containerd<br><span class="hljs-keyword">make</span><br><span class="hljs-keyword">make</span> install<br></code></pre></td></tr></table></figure><h1 id="四、安装问题"><a href="#四、安装问题" class="headerlink" title="四、安装问题"></a>四、安装问题</h1><p>1 出现错误No package ‘libseccomp’ found：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> libseccomp-devel<br></code></pre></td></tr></table></figure><p>2 failed to create CRI service: failed to find snap…r &quot;overlayfs&quot;“</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#查看文件系统，如果centos7 则文件系统可能xfs，通过一下命令可以查看</span><br>$ df -T<br>文件系统                              类型        <span class="hljs-number">1</span>K-块    已用     可用 已用% 挂载点<br><span class="hljs-regexp">/dev/m</span>apper<span class="hljs-regexp">/centos-root               xfs      14379008 2803720 11575288   20% /</span><br></code></pre></td></tr></table></figure><p>解决方案：</p><p>方法一：添加新分区执行ftype=1,格式化xfs分区并且设置ftype=1</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ mkfs.xfs -f -n ftype=<span class="hljs-number">1</span> <span class="hljs-regexp">/dev/</span>sda3<br></code></pre></td></tr></table></figure><p>方法二：如果不能 添加新分区 也不能格式化现有分区，将cri的snapshotter设置成native</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ vi <span class="hljs-regexp">/etc/</span>containerd/config.toml<br>[plugins.<span class="hljs-string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd]<br>      default_runtime_name = <span class="hljs-string">&quot;runc&quot;</span><br>      disable_snapshot_annotations = <span class="hljs-keyword">true</span><br>      discard_unpacked_layers = <span class="hljs-keyword">false</span><br>      ignore_rdt_not_enabled_errors = <span class="hljs-keyword">false</span><br>      no_pivot = <span class="hljs-keyword">false</span><br>      snapshotter = <span class="hljs-string">&quot;native&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>containerd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>containerd 二进制安装</title>
    <link href="/2022/03/03/k8s/%E9%9B%86%E7%BE%A4/containerd%20%E5%AE%89%E8%A3%85/"/>
    <url>/2022/03/03/k8s/%E9%9B%86%E7%BE%A4/containerd%20%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h1><p>系统：Centos7</p><h1 id="二、进制安装"><a href="#二、进制安装" class="headerlink" title="二、进制安装"></a>二、进制安装</h1><p><a href="https://github.com/containerd/containerd/releases/tag/v1.6.5">Release containerd 1.6.5 · containerd/containerd · GitHub</a> </p><p>github上面提供了带cri、cni和不带的，这里图方便和兼容性就直接选择带cri和cni的吧</p><p>![1659279888078](containerd 安装/1659279888078.png)</p><p>下载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -c https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/containerd/</span>containerd<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v1.6.5/</span>cri-containerd-cni-<span class="hljs-number">1.6</span>.<span class="hljs-number">5</span>-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><p>安装</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxf cri-containerd-cni-<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">5</span>-linux-amd64.tar.gz  -C /<br></code></pre></td></tr></table></figure><h1 id="三、开启启动服务"><a href="#三、开启启动服务" class="headerlink" title="三、开启启动服务"></a>三、开启启动服务</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">enable</span> containerd <span class="hljs-comment">--now</span><br></code></pre></td></tr></table></figure><p>查看服务状态</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@k8s-node02 containerd]<span class="hljs-comment"># systemctl status containerd</span><br>● containerd.service - containerd container runtime<br>   Loaded: loaded (<span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>containerd.service; disabled; vendor preset: disabled)<br>   Active: active (running) since 日 <span class="hljs-number">2022</span>-<span class="hljs-number">07</span>-<span class="hljs-number">31</span> <span class="hljs-number">23</span>:<span class="hljs-number">01</span>:<span class="hljs-number">12</span> CST; <span class="hljs-number">15</span>min ago<br>     Docs: https:<span class="hljs-regexp">//</span>containerd.io<br>  Process: <span class="hljs-number">2228</span> ExecStartPre=<span class="hljs-regexp">/sbin/m</span>odprobe overlay (code=exited, status=<span class="hljs-number">0</span>/SUCCESS)<br> Main PID: <span class="hljs-number">2229</span> (containerd)<br>    Tasks: <span class="hljs-number">8</span><br>   Memory: <span class="hljs-number">26.2</span>M<br>   CGroup: <span class="hljs-regexp">/system.slice/</span>containerd.service<br>           └─<span class="hljs-number">2229</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>containerd<br><br><span class="hljs-number">7</span>月 <span class="hljs-number">31</span> <span class="hljs-number">23</span>:<span class="hljs-number">01</span>:<span class="hljs-number">12</span> k8s-node02 systemd[<span class="hljs-number">1</span>]: Started containerd container runtime.<br><span class="hljs-number">7</span>月 <span class="hljs-number">31</span> <span class="hljs-number">23</span>:<span class="hljs-number">01</span>:<span class="hljs-number">12</span> k8s-node02 containerd[<span class="hljs-number">2229</span>]: time=<span class="hljs-string">&quot;2022-07-31T23:01:12.449907775+08:00&quot;</span> level=info msg=serving... address=<span class="hljs-regexp">/run/</span>containerd/containerd.sock.ttrpc<br><span class="hljs-number">7</span>月 <span class="hljs-number">31</span> <span class="hljs-number">23</span>:<span class="hljs-number">01</span>:<span class="hljs-number">12</span> k8s-node02 containerd[<span class="hljs-number">2229</span>]: time=<span class="hljs-string">&quot;2022-07-31T23:01:12.449946236+08:00&quot;</span> level=info msg=serving... address=<span class="hljs-regexp">/run/</span>containerd/containerd.sock<br><span class="hljs-number">7</span>月 <span class="hljs-number">31</span> <span class="hljs-number">23</span>:<span class="hljs-number">01</span>:<span class="hljs-number">12</span> k8s-node02 containerd[<span class="hljs-number">2229</span>]: time=<span class="hljs-string">&quot;2022-07-31T23:01:12.449986296+08:00&quot;</span> level=info msg=<span class="hljs-string">&quot;containerd successfully booted in 0.042232s&quot;</span><br><span class="hljs-number">7</span>月 <span class="hljs-number">31</span> <span class="hljs-number">23</span>:<span class="hljs-number">01</span>:<span class="hljs-number">12</span> k8s-node02 containerd[<span class="hljs-number">2229</span>]: time=<span class="hljs-string">&quot;2022-07-31T23:01:12.464325017+08:00&quot;</span> level=info msg=<span class="hljs-string">&quot;Start subscribing containerd event&quot;</span><br><span class="hljs-number">7</span>月 <span class="hljs-number">31</span> <span class="hljs-number">23</span>:<span class="hljs-number">01</span>:<span class="hljs-number">12</span> k8s-node02 containerd[<span class="hljs-number">2229</span>]: time=<span class="hljs-string">&quot;2022-07-31T23:01:12.464892179+08:00&quot;</span> level=info msg=<span class="hljs-string">&quot;Start recovering state&quot;</span><br><span class="hljs-number">7</span>月 <span class="hljs-number">31</span> <span class="hljs-number">23</span>:<span class="hljs-number">01</span>:<span class="hljs-number">12</span> k8s-node02 containerd[<span class="hljs-number">2229</span>]: time=<span class="hljs-string">&quot;2022-07-31T23:01:12.464983433+08:00&quot;</span> level=info msg=<span class="hljs-string">&quot;Start event monitor&quot;</span><br><span class="hljs-number">7</span>月 <span class="hljs-number">31</span> <span class="hljs-number">23</span>:<span class="hljs-number">01</span>:<span class="hljs-number">12</span> k8s-node02 containerd[<span class="hljs-number">2229</span>]: time=<span class="hljs-string">&quot;2022-07-31T23:01:12.465003694+08:00&quot;</span> level=info msg=<span class="hljs-string">&quot;Start snapshots syncer&quot;</span><br><span class="hljs-number">7</span>月 <span class="hljs-number">31</span> <span class="hljs-number">23</span>:<span class="hljs-number">01</span>:<span class="hljs-number">12</span> k8s-node02 containerd[<span class="hljs-number">2229</span>]: time=<span class="hljs-string">&quot;2022-07-31T23:01:12.465015764+08:00&quot;</span> level=info msg=<span class="hljs-string">&quot;Start cni network conf syncer for default&quot;</span><br><span class="hljs-number">7</span>月 <span class="hljs-number">31</span> <span class="hljs-number">23</span>:<span class="hljs-number">01</span>:<span class="hljs-number">12</span> k8s-node02 containerd[<span class="hljs-number">2229</span>]: time=<span class="hljs-string">&quot;2022-07-31T23:01:12.465024518+08:00&quot;</span> level=info msg=<span class="hljs-string">&quot;Start streaming server&quot;</span><br></code></pre></td></tr></table></figure><h1 id="四、查看containerd的状态"><a href="#四、查看containerd的状态" class="headerlink" title="四、查看containerd的状态"></a>四、查看containerd的状态</h1><p>查看插件检查状态</p><p>从列表中可以看出snapshotter只有一个native可用。</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">$ [root@k8s-node02 k8s-install]# ctr plugin ls<br>TYPE                                  ID                       PLATFORMS      STATUS    <br><span class="hljs-built_in">io</span>.containerd.content.v1              content                  -              ok        <br><span class="hljs-built_in">io</span>.containerd.snapshotter.v1          aufs                     linux/amd64    skip      <br><span class="hljs-built_in">io</span>.containerd.snapshotter.v1          btrfs                    linux/amd64    skip      <br><span class="hljs-built_in">io</span>.containerd.snapshotter.v1          devmapper                linux/amd64    <span class="hljs-built_in">error</span>     <br><span class="hljs-built_in">io</span>.containerd.snapshotter.v1          native                   linux/amd64    ok        <br><span class="hljs-built_in">io</span>.containerd.snapshotter.v1          overlayfs                linux/amd64    <span class="hljs-built_in">error</span>     <br><span class="hljs-built_in">io</span>.containerd.snapshotter.v1          zfs                      linux/amd64    skip      <br>...      <br><span class="hljs-built_in">io</span>.containerd.tracing.processor.v1    otlp                     -              skip      <br><span class="hljs-built_in">io</span>.containerd.internal.v1             tracing                  -              ok        <br><span class="hljs-built_in">io</span>.containerd.grpc.v1                 cri                      linux/amd64    <span class="hljs-built_in">error</span><br></code></pre></td></tr></table></figure><p>这里可以看出cri是error，因为我用的系统是centos7，centos7默认文件系统是XFS，centos6是EXT4，cnetos5是EXT3.    而 默认状态下xfs是不支持overlayfs的。</p><p>通过df查看文件系统：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-node02 k8s-install]<span class="hljs-comment"># df -T</span><br>文件系统                类型        1K-块    已用     可用 已用% 挂载点<br>devtmpfs                devtmpfs  <span class="hljs-number"> 485692 </span>     <span class="hljs-number"> 0 </span> <span class="hljs-number"> 485692 </span>   0% /dev<br>tmpfs                   tmpfs     <span class="hljs-number"> 497820 </span>     <span class="hljs-number"> 0 </span> <span class="hljs-number"> 497820 </span>   0% /dev/shm<br>tmpfs                   tmpfs     <span class="hljs-number"> 497820 </span>  <span class="hljs-number"> 7792 </span> <span class="hljs-number"> 490028 </span>   2% /run<br>tmpfs                   tmpfs     <span class="hljs-number"> 497820 </span>     <span class="hljs-number"> 0 </span> <span class="hljs-number"> 497820 </span>   0% /sys/fs/cgroup<br>/dev/mapper/centos-root xfs     <span class="hljs-number"> 18307072 </span>5477540<span class="hljs-number"> 12829532 </span>  30% /<br>/dev/sda1               xfs       <span class="hljs-number"> 508588 </span><span class="hljs-number"> 187448 </span> <span class="hljs-number"> 321140 </span>  37% /boot<br>tmpfs                   tmpfs      <span class="hljs-number"> 99564 </span>     <span class="hljs-number"> 0 </span>  <span class="hljs-number"> 99564 </span>   0% /run/user/0<br>/dev/sda3               xfs      <span class="hljs-number"> 5232640 </span> <span class="hljs-number"> 33112 </span><span class="hljs-number"> 5199528 </span>   1% /var/lib/containerd<br></code></pre></td></tr></table></figure><h1 id="五、解决cri-error的问题"><a href="#五、解决cri-error的问题" class="headerlink" title="五、解决cri error的问题"></a>五、解决cri error的问题</h1><h2 id="1-将cri的snapshotter设置成native-这种方式不知道有没后续问题"><a href="#1-将cri的snapshotter设置成native-这种方式不知道有没后续问题" class="headerlink" title="1 将cri的snapshotter设置成native(这种方式不知道有没后续问题)"></a>1 将cri的snapshotter设置成native(这种方式不知道有没后续问题)</h2><p>containerd的默认配置文件在/etc/containerd/config.toml</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@k8s-node02 k8s-install]<span class="hljs-comment"># mkdir /etc/containerd</span><br>[root@k8s-node02 k8s-install]<span class="hljs-comment"># cd /etc/containerd</span><br>[root@k8s-node02 containerd]<span class="hljs-comment"># containerd config default &gt; config.toml</span><br>[root@k8s-node02 containerd]<span class="hljs-comment"># vi config.toml</span><br></code></pre></td></tr></table></figure><p>将默认配置文件的</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd]</span><br>      <span class="hljs-attr">default_runtime_name</span> = <span class="hljs-string">&quot;runc&quot;</span><br>      <span class="hljs-attr">disable_snapshot_annotations</span> = <span class="hljs-literal">true</span><br>      <span class="hljs-attr">discard_unpacked_layers</span> = <span class="hljs-literal">false</span><br>      <span class="hljs-attr">ignore_rdt_not_enabled_errors</span> = <span class="hljs-literal">false</span><br>      <span class="hljs-attr">no_pivot</span> = <span class="hljs-literal">false</span><br>      <span class="hljs-attr">snapshotter</span> = <span class="hljs-string">&quot;overlayfs&quot;</span><br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd]</span><br>      <span class="hljs-attr">default_runtime_name</span> = <span class="hljs-string">&quot;runc&quot;</span><br>      <span class="hljs-attr">disable_snapshot_annotations</span> = <span class="hljs-literal">true</span><br>      <span class="hljs-attr">discard_unpacked_layers</span> = <span class="hljs-literal">false</span><br>      <span class="hljs-attr">ignore_rdt_not_enabled_errors</span> = <span class="hljs-literal">false</span><br>      <span class="hljs-attr">no_pivot</span> = <span class="hljs-literal">false</span><br>      <span class="hljs-attr">snapshotter</span> = <span class="hljs-string">&quot;native&quot;</span><br></code></pre></td></tr></table></figure><p>查看插件启动状态</p><figure class="highlight graphql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs graphql"><span class="hljs-punctuation">[</span>root<span class="hljs-meta">@k8s</span>-node02 k8s-install<span class="hljs-punctuation">]</span><span class="hljs-comment"># ctr plugin ls</span><br><span class="hljs-keyword">TYPE</span>                                  ID                       PLATFORMS      STATUS    <br>io.containerd.grpc.v1                 cri                      linux/amd64    ok <br></code></pre></td></tr></table></figure><h2 id="2-单独设置一个分区，将ftype-1"><a href="#2-单独设置一个分区，将ftype-1" class="headerlink" title="2 单独设置一个分区，将ftype=1"></a>2 单独设置一个分区，将ftype=1</h2><p>格式化xfs分区并且设置ftype=1</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkfs.xfs -f -n ftype=<span class="hljs-number">1</span> <span class="hljs-regexp">/dev/</span>sda3<br></code></pre></td></tr></table></figure><p>挂在分区</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 临时挂在</span><br>mount <span class="hljs-regexp">/dev/</span>sda3 <span class="hljs-regexp">/var/</span>lib/containerd<br><span class="hljs-comment"># 永久挂在</span><br>vi <span class="hljs-regexp">/etc/</span>fstab<br></code></pre></td></tr></table></figure><p>查看插件启动状态</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">[root@k8s-node02 k8s-install]# ctr plugins ls<br>TYPE                                  ID                       PLATFORMS      STATUS    <br><span class="hljs-built_in">io</span>.containerd.content.v1              content                  -              ok        <br><span class="hljs-built_in">io</span>.containerd.snapshotter.v1          aufs                     linux/amd64    skip      <br><span class="hljs-built_in">io</span>.containerd.snapshotter.v1          btrfs                    linux/amd64    skip      <br><span class="hljs-built_in">io</span>.containerd.snapshotter.v1          devmapper                linux/amd64    <span class="hljs-built_in">error</span>     <br><span class="hljs-built_in">io</span>.containerd.snapshotter.v1          native                   linux/amd64    ok        <br><span class="hljs-built_in">io</span>.containerd.snapshotter.v1          overlayfs                linux/amd64    ok    <br></code></pre></td></tr></table></figure><h1 id="六、私有云配置"><a href="#六、私有云配置" class="headerlink" title="六、私有云配置"></a>六、私有云配置</h1><p>单机命令  ctr image pull 不起作用，crictl pull 起作用。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[plugins.<span class="hljs-string">&quot;io.containerd.grpc.v1.cri&quot;</span><span class="hljs-string">.registry</span>]<br>      config_path = <span class="hljs-string">&quot;&quot;</span><br><br>      [plugins.<span class="hljs-string">&quot;io.containerd.grpc.v1.cri&quot;</span><span class="hljs-string">.registry.auths</span>]<br><br>      [plugins.<span class="hljs-string">&quot;io.containerd.grpc.v1.cri&quot;</span><span class="hljs-string">.registry.configs</span>]<br><br>      [plugins.<span class="hljs-string">&quot;io.containerd.grpc.v1.cri&quot;</span><span class="hljs-string">.registry.headers</span>]<br><br>      [plugins.<span class="hljs-string">&quot;io.containerd.grpc.v1.cri&quot;</span><span class="hljs-string">.registry.mirrors</span>]<br><span class="hljs-comment"># 镜像地址</span><br>        [plugins.<span class="hljs-string">&quot;io.contianerd.grpc.v1.cri&quot;</span><span class="hljs-string">.registry.mirrors.</span><span class="hljs-string">&quot;harborcloud.com&quot;</span>]<br>          endpoint = [<span class="hljs-string">&quot;https://harborcloud.com&quot;</span>]<br>          <span class="hljs-comment"># 镜像地址配置</span><br>        [plugins.<span class="hljs-string">&quot;io.containerd.grpc.v1.cri&quot;</span><span class="hljs-string">.registry.configs.</span><span class="hljs-string">&quot;harborcloud.com&quot;</span><span class="hljs-string">.tls</span>]<br>        <span class="hljs-comment">#跳过验证</span><br>          insecure_skip_verify = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">crictl</span> pull harborcloud.com/library/nginx:<span class="hljs-number">1</span>.<span class="hljs-number">9</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="七、配置文件"><a href="#七、配置文件" class="headerlink" title="七、配置文件"></a>七、配置文件</h1><p>配置文件生成</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-node02</span> <span class="hljs-string">k8s-install</span>]<span class="hljs-comment"># mkdir /etc/containerd</span><br>[<span class="hljs-string">root@k8s-node02</span> <span class="hljs-string">k8s-install</span>]<span class="hljs-comment"># cd /etc/containerd</span><br>[<span class="hljs-string">root@k8s-node02</span> <span class="hljs-string">containerd</span>]<span class="hljs-comment"># containerd config default &gt; config.toml</span><br>[<span class="hljs-string">root@k8s-node02</span> <span class="hljs-string">containerd</span>]<span class="hljs-comment"># vi config.toml</span><br></code></pre></td></tr></table></figure><h1 id="八-containerd基础命令"><a href="#八-containerd基础命令" class="headerlink" title="八 containerd基础命令"></a>八 containerd基础命令</h1><h2 id="ctr"><a href="#ctr" class="headerlink" title="ctr"></a>ctr</h2><p>CTR是一个不受支持的用于交互的调试和管理客户机使用containerd守护进程。因为它不受支持，命令， 选项和操作不保证向后兼容或在集装箱项目的不同版本之间保持稳定。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs mel">[root@k8s-node02 k8s-install]# ctr --<span class="hljs-keyword">help</span><br>USAGE:<br>   ctr [<span class="hljs-keyword">global</span> options] command [command options] [arguments...]<br><br>COMMANDS:<br>   plugins, plugin            提供有关容器插件的信息，例如：ctr plugin <span class="hljs-keyword">ls</span><br>   version                    版本信息<br>   containers, c, <span class="hljs-keyword">container</span>   管理容器<br>   content                    管理内容<br>   events, <span class="hljs-keyword">event</span>              事件显示容器事件<br>   images, <span class="hljs-keyword">image</span>, i           管理镜像<br>   leases                     管理租赁<br>   namespaces, <span class="hljs-keyword">namespace</span>, ns  管理命名空间<br>   pprof                      为containerd提供golang Pprof输出<br>   run                        运行容器<br>   snapshots, <span class="hljs-keyword">snapshot</span>        管理快照<br>   tasks, t, task             管理任务<br>   install                    安装一个新的包<br>   oci                        OCI tools<br>   shim                       与shim直接交互<br>   <span class="hljs-keyword">help</span>, h                    Shows a list of commands or <span class="hljs-keyword">help</span> <span class="hljs-keyword">for</span> one command<br><br>GLOBAL OPTIONS:<br>   --debug                      打开日志的调试输出<br>   --address value, -a value    containerd的GRPC服务器地址 (<span class="hljs-keyword">default</span>: <span class="hljs-string">&quot;/run/containerd/containerd.sock&quot;</span>) [$CONTAINERD_ADDRESS]<br>   --timeout value              CTR命令的总超时时间(默认值:<span class="hljs-number">0</span>)<br>   --connect-timeout value      连接到容器的超时时间(默认值:<span class="hljs-number">0</span>)<br>   --<span class="hljs-keyword">namespace</span> value, -n value  命名空间与命令一起使用 (<span class="hljs-keyword">default</span>: <span class="hljs-string">&quot;default&quot;</span>) [$CONTAINERD_NAMESPACE]<br>   --<span class="hljs-keyword">help</span>, -h                   show <span class="hljs-keyword">help</span><br>   --version, -v                打印版本<br></code></pre></td></tr></table></figure><p>查看镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctr images list 或  ctr i <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 查看指定命名空间下的镜像</span><br>ctr -n k8s.io images list<br></code></pre></td></tr></table></figure><p>命名空间查看</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">ctr namespaces <span class="hljs-type">list</span>  或 ctr ns <span class="hljs-type">list</span><br></code></pre></td></tr></table></figure><p>镜像标记</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ctr</span> -n k8s.io images tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:<span class="hljs-number">3</span>.<span class="hljs-number">2</span> k8s.gcr.io/pause:<span class="hljs-number">3</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>删除镜像</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ctr -n k8s<span class="hljs-selector-class">.io</span> images rm k8s<span class="hljs-selector-class">.gcr</span>.io/<span class="hljs-attribute">pause</span>:<span class="hljs-number">3.2</span><br></code></pre></td></tr></table></figure><p>拉取镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ctr</span> images pull docker.io/library/redis:latest<br><span class="hljs-comment"># 指定命名空间并且检查镜像是否有效</span><br><span class="hljs-attribute">ctr</span> -n k8s.io images pull -k k8s.gcr.io/pause:<span class="hljs-number">3</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>导出镜像</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">ctr -n k8s.<span class="hljs-built_in">io</span> images <span class="hljs-keyword">export</span> pause.tar k8s.gcr.<span class="hljs-built_in">io</span>/<span class="hljs-name">pause</span>:<span class="hljs-number">3.2</span><br></code></pre></td></tr></table></figure><p>导入镜像</p><p>不支持 build,commit 镜像</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ctr -n k8s<span class="hljs-selector-class">.io</span> <span class="hljs-selector-tag">i</span> import <span class="hljs-attribute">pause</span><span class="hljs-selector-class">.tar</span><br></code></pre></td></tr></table></figure><p>运行容器</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">ctr -n k8s.io run --<span class="hljs-keyword">null</span>-io --net-host -d –env PASSWORD=$drone_password –mount type=bind,src=<span class="hljs-regexp">/etc,dst=/</span>host-etc,<span class="hljs-keyword">options</span>=rbind:rw –mount type=bind,src=<span class="hljs-regexp">/root/</span>.kube,dst=<span class="hljs-regexp">/root/</span>.kube,<span class="hljs-keyword">options</span>=rbind:rw $image sysreport bash <span class="hljs-regexp">/sysreport/</span>run.sh<br><br><br>–<span class="hljs-keyword">null</span>-io: 将容器内标准输出重定向到<span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span><br>–net-host: 主机网络<br>-d: 当<span class="hljs-keyword">task</span>执行后就进行下一步shell命令,如没有选项,则会等待用户输入,并定向到容器内<br></code></pre></td></tr></table></figure><p>查看容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctr containers list 或 ctr c <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 指定命名空间</span><br>ctr -n k8s.io c <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>任务查看</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ctr -<span class="hljs-built_in">n</span> k8s.io tasks list<br></code></pre></td></tr></table></figure><p>停止容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -a -s 9 &#123;<span class="hljs-built_in">id</span>&#125;<br></code></pre></td></tr></table></figure><p>创建静态容器</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"> $ ctr container create docker.io<span class="hljs-regexp">/library/</span>nginx:latest nginx <br> $ ctr <span class="hljs-keyword">task</span> ls<br><span class="hljs-keyword">TASK</span>    PID    STATUS    <br> <br></code></pre></td></tr></table></figure><p>开启任务</p><p>方式一：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 开启任务</span><br>[<span class="hljs-string">root@k8s-node02</span> <span class="hljs-string">k8s-install</span>]<span class="hljs-comment"># ctr task start -d nginx</span><br>[<span class="hljs-string">root@k8s-node02</span> <span class="hljs-string">k8s-install</span>]<br><span class="hljs-comment"># 查看进程列表</span><br>[<span class="hljs-string">root@k8s-node02</span> <span class="hljs-string">k8s-install</span>]<span class="hljs-comment"># ctr task list</span><br><span class="hljs-string">TASK</span>     <span class="hljs-string">PID</span>    <span class="hljs-string">STATUS</span>    <br><span class="hljs-string">nginx</span>    <span class="hljs-number">0</span>      <span class="hljs-string">RUNNING</span><br><span class="hljs-comment">#查看指定进程</span><br>[<span class="hljs-string">root@k8s-node02</span> <span class="hljs-string">k8s-install</span>]<span class="hljs-comment"># ctr task ps nginx</span><br><span class="hljs-string">PID</span>     <span class="hljs-string">INFO</span><br><span class="hljs-number">3679</span>    <span class="hljs-bullet">-</span><br><span class="hljs-number">3718</span>    <span class="hljs-bullet">-</span><br><span class="hljs-number">3719</span>    <span class="hljs-bullet">-</span><br><span class="hljs-comment"># 查看本机对应的进程</span><br>[<span class="hljs-string">root@k8s-node02</span> <span class="hljs-string">k8s-install</span>]<span class="hljs-comment"># ps -ef|grep 3679</span><br><span class="hljs-string">root</span>       <span class="hljs-number">3679   </span><span class="hljs-number">3659  </span><span class="hljs-number">0</span> <span class="hljs-number">15</span><span class="hljs-string">:27</span> <span class="hljs-string">?</span>        <span class="hljs-attr">00:00:00 nginx:</span> <span class="hljs-string">master</span> <span class="hljs-string">process</span> <span class="hljs-string">nginx</span> <span class="hljs-string">-g</span> <span class="hljs-string">daemon</span> <span class="hljs-string">off;</span><br><span class="hljs-number">101</span>        <span class="hljs-number">3718   </span><span class="hljs-number">3679  </span><span class="hljs-number">0</span> <span class="hljs-number">15</span><span class="hljs-string">:27</span> <span class="hljs-string">?</span>        <span class="hljs-attr">00:00:00 nginx:</span> <span class="hljs-string">worker</span> <span class="hljs-string">process</span><br><span class="hljs-number">101</span>        <span class="hljs-number">3719   </span><span class="hljs-number">3679  </span><span class="hljs-number">0</span> <span class="hljs-number">15</span><span class="hljs-string">:27</span> <span class="hljs-string">?</span>        <span class="hljs-attr">00:00:00 nginx:</span> <span class="hljs-string">worker</span> <span class="hljs-string">process</span><br><span class="hljs-string">root</span>       <span class="hljs-number">3740   </span><span class="hljs-number">1111  </span><span class="hljs-number">0</span> <span class="hljs-number">15</span><span class="hljs-string">:29</span> <span class="hljs-string">pts/0</span>    <span class="hljs-number">00</span><span class="hljs-string">:00:00</span> <span class="hljs-string">grep</span> <span class="hljs-string">--color=auto</span> <span class="hljs-number">3679</span><br><br><span class="hljs-comment"># ctr task exec 进入容器，id随便写就行，需要将其唯一 </span><br>[<span class="hljs-string">root@k8s-node02</span> <span class="hljs-string">k8s-install</span>]<span class="hljs-comment"># ctr task exec --exec-id 1 -t  nginx /bin/sh</span><br></code></pre></td></tr></table></figure><p>方式二：（一键开启）</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@localhost runc]<span class="hljs-comment"># ctr run -d --net-host docker.io/library/nginx:latest nginx</span><br>[root@localhost runc]<span class="hljs-comment"># ctr task exec --exec-id $RANDOM -t nginx /bin/sh</span><br></code></pre></td></tr></table></figure><h2 id="crictl"><a href="#crictl" class="headerlink" title="crictl"></a>crictl</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>node02 k8s<span class="hljs-operator">-</span>install]# crictl  <span class="hljs-comment">--help</span><br>NAME:<br>   crictl <span class="hljs-operator">-</span> client <span class="hljs-keyword">for</span> CRI<br>USAGE:<br>   crictl [<span class="hljs-keyword">global</span> options] command [command options] [arguments...]<br>COMMANDS:<br>   attach              连接到一个运行的容器<br>   <span class="hljs-keyword">create</span>              创建一个新容器<br>   <span class="hljs-keyword">exec</span>                在运行的容器中运行命令<br>   version             显示运行时版本信息<br>   images, image, img  镜像<br>   inspect             显示一个或多个容器的状态<br>   inspecti            返回一个或多个镜像的状态<br>   imagefsinfo         返回映像文件系统信息<br>   inspectp            显示一个或多个pod的状态<br>   logs                获取容器日志<br>   port<span class="hljs-operator">-</span>forward        将本地端口转发给pod<br>   ps                  容器列表<br>   pull                拉去镜像<br>   run                 在沙箱中运行一个新容器<br>   runp                运行一个新pod<br>   rm                  移除container<br>   rmi                 移除镜像<br>   rmp                 移除pod<br>   pods                pods列表<br>   <span class="hljs-keyword">start</span>               启动一个或多个已创建的容器<br>   info                启动一个或多个创建的容器显示容器运行时的信息<br>   stop                停止一个或多个运行中的容器<br>   stopp               停止一个或多个运行中的pod<br>   <span class="hljs-keyword">update</span>              更新一个或多个运行中的容器<br>   config              <span class="hljs-keyword">Get</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">set</span> crictl client configuration options<br>   stats               列出容器资源使用统计信息<br>   statsp              列出pod资源使用统计信息<br>   completion          输出shell完成代码<br>   help, h             Shows a list <span class="hljs-keyword">of</span> commands <span class="hljs-keyword">or</span> help <span class="hljs-keyword">for</span> <span class="hljs-keyword">one</span> command<br><br><span class="hljs-keyword">GLOBAL</span> OPTIONS:<br>   <span class="hljs-comment">--config value, -c value            Location of the client config file. If not specified and the default does not exist, the program&#x27;s directory is searched as well (default: &quot;/etc/crictl.yaml&quot;) [$CRI_CONFIG_FILE]</span><br>   <span class="hljs-comment">--debug, -D                         Enable debug mode (default: false)</span><br>   <span class="hljs-comment">--image-endpoint value, -i value    Endpoint of CRI image manager service (default: uses &#x27;runtime-endpoint&#x27; setting) [$IMAGE_SERVICE_ENDPOINT]</span><br>   <span class="hljs-comment">--runtime-endpoint value, -r value  Endpoint of CRI container runtime service (default: uses in order the first successful one of [unix:///var/run/dockershim.sock unix:///run/containerd/containerd.sock unix:///run/crio/crio.sock unix:///var/run/cri-dockerd.sock]). Default is now deprecated and the endpoint should be set instead. [$CONTAINER_RUNTIME_ENDPOINT]</span><br>   <span class="hljs-comment">--timeout value, -t value           Timeout of connecting to the server in seconds (e.g. 2s, 20s.). 0 or less is set to default (default: 2s)</span><br>   <span class="hljs-comment">--help, -h                          show help (default: false)</span><br>   <span class="hljs-comment">--version, -v                       print the version (default: false)</span><br></code></pre></td></tr></table></figure><p>拉取镜像</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">crictl pull docker.io<span class="hljs-regexp">/library/</span>redis:latest<br></code></pre></td></tr></table></figure><p>查看运行的容器</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">crictl ps</span><br></code></pre></td></tr></table></figure><p>查看运行中的pod</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">crictl pods</span><br></code></pre></td></tr></table></figure><p>查看pod详细信息</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">crictl inspectp eea<span class="hljs-number">1584366</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>d<br></code></pre></td></tr></table></figure><p>查看容器详细信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">crictl</span> inspect <span class="hljs-number">5389</span>d4e04a974<br></code></pre></td></tr></table></figure><p>查看容器镜像详细信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">crictl</span> inspecti <span class="hljs-number">70</span>f5e18fddce8<br></code></pre></td></tr></table></figure><h1 id="九-异常问题"><a href="#九-异常问题" class="headerlink" title="九 异常问题"></a>九 异常问题</h1><h2 id="（1）问题一"><a href="#（1）问题一" class="headerlink" title="（1）问题一"></a>（1）问题一</h2><p>runc: symbol lookup error: runc: undefined symbol: seccomp_notify_respond</p><h3 id="解决方式一：源码编译runc"><a href="#解决方式一：源码编译runc" class="headerlink" title="解决方式一：源码编译runc"></a>解决方式一：源码编译runc</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum install -y epel-release<br>yum install -y golang<br>yum install -y libseccomp-devel<br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/opencontainers/</span>runc<br>cd runc<br>make&amp;&amp; make install<br></code></pre></td></tr></table></figure><h3 id="解决方式二："><a href="#解决方式二：" class="headerlink" title="解决方式二："></a>解决方式二：</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@k8s-node02 k8s-install]<span class="hljs-comment"># ctr task start -d nginx</span><br>ctr: failed to create shim task: OCI runtime create failed: unable to retrieve OCI runtime error (open <span class="hljs-regexp">/run/</span>containerd<span class="hljs-regexp">/io.containerd.runtime.v2.task/</span>default<span class="hljs-regexp">/nginx/</span>log.json: no such file or directory): runc did not terminate successfully: <span class="hljs-keyword">exit</span> status <span class="hljs-number">127</span>: unknown<br><br>[root@k8s-node02 k8s-install]<span class="hljs-comment"># runc</span><br>runc: symbol lookup error: runc: undefined symbol: seccomp_notify_respond<br></code></pre></td></tr></table></figure><p>这个是说缺少依赖包<code>libseccomp</code>，需要注意的是<code>centos7</code>中yum下载的版本是2.3的，版本不满足我们最新containerd的需求，需要下载2.4以上的 </p><p>卸载</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">libseccomp</span>-<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">1</span>-<span class="hljs-number">0</span>.el7.x86_64                                                                                                     libseccomp-devel-<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">1</span>-<span class="hljs-number">0</span>.el7.x86_64 <br></code></pre></td></tr></table></figure><p>重新安装2.5</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ wget http:<span class="hljs-regexp">//</span>rpmfind.net<span class="hljs-regexp">/linux/</span>centos<span class="hljs-regexp">/8-stream/</span>BaseOS<span class="hljs-regexp">/x86_64/</span>os<span class="hljs-regexp">/Packages/</span>libseccomp-<span class="hljs-number">2.5</span>.<span class="hljs-number">1</span>-<span class="hljs-number">1</span>.el8.x86_64.rpm<br>$ rpm -ivh libseccomp-<span class="hljs-number">2.5</span>.<span class="hljs-number">1</span>-<span class="hljs-number">1</span>.el8.x86_64.rpm<br></code></pre></td></tr></table></figure><p>查看结果</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake">[root@k8s-node02 k8s-<span class="hljs-keyword">install</span>]<span class="hljs-comment"># runc</span><br>NAME:<br>   runc - Open Container Initiative runtime<br><br>[root@k8s-node02 k8s-<span class="hljs-keyword">install</span>]<span class="hljs-comment"># ctr task start -d nginx </span><br></code></pre></td></tr></table></figure><p>上面两种方式都会出现还是UNKNOWN，可能需要删除一些数据rm -rf /run/containerd/io.containerd.runtime.v2.task/default/nginx/rootfs/*</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">[root@k8s-node02 k8s-install]# ctr <span class="hljs-keyword">task</span> list<br><span class="hljs-keyword">TASK</span>     PID    STATUS    <br>nginx    <span class="hljs-number">0</span>      UNKNOWN<br></code></pre></td></tr></table></figure><p>修改后</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">[root@k8s-node02 runc]# ctr <span class="hljs-keyword">task</span> list<br><span class="hljs-keyword">TASK</span>     PID     STATUS    <br>nginx    <span class="hljs-number">5861</span>    RUNNING<br></code></pre></td></tr></table></figure><h2 id="（2）问题二"><a href="#（2）问题二" class="headerlink" title="（2）问题二"></a>（2）问题二</h2><p>ctr: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting “/etc/hosts” to rootfs at “/etc/hosts”: possibly malicious path detected – refusing to operate on /etc/hosts: unknown</p><p>重启一下</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>containerd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware 安装openwrt，如何科学上网</title>
    <link href="/2022/03/02/centos/VMware%20%E5%AE%89%E8%A3%85openwrt%EF%BC%8C%E5%A6%82%E4%BD%95%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <url>/2022/03/02/centos/VMware%20%E5%AE%89%E8%A3%85openwrt%EF%BC%8C%E5%A6%82%E4%BD%95%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h1 id="一-、需要软件"><a href="#一-、需要软件" class="headerlink" title="一 、需要软件"></a>一 、需要软件</h1><p>CentOS-7-x86_64-Minimal-1511.iso </p><p>链接：<a href="https://pan.baidu.com/s/1jN0q1Kz1krbooSGbjOrIEQ">https://pan.baidu.com/s/1jN0q1Kz1krbooSGbjOrIEQ</a><br>提取码：o8up</p><p>openwrt</p><p>openwrt：<a href="https://op.supes.top/firmware/x86_64/">openwrt-06.18.2022-x86-64-generic-squashfs-combined.img.gz</a> </p><p>链接：<a href="https://pan.baidu.com/s/1A0x12UJBbR44ZGuO467B_A">https://pan.baidu.com/s/1A0x12UJBbR44ZGuO467B_A</a><br>提取码：iqm3</p><h1 id="二、系统安装"><a href="#二、系统安装" class="headerlink" title="二、系统安装"></a>二、系统安装</h1><p>创建名称为openwrt的虚拟机，系统安装配置图如下图，安装完成后执行yum安装必要软件。 </p><p>![img](VMware 安装openwrt，如何科学上网/image-14.png) </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> epel-release <span class="hljs-comment">#安装EPEL源</span><br>yum <span class="hljs-keyword">install</span> qemu -y <span class="hljs-comment">#安装qemu</span><br></code></pre></td></tr></table></figure><h1 id="三、网络ip设置"><a href="#三、网络ip设置" class="headerlink" title="三、网络ip设置"></a>三、网络ip设置</h1><p>1 对于网卡添加一块仅主机模式和NAT两块网卡，仅主机模式网卡主要做内网，NAT主要做外网访问 。</p><p>![img](VMware 安装openwrt，如何科学上网/image-10.png)</p><p>2 对于hostonly取消ip分配 </p><p>![img](VMware 安装openwrt，如何科学上网/image-12.png) </p><p>3 设置本机10.0.0.1/24网段的ip</p><p>![img](VMware 安装openwrt，如何科学上网/image-13-1024x155.png)</p><p>通过当前系统网络设置设置当前系统的对应网卡的ip为10.0.0.240。  </p><p>![img](VMware 安装openwrt，如何科学上网/image-9.png) </p><h1 id="四、openwrt文件转换"><a href="#四、openwrt文件转换" class="headerlink" title="四、openwrt文件转换"></a>四、openwrt文件转换</h1><p>上传openwrt文件然后进行转换： </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#转换为vmdk格式<br>qemu-<span class="hljs-selector-tag">img</span> convert -f raw -O vmdk openwrt-x86-<span class="hljs-number">64</span>-generic-squashfs-combined<span class="hljs-selector-class">.img</span> openwrt<span class="hljs-selector-class">.vmdk</span> <br></code></pre></td></tr></table></figure><h1 id="五、下载转换后的openwrt的文件openwrt-vmdk"><a href="#五、下载转换后的openwrt的文件openwrt-vmdk" class="headerlink" title="五、下载转换后的openwrt的文件openwrt.vmdk"></a>五、下载转换后的openwrt的文件openwrt.vmdk</h1><p>从centos虚拟机下载步骤5生成的openwrt.vmdk，并且替换当前虚拟机系统的vmdk文件 。</p><p>主要这里的openwrt.vmdk和当前虚拟机的vmdk名称相同，然后替换系统的vmdk文件，这里最好把centos的vmdk做一个备份 。</p><p>![img](VMware 安装openwrt，如何科学上网/image-7.png) </p><h1 id="六、登录openwrt-web系统"><a href="#六、登录openwrt-web系统" class="headerlink" title="六、登录openwrt web系统"></a>六、登录openwrt web系统</h1><p>通过root账号root密码进入web系统，然后通过bypass的服务器节点添加ss或者ssr节点。 </p><p>![img](VMware 安装openwrt，如何科学上网/image-8-1024x493.png)</p><p>这里我用的是<a href="https://op.supes.top/firmware/x86_64/">Openwrt Download Server (supes.top)</a> 这个网站的，配置科学上网真蛋疼。用了几个openwrt都不成功，这个可以配置。 </p><p>验证配置是否成功 ：</p><p>在10.0.0.1的openwrt虚拟机上执行，通过curl google.com得到如下301的重定向结果。</p><p>![img](VMware 安装openwrt，如何科学上网/image-15.png) </p><h1 id="七-配置ip-10-0-0-2虚拟机"><a href="#七-配置ip-10-0-0-2虚拟机" class="headerlink" title="七 配置ip 10.0.0.2虚拟机"></a>七 配置ip 10.0.0.2虚拟机</h1><p>![img](VMware 安装openwrt，如何科学上网/image-16.png) </p><p>这里选择一块网卡仅主机模式，并且设置ip为10.0.0.2 网关指向上面openwrt的10.0.0.1 。 </p><p>![img](VMware 安装openwrt，如何科学上网/image-17.png) </p><p>![img](VMware 安装openwrt，如何科学上网/image-18.png) </p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos</tag>
      
      <tag>openwrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis数据结构及内部编码</title>
    <link href="/2022/01/06/nosql/redis/2022-01-06-redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E5%86%85%E9%83%A8%E7%BC%96%E7%A0%81/"/>
    <url>/2022/01/06/nosql/redis/2022-01-06-redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E5%86%85%E9%83%A8%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="redis底层数据结构"><a href="#redis底层数据结构" class="headerlink" title="redis底层数据结构"></a>redis底层数据结构</h1><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> redisObject&#123;<br>     <span class="hljs-comment">//类型</span><br>     <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">type</span>:<span class="hljs-number">4</span>;<br>     <span class="hljs-comment">//编码</span><br>     <span class="hljs-keyword">unsigned</span> encoding:<span class="hljs-number">4</span>;<br>     <span class="hljs-comment">//指向底层数据结构的指针</span><br>     <span class="hljs-keyword">void</span> *ptr;<br>     <span class="hljs-comment">//引用计数</span><br>     <span class="hljs-keyword">int</span> refcount;<br>     <span class="hljs-comment">//记录最后一次被程序访问的时间</span><br>     <span class="hljs-keyword">unsigned</span> lru:<span class="hljs-number">22</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取编码类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">object</span> encoding <span class="hljs-built_in">str</span> //获取<span class="hljs-built_in">str</span>的编码类型<br></code></pre></td></tr></table></figure><p>redis支持的编码：</p><ul><li>int、embstr、raw</li><li>linkedlist</li><li>ziplist</li><li>hashtable</li><li>intset</li><li>skiplist</li></ul><h1 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1 字符串"></a>1 字符串</h1><p>字符串的长度不能超过512M。</p><p>内部编码有3种，int（8字节长整型）/embstr（小于等于39字节字符串，redis3.2之后使44字节）/raw（大于39个字节字符串，redis3.2是44字节）</p><h2 id="1-1-int"><a href="#1-1-int" class="headerlink" title="1.1  int"></a>1.1  int</h2><p>数字型字符串（long）：最大值=2^(8x8-1)-1=9223372036854775807</p><p>incr/decr/incrby/decrby 数字操作，一定要是数字才能进行加减，当操作的结果大于long的最大值时会报错。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; set str <span class="hljs-number">9223372036854775807</span><br>OK<br><span class="hljs-number">127.0.0.1:6379</span>&gt; object encoding str<br><span class="hljs-string">&quot;int&quot;</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; set str <span class="hljs-number">9223372036854775808</span><br>OK<br><span class="hljs-number">127.0.0.1:6379</span>&gt; object encoding str<br><span class="hljs-string">&quot;embstr&quot;</span><br></code></pre></td></tr></table></figure><p>问题：当 int 编码保存的值不再是整数，或大小超过了long的范围时，自动转化为raw。 </p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; set str <span class="hljs-number">9223372036854775807</span><br>OK<br><span class="hljs-number">127.0.0.1:6379</span>&gt; object encoding str<br><span class="hljs-string">&quot;int&quot;</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; incr str<br>(error) ERR increment or decrement would overflow<br></code></pre></td></tr></table></figure><p>上面的问题我没有测试成功，当超过long的最大值，就会报错。</p><h2 id="1-2-embstr"><a href="#1-2-embstr" class="headerlink" title="1.2 embstr"></a>1.2 embstr</h2><p>优点：创建时少分配一次空间，删除时释放一次空间，数据相连查找方便。</p><p>缺点：字符串的长度增加需要重新分配内存时，整个redisObject和sds都需要重新分配空间，因此redis中的embstr实现为只读。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; set str a<br>OK<br><span class="hljs-number">127.0.0.1:6379</span>&gt; object encoding str<br><span class="hljs-string">&quot;embstr&quot;</span><br></code></pre></td></tr></table></figure><p>在对embstr对象进行修改时，都会先转化为raw再进行修改，因此，只要是修改embstr对象，修改后的对象一定是raw的，无论是否达到了44个字节。 </p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; set str a<br>OK<br><span class="hljs-number">127.0.0.1:6379</span>&gt; get str<br><span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; object encoding str<br><span class="hljs-string">&quot;embstr&quot;</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; append str b<br>(integer) <span class="hljs-number">2</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; get str<br><span class="hljs-string">&quot;ab&quot;</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; object encoding str<br><span class="hljs-string">&quot;raw&quot;</span><br></code></pre></td></tr></table></figure><h2 id="1-3-raw"><a href="#1-3-raw" class="headerlink" title="1.3 raw"></a>1.3 raw</h2><p>embstr与raw都使用redisObject和sds保存数据 ，区别：</p><ul><li>embstr的使用只分配一次内存空间（因此redisObject和sds是连续的 ）</li><li>raw需要分配两次内存空间（分别为redisObject和sds分配空间） </li></ul><h1 id="2-list"><a href="#2-list" class="headerlink" title="2 list"></a>2 list</h1><p>Redis 列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素导列表的头部（左边）或者尾部（右边）。它的底层实际是个链表。</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tcl">简介：列表（<span class="hljs-keyword">list</span>）类型是用来存储多个有序的字符串，一个列表最多可以存储<span class="hljs-number">2</span>^<span class="hljs-number">32</span><span class="hljs-number">-1</span>个元素。<br>简单实用举例：lpush key value [value ...] 、<span class="hljs-keyword">lrange</span> key start end<br>内部编码：ziplist（压缩列表）、linkedlist（链表）<br>应用场景：消息队列，文章列表<br></code></pre></td></tr></table></figure><h2 id="2-1-linkedlist"><a href="#2-1-linkedlist" class="headerlink" title="2.1 linkedlist"></a>2.1 linkedlist</h2><h2 id="2-2-ziplist"><a href="#2-2-ziplist" class="headerlink" title="2.2 ziplist"></a>2.2 ziplist</h2><ul><li>1、列表保存元素个数小于512个</li><li>2、每个元素长度小于64字节</li></ul><p> 不能满足这两个条件的时候使用 linkedlist 编码。</p><p> 两个条件可以在redis.conf 配置文件中的 list-max-ziplist-value选项和 list-max-ziplist-entries 选项进行配置。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; lpush strs <span class="hljs-number">1</span><br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; object encoding strs<br><span class="hljs-string">&quot;ziplist&quot;</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; lpush strs 1222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa<br>(integer) <span class="hljs-number">2</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; object encoding strs<br><span class="hljs-string">&quot;linkedlist&quot;</span><br></code></pre></td></tr></table></figure><h1 id="3-hash"><a href="#3-hash" class="headerlink" title="3 hash"></a>3 hash</h1><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs armasm">简介：在Redis中，哈希类型是指v（值）本身又是一个键值对（k-v）结构<br>简单使用举例：hset key <span class="hljs-meta">field</span> value 、hget key <span class="hljs-meta">field</span><br>内部编码：ziplist（压缩列表） 、hashtable（哈希表）<br>应用场景：缓存用户信息等。<br>注意点：如果开发使用hgetall，哈希元素比较多的话，可能导致Redis阻塞，可以使用hscan。而如果只是获取部分<span class="hljs-meta">field</span>，建议使用hmget。<br></code></pre></td></tr></table></figure><h2 id="3-1-ziplist"><a href="#3-1-ziplist" class="headerlink" title="3.1 ziplist"></a>3.1 ziplist</h2><h2 id="3-2-hashtable"><a href="#3-2-hashtable" class="headerlink" title="3.2 hashtable"></a>3.2 hashtable</h2><p>hashtable 编码的哈希表对象底层使用字典数据结构，哈希对象中的每个键值对都使用一个字典键值对。</p><p>使用ziplist（压缩列表）编码：</p><ul><li>1、列表保存元素个数小于512个, set-max-intset-entries 进行修改</li><li>2、每个元素长度小于64字节</li></ul><h1 id="4-set"><a href="#4-set" class="headerlink" title="4 set"></a>4 set</h1><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tcl">简介：集合（<span class="hljs-keyword">set</span>）类型也是用来保存多个的字符串元素，但是不允许重复元素<br>简单使用举例：sadd key element [element ...]、smembers key<br>内部编码：intset（整数集合）、hashtable（哈希表）<br>注意点：smembers和<span class="hljs-keyword">lrange</span>、hgetall都属于比较重的命令，如果元素过多存在阻塞Redis的可能性，可以使用sscan来完成。<br>应用场景：用户标签,生成随机数抽奖、社交需求。<br></code></pre></td></tr></table></figure><h2 id="4-1-intset"><a href="#4-1-intset" class="headerlink" title="4.1 intset"></a>4.1 intset</h2><p>使用 intset 编码条件：</p><p>1、集合对象中所有元素都是整数 </p><p>2、集合对象所有元素数量不超过512 ，可以set-max-intset-entries 进行配置 </p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; sadd set1 <span class="hljs-number">1</span><br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; smembers set1<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; object encoding set1<br><span class="hljs-string">&quot;intset&quot;</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; sadd set1 a<br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; object encoding set1<br><span class="hljs-string">&quot;hashtable&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-2-hashtable"><a href="#4-2-hashtable" class="headerlink" title="4.2 hashtable"></a>4.2 hashtable</h2><h1 id="5-zset"><a href="#5-zset" class="headerlink" title="5 zset"></a>5 zset</h1><blockquote><ul><li>简介：已排序的字符串集合，同时元素不能重复</li><li>简单格式举例：<code>zadd key score member [score member ...]</code>，<code>zrank key member</code></li><li>底层内部编码：<code>ziplist（压缩列表）</code>、<code>skiplist（跳跃表）</code></li><li>应用场景：排行榜，社交需求（如用户点赞）</li></ul></blockquote><p>与列表使用索引下标作为排序依据不同，有序集合为每个元素设置一个分数（score）作为排序依据。 </p><h2 id="5-1-ziplist"><a href="#5-1-ziplist" class="headerlink" title="5.1 ziplist"></a>5.1 ziplist</h2><p> ziplist 编码的有序集合对象使用压缩列表作为底层实现，每个集合元素使用两个紧挨在一起的压缩列表节点来保存，第一个节点保存元素的成员，第二个节点保存元素的分值。并且压缩列表内的集合元素按分值从小到大的顺序进行排列，小的放置在靠近表头的位置，大的放置在靠近表尾的位置。 </p><p>使用 ziplist 编码条件：</p><ul><li>1、保存的元素数量小于128；</li><li>2、保存的所有元素长度都小于64字节。</li></ul><p>可以通过Redis配置文件zset-max-ziplist-entries 选项和 zset-max-ziplist-value 进行修改。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; zadd zset1 <span class="hljs-number">0</span>.<span class="hljs-number">1</span> <span class="hljs-number">1</span><br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; zadd zset1 <span class="hljs-number">0</span>.<span class="hljs-number">2</span> <span class="hljs-number">2</span><br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; object encoding zset1<br><span class="hljs-string">&quot;ziplist&quot;</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; zadd zset1 <span class="hljs-number">0</span>.<span class="hljs-number">3</span> a<br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; object encoding zset1<br><span class="hljs-number">127.0.0.1:6379</span>&gt; zadd zset1 <span class="hljs-number">0</span>.<span class="hljs-number">4</span> aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa<br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0.0.1:6379</span>&gt; object encoding zset1<br><span class="hljs-string">&quot;skiplist&quot;</span><br></code></pre></td></tr></table></figure><h2 id="5-2-skiplist"><a href="#5-2-skiplist" class="headerlink" title="5.2 skiplist"></a>5.2 skiplist</h2><p>skiplist 编码的有序集合对象使用 zet 结构作为底层实现，一个 zset 结构同时包含一个字典和一个跳跃表： </p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">typedef <span class="hljs-keyword">struct</span> <span class="hljs-keyword">zset</span>&#123;<br>     <span class="hljs-comment">//跳跃表</span><br>     zskiplist <span class="hljs-operator">*</span>zsl;<br>     <span class="hljs-comment">//字典</span><br>     <span class="hljs-built_in">dict</span> <span class="hljs-operator">*</span>dice;<br>&#125; zset;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s集群安全实战—为指定用户设置操作权限</title>
    <link href="/2021/09/03/k8s/k8s%E5%AE%89%E5%85%A8/k8s%E9%9B%86%E7%BE%A4%E5%AE%89%E5%85%A8%E5%AE%9E%E6%88%98/"/>
    <url>/2021/09/03/k8s/k8s%E5%AE%89%E5%85%A8/k8s%E9%9B%86%E7%BE%A4%E5%AE%89%E5%85%A8%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="1-下载、解压并准备如下所示的命令行工具。"><a href="#1-下载、解压并准备如下所示的命令行工具。" class="headerlink" title="1 下载、解压并准备如下所示的命令行工具。"></a>1 下载、解压并准备如下所示的命令行工具。</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/cloudflare/</span>cfssl<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v1.5.0/</span>cfssl_1.<span class="hljs-number">5.0</span>_linux_amd64 -o cfssl<br>chmod +x cfssl<br>curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/cloudflare/</span>cfssl<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v1.5.0/</span>cfssljson_1.<span class="hljs-number">5.0</span>_linux_amd64 -o cfssljson<br>chmod +x cfssljson<br>curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/cloudflare/</span>cfssl<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v1.5.0/</span>cfssl-certinfo_1.<span class="hljs-number">5.0</span>_linux_amd64 -o cfssl-certinfo<br>chmod +x cfssl-certinfo<br></code></pre></td></tr></table></figure><p>将证书工具放到/usr/local/bin下面</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv cfssl <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>cfssl<br>mv cfssljson <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>cfssljson<br>mv cfssl-certinfo <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>cfssl-certinfo<br></code></pre></td></tr></table></figure><h1 id="2-准备配置文件"><a href="#2-准备配置文件" class="headerlink" title="2 准备配置文件"></a>2 准备配置文件</h1><p>创建一个 JSON 配置文件，用于 CA 证书签名请求（CSR） ，这里存放在/usr/local/k8s-install</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/k8s-install/</span>devuser-csr.json<br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;devuser&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>:[&#123;<br>    <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>    <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>    <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>    <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>    <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>  &#125;]<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-针对用户devuser生成证书文件"><a href="#3-针对用户devuser生成证书文件" class="headerlink" title="3 针对用户devuser生成证书文件"></a>3 针对用户devuser生成证书文件</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ cd <span class="hljs-regexp">/etc/</span>kubernetes<span class="hljs-regexp">/pki/</span><br>$ cfssl gencert -ca=ca.crt -ca-key=ca.key -profile=kubernetes <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/k8s-install/</span>devuser-csr.json|cfssljson -bare devuser<br>$ ls|<span class="hljs-keyword">grep</span> devuser<br>devuser.csr<br>devuser-key.pem<br>devuser.pem<br></code></pre></td></tr></table></figure><h1 id="4-设置集群参数"><a href="#4-设置集群参数" class="headerlink" title="4 设置集群参数"></a>4 设置集群参数</h1><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">$ <span class="hljs-string">export</span> <span class="hljs-string">KUBE_APISERVER</span>=<span class="hljs-string">&quot;https://10.0.0.10:6443&quot;</span><br>$ <span class="hljs-string">cd</span> /<span class="hljs-string">usr</span>/<span class="hljs-string">local</span>/<span class="hljs-string">k8s-install</span><br>$ <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-cluster</span> <span class="hljs-string">kubernetes</span> \<br><span class="hljs-built_in">--certificate-authority=/etc/kubernetes/pki/ca.crt</span> <br><span class="hljs-built_in">--embed-certs=true</span> <span class="hljs-built_in">--server=$&#123;KUBE_APISERVER&#125;</span> <br><span class="hljs-built_in">--kubeconfig=devuser.kubeconfig</span><br></code></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">LS0tLS1CRUdJTiBD...</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://10.0.0.10:6443</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">contexts:</span> <span class="hljs-literal">null</span><br><span class="hljs-attr">current-context:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span> <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>这里把证书导进来了</p><h1 id="5-设置客户端认证参数"><a href="#5-设置客户端认证参数" class="headerlink" title="5 设置客户端认证参数"></a>5 设置客户端认证参数</h1><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-credentials</span> <span class="hljs-string">devuser</span> \ <br><span class="hljs-built_in">--client-certificate=/etc/kubernetes/pki/devuser.pem</span> \<br><span class="hljs-built_in">--client-key=/etc/kubernetes/pki/devuser-key.pem</span> \<br><span class="hljs-built_in">--embed-certs=true</span> \<br><span class="hljs-built_in">--kubeconfig=devuser.kubeconfig</span>          <br></code></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">clusters:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">cluster:</span><br>    <span class="hljs-attr">certificate-authority-data:</span> <span class="hljs-string">LS0tLS1CRUdJTiBD...</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">https://10.0.0.10:6443</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attr">contexts:</span> <span class="hljs-literal">null</span><br><span class="hljs-attr">current-context:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Config</span><br><span class="hljs-attr">preferences:</span> &#123;&#125;<br><span class="hljs-attr">users:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">devuser</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">client-certificate-data:</span> <span class="hljs-string">LS0tLS1CRUdJTiBDRVJU...</span><br>    <span class="hljs-attr">client-key-data:</span> <span class="hljs-string">LS0tLS1CRUdJTiBSU0EgUFJJVkFURSB...</span><br></code></pre></td></tr></table></figure><p>得到用户的信息，用户名，证书以及私钥的信息。</p><h1 id="6-提前创建dev空间"><a href="#6-提前创建dev空间" class="headerlink" title="6 提前创建dev空间"></a>6 提前创建dev空间</h1><p>root用户下</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">$ kubectl create <span class="hljs-keyword">namespace</span> <span class="hljs-symbol">dev</span><br></code></pre></td></tr></table></figure><h1 id="7-设置上下文参数"><a href="#7-设置上下文参数" class="headerlink" title="7 设置上下文参数"></a>7 设置上下文参数</h1><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">$ <span class="hljs-string">kubectl</span> <span class="hljs-string">config</span> <span class="hljs-built_in">set-context</span> <span class="hljs-string">kubernetes</span> \<br><span class="hljs-built_in">--cluster=kubernetes</span> \<br><span class="hljs-built_in">--user=devuser</span> \<br><span class="hljs-built_in">--namespace=dev</span> \<br><span class="hljs-built_in">--kubeconfig=devuser.kubeconfig</span><br></code></pre></td></tr></table></figure><p>得到结果</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">clusters</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">cluster:</span><br>    <span class="hljs-attribute">certificate-authority-data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">LS0tLS1CRUdJTiBD...</span><br>    <span class="hljs-attribute">server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">https://10.0.0.10:6443</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attribute">contexts</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">context:</span><br>    <span class="hljs-attribute">cluster</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">dev</span><br>    <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">devuser</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attribute">current-context</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Config</span><br><span class="hljs-attribute">preferences</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attribute">users</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">name: devuser</span><br>  <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">client-certificate-data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">LS0tLS1CRUdJTiBDRVJU...</span><br>    <span class="hljs-attribute">client-key-data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">LS0tLS1CRUdJTiBSU0EgUFJJVkFURSB...</span><br></code></pre></td></tr></table></figure><p>通过命令在devuser.kubeconfig文件中多出一个上下文：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">- context:<br>    cluster: kubernetes<br>    <span class="hljs-keyword">namespace</span>: <span class="hljs-symbol">dev</span><br>    <span class="hljs-symbol">user</span>: <span class="hljs-symbol">devuser</span><br>  <span class="hljs-symbol">name</span>: <span class="hljs-symbol">kubernetes</span><br></code></pre></td></tr></table></figure><h1 id="8-设置默认上下文"><a href="#8-设置默认上下文" class="headerlink" title="8 设置默认上下文"></a>8 设置默认上下文</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl<span class="hljs-built_in"> config </span>use-context kubernetes <span class="hljs-attribute">--kubeconfig</span>=devuser.kubeconfig<br></code></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">clusters</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">cluster:</span><br>    <span class="hljs-attribute">certificate-authority-data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">LS0tLS1CRUdJTiBD...</span><br>    <span class="hljs-attribute">server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">https://10.0.0.10:6443</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attribute">contexts</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">context:</span><br>    <span class="hljs-attribute">cluster</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">dev</span><br>    <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">devuser</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attribute">current-context</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Config</span><br><span class="hljs-attribute">preferences</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attribute">users</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">name: devuser</span><br>  <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">client-certificate-data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">LS0tLS1CRUdJTiBDRVJU...</span><br>    <span class="hljs-attribute">client-key-data</span><span class="hljs-punctuation">:</span> <span class="hljs-string">LS0tLS1CRUdJTiBSU0EgUFJJVkFURSB...</span><br></code></pre></td></tr></table></figure><p>在文件中出现</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">current-context</span><span class="hljs-punctuation">: </span>kubernetes<br></code></pre></td></tr></table></figure><h1 id="9-创建角色绑定"><a href="#9-创建角色绑定" class="headerlink" title="9 创建角色绑定"></a>9 创建角色绑定</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl create rolebinding devuser-admin-binding \<br><span class="hljs-attribute">--clusterrole</span>=admin \<br><span class="hljs-attribute">--user</span>=devuser \<br><span class="hljs-attribute">--namespace</span>=dev<br></code></pre></td></tr></table></figure><h1 id="10-将devuser-kubeconfig放到devuser-home目录下"><a href="#10-将devuser-kubeconfig放到devuser-home目录下" class="headerlink" title="10 将devuser.kubeconfig放到devuser home目录下"></a>10 将devuser.kubeconfig放到devuser home目录下</h1><p>devuser用户，先创建/home/devuser/.kube文件夹</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[devuser<span class="hljs-variable">@k8s</span>-master01 ~]<span class="hljs-variable">$ </span>mkdir .kube<br></code></pre></td></tr></table></figure><p>root用户操作</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@k8s-master01 devuser]# cp .<span class="hljs-regexp">/devuser.kubeconfig /</span>home<span class="hljs-regexp">/devuser/</span>.kube/config<br>[root@k8s-master01 devuser]# chown -R devuser:devuser <span class="hljs-regexp">/home/</span>devuser<span class="hljs-regexp">/.kube/</span>config<br></code></pre></td></tr></table></figure><h1 id="11-验证结果"><a href="#11-验证结果" class="headerlink" title="11 验证结果"></a>11 验证结果</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[devuser@k8s-master01 ~]$ kubectl <span class="hljs-built_in">run</span> nginx <span class="hljs-attribute">--image</span>=nginx<br>[devuser@k8s-master01 ~]$ kubectl <span class="hljs-built_in">get</span> pod <br>NAME    READY   STATUS    RESTARTS   AGE<br>nginx   1/1     Running   0          2m33s<br></code></pre></td></tr></table></figure><p>root用户查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 devuser]# kubectl <span class="hljs-keyword">get</span> pod <span class="hljs-comment">--all-namespaces</span><br>NAMESPACE       NAME                                        READY   STATUS      RESTARTS        AGE<br>dev             nginx                                       <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>               <span class="hljs-number">2</span>m1s<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 集群安全</title>
    <link href="/2021/09/03/k8s/k8s%E5%AE%89%E5%85%A8/Kubernetes%20%E9%9B%86%E7%BE%A4%E5%AE%89%E5%85%A8/"/>
    <url>/2021/09/03/k8s/k8s%E5%AE%89%E5%85%A8/Kubernetes%20%E9%9B%86%E7%BE%A4%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="机制说明"><a href="#机制说明" class="headerlink" title="机制说明"></a>机制说明</h1><p>Kubernetes 作为一个分布式集群的管理工具,保证集群的安全性是其一个重要的任务。API Server是集群内部各个组件通信的中介,也是外部控制的入口。所以Kubernetes的安全机制基本就是围绕保护API Server来设计的。Kubernetes 使用了认证(Authentication) 、鉴权(Authorization)、准入控制(Admission<br>Control)三步来保证API Server的安全。</p><p>![image-20220718172602070](Kubernetes 集群安全/image-20220718172602070.png)</p><h1 id="认证-Authentication"><a href="#认证-Authentication" class="headerlink" title="认证 Authentication"></a>认证 Authentication</h1><p>（1）HTTP Token 认证：通过一个 Token来识别合法用户</p><p>HTTP Token 的认证是用一个很长的特殊编码方式的并且难以被模仿的字符串-Token来表达客户的一种方式。Token 是一个很长的很复杂的字符串,每一个Token对应一个用户名存储在API Server 能访问的文件中。当客户端发起API调用请求时,需要在HTTP Header 里放入Token</p><p>（2）HTTP Base认证：通过 用户名+密码的方式认证<br>用户名+:+密码用BASE64算法进行编码后的字符串放在HTTP Request中的HeatherAuthorization 域里发送给服务端,服务端收到后进行编码,获取用户名及密码<br>（3）最严格的HTTPS 证书认证：基于CA根证书签名的客户端身份认证方式</p><p>1、HTTPS证书认证:</p><p>![image-20220718173050539](Kubernetes 集群安全/image-20220718173050539.png)</p><p>2 需要认证的节点</p><p>![image-20220718173128611](Kubernetes 集群安全/image-20220718173128611.png)</p><p>两种类型</p><ul><li>Kubenetes 组件 API Server B访: kubectl, Controller Manager, Scheduler, kubelet, kube-proxy</li><li>Kubernetes 管理的Pod 对容器的访问: Pod (dashborad 也是以Pod形式运行)</li></ul><p>安全性说明</p><ul><li>Controller Manager, Scheduler 与 API Server 在同一台机器,所以直接使用API Server的非安全端口访问,–insecure-bind-address=127.0.0.1</li><li>kubectl, kubelet, kube-proxy 访问 API Server 就都需要证书进行HTTPS 双向认证</li></ul><p>证书须发</p><ul><li>手动签发:通过k8s集群的跟ca进行签发HTTPS证书</li><li>自动签发: kubelet首次访问API Server 时,使用token做认证,通过后, Controller Manager 会为kubelet 生成一个证书,以后的访问都是用证书做认证了</li></ul><p>3 kubeconfig</p><p>kubeconfig文件包含集群参数(CA证书、API Server地址),客户端参数(上面生成的证书和私钥),集群context信息(集群名称、用户名) 。Kubenetes 组件通过启动时指定不同的kubeconfig文件可以切换到不同的集群</p><p>4 ServiceAccount</p><p>Pod中的容器访问API Server。因为Pod的创建、销毁是动态的,所以要为它手动生成证书就不可行了。Kubenetes使用了Service Account解决Pod 访问API Server的认证问题。</p><p>5 Secret 与 SA 的关系</p><p>Kubernetes 设计了一种资源对象叫做Secret, 分为两类,一种是用于ServiceAccount 的service-account-token,另一种是用于保存用户自定义保密信息的Opaque, ServiceAccount中用到包含三个部分: Token,ca.crt, namespace</p><ul><li>token是使用 API Server 私钥签名的JWT。用于访问API Server时, Server端认证 </li><li>ca.crt,根证书。用于Client端验证API Server发送的证书</li><li>namespace, 标识这个service-account-token的作用域名空间</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span><span class="hljs-built_in"> secret </span>--all-namespaces<br>kubectl describe<span class="hljs-built_in"> secret </span>default-token-5gm9r <span class="hljs-attribute">--namespace</span>=kube-system<br></code></pre></td></tr></table></figure><p>默认情况下,每个namespace 都会有一个 ServiceAccount，如果Pod在创建时没有指定ServiceAccount，就会使用Pod所属的namespace的 ServiceAccount。</p><h2 id="最终流程"><a href="#最终流程" class="headerlink" title="最终流程"></a>最终流程</h2><p>![image-20220718173632407](Kubernetes 集群安全/image-20220718173632407.png)</p><h1 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h1><p>上面认证过程,只是确认通信的双方都确认了对方是可信的,可以相互通信。而鉴权是确定请求方有哪些资源的权限。</p><p>API Server 目前支持以下几种授权策略(通过API Server的启动参数</p><ul><li>AlwaysDeny:表示拒绝所有的请求,一般用于测试</li><li>AlwaysAllow:允许接收所有请求,如果集群不需要授权流程,则可以采用该策略</li><li>ABAC (Attribute-Based Access Control) :基于属性的访问控制,表示使用用户配置的授权规则对用户请求进行匹配和控制</li><li>Webbook:通过调用外部 REST服务对用户进行授权</li><li>RBAC (Role-Based Access Control) :基于角色的访问控制,现行默认规则</li></ul><h2 id="RBAC授权模式"><a href="#RBAC授权模式" class="headerlink" title="RBAC授权模式"></a>RBAC授权模式</h2><p>RBAC (Role-Based Access Control)基于角色的访问控制,在Kubernetes 1.5中引入,现行版本成为默认标准。相对其它访问控制方式,拥有以下优势:</p><ul><li>对集群中的资源和非资源均拥有完整的覆盖</li><li>整个RBAC完全由几个API对象完成,同其它API对象一样,可以用kubectl或API进行操作</li><li>可以在运行时进行调整,无需重启API Server</li></ul><p>1、RBAC的API资源对象说明</p><p>RBAC 引入了4个新的顶级资源对象: Role, ClusterRole, RoleBinding, ClusterRoleBinding, 4 种对象类型均可以通过kubectl 与API操作。</p><p>![image-20220718174055000](Kubernetes 集群安全/image-20220718174055000.png)</p><p>需要注意的是Kubenetes 并不会提供用户管理,那么User, Group, ServiceAccount指定的用户又是从哪里来的呢? Kubenetes 组件(kubectl, kube-proxy)或是其他自定义的用户在向CA申请证书时,需要提供一个证书请求文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;HangZhou&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;XS&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;system:masters&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>   <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>API Server会把客户端证书的CN字段作为User,把names.0字段作为Group </p><p>kubelet 使用 TLS Bootstaping 认证H, API Server 可以使用 Bootstrap Tokens 或者 Token authentication file验证=token,无论哪一种, Kubenetes 都会为token绑定一个默认的User 和Group</p><p>Pod使用 ServiceAccount 认证时, service-account-token 中的JWT 会保存User信息.有了用户信息,再创建一对角色/角色绑定(集群角色/集群角色绑定)资源对象,就可以完成权限绑定了Role and ClusterRole</p><p>在RBAC API中, Role表示一组规则权限,权限只会增加(累加权限),不存在一个资源一开始就有很多权限而通过RBAC对其进行减少的操作; Role可以定义在一个namespace中,如果想要跨namespace则可以创建ClusterRole</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/vlbeta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod-readen</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>] <span class="hljs-comment">#&quot;&quot;indicates the core API group</span><br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;watch&quot;</span>,<span class="hljs-string">&quot;list&quot;</span>]<br></code></pre></td></tr></table></figure><p>ClusterRole 具有与Role 相同的权限角色控制能力,不同的是ClusterRole是集群级别的, ClusterRole可以用于：</p><ul><li>集群级别的资源控制(例如node 访问权限)</li><li>非资源型endpoints(例如/healthz访问)</li><li>所有命名空间资源控制(例如 pods)</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">secret-reader</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>] <span class="hljs-comment">#&quot;&quot;indicates the core API group</span><br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;secrets&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;watch&quot;</span>,<span class="hljs-string">&quot;list&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="RoleBinding-and-ClusterRoleBinding"><a href="#RoleBinding-and-ClusterRoleBinding" class="headerlink" title="RoleBinding and ClusterRoleBinding"></a>RoleBinding and ClusterRoleBinding</h2><p>RoloBinding 可以将角色中定义的权限授予用户或用户组, RoleBinding包含一组权限列表(subjects),权限列表中包含有不同形式的待授予权限资源类型(users, groups, or service accounts); RoloBinding 同样包含对被Bind 的Role 引用; RoleBinding 适用于某个命名空间内授权,而ClusterRoleBinding适用于集群范围内的授权 </p><p>将default 命名空间的{pod-reader Role授予jane 用户,此后jane 用户在default 命名空间中将具有pod-reader的权限</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/vlbeta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">read-pods</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">User</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">jane</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod-reader</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>RoleBinding 同样可以引用 ClusterRole 来对当前 namespace 内用户、用户组或 ServiceAccount进行授权,这种操作允许集群管理员在整个集群内定义一些通用的ClusterRole,然后在不同的namespace中使用RoleBinding 来引用</p><p>例如,以下RoleBinding 引用了一个 ClusterRole,这个ClusterRole具有整个集群内对secrets的访问权限;但是其授权用户dave只2能访问 development 空间中的secrets(因为RoleBinding 定义在development命名空间)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># This role binding allows \</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">read-secrets</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">development</span> <span class="hljs-comment"># This only grants permissions within the \</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">User</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dave</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">secret-reader</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><p>使用ClusterRoleBinding 可以对整个集群中的所有命名空间资源权限进行授权;以下ClusterRoleBinding样例展示了授权manager组内所有用户在全部命名空间中对secrets进行访问</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># This cluster role binding allows anyone in the \</span><br><span class="hljs-string">namespace.</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.</span> <span class="hljs-string">k8s.io/vlbeta1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">read-secrets-global</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">Group</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">manager</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">secret-reader</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><p>Kubernetes 集群内一些资源一般以其名称字符串来表示,这些字符串一般会在API的URL地址中出现;同时某些资源也会包含子资源,例如logs资源就属于pods 的子资源,API中URL样例如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/api/</span>v1<span class="hljs-regexp">/namespaces/</span>&#123;namespace&#125;<span class="hljs-regexp">/pods/</span>&#123;name&#125;/log<br></code></pre></td></tr></table></figure><p>如果要在RBAC授权模型中控制这些子资源的访问权限,可以通过/分隔符来实现,以下是一个定义pods资资源logs 访问权限的Role定义样例.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1beta1</span><br><span class="hljs-attr">metadata:</span><br><span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">pod-and-pod-logs-reader</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;pods/log&quot;</span>]<br>  <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;list&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="to-Subjects"><a href="#to-Subjects" class="headerlink" title="to Subjects"></a>to Subjects</h2><p>RoleBinding 和 ClusterRoleBinding 可以 Role 定到 Subjects; Subjects 可以是 groups, users 或者service accounts</p><p>Subjects 中 Users 使用字符串表示,它可以是一个普通的名字字符串,如”alice”,也可以是email地址,如“<a href="mailto:&#108;&#x65;&#x65;&#108;&#108;&#117;&#x6e;&#x40;&#115;&#x69;&#110;&#97;&#46;&#x63;&#110;">&#108;&#x65;&#x65;&#108;&#108;&#117;&#x6e;&#x40;&#115;&#x69;&#110;&#97;&#46;&#x63;&#110;</a>”；甚至是一组字符串形式的数字ID。但是users的前缀system：是系统保留的，集群管理员应该确保普通用户不会使用这个前缀格式。</p><p>Groups 书写格式与Users相同,都为一个字符串,并且没有特定的格式要求;同样system:前缀为系统保留</p><h1 id="准入控制"><a href="#准入控制" class="headerlink" title="准入控制"></a>准入控制</h1><p>准入控制是API Server的插件集合,通过添加不同的插件,实现额外的准入控制规则。甚至于API Server的一些主要的功能都需要通过Admission Controllers 实现,比如ServiceAccount官方文档上有一份针对不同版本的准入控制器推荐列表,其中最新的1.14的推荐列表是:</p><p>NamespaceLifecycle, LimitRanger, ServiceAccount, DefaultStorageClass,DefaultTolerationSeconds, Mutat<br>ingAdmissionWebhook, ValidatingAdmissionWebhook, ResourceQuota</p><p>列举几个插件的功能:</p><ul><li>NamespaceLifecycle：防止在不存在的 namespace 上创建对象,防止删除系统预置namespace,删除namespace 时,连带删除它的所有资源对象。</li><li>LimitRanger：确保请求的资源不会超过资源所在Namespace 的LimitRange的限制。</li><li>ServiceAccount： 实现了自动化添加 ServiceAccount</li><li>ResourceQuota：确保请求的资源不会超过资源的ResourceQuota限制。</li></ul>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s 证书介绍</title>
    <link href="/2021/09/03/k8s/k8s%E8%AF%81%E4%B9%A6/k8s%20%E8%AF%81%E4%B9%A6%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/09/03/k8s/k8s%E8%AF%81%E4%B9%A6/k8s%20%E8%AF%81%E4%B9%A6%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="一、集群需要哪些证书？"><a href="#一、集群需要哪些证书？" class="headerlink" title="一、集群需要哪些证书？"></a>一、集群需要哪些证书？</h1><ul><li>Kubelet 的客户端证书，用于 API 服务器身份验证</li><li>Kubelet 服务端证书， 用于 API 服务器与 Kubelet 的会话</li><li>API 服务器端点的证书</li><li>集群管理员的客户端证书，用于 API 服务器身份认证</li><li>API 服务器的客户端证书，用于和 Kubelet 的会话</li><li>API 服务器的客户端证书，用于和 etcd 的会话</li><li>控制器管理器的客户端证书/kubeconfig，用于和 API 服务器的会话</li><li>调度器的客户端证书/kubeconfig，用于和 API 服务器的会话</li><li>前端代理 的客户端及服务端证书</li></ul><p>![img](k8s 证书介绍/9f2f070828381f30a6e6ca0ff84a44016f06f069.png)</p><p><strong>说明：</strong> 只有当你运行 kube-proxy 并要支持 扩展 API 服务器 时，才需要 <code>front-proxy</code> 证书</p><p>etcd 还实现了双向 TLS 来对客户端和对其他对等节点进行身份验证。</p><h1 id="二、证书配置"><a href="#二、证书配置" class="headerlink" title="二、证书配置"></a>二、证书配置</h1><p>假如通过 kubeadm 安装 Kubernetes，大多数证书都存储在 <code>/etc/kubernetes/pki</code>。 本文档中的所有路径都是相对于该目录的，但用户账户证书除外，kubeadm 将其放在 <code>/etc/kubernetes</code> 中。</p><h2 id="2-1-单根CA"><a href="#2-1-单根CA" class="headerlink" title="2.1 单根CA"></a>2.1 单根CA</h2><p>可以创建由管理员控制的单根 CA。该根 CA 可以创建多个中间 CA，并将所有进一步的创建委托给 Kubernetes。</p><p>需要这些 CA：</p><table><thead><tr><th>路径</th><th>默认 CN</th><th>描述</th></tr></thead><tbody><tr><td>ca.crt,key</td><td>kubernetes-ca</td><td>Kubernetes 通用 CA</td></tr><tr><td>etcd/ca.crt,key</td><td>etcd-ca</td><td>与 etcd 相关的所有功能</td></tr><tr><td>front-proxy-ca.crt,key</td><td>kubernetes-front-proxy-ca</td><td>用于 前端代理</td></tr></tbody></table><p>上面的 CA 之外，还需要获取用于服务账户管理的密钥对，也就是 <code>sa.key</code> 和 <code>sa.pub</code>。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs console">/etc/kubernetes/pki/ca.crt<br>/etc/kubernetes/pki/ca.key<br>/etc/kubernetes/pki/etcd/ca.crt<br>/etc/kubernetes/pki/etcd/ca.key<br>/etc/kubernetes/pki/front-proxy-ca.crt<br>/etc/kubernetes/pki/front-proxy-ca.key<br></code></pre></td></tr></table></figure><h2 id="2-2-所有的证书"><a href="#2-2-所有的证书" class="headerlink" title="2.2 所有的证书"></a>2.2 所有的证书</h2><p>证书认证： <a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/rbac/">https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/rbac/</a></p><p>如果不想将 CA 的私钥拷贝至你的集群中，你也可以自己生成全部的证书。</p><table><thead><tr><th>默认 CN</th><th>父级 CA</th><th>O (位于 Subject 中)</th><th>类型</th><th>主机 (SAN)</th></tr></thead><tbody><tr><td>kube-etcd</td><td>etcd-ca</td><td></td><td>server, client</td><td><code>&lt;hostname&gt;</code>, <code>&lt;Host_IP&gt;</code>, <code>localhost</code>, <code>127.0.0.1</code></td></tr><tr><td>kube-etcd-peer</td><td>etcd-ca</td><td></td><td>server, client</td><td><code>&lt;hostname&gt;</code>, <code>&lt;Host_IP&gt;</code>, <code>localhost</code>, <code>127.0.0.1</code></td></tr><tr><td>kube-etcd-healthcheck-client</td><td>etcd-ca</td><td></td><td>client</td><td></td></tr><tr><td>kube-apiserver-etcd-client</td><td>etcd-ca</td><td>system:masters</td><td>client</td><td></td></tr><tr><td>kube-apiserver</td><td>kubernetes-ca</td><td></td><td>server</td><td><code>&lt;hostname&gt;</code>, <code>&lt;Host_IP&gt;</code>, <code>&lt;advertise_IP&gt;</code>, <code>[1]</code></td></tr><tr><td>kube-apiserver-kubelet-client</td><td>kubernetes-ca</td><td>system:masters</td><td>client</td><td></td></tr><tr><td>front-proxy-client</td><td>kubernetes-front-proxy-ca</td><td></td><td>client</td><td></td></tr></tbody></table><p>用来连接到集群的不同 IP 或 DNS 名 （就像 <a href="https://kubernetes.io/zh-cn/docs/reference/setup-tools/kubeadm/">kubeadm</a> 为负载均衡所使用的固定 IP 或 DNS 名，<code>kubernetes</code>、<code>kubernetes.default</code>、<code>kubernetes.default.svc</code>、 <code>kubernetes.default.svc.cluster</code>、<code>kubernetes.default.svc.cluster.local</code>）。</p><table><thead><tr><th>kind</th><th>密钥用途</th></tr></thead><tbody><tr><td>server</td><td>数字签名、密钥加密、服务端认证</td></tr><tr><td>client</td><td>数字签名、密钥加密、客户端认证</td></tr></tbody></table><p>对于 kubeadm 用户：</p><ul><li>不使用私钥，将证书复制到集群 CA 的方案，在 kubeadm 文档中将这种方案称为外部 CA。</li><li>如果将以上列表与 kubeadm 生成的 PKI 进行比较，你会注意到，如果使用外部 etcd，则不会生成 <code>kube-etcd</code>、<code>kube-etcd-peer</code> 和 <code>kube-etcd-healthcheck-client</code> 证书。</li></ul><h3 id="证书路径"><a href="#证书路径" class="headerlink" title="证书路径"></a>证书路径</h3><table><thead><tr><th>默认 CN</th><th>建议的密钥路径</th><th>建议的证书路径</th><th>命令</th><th>密钥参数</th><th>证书参数</th></tr></thead><tbody><tr><td>etcd-ca</td><td>etcd/ca.key</td><td>etcd/ca.crt</td><td>kube-apiserver</td><td></td><td>–etcd-cafile</td></tr><tr><td>kube-apiserver-etcd-client</td><td>apiserver-etcd-client.key</td><td>apiserver-etcd-client.crt</td><td>kube-apiserver</td><td>–etcd-keyfile</td><td>–etcd-certfile</td></tr><tr><td>kubernetes-ca</td><td>ca.key</td><td>ca.crt</td><td>kube-apiserver</td><td></td><td>–client-ca-file</td></tr><tr><td>kubernetes-ca</td><td>ca.key</td><td>ca.crt</td><td>kube-controller-manager</td><td>–cluster-signing-key-file</td><td>–client-ca-file, –root-ca-file, –cluster-signing-cert-file</td></tr><tr><td>kube-apiserver</td><td>apiserver.key</td><td>apiserver.crt</td><td>kube-apiserver</td><td>–tls-private-key-file</td><td>–tls-cert-file</td></tr><tr><td>kube-apiserver-kubelet-client</td><td>apiserver-kubelet-client.key</td><td>apiserver-kubelet-client.crt</td><td>kube-apiserver</td><td>–kubelet-client-key</td><td>–kubelet-client-certificate</td></tr><tr><td>front-proxy-ca</td><td>front-proxy-ca.key</td><td>front-proxy-ca.crt</td><td>kube-apiserver</td><td></td><td>–requestheader-client-ca-file</td></tr><tr><td>front-proxy-ca</td><td>front-proxy-ca.key</td><td>front-proxy-ca.crt</td><td>kube-controller-manager</td><td></td><td>–requestheader-client-ca-file</td></tr><tr><td>front-proxy-client</td><td>front-proxy-client.key</td><td>front-proxy-client.crt</td><td>kube-apiserver</td><td>–proxy-client-key-file</td><td>–proxy-client-cert-file</td></tr><tr><td>etcd-ca</td><td>etcd/ca.key</td><td>etcd/ca.crt</td><td>etcd</td><td></td><td>–trusted-ca-file, –peer-trusted-ca-file</td></tr><tr><td>kube-etcd</td><td>etcd/server.key</td><td>etcd/server.crt</td><td>etcd</td><td>–key-file</td><td>–cert-file</td></tr><tr><td>kube-etcd-peer</td><td>etcd/peer.key</td><td>etcd/peer.crt</td><td>etcd</td><td>–peer-key-file</td><td>–peer-cert-file</td></tr><tr><td>etcd-ca</td><td></td><td>etcd/ca.crt</td><td>etcdctl</td><td></td><td>–cacert</td></tr><tr><td>kube-etcd-healthcheck-client</td><td>etcd/healthcheck-client.key</td><td>etcd/healthcheck-client.crt</td><td>etcdctl</td><td>–key</td><td>–cert</td></tr></tbody></table><p>服务帐户密钥对：</p><table><thead><tr><th>钥路径</th><th>公钥路径</th><th>命令</th><th>参数</th></tr></thead><tbody><tr><td>sa.key</td><td></td><td>kube-controller-manager</td><td>–service-account-private-key-file</td></tr><tr><td></td><td>sa.pub</td><td>kube-apiserver</td><td>–service-account-key-file</td></tr></tbody></table><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs console">/etc/kubernetes/pki/etcd/ca.key<br>/etc/kubernetes/pki/etcd/ca.crt<br>/etc/kubernetes/pki/apiserver-etcd-client.key<br>/etc/kubernetes/pki/apiserver-etcd-client.crt<br>/etc/kubernetes/pki/ca.key<br>/etc/kubernetes/pki/ca.crt<br>/etc/kubernetes/pki/apiserver.key<br>/etc/kubernetes/pki/apiserver.crt<br>/etc/kubernetes/pki/apiserver-kubelet-client.key<br>/etc/kubernetes/pki/apiserver-kubelet-client.crt<br>/etc/kubernetes/pki/front-proxy-ca.key<br>/etc/kubernetes/pki/front-proxy-ca.crt<br>/etc/kubernetes/pki/front-proxy-client.key<br>/etc/kubernetes/pki/front-proxy-client.crt<br>/etc/kubernetes/pki/etcd/server.key<br>/etc/kubernetes/pki/etcd/server.crt<br>/etc/kubernetes/pki/etcd/peer.key<br>/etc/kubernetes/pki/etcd/peer.crt<br>/etc/kubernetes/pki/etcd/healthcheck-client.key<br>/etc/kubernetes/pki/etcd/healthcheck-client.crt<br>/etc/kubernetes/pki/sa.key<br>/etc/kubernetes/pki/sa.pub<br></code></pre></td></tr></table></figure><h2 id="2-3-用户帐户配置证书"><a href="#2-3-用户帐户配置证书" class="headerlink" title="2.3 用户帐户配置证书"></a>2.3 用户帐户配置证书</h2><table><thead><tr><th>文件名</th><th>凭据名称</th><th>默认 CN</th><th>O (位于 Subject 中)</th></tr></thead><tbody><tr><td>admin.conf</td><td>default-admin</td><td>kubernetes-admin</td><td>system:masters</td></tr><tr><td>kubelet.conf</td><td>default-auth</td><td>system:node:<code>&lt;nodeName&gt;</code> （参阅注释）</td><td>system:nodes</td></tr><tr><td>controller-manager.conf</td><td>default-controller-manager</td><td>system:kube-controller-manager</td><td></td></tr><tr><td>scheduler.conf</td><td>default-scheduler</td><td>system:kube-scheduler</td><td></td></tr></tbody></table><p>用途</p><table><thead><tr><th>文件名</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>admin.conf</td><td>kubectl</td><td>配置集群的管理员</td></tr><tr><td>kubelet.conf</td><td>kubelet</td><td>集群中的每个节点都需要一份</td></tr><tr><td>controller-manager.conf</td><td>kube-controller-manager</td><td>必需添加到 <code>manifests/kube-controller-manager.yaml</code> 清单中</td></tr><tr><td>scheduler.conf</td><td>kube-scheduler</td><td>必需添加到 <code>manifests/kube-scheduler.yaml</code> 清单中</td></tr></tbody></table><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs console">/etc/kubernetes/admin.conf<br>/etc/kubernetes/kubelet.conf<br>/etc/kubernetes/controller-manager.conf<br>/etc/kubernetes/scheduler.conf<br></code></pre></td></tr></table></figure><h1 id="三-证书结构"><a href="#三-证书结构" class="headerlink" title="三 证书结构"></a>三 证书结构</h1><h2 id="1-1-证书JSON配置文件"><a href="#1-1-证书JSON配置文件" class="headerlink" title="1.1 证书JSON配置文件"></a>1.1 证书JSON配置文件</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>:[&#123;<br>    <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;&lt;country&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;&lt;state&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;&lt;city&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;&lt;organization&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;&lt;organization unit&gt;&quot;</span><br>  &#125;]<br>&#125;<br></code></pre></td></tr></table></figure><p>字段说明：</p><p>“CN” : Common Name, kube-apiserver 从证书中提取该字段作为请求的用户名 (User Name):浏览器使用该字段验证网站是否合法;<br>“O”: Organization, kube-apiserver 从证书中提取该字段作为请求用户所属的组(Group)</p><h2 id="2-生成-CA-秘钥文件（ca-key-pem）和证书文件（ca-pem）"><a href="#2-生成-CA-秘钥文件（ca-key-pem）和证书文件（ca-pem）" class="headerlink" title="2 生成 CA 秘钥文件（ca-key.pem）和证书文件（ca.pem）"></a>2 生成 CA 秘钥文件（<code>ca-key.pem</code>）和证书文件（<code>ca.pem</code>）</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">cfssl gencert -initca <span class="hljs-keyword">ca</span>-csr.json | cfssljson -bare <span class="hljs-keyword">ca</span><br></code></pre></td></tr></table></figure><h2 id="3-创建一个-JSON-配置文件，用来为-API-服务器生成秘钥和证书"><a href="#3-创建一个-JSON-配置文件，用来为-API-服务器生成秘钥和证书" class="headerlink" title="3 创建一个 JSON 配置文件，用来为 API 服务器生成秘钥和证书"></a>3 创建一个 JSON 配置文件，用来为 API 服务器生成秘钥和证书</h2><p>例如：<code>server-csr.json</code>。 确认用你需要的值替换掉尖括号中的值。<code>MASTER_CLUSTER_IP</code> 是为 API 服务器 指定的服务集群 IP，就像前面小节描述的那样。 以下示例假定你的默认 DNS 域名为<code>cluster.local</code>。 </p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [<br>    <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;&lt;MASTER_IP&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;&lt;MASTER_CLUSTER_IP&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc.cluster&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc.cluster.local&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [&#123;<br>    <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;&lt;country&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;&lt;state&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;&lt;city&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;&lt;organization&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;&lt;organization unit&gt;&quot;</span><br>  &#125;]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-为-API-服务器生成秘钥和证书"><a href="#4-为-API-服务器生成秘钥和证书" class="headerlink" title="4 为 API 服务器生成秘钥和证书"></a>4 为 API 服务器生成秘钥和证书</h2><p>例如：默认会分别存储为<code>server-key.pem</code> 和 <code>server.pem</code> 两个文件 </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cfssl gencert <span class="hljs-attribute">-ca</span>=ca.pem <span class="hljs-attribute">-ca-key</span>=ca-key.pem \<br>     <span class="hljs-attribute">--config</span>=ca-config.json <span class="hljs-attribute">-profile</span>=kubernetes \<br>     server-csr.json | cfssljson -bare server<br></code></pre></td></tr></table></figure><h1 id="四、-k8s-证书认证"><a href="#四、-k8s-证书认证" class="headerlink" title="四、 k8s 证书认证"></a>四、 k8s 证书认证</h1><h2 id="4-1-TLS-Bootstrapping"><a href="#4-1-TLS-Bootstrapping" class="headerlink" title="4.1 TLS Bootstrapping"></a>4.1 TLS Bootstrapping</h2><p>启用 TLS Bootstrapping 机制 TLS Bootstraping：Master apiserver 启用 TLS 认证后，Node 节点 kubelet 和 kube- proxy 要与 kube-apiserver 进行通信，必须使用 CA 签发的有效证书才可以，当 Node 节点很多时，这种客户端证书颁发需要大量工作，同样也会增加集群扩展复杂度。为了简化流程，Kubernetes 引入了 TLS bootstraping 机制来自动颁发客户端证书，kubelet 会以一个低权限用户自动向 apiserver 申请证书，kubelet 的证书由 apiserver 动态签署。<br>所以强烈建议在 Node 上使用这种方式，目前主要用于 kubelet，kube-proxy 还是由我们统一颁发一个证书。</p><p>TLS bootstraping 工作流程： </p><p><img src="E:/BaiduSyncdisk/%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/%E6%9C%8D%E5%8A%A1%E5%99%A8/k8s/%E9%9B%86%E7%BE%A4/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2kubernetes%E9%9B%86%E7%BE%A4/1659365157408.png" alt="1659365157408"></p><p>![k8s tls bootstrap流程图](k8s 证书介绍/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Imv5Yev5bCU,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center.png)</p><p>授权kubelet-bootstrap用户允许请求证书</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create clusterrolebinding kubelet-bootstrap \<br><span class="hljs-attribute">--clusterrole</span>=system:node-bootstrapper \<br><span class="hljs-attribute">--user</span>=kubelet-bootstrap<br></code></pre></td></tr></table></figure><p>创建上述配置文件中 token 文件： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt; /opt/kubernetes/cfg/token.csv &lt;&lt; <span class="hljs-string">EOF </span><br><span class="hljs-string">2883dba522d43d742dd88f3ce07cf52e,kubelet-bootstrap,10001,system:node-bootstrapper</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure><p>格式：token，用户名，UID，用户组 </p><p>token 也可自行生成替换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">head</span> -c 16 /dev/urandom | <span class="hljs-built_in">od</span> -An -t x | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27; &#x27;</span><br></code></pre></td></tr></table></figure><h1 id="五、证书签名请求文件"><a href="#五、证书签名请求文件" class="headerlink" title="五、证书签名请求文件"></a>五、证书签名请求文件</h1><p><a href="https://kubernetes.io/zh-cn/docs/setup/best-practices/certificates/">PKI 证书和要求 | Kubernetes</a></p><p><a href="https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/certificates/">手动生成证书 | Kubernetes</a></p><p><a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/rbac/">使用 RBAC 鉴权 | Kubernetes</a></p><h2 id="5-1-CA证书签名请求文件"><a href="#5-1-CA证书签名请求文件" class="headerlink" title="5.1 CA证书签名请求文件"></a>5.1 CA证书签名请求文件</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> &gt; ca<span class="hljs-literal">-csr</span>.json &lt;&lt;<span class="hljs-keyword">END</span>   <br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;      <br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,     <br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,             <br>  <span class="hljs-string">&quot;names&quot;</span>:[&#123;         <br>    <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,     <br>    <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,<br>    <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;Beijing&quot;</span>,          <br>    <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,         <br>    <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span>     <br>  &#125;]      <br>&#125;                        <br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><h2 id="5-2-证书签发的配置文件"><a href="#5-2-证书签发的配置文件" class="headerlink" title="5.2 证书签发的配置文件"></a>5.2 证书签发的配置文件</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> &gt; ca<span class="hljs-literal">-config</span>.json &lt;&lt;<span class="hljs-keyword">END</span><br>&#123;<br>  <span class="hljs-string">&quot;signing&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;default&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;8760h&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;profiles&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;kubernetes&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;usages&quot;</span>: [<br>          <span class="hljs-string">&quot;signing&quot;</span>,<br>          <span class="hljs-string">&quot;key encipherment&quot;</span>,<br>          <span class="hljs-string">&quot;server auth&quot;</span>,<br>          <span class="hljs-string">&quot;client auth&quot;</span><br>        ],<br>        <span class="hljs-string">&quot;expiry&quot;</span>: <span class="hljs-string">&quot;8760h&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><h2 id="5-3-kubernetes证书签发"><a href="#5-3-kubernetes证书签发" class="headerlink" title="5.3 kubernetes证书签发"></a>5.3 kubernetes证书签发</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ cat &gt; <span class="hljs-keyword">server</span>-csr.json &lt;&lt; <span class="hljs-keyword">END</span><br>&#123;<br>  &quot;CN&quot;: &quot;kubernetes&quot;,<br>  &quot;hosts&quot;: [<br>    &quot;127.0.0.1&quot;,<br>    &quot;10.0.0.1&quot;,<br>    &quot;10.0.0.31&quot;,<br>    &quot;10.0.0.41&quot;,<br>    &quot;10.0.0.42&quot;,<br>    &quot;k8s-master01&quot;,<br>    &quot;k8s-node01&quot;,<br>    &quot;k8s-node02&quot;,<br>    &quot;kubernetes&quot;,<br>    &quot;kubernetes.default&quot;,<br>    &quot;kubernetes.default.svc&quot;,<br>    &quot;kubernetes.default.svc.cluster&quot;,<br>    &quot;kubernetes.default.svc.cluster.local&quot;<br>  ],<br>  &quot;key&quot;: &#123;<br>    &quot;algo&quot;: &quot;rsa&quot;,<br>    &quot;size&quot;: <span class="hljs-number">2048</span><br>  &#125;,<br>  &quot;names&quot;: [&#123;<br>    &quot;C&quot;: &quot;CN&quot;,<br>    &quot;ST&quot;: &quot;Beijing&quot;,<br>    &quot;L&quot;: &quot;Beijing&quot;,<br>    &quot;O&quot;: &quot;k8s&quot;,<br>    &quot;OU&quot;: &quot;System&quot;<br>  &#125;]<br>&#125;<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><p>如果hosts字段不为空则需要指定授权使用该证书的IP或域名列表。<br>master节点的IP都填上,同时还有service网络的首IP。(一般是kube-apiserver指定的service-cluster-ip-range网段的第一个IP, 如10.0.0.1)<br>三个master,以上物理节点的IP也可以更换为主机名。</p><h3 id="5-4-admin证书"><a href="#5-4-admin证书" class="headerlink" title="5.4 admin证书"></a>5.4 admin证书</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">cat &gt; <span class="hljs-keyword">admin</span>-csr.json &lt;&lt;EOF<br>&#123;<br>  &quot;CN&quot;: &quot;admin&quot;,<br>  &quot;hosts&quot;: [],<br>  &quot;key&quot;: &#123;<br>    &quot;algo&quot;: &quot;rsa&quot;,<br>    &quot;size&quot;: <span class="hljs-number">2048</span><br>  &#125;,<br>  &quot;names&quot;: [<br>    &#123;<br>      &quot;C&quot;: &quot;CN&quot;,<br>      &quot;L&quot;: &quot;BeiJing&quot;,<br>      &quot;ST&quot;: &quot;BeiJing&quot;,<br>      &quot;O&quot;: &quot;system:masters&quot;,<br>      &quot;OU&quot;: &quot;System&quot;<br>    &#125;<br>  ]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><ul><li>User：admin</li><li> Group：system:masters</li></ul><p>kube-apiserver使用RBAC对客户端(如kubelet, kube-proxy, Pod)请求进行授权。</p><h3 id="2-5-3-kube-proxy-证书签名请求"><a href="#2-5-3-kube-proxy-证书签名请求" class="headerlink" title="2.5.3 kube-proxy 证书签名请求"></a>2.5.3 kube-proxy 证书签名请求</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs prolog">cat &gt; kube-proxy-csr.json &lt;&lt;<span class="hljs-symbol">EOF</span><br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-proxy&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>    &#125;<br>  ]<br>&#125;<br><span class="hljs-symbol">EOF</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>默认 ClusterRole</th><th>默认 ClusterRoleBinding</th><th>描述</th></tr></thead><tbody><tr><td>system:node-proxier</td><td><strong>system:kube-proxy</strong> 用户</td><td>允许访问 kube-proxy 组件所需要的资源。</td></tr></tbody></table><p>kube-apiserver 预定义的 RoleBinding system:node-proxier将User system:kube-proxy与 Role system:node-proxier 绑定,Role 授予了调用 kube-apiserver。</p><p>该证书只会被kubectl 当做client证书使用,所以hosts字段为空。</p><h3 id="2-5-4-创建kube-controller-manager证书"><a href="#2-5-4-创建kube-controller-manager证书" class="headerlink" title="2.5.4 创建kube-controller-manager证书"></a>2.5.4 创建kube-controller-manager证书</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs prolog">cat &gt; kube-controller-manager-csr.json &lt;&lt;<span class="hljs-symbol">EOF</span><br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-controller-manager&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [<br>    <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;10.0.0.31&quot;</span>,<br>    <span class="hljs-string">&quot;10.0.0.41&quot;</span>,<br>    <span class="hljs-string">&quot;10.0.0.42&quot;</span>,<br>    <span class="hljs-string">&quot;k8s-master01&quot;</span>,<br>    <span class="hljs-string">&quot;k8s-node01&quot;</span>,<br>    <span class="hljs-string">&quot;k8s-node02&quot;</span>,<br>  ],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;system:kube-controller-manager&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>    &#125;<br>  ]<br>&#125;<br><span class="hljs-symbol">EOF</span><br></code></pre></td></tr></table></figure><p>hosts 列表包含所有kube-controller-manager 节点IP;<br>CN 为 system:kube-controller-manager, O system:kube-controller-manager, kubernetes 内置的 ClusterRoleBindings system:kube-controller-manager 授予 kube-controller-manager 工作所需的权限</p><h3 id="2-5-5-创建kube-scheduler证书"><a href="#2-5-5-创建kube-scheduler证书" class="headerlink" title="2.5.5 创建kube-scheduler证书"></a>2.5.5 创建kube-scheduler证书</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs prolog">cat &gt; kube-scheduler-csr.json &lt;&lt;<span class="hljs-symbol">EOF</span><br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;system:kube-scheduler&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [<br>    <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;10.0.0.31&quot;</span>,<br>    <span class="hljs-string">&quot;10.0.0.41&quot;</span>,<br>    <span class="hljs-string">&quot;10.0.0.42&quot;</span>,<br>    <span class="hljs-string">&quot;k8s-master01&quot;</span>,<br>    <span class="hljs-string">&quot;k8s-node01&quot;</span>,<br>    <span class="hljs-string">&quot;k8s-node02&quot;</span>,<br>  ],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">2048</span><br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;system:kube-scheduler&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>    &#125;<br>  ]<br>&#125;<br><span class="hljs-symbol">EOF</span><br></code></pre></td></tr></table></figure><p>hosts 列表包含所有kube-scheduler节点IP;<br>CN 为 system:kube-scheduler, O为 system:kube-scheduler, kubernetes 内置的 ClusterRoleBindings system:kube-scheduler 将赋予kube-scheduler 工作所需的权限。</p><h1 id="三、证书操作"><a href="#三、证书操作" class="headerlink" title="三、证书操作"></a>三、证书操作</h1><h2 id="3-1-检查证书是否过期"><a href="#3-1-检查证书是否过期" class="headerlink" title="3.1 检查证书是否过期"></a>3.1 检查证书是否过期</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">kubeadm certs check-expiration</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HPA实战演示</title>
    <link href="/2021/09/03/k8s/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/HPA%E5%AE%9E%E6%88%98%E6%BC%94%E7%A4%BA/"/>
    <url>/2021/09/03/k8s/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/HPA%E5%AE%9E%E6%88%98%E6%BC%94%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="镜像拉取"><a href="#镜像拉取" class="headerlink" title="镜像拉取"></a>镜像拉取</h1><p>将镜像放到本地私有云上</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">docker pull mirrorgooglecontainers/hpa-example<br>docker tag mirrorgooglecontainers<span class="hljs-regexp">/hpa-example harborcloud.com/</span>library/hpa-example<br>docker <span class="hljs-keyword">push</span> reg.westos.org<span class="hljs-regexp">/library/</span>hpa-example<br></code></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>hap.yaml </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">php-apache</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">php-apache</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">php-apache</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">php-apache</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/hpa-example</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">200m</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">php-apache</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">php-apache</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">run:</span> <span class="hljs-string">php-apache</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master01 prometheus]# kubectl <span class="hljs-keyword">get</span> svc<br><span class="hljs-type">NAME</span>                            <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">CLUSTER</span>-IP       <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)         AGE<br>php-apache                      ClusterIP   <span class="hljs-number">10.101</span><span class="hljs-number">.42</span><span class="hljs-number">.132</span>    &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">80</span>/TCP          <span class="hljs-number">10</span>m<br></code></pre></td></tr></table></figure><h1 id="横向扩展"><a href="#横向扩展" class="headerlink" title="横向扩展"></a>横向扩展</h1><p>创建 Horizontal Pod Autoscaler </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl autoscale deployment php-apache <span class="hljs-attribute">--cpu-percent</span>=50 <span class="hljs-attribute">--min</span>=1 <span class="hljs-attribute">--max</span>=10<br>kubectl top pod<br></code></pre></td></tr></table></figure><p>查看</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@k8s-master01 prometheus]# kubectl top pod<br>NAME                                            CPU(cores)   MEMORY(bytes)   <br>grafana<span class="hljs-string">-6</span>b44f56546<span class="hljs-string">-2</span>s6dn                        1m           46Mi            <br>kubernetes-dashboard<span class="hljs-string">-68</span>c6f6698c<span class="hljs-string">-4</span>rcs5           1m           12Mi            <br>metrics-server<span class="hljs-string">-6744</span>b4c64f-jt6vx                 6m           14Mi            <br>php-apache-f8bcb65f4-ndtjd                      1m           11Mi            <br>prometheus-alertmanager-cbfbd87c8<span class="hljs-string">-4</span>z72h         1m           14Mi            <br>prometheus-kube-state-metrics<span class="hljs-string">-77</span>ddf69b4-hhmxp   2m           13Mi            <br>prometheus-node-exporter-fd4zl                  1m           13Mi            <br>prometheus-pushgateway<span class="hljs-string">-5</span>dd5bfffb9-bm85t         1m           8Mi             <br>prometheus-server<span class="hljs-string">-558</span>fc5f6fc<span class="hljs-string">-756</span>m7              7m           207Mi  <br></code></pre></td></tr></table></figure><h1 id="增加负载"><a href="#增加负载" class="headerlink" title="增加负载"></a>增加负载</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">run</span> -i --tty load-generator --rm <span class="hljs-attribute">--image</span>=busybox <span class="hljs-attribute">--restart</span>=Never -- /bin/sh -c <span class="hljs-string">&quot;while sleep 0.01; do wget -q -O- http://10.101.42.132; done&quot;</span><br></code></pre></td></tr></table></figure><h1 id="查看hpa"><a href="#查看hpa" class="headerlink" title="查看hpa"></a>查看hpa</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl get hpa</span><br>NAME               REFERENCE                     TARGETS         MINPODS   MAXPODS   REPLICAS   AGE<br>nginx<span class="hljs-literal">-deployment</span>   Deployment/nginx<span class="hljs-literal">-deployment</span>   &lt;unknown&gt;/<span class="hljs-number">80</span>%   <span class="hljs-number">1</span>         <span class="hljs-number">15</span>        <span class="hljs-number">3</span>          <span class="hljs-number">7</span>d11<span class="hljs-built_in">h</span><br>php<span class="hljs-literal">-apache</span>         Deployment/php<span class="hljs-literal">-apache</span>         <span class="hljs-number">221</span>%/<span class="hljs-number">50</span>%        <span class="hljs-number">1</span>         <span class="hljs-number">10</span>        <span class="hljs-number">4</span>          <span class="hljs-number">13</span>m<br>[<span class="hljs-type">root</span>@<span class="hljs-type">k8s</span>-<span class="hljs-type">master01</span> ~]<span class="hljs-comment"># kubectl top pod</span><br>NAME                                            CPU(cores)   MEMORY(bytes)   <br>grafana<span class="hljs-literal">-6b44f56546-2s6dn</span>                        <span class="hljs-number">10</span>m          <span class="hljs-number">52</span><span class="hljs-built_in">Mi</span>            <br>kubernetes<span class="hljs-literal">-dashboard-68c6f6698c-4rcs5</span>           <span class="hljs-number">2</span>m           <span class="hljs-number">8</span><span class="hljs-built_in">Mi</span>             <br>load<span class="hljs-literal">-generator</span>                                  <span class="hljs-number">9</span>m           <span class="hljs-number">0</span><span class="hljs-built_in">Mi</span>             <br>load<span class="hljs-literal">-generator2</span>                                 <span class="hljs-number">9</span>m           <span class="hljs-number">0</span><span class="hljs-built_in">Mi</span>             <br>metrics<span class="hljs-literal">-server-6744b4c64f-jt6vx</span>                 <span class="hljs-number">9</span>m           <span class="hljs-number">19</span><span class="hljs-built_in">Mi</span>            <br>php<span class="hljs-literal">-apache-f8bcb65f4-6vgm9</span>                      <span class="hljs-number">149</span>m         <span class="hljs-number">9</span><span class="hljs-built_in">Mi</span>             <br>php<span class="hljs-literal">-apache-f8bcb65f4-8hjd6</span>                      <span class="hljs-number">154</span>m         <span class="hljs-number">9</span><span class="hljs-built_in">Mi</span>             <br>php<span class="hljs-literal">-apache-f8bcb65f4-fttc2</span>                      <span class="hljs-number">141</span>m         <span class="hljs-number">9</span><span class="hljs-built_in">Mi</span>             <br>php<span class="hljs-literal">-apache-f8bcb65f4-hmlhf</span>                      <span class="hljs-number">151</span>m         <span class="hljs-number">9</span><span class="hljs-built_in">Mi</span>             <br>php<span class="hljs-literal">-apache-f8bcb65f4-l57gg</span>                      <span class="hljs-number">147</span>m         <span class="hljs-number">8</span><span class="hljs-built_in">Mi</span>             <br>php<span class="hljs-literal">-apache-f8bcb65f4-ndtjd</span>                      <span class="hljs-number">151</span>m         <span class="hljs-number">9</span><span class="hljs-built_in">Mi</span>             <br>php<span class="hljs-literal">-apache-f8bcb65f4-r7h4b</span>                      <span class="hljs-number">149</span>m         <span class="hljs-number">11</span><span class="hljs-built_in">Mi</span>            <br>php<span class="hljs-literal">-apache-f8bcb65f4-vq2z5</span>                      <span class="hljs-number">145</span>m         <span class="hljs-number">8</span><span class="hljs-built_in">Mi</span>             <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>hpa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes 之 Volume</title>
    <link href="/2021/08/26/k8s/persistence/kubernetes%20%E4%B9%8B%20Volume/"/>
    <url>/2021/08/26/k8s/persistence/kubernetes%20%E4%B9%8B%20Volume/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Volume-介绍"><a href="#1-Volume-介绍" class="headerlink" title="1 Volume 介绍"></a>1 Volume 介绍</h1><p>目的：容器磁盘上的文件的生命周期是短暂的,这就使得在容器中运行重要应用时会出现一些问题。首先,当容器崩溃时, kubelet会重启它,但是容器中的文件将丢失–容器以干净的状态(镜像最初的状态)重新启动。其次,在Pod中同时运行多个容器时,这些容器之间通常需要共享文件。Kubernetes中的Volume抽象就很好的解决了<br>这些问题。</p><p>Volume 是Pod 中能够被多个容器访问的共享目录。Kubernetes 的Volume 定义在Pod 上，它被一个Pod 中的多个容器挂载到具体的文件目录下。Volume 与Pod 的生命周期相同，但与容器的生命周期不相关，当容器终止或重启时，Volume 中的数据也不会丢失。要使用volume，pod 需要指定volume 的类型和内容（ 字段），和映射到容器的位置（ 字段）。</p><p>Kubernetes 中的卷有明确的寿命–与封装它的Pod 相同。所f以,卷的生命比Pod中的所有容器都长,当这个容器重启时数据仍然得以保存。当然,当Pod不再存在时,卷也将不复存在。也许更重要的是, Kubernetes支持多种类型的卷, Pod可以同时使用任意数量的卷</p><p>Kubernetes 支持多种类型的Volume,包括：<br>emptyDir、hostPath、gcePersistentDisk、awsElasticBlockStore、nfs、iscsi、flocker、glusterfs、rbd、cephfs、gitRepo、secret、persistentVolumeClaim、downwardAPI、azureFileVolume、azureDisk、vsphereVolume、Quobyte、PortworxVolume、ScaleIO。</p><h1 id="2-Volume挂载"><a href="#2-Volume挂载" class="headerlink" title="2 Volume挂载"></a>2 Volume挂载</h1><h2 id="emptyDir"><a href="#emptyDir" class="headerlink" title="emptyDir"></a>emptyDir</h2><p>emptyDirEmptyDir 类型的volume创建于pod 被调度到某个宿主机上的时候，而同一个pod 内的容器都能读写EmptyDir 中的同一个文件。一旦这个pod 离开了这个宿主机，EmptyDir 中的数据就会被永久删除。所以目前EmptyDir 类型的volume 主要用作临时空间，比如Web 服务器写日志或者tmp 文件需要的临时目录。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-pd</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-web</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/cache</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">cache-volume</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/busybox:v1.35</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">busybox-1</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;sleep 6000s&quot;</span>]<br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/cache2</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">cache-volume</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cache-volume</span><br>    <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="hostPath"><a href="#hostPath" class="headerlink" title="hostPath"></a>hostPath</h2><p>HostPath 属性的volume 使得对应的容器能够访问当前宿主机上的指定目录。一旦这个pod 离开了这个宿主机，HostDir 中的数据虽然不会被永久删除，但数据也不会随pod 迁移到其他宿主机上</p><p>hostPath卷将主机节点的文件系统中的文件或目录挂载到集群中</p><p>hostPath的一些用法有：</p><ul><li>运行一个需要访问 Docker 内部机制的容器；可使用 <code>hostPath</code> 挂载 <code>/var/lib/docker</code> 路径。</li><li>在容器中运行 cAdvisor 时，以 <code>hostPath</code> 方式挂载 <code>/sys</code>。</li><li>允许 Pod 指定给定的 <code>hostPath</code> 在运行 Pod 之前是否应该存在，是否应该创建以及应该以什么方式存在。</li></ul><table><thead><tr><th align="left">取值</th><th align="left">行为</th></tr></thead><tbody><tr><td align="left"></td><td align="left">空字符串（默认）用于向后兼容，这意味着在安装 hostPath 卷之前不会执行任何检查。</td></tr><tr><td align="left"><code>DirectoryOrCreate</code></td><td align="left">如果在给定路径上什么都不存在，那么将根据需要创建空目录，权限设置为 0755，具有与 kubelet 相同的组和属主信息。</td></tr><tr><td align="left"><code>Directory</code></td><td align="left">在给定路径上必须存在的目录。</td></tr><tr><td align="left"><code>FileOrCreate</code></td><td align="left">如果在给定路径上什么都不存在，那么将在那里根据需要创建空文件，权限设置为 0644，具有与 kubelet 相同的组和所有权。</td></tr><tr><td align="left"><code>File</code></td><td align="left">在给定路径上必须存在的文件。</td></tr><tr><td align="left"><code>Socket</code></td><td align="left">在给定路径上必须存在的 UNIX 套接字。</td></tr><tr><td align="left"><code>CharDevice</code></td><td align="left">在给定路径上必须存在的字符设备。</td></tr><tr><td align="left"><code>BlockDevice</code></td><td align="left">在给定路径上必须存在的块设备。</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-pd</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">test-container</span><br><span class="hljs-comment"># 指定在容器中挂接路径</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/test-pd</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">test-volume</span><br><span class="hljs-comment"># 指定所提供的存储卷</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-volume</span> <span class="hljs-comment"># 宿主机上的目录hostPath:</span><br>    <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-comment"># host上目录</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/data</span><br>      <span class="hljs-comment"># 类型(可选)</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">Directory</span><br></code></pre></td></tr></table></figure><h2 id="nfs"><a href="#nfs" class="headerlink" title="nfs"></a>nfs</h2><p>允许一块现有的网络硬盘在同一个pod 内的容器间共享</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span> <span class="hljs-comment"># for versions before 1.9.0 use apps/v1beta2</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">redis</span><br>  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-comment"># 应用的镜像</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span> <span class="hljs-comment"># 应用的内部端口</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">6379</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">redis6379</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ALLOW_EMPTY_PASSWORD</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;yes&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">REDIS_PASSWORD</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;redis&quot;</span><br>        <span class="hljs-comment"># 持久化挂接位置，在docker 中</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">redis-persistent-storage</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-comment"># 宿主机上的目录</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">redis-persistent-storage</span><br>        <span class="hljs-attr">nfs:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/k8s-nfs/redis/data</span><br>          <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.126</span><span class="hljs-number">.112</span><br></code></pre></td></tr></table></figure><h2 id="configMap"><a href="#configMap" class="headerlink" title="configMap"></a>configMap</h2><p>ConfigMap 对象中存储的数据可以被 <code>configMap</code> 类型的卷引用，然后被 Pod 中运行的容器化应用使用。</p><p>引用 configMap 对象时，你可以在 volume 中通过它的名称来引用。 你可以自定义 ConfigMap 中特定条目所要使用的路径。 下面的配置显示了如何将名为 <code>log-config</code> 的 ConfigMap 挂载到名为 <code>configmap-pod</code> 的 Pod 中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">configmap-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">busybox:1.28</span><br>      <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-vol</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/config</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-vol</span><br>      <span class="hljs-attr">configMap:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">log-config</span><br>        <span class="hljs-attr">items:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">log_level</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">log_level</span><br></code></pre></td></tr></table></figure><p><code>log-config</code> ConfigMap 以卷的形式挂载，并且存储在 <code>log_level</code> 条目中的所有内容都被挂载到 Pod 的 <code>/etc/config/log_level</code> 路径下。 请注意，这个路径来源于卷的 <code>mountPath</code> 和 <code>log_level</code> 键对应的 <code>path</code>。</p><ul><li>容器以 subPath 卷挂载方式使用 ConfigMap 时，将无法接收 ConfigMap 的更新。</li><li>文本数据挂载成文件时采用 UTF-8 字符编码。如果使用其他字符编码形式，可使用 <code>binaryData</code> 字段。</li></ul>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>k8s持久卷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes 持久卷</title>
    <link href="/2021/08/25/k8s/persistence/kubernetes%20%E6%8C%81%E4%B9%85%E5%8D%B7/"/>
    <url>/2021/08/25/k8s/persistence/kubernetes%20%E6%8C%81%E4%B9%85%E5%8D%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h1><p><strong>PersistentVolume（PV）</strong></p><p>是集群中由管理员配置的一段网络存储。它是集群中的资源，就像节点是集群资源一样。PV 是容量插件，如Volumes，但其生命周期独立于使用PV 的任何单个pod。此API 对象捕获存储实现的详细信息，包括NFS，iSCSI 或特定于云提供程序的存储系统。</p><p><strong>PersistentVolumeClaim（PVC）</strong></p><p>是由用户进行存储的请求。它类似于pod。Pod 消耗节点资源，PVC 消耗PV 资源。Pod 可以请求特定级别的资源（CPU 和内存）。声明可以请求特定的大小和访问模式（ ReadWriteOnce、ReadOnlyMany 或 ReadWriteMany.例如，可以一次读/写或多次只读）。</p><p><strong>StorageClass</strong> </p><p>尽管 PersistentVolumeClaim 允许用户消耗抽象的存储资源，常见的情况是针对不同的 问题用户需要的是具有不同属性（如，性能）的 PersistentVolume 卷。 集群管理员需要能够提供不同性质的 PersistentVolume，并且这些 PV 卷之间的差别不仅限于卷大小和访问模式，同时又不能将卷是如何实现的这些细节暴露给用户。 为了满足这类需求，就有了 <em>存储类（StorageClass）</em> 资源。</p><p><strong>持久化卷声明的保护</strong></p><p>PVC保护的目的是确保由pod正在使用的PVC不会从系统中移除,因为如果被移除的话可能会导致数据丢失当启用PVC保护alpha功能时,如果用户删除了一个pod正在使用的PVC,则该PVC不会被立即删除。PVC的删除将被推迟,直到PVC不再被任何pod使用</p><h1 id="2-PV和PVC生命周期"><a href="#2-PV和PVC生命周期" class="headerlink" title="2 PV和PVC生命周期"></a>2 PV和PVC生命周期</h1><p>PV 卷是集群中的资源。PVC 申领是对这些资源的请求，也被用来执行对资源的申领检查。 PV 卷和 PVC 申领之间的互动遵循如下生命周期：</p><h2 id="2-1-制备-供应"><a href="#2-1-制备-供应" class="headerlink" title="2.1 制备/供应"></a>2.1 制备/供应</h2><p>PV 卷的制备有两种方式：静态制备或动态制备。</p><h3 id="静态制备"><a href="#静态制备" class="headerlink" title="静态制备"></a>静态制备</h3><p>集群管理员创建若干 PV 卷。这些卷对象带有真实存储的细节信息， 并且对集群用户可用（可见）。PV 卷对象存在于 Kubernetes API 中，可供用户消费（使用）。</p><h3 id="动态制备"><a href="#动态制备" class="headerlink" title="动态制备"></a>动态制备</h3><p>如果管理员所创建的所有静态 PV 卷都无法与用户的 PersistentVolumeClaim 匹配， 集群可以尝试为该 PVC 申领动态制备一个存储卷。 这一制备操作是基于 StorageClass 来实现的：PVC 申领必须请求某个 存储类， 同时集群管理员必须已经创建并配置了该类，这样动态制备卷的动作才会发生。 如果 PVC 申领指定存储类为 <code>&quot;&quot;</code>，则相当于为自身禁止使用动态制备的卷。</p><p>为了基于存储类完成动态的存储制备，集群管理员需要在 API 服务器上启用 <code>DefaultStorageClass</code> 准入控制器。 举例而言，可以通过保证 <code>DefaultStorageClass</code> 出现在 API 服务器组件的 <code>--enable-admission-plugins</code> 标志值中实现这点；该标志的值可以是逗号分隔的有序列表。 </p><h2 id="2-2-绑定"><a href="#2-2-绑定" class="headerlink" title="2.2 绑定"></a>2.2 绑定</h2><p>用户创建一个带有特定存储容量和特定访问模式需求的 PersistentVolumeClaim 对象； 在动态制备场景下，这个 PVC 对象可能已经创建完毕。 主控节点中的控制回路监测新的 PVC 对象，寻找与之匹配的 PV 卷（如果可能的话）， 并将二者绑定到一起。 如果为了新的 PVC 申领动态制备了 PV 卷，则控制回路总是将该 PV 卷绑定到这一 PVC 申领。 否则，用户总是能够获得他们所请求的资源，只是所获得的 PV 卷可能会超出所请求的配置。 一旦绑定关系建立，则 PersistentVolumeClaim 绑定就是排他性的， 无论该 PVC 申领是如何与 PV 卷建立的绑定关系。 PVC 申领与 PV 卷之间的绑定是一种一对一的映射，实现上使用 ClaimRef 来记述 PV 卷与 PVC 申领间的双向绑定关系。</p><p>如果找不到匹配的 PV 卷，PVC 申领会无限期地处于未绑定状态。 当与之匹配的 PV 卷可用时，PVC 申领会被绑定。 例如，即使某集群上制备了很多 50 Gi 大小的 PV 卷，也无法与请求 100 Gi 大小的存储的 PVC 匹配。当新的 100 Gi PV 卷被加入到集群时， 该 PVC 才有可能被绑定。</p><h2 id="2-3-使用Using"><a href="#2-3-使用Using" class="headerlink" title="2.3 使用Using"></a>2.3 使用Using</h2><p>Pod 将 PVC 申领当做存储卷来使用。集群会检视 PVC 申领，找到所绑定的卷，并为Pod 挂载该卷。对于支持多种访问模式的卷，用户要在 Pod 中以卷的形式使用申领时指定期望的访问模式。用户通过在 Pod 的 <code>volumes</code> 块中包含 <code>persistentVolumeClaim</code> 节区来调度 Pod，访问所申领的 PV 卷。</p><p>一旦用户有了申领对象并且该申领已经被绑定，则所绑定的 PV 卷在用户仍然需要它期间一直属于该用户。</p><h2 id="2-4-保护使用中的存储对象"><a href="#2-4-保护使用中的存储对象" class="headerlink" title="2.4 保护使用中的存储对象"></a>2.4 保护使用中的存储对象</h2><p>目的是确保仍被 Pod 使用的 PersistentVolumeClaim（PVC）对象及其所绑定的 PersistentVolume（PV）对象在系统中不会被删除，因为这样做可能会引起数据丢失。用户删除pvc 来回收存储资源，pv 将变成“released”状态。由于还保留着之前的数据，这些数据需要根据不同的策略来处理，否则这些存储资源无法被其他pvc 使用。</p><p>如果用户删除被某 Pod 使用的 PVC 对象，该 PVC 申领不会被立即移除。 PVC 对象的移除会被推迟，直至其不再被任何 Pod 使用。 此外，如果管理员删除已绑定到某 PVC 申领的 PV 卷，该 PV 卷也不会被立即移除。 PV 对象的移除也要推迟到该 PV 不再绑定到 PVC。 </p><p>当 PVC 的状态为 <code>Terminating</code> 且其 <code>Finalizers</code> 列表中包含 <code>kubernetes.io/pvc-protection</code> 时，PVC 对象是处于被保护状态的。 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">describe</span> <span class="hljs-string">pvc</span> <span class="hljs-string">hostpath</span><br></code></pre></td></tr></table></figure><p>当 PV 对象的状态为 <code>Terminating</code> 且其 <code>Finalizers</code> 列表中包含 <code>kubernetes.io/pv-protection</code> 时，PV 对象是处于被保护状态的。 </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">kubectl <span class="hljs-built_in">describe</span> <span class="hljs-built_in">pv</span> task-<span class="hljs-built_in">pv</span>-volume<br></code></pre></td></tr></table></figure><h2 id="2-5-回收（Reclaiming）"><a href="#2-5-回收（Reclaiming）" class="headerlink" title="2.5 回收（Reclaiming）"></a>2.5 回收（Reclaiming）</h2><p>当用户不再使用其存储卷时，他们可以从 API 中将 PVC 对象删除， 从而允许该资源被回收再利用。PersistentVolume 对象的回收策略告诉集群， 当其被从申领中释放时如何处理该数据卷。 目前，数据卷可以被 Retained（保留）、Recycled（回收）或 Deleted（删除）。</p><h3 id="2-5-1-保留（Retain）"><a href="#2-5-1-保留（Retain）" class="headerlink" title="2.5.1 保留（Retain）"></a>2.5.1 保留（Retain）</h3><p>persistentVolumeReclaimPolicy: Retain</p><p>回收策略 <code>Retain</code> 使得用户可以手动回收资源。当 PersistentVolumeClaim 对象被删除时，PersistentVolume 卷仍然存在，对应的数据卷被视为”已释放（released）”。 由于卷上仍然存在这前一申领人的数据，该卷还不能用于其他申领。 管理员可以通过下面的步骤来手动回收该卷：</p><ol><li>删除 PersistentVolume 对象。与之相关的、位于外部基础设施中的存储资产 （例如 AWS EBS、GCE PD、Azure Disk 或 Cinder 卷）在 PV 删除之后仍然存在。</li><li>根据情况，手动清除所关联的存储资产上的数据。</li><li>手动删除所关联的存储资产。</li></ol><p>如果你希望重用该存储资产，可以基于存储资产的定义创建新的 PersistentVolume 卷对象。</p><h3 id="2-5-2-删除（Delete）"><a href="#2-5-2-删除（Delete）" class="headerlink" title="2.5.2 删除（Delete）"></a>2.5.2 删除（Delete）</h3><p>persistentVolumeReclaimPolicy: Delete</p><p>对于支持 <code>Delete</code> 回收策略的卷插件，删除动作会将 PersistentVolume 对象从 Kubernetes 中移除，同时也会从外部基础设施（如 AWS EBS、GCE PD、Azure Disk 或 Cinder 卷）中移除所关联的存储资产。 动态制备的卷会继承其 StorageClass 中设置的回收策略， 该策略默认为 <code>Delete</code>。管理员需要根据用户的期望来配置 StorageClass； 否则 PV 卷被创建之后必须要被编辑或者修补。</p><h3 id="2-5-3-回收（Recycle）"><a href="#2-5-3-回收（Recycle）" class="headerlink" title="2.5.3 回收（Recycle）"></a>2.5.3 回收（Recycle）</h3><p>persistentVolumeReclaimPolicy: Recycle</p><p>目前的回收策略有：</p><ul><li>Retain – 手动回收</li><li>Recycle – 基本擦除 (<code>rm -rf /thevolume/*</code>)</li><li>Delete – 诸如 AWS EBS、GCE PD、Azure Disk 或 OpenStack Cinder 卷这类关联存储资产也被删除</li></ul><p>目前，仅 NFS 和 HostPath 支持回收（Recycle）。 AWS EBS、GCE PD、Azure Disk 和 Cinder 卷都支持删除（Delete）。</p><p>如果下层的卷插件支持，回收策略 <code>Recycle</code> 会在卷上执行一些基本的擦除 （<code>rm -rf /thevolume/*</code>）操作，之后允许该卷用于新的 PVC 申领。</p><p>不过，使用 Kubernetes 控制器管理器命令行参数来配置一个定制的回收器（Recycler） Pod 模板。此定制的回收器 Pod 模板必须包含一个 <code>volumes</code> 规约，如下例所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pv-recycler</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">vol</span><br>    <span class="hljs-attr">hostPath:</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/data</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">pv-recycler</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;k8s.gcr.io/busybox&quot;</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;test -e /scrub &amp;&amp; rm -rf /scrub/..?* /scrub/.[!.]* /scrub/*  &amp;&amp; test -z \&quot;$(ls -A /scrub)\&quot; || exit 1&quot;</span>]<br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">vol</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/scrub</span><br></code></pre></td></tr></table></figure><p>定制回收器 Pod 模板中在 <code>volumes</code> 部分所指定的特定路径要替换为正被回收的卷的路径。 </p><p>操作：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-master01 storage]<span class="hljs-meta"># vi pv-recycler.yaml</span><br>[root<span class="hljs-symbol">@k8s</span>-master01 storage]<span class="hljs-meta"># kubectl create -f pv-recycler.yaml </span><br>[root<span class="hljs-symbol">@k8s</span>-master01 storage]<span class="hljs-meta"># kubectl get pod</span><br>NAME          READY   STATUS      RESTARTS   AGE<br>pv-recycler   <span class="hljs-number">0</span>/<span class="hljs-number">1</span>     Completed   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m43s<br></code></pre></td></tr></table></figure><p>等pv-recycler状态为Completed时，/data文件夹下的文件就全部删完了。</p><h2 id="2-6-PersistentVolume-删除保护-finalizer"><a href="#2-6-PersistentVolume-删除保护-finalizer" class="headerlink" title="2.6 PersistentVolume 删除保护 finalizer"></a>2.6 PersistentVolume 删除保护 finalizer</h2><p>可以在 PersistentVolume 上添加终结器（Finalizer）， 以确保只有在删除对应的存储后才删除具有 <code>Delete</code> 回收策略的 PersistentVolume。</p><p>新引入的 <code>kubernetes.io/pv-controller</code> 和 <code>external-provisioner.volume.kubernetes.io/finalizer</code> 终结器仅会被添加到动态制备的卷上。</p><ul><li>终结器 <code>kubernetes.io/pv-controller</code> 会被添加到树内插件卷上。</li><li>终结器 <code>external-provisioner.volume.kubernetes.io/finalizer</code> 会被添加到 CSI 卷上。</li></ul><p>下面是一个例子： </p><ul><li>为特定的树内卷插件启用 <code>CSIMigration</code> 特性将删除 <code>kubernetes.io/pv-controller</code> 终结器， 同时添加 <code>external-provisioner.volume.kubernetes.io/finalizer</code> 终结器。 </li><li>同样，禁用 <code>CSIMigration</code> 将删除 <code>external-provisioner.volume.kubernetes.io/finalizer</code> 终结器， 同时添加 <code>kubernetes.io/pv-controller</code> 终结器。 </li></ul><h2 id="2-7-预留-PersistentVolume"><a href="#2-7-预留-PersistentVolume" class="headerlink" title="2.7 预留 PersistentVolume"></a>2.7 预留 PersistentVolume</h2><p>通过在 PersistentVolumeClaim 中指定 PersistentVolume，你可以声明该特定 PV 与 PVC 之间的绑定关系。如果该 PersistentVolume 存在且未被通过其 <code>claimRef</code> 字段预留给 PersistentVolumeClaim，则该 PersistentVolume 会和该 PersistentVolumeClaim 绑定到一起。 </p><p>绑定操作不会考虑某些卷匹配条件是否满足，包括节点亲和性等等。 控制面仍然会检查存储类、 访问模式和所请求的存储尺寸都是合法的。 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">foo-pvc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">foo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment"># 此处须显式设置空字符串，否则会被设置为默认的 StorageClass</span><br>  <span class="hljs-attr">volumeName:</span> <span class="hljs-string">foo-pv</span><br>  <span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>此方法无法对 PersistentVolume 的绑定特权做出任何形式的保证。 如果有其他 PersistentVolumeClaim 可以使用你所指定的 PV， 则你应该首先预留该存储卷。你可以将 PV 的 <code>claimRef</code> 字段设置为相关的 PersistentVolumeClaim 以确保其他 PVC 不会绑定到该 PV 卷。 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">foo-pv</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">claimRef:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">foo-pvc</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">foo</span><br>  <span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>如果你想要使用 <code>claimPolicy</code> 属性设置为 <code>Retain</code> 的 PersistentVolume 卷时， 包括你希望复用现有的 PV 卷时，这点是很有用的 </p><h2 id="2-8-扩充-PVC-申领"><a href="#2-8-扩充-PVC-申领" class="headerlink" title="2.8 扩充 PVC 申领"></a>2.8 扩充 PVC 申领</h2><p>现在，对扩充 PVC 申领的支持默认处于被启用状态。你可以扩充以下类型的卷：</p><ul><li>azureDisk</li><li>azureFile</li><li>awsElasticBlockStore</li><li>cinder (deprecated)</li><li>csi</li><li>flexVolume (deprecated)</li><li>gcePersistentDisk</li><li>glusterfs</li><li>rbd</li><li>portworxVolume</li></ul><p>只有当 PVC 的存储类中将 <code>allowVolumeExpansion</code> 设置为 true 时，你才可以扩充该 PVC 申领。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">gluster-vol-default</span><br><span class="hljs-attr">provisioner:</span> <span class="hljs-string">kubernetes.io/glusterfs</span><br><span class="hljs-attr">parameters:</span><br>  <span class="hljs-attr">resturl:</span> <span class="hljs-string">&quot;http://192.168.10.100:8080&quot;</span><br>  <span class="hljs-attr">restuser:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">secretNamespace:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">secretName:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">allowVolumeExpansion:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>如果要为某 PVC 请求较大的存储卷，可以编辑 PVC 对象，设置一个更大的尺寸值。 这一编辑操作会触发为下层 PersistentVolume 提供存储的卷的扩充。 Kubernetes 不会创建新的 PV 卷来满足此申领的请求。 与之相反，现有的卷会被调整大小。 </p><p><strong>重设包含文件系统的卷的大小</strong></p><p>只有卷中包含的文件系统是 XFS、Ext3 或者 Ext4 时，你才可以重设卷的大小.</p><p>当卷中包含文件系统时，只有在 Pod 使用 <code>ReadWrite</code> 模式来使用 PVC 申领的情况下才能重设其文件系统的大小。 文件系统扩充的操作或者是在 Pod 启动期间完成，或者在下层文件系统支持在线 扩充的前提下在 Pod 运行期间完成。</p><p>如果 FlexVolumes 的驱动将 <code>RequiresFSResize</code> 能力设置为 <code>true</code>，则该 FlexVolume 卷可以在 Pod 重启期间调整大小。</p><p><strong>重设使用中 PVC 申领的大小</strong></p><p>必须在执行扩展操作之前创建一个使用该 PVC 的 Pod。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">FlexVolume</span> 卷的重设大小只能在下层驱动支持重设大小的时候才可进行。<br> 扩充 EBS 卷的操作非常耗时。同时还存在另一个配额限制： 每 <span class="hljs-number">6</span> 小时只能执行一次（尺寸）修改操作。<br></code></pre></td></tr></table></figure><p><strong>处理扩充卷过程中的失败</strong></p><p>如果扩充下层存储的操作失败，集群管理员可以手动地恢复 PVC 申领的状态并 取消重设大小的请求。否则，在没有管理员干预的情况下，控制器会反复重试 重设大小的操作。</p><ol><li>将绑定到 PVC 申领的 PV 卷标记为 <code>Retain</code> 回收策略；</li><li>删除 PVC 对象。由于 PV 的回收策略为 <code>Retain</code>，我们不会在重建 PVC 时丢失数据。</li><li>删除 PV 规约中的 <code>claimRef</code> 项，这样新的 PVC 可以绑定到该卷。 这一操作会使得 PV 卷变为 “可用（Available）”。</li><li>使用小于 PV 卷大小的尺寸重建 PVC，设置 PVC 的 <code>volumeName</code> 字段为 PV 卷的名称。 这一操作将把新的 PVC 对象绑定到现有的 PV 卷。</li><li>不要忘记恢复 PV 卷上设置的回收策略。</li></ol><h1 id="3-持久卷类型"><a href="#3-持久卷类型" class="headerlink" title="3 持久卷类型"></a>3 持久卷类型</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">awsElasticBlockStore - AWS 弹性块存储（EBS）<br>azureDisk - Azure <span class="hljs-keyword">Disk</span><br><span class="hljs-keyword"></span>azureFile - Azure File<br>cephfs - CephFS volume<br>cinder - Cinder （OpenStack 块存储） (弃用)<br>csi - 容器存储接口 (CSI)<br>fc - Fibre Channel (FC) 存储<br>flexVolume - FlexVolume<br>flocker - Flocker 存储<br>gcePersistentDisk - GCE 持久化盘<br>glusterfs - Glusterfs 卷<br>hostPath - HostPath 卷 （仅供单节点测试使用；不适用于多节点集群； 请尝试使用 local 卷作为替代）<br>iscsi - iSCSI (<span class="hljs-keyword">SCSI </span>over IP) 存储<br>local - 节点上挂载的本地存储设备<br>nfs - 网络文件系统 (NFS) 存储<br>photonPersistentDisk - Photon 控制器持久化盘。 （这个卷类型已经因对应的云提供商被移除而被弃用）。<br>portworxVolume - Portworx 卷<br>quobyte - Quobyte 卷<br>rbd - Rados 块设备 (RBD) 卷<br><span class="hljs-keyword">scaleIO </span>- <span class="hljs-keyword">ScaleIO </span>卷 (弃用)<br>storageos - StorageOS 卷<br>vsphereVolume - vSphere VMDK 卷<br><br>以下的持久卷已被弃用。这意味着当前仍是支持的，但是 Kubernetes 将来的发行版会将其移除。<br><br>cinder - Cinder（OpenStack 块存储）（于 <span class="hljs-built_in">v1</span>.<span class="hljs-number">18</span> 弃用）<br>flexVolume - FlexVolume （于 <span class="hljs-built_in">v1</span>.<span class="hljs-number">23</span> 弃用）<br>flocker - Flocker 存储（于 <span class="hljs-built_in">v1</span>.<span class="hljs-number">22</span> 弃用）<br>quobyte - Quobyte 卷 （于 <span class="hljs-built_in">v1</span>.<span class="hljs-number">22</span> 弃用）<br>storageos - StorageOS 卷（于 <span class="hljs-built_in">v1</span>.<span class="hljs-number">22</span> 弃用）<br>旧版本的 Kubernetes 仍支持这些“树内（In-Tree）”持久卷类型：<br><br>photonPersistentDisk - Photon 控制器持久化盘。（<span class="hljs-built_in">v1</span>.<span class="hljs-number">15</span> 之后 不可用）<br><span class="hljs-keyword">scaleIO </span>- <span class="hljs-keyword">ScaleIO </span>卷（<span class="hljs-built_in">v1</span>.<span class="hljs-number">21</span> 之后 不可用）<br></code></pre></td></tr></table></figure><h1 id="4-持久卷"><a href="#4-持久卷" class="headerlink" title="4 持久卷"></a>4 持久卷</h1><p>每个 PV 对象都包含 spec 部分和 status 部分，分别对应卷的规约和状态。 PersistentVolume 对象的名称必须是合法的 DNS 子域名.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pv0003</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">5Gi</span><br>  <span class="hljs-attr">volumeMode:</span> <span class="hljs-string">Filesystem</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Recycle</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">slow</span><br>  <span class="hljs-attr">mountOptions:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">hard</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nfsvers=4.1</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/tmp</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span><br></code></pre></td></tr></table></figure><h2 id="4-1-容量"><a href="#4-1-容量" class="headerlink" title="4.1 容量"></a>4.1 容量</h2><p>每个 PV 卷都有确定的存储容量。 容量属性是使用 PV 对象的 <code>capacity</code> 属性来设置的。目前，存储大小是可以设置和请求的唯一资源。目前，存储大小是可以设置和请求的唯一资源。 未来可能会包含 IOPS、吞吐量等属性。 </p><h2 id="4-2-卷模式"><a href="#4-2-卷模式" class="headerlink" title="4.2 卷模式"></a>4.2 卷模式</h2><p>针对 PV 持久卷，Kubernetes 支持两种卷模式（<code>volumeModes</code>）：<code>Filesystem（文件系统）</code> 和 <code>Block（块）</code>。 <code>volumeMode</code> 是一个可选的 API 参数。 如果该参数被省略，默认的卷模式是 <code>Filesystem</code>。</p><p><code>volumeMode</code> 属性设置为 <code>Filesystem</code> 的卷会被 Pod <em>挂载（Mount）</em> 到某个目录。 如果卷的存储来自某块设备而该设备目前为空，Kuberneretes 会在第一次挂载卷之前 在设备上创建文件系统。</p><p>volumeMode<code>设置为</code>Block。这类卷以块设备的方式交给 Pod 使用，其上没有任何文件系统。Pod 和 卷之间不存在文件系统层。</p><h2 id="4-3-访问模式"><a href="#4-3-访问模式" class="headerlink" title="4.3 访问模式"></a>4.3 访问模式</h2><table><thead><tr><th>访问模式</th><th>描述</th><th>命令行接口</th></tr></thead><tbody><tr><td>ReadWriteOnce</td><td>卷可以被一个节点以读写方式挂载。 ReadWriteOnce 访问模式也允许运行在同一节点上的多个 Pod 访问卷。</td><td>RWO</td></tr><tr><td>ReadOnlyMany</td><td>该volume可以被多个节点以只读方式映射</td><td>ROX</td></tr><tr><td>ReadWriteMany</td><td>该volume只能被多个节点以读写的方式映射</td><td>RWX</td></tr><tr><td>ReadWriteOncePod</td><td>卷可以被单个 Pod 以读写方式挂载。 如果你想确保整个集群中只有一个 Pod 可以读取或写入该 PVC， 请使用 ReadWriteOncePod 访问模式。这只支持 CSI 卷以及需要 Kubernetes 1.22 以上版本。</td><td>RWOP</td></tr></tbody></table><p><strong>卷插件访问模式</strong></p><table><thead><tr><th>卷插件</th><th>ReadWriteOnce</th><th>ReadOnlyMany</th><th>ReadWriteMany</th><th>ReadWriteOncePod</th></tr></thead><tbody><tr><td>AWSElasticBlockStore</td><td>✓</td><td>-</td><td>-</td><td>-</td></tr><tr><td>AzureFile</td><td>✓</td><td>✓</td><td>✓</td><td>-</td></tr><tr><td>AzureDisk</td><td>✓</td><td>-</td><td>-</td><td>-</td></tr><tr><td>CephFS</td><td>✓</td><td>✓</td><td>✓</td><td>-</td></tr><tr><td>Cinder</td><td>✓</td><td>-</td><td>-</td><td>-</td></tr><tr><td>CSI</td><td>取决于驱动</td><td>取决于驱动</td><td>取决于驱动</td><td>取决于驱动</td></tr><tr><td>FC</td><td>✓</td><td>✓</td><td>-</td><td>-</td></tr><tr><td>FlexVolume</td><td>✓</td><td>✓</td><td>取决于驱动</td><td>-</td></tr><tr><td>Flocker</td><td>✓</td><td>-</td><td>-</td><td>-</td></tr><tr><td>GCEPersistentDisk</td><td>✓</td><td>✓</td><td>-</td><td>-</td></tr><tr><td>Glusterfs</td><td>✓</td><td>✓</td><td>✓</td><td>-</td></tr><tr><td>HostPath</td><td>✓</td><td>-</td><td>-</td><td>-</td></tr><tr><td>iSCSI</td><td>✓</td><td>✓</td><td>-</td><td>-</td></tr><tr><td>Quobyte</td><td>✓</td><td>✓</td><td>✓</td><td>-</td></tr><tr><td>NFS</td><td>✓</td><td>✓</td><td>✓</td><td>-</td></tr><tr><td>RBD</td><td>✓</td><td>✓</td><td>-</td><td>-</td></tr><tr><td>VsphereVolume</td><td>✓</td><td>-</td><td>- （Pod 运行于同一节点上时可行）</td><td>-</td></tr><tr><td>PortworxVolume</td><td>✓</td><td>-</td><td>✓</td><td>-</td></tr><tr><td>StorageOS</td><td>✓</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><p>在某些场合下，卷访问模式也会限制 PersistentVolume 可以挂载的位置。 卷访问模式并<strong>不会</strong>在存储已经被挂载的情况下为其实施写保护。 即使访问模式设置为 ReadWriteOnce、ReadOnlyMany 或 ReadWriteMany，它们也不会对卷形成限制。 </p><h2 id="4-4-类storageClassName"><a href="#4-4-类storageClassName" class="headerlink" title="4.4 类storageClassName"></a>4.4 类storageClassName</h2><p>每个 PV 可以属于某个类（Class），通过将其 <code>storageClassName</code> 属性设置为某个 <a href="https://kubernetes.io/zh-cn/docs/concepts/storage/storage-classes/">StorageClass</a> 的名称来指定。 特定类的 PV 卷只能绑定到请求该类存储卷的 PVC 申领。 未设置 <code>storageClassName</code> 的 PV 卷没有类设定，只能绑定到那些没有指定特定存储类的 PVC 申领。 </p><h2 id="4-5-挂载选项"><a href="#4-5-挂载选项" class="headerlink" title="4.5 挂载选项"></a>4.5 挂载选项</h2><p>Kubernetes 管理员可以指定持久卷被挂载到节点上时使用的附加挂载选项。 </p><p>以下卷类型支持挂载选项：</p><ul><li><code>awsElasticBlockStore</code></li><li><code>azureDisk</code></li><li><code>azureFile</code></li><li><code>cephfs</code></li><li><code>cinder</code> (<strong>已弃用</strong>于 v1.18)</li><li><code>gcePersistentDisk</code></li><li><code>glusterfs</code></li><li><code>iscsi</code></li><li><code>nfs</code></li><li><code>quobyte</code> (<strong>已弃用</strong>于 v1.22)</li><li><code>rbd</code></li><li><code>storageos</code> (<strong>已弃用</strong>于 v1.22)</li><li><code>vsphereVolume</code></li></ul><p>Kubernetes 不对挂载选项执行合法性检查。如果挂载选项是非法的，挂载就会失败。 早前，Kubernetes 使用注解 <code>volume.beta.kubernetes.io/mount-options</code> 而不是 <code>mountOptions</code> 属性。 </p><h2 id="4-6-节点亲和性"><a href="#4-6-节点亲和性" class="headerlink" title="4.6 节点亲和性"></a>4.6 节点亲和性</h2><p>每个 PV 卷可以通过设置 节点亲和性来定义一些约束，进而限制从哪些节点上可以访问此卷。 使用这些卷的 Pod 只会被调度到节点亲和性规则所选择的节点上执行。 volumenodeaffinity</p><h2 id="4-7-PV-卷阶段状态"><a href="#4-7-PV-卷阶段状态" class="headerlink" title="4.7 PV 卷阶段状态"></a>4.7 PV 卷阶段状态</h2><ul><li><p>Available – 资源尚未被claim 使用</p></li><li><p>Bound – 卷已经被绑定到claim 了</p></li><li><p>Released – claim 被删除，卷处于释放状态，但未被集群回收。</p></li><li><p>Failed – 卷自动回收失败</p></li></ul><h1 id="5-PersistentVolumeClaims"><a href="#5-PersistentVolumeClaims" class="headerlink" title="5 PersistentVolumeClaims"></a>5 PersistentVolumeClaims</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myclaim</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">accessModes:</span> <span class="hljs-comment">#访问模式</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">volumeMode:</span> <span class="hljs-string">Filesystem</span> <span class="hljs-comment">#卷模式</span><br>  <span class="hljs-attr">resources:</span> <span class="hljs-comment">#资源</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">8Gi</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">slow</span><br>  <span class="hljs-attr">selector:</span> <span class="hljs-comment">#选择</span><br>    <span class="hljs-attr">matchLabels:</span> <span class="hljs-comment">#标签匹配</span><br>      <span class="hljs-attr">release:</span> <span class="hljs-string">&quot;stable&quot;</span><br>    <span class="hljs-attr">matchExpressions:</span><br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">key:</span> <span class="hljs-string">environment</span>, <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span>, <span class="hljs-attr">values:</span> [<span class="hljs-string">dev</span>]&#125;<br></code></pre></td></tr></table></figure><p><strong>访问模式</strong></p><p>申领在请求具有特定访问模式的存储时，使用与卷相同的访问模式</p><p><strong>卷模式</strong></p><p>申领使用与卷相同的约定来表明是将卷作为文件系统还是块设备来使用。</p><p><strong>资源</strong></p><p>申领和 Pod 一样，也可以请求特定数量的资源。在这个上下文中，请求的资源是存储。 卷和申领都使用相同的资源模型。</p><p><strong>选择算符</strong></p><p>申领可以设置标签选择算符来进一步过滤卷集合。只有标签与选择算符相匹配的卷能够绑定到申领上。 选择算符包含两个字段：</p><ul><li><code>matchLabels</code> - 卷必须包含带有此值的标签</li><li><code>matchExpressions</code> - 通过设定键（key）、值列表和操作符（operator） 来构造的需求。合法的操作符有 In、NotIn、Exists 和 DoesNotExist。</li></ul><p>来自 <code>matchLabels</code> 和 <code>matchExpressions</code> 的所有需求都按逻辑与的方式组合在一起。 这些需求都必须被满足才被视为匹配。</p><p><strong>类</strong></p><p>申领可以通过为 <code>storageClassName</code> 属性设置 StorageClass的名称来请求特定的存储类。 只有所请求的类的 PV 卷，即 <code>storageClassName</code> 值与 PVC 设置相同的 PV 卷， 才能绑定到 PVC 申领。</p><p>PVC 申领不必一定要请求某个类。如果 PVC 的 <code>storageClassName</code> 属性值设置为 <code>&quot;&quot;</code>， 则被视为要请求的是没有设置存储类的 PV 卷，因此这一 PVC 申领只能绑定到未设置存储类的 PV 卷（未设置注解或者注解值为 <code>&quot;&quot;</code> 的 PersistentVolume（PV）对象在系统中不会被删除， 因为这样做可能会引起数据丢失。未设置 <code>storageClassName</code> 的 PVC 与此大不相同， 也会被集群作不同处理。具体筛查方式取决于 <a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/admission-controllers/#defaultstorageclass"><code>DefaultStorageClass</code> 准入控制器插件</a> 是否被启用。</p><ul><li>如果准入控制器插件被启用，则管理员可以设置一个默认的 StorageClass。 所有未设置 <code>storageClassName</code> 的 PVC 都只能绑定到隶属于默认存储类的 PV 卷。 设置默认 StorageClass 的工作是通过将对应 StorageClass 对象的注解 <code>storageclass.kubernetes.io/is-default-class</code> 赋值为 <code>true</code> 来完成的。 如果管理员未设置默认存储类，集群对 PVC 创建的处理方式与未启用准入控制器插件时相同。 如果设定的默认存储类不止一个，准入控制插件会禁止所有创建 PVC 操作。</li><li>如果准入控制器插件被关闭，则不存在默认 StorageClass 的说法。 所有未设置 <code>storageClassName</code> 的 PVC 都只能绑定到未设置存储类的 PV 卷。 在这种情况下，未设置 <code>storageClassName</code> 的 PVC 与 <code>storageClassName</code> 设置为 <code>&quot;&quot;</code> 的 PVC 的处理方式相同。</li></ul><p>取决于安装方法，默认的 StorageClass 可能在集群安装期间由插件管理器（Addon Manager）部署到集群中。</p><p>当某 PVC 除了请求 StorageClass 之外还设置了 <code>selector</code>，则这两种需求会按逻辑与关系处理： 只有隶属于所请求类且带有所请求标签的 PV 才能绑定到 PVC。</p><p><strong>说明：</strong> 目前，设置了非空 <code>selector</code> 的 PVC 对象无法让集群为其动态制备 PV 卷。</p><p>早前，Kubernetes 使用注解 <code>volume.beta.kubernetes.io/storage-class</code> 而不是 <code>storageClassName</code> 属性。这一注解目前仍然起作用，不过在将来的 Kubernetes 发布版本中该注解会被彻底废弃。</p><h1 id="6-使用申领作为卷"><a href="#6-使用申领作为卷" class="headerlink" title="6 使用申领作为卷"></a>6 使用申领作为卷</h1><p>Pod 将申领作为卷来使用，并藉此访问存储资源。 申领必须位于使用它的 Pod 所在的同一名字空间内。 集群在 Pod 的名字空间中查找申领，并使用它来获得申领所使用的 PV 卷。 之后，卷会被挂载到宿主上并挂载到 Pod 中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mypod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myfrontend</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>      <span class="hljs-attr">volumeMounts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/var/www/html&quot;</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">mypd</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mypd</span><br>      <span class="hljs-attr">persistentVolumeClaim:</span><br>        <span class="hljs-attr">claimName:</span> <span class="hljs-string">myclaim</span><br></code></pre></td></tr></table></figure><h3 id="关于名字空间的说明"><a href="#关于名字空间的说明" class="headerlink" title="关于名字空间的说明"></a>关于名字空间的说明</h3><p>PersistentVolume 卷的绑定是排他性的。 由于 PersistentVolumeClaim 是名字空间作用域的对象，使用 “Many” 模式（<code>ROX</code>、<code>RWX</code>）来挂载申领的操作只能在同一名字空间内进行。</p><h3 id="类型为-hostpath-的-PersistentVolume"><a href="#类型为-hostpath-的-PersistentVolume" class="headerlink" title="类型为 hostpath 的 PersistentVolume"></a>类型为 <code>hostpath</code> 的 PersistentVolume</h3><p><code>hostPath</code> PersistentVolume 使用节点上的文件或目录来模拟网络附加（network-attached）存储。 相关细节可参阅<a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume"><code>hostPath</code> 卷示例</a>。</p><h2 id="原始块卷支持"><a href="#原始块卷支持" class="headerlink" title="原始块卷支持"></a>原始块卷支持</h2><p><strong>特性状态：</strong> <code>Kubernetes v1.18 [stable]</code></p><p>以下卷插件支持原始块卷，包括其动态制备（如果支持的话）的卷：</p><ul><li>AWSElasticBlockStore</li><li>AzureDisk</li><li>CSI</li><li>FC （光纤通道）</li><li>GCEPersistentDisk</li><li>iSCSI</li><li>Local 卷</li><li>OpenStack Cinder</li><li>RBD （Ceph 块设备）</li><li>VsphereVolume</li></ul><h1 id="7使用原始块卷的持久卷"><a href="#7使用原始块卷的持久卷" class="headerlink" title="7使用原始块卷的持久卷"></a>7使用原始块卷的持久卷</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">block-pv</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">volumeMode:</span> <span class="hljs-string">Block</span><br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Retain</span><br>  <span class="hljs-attr">fc:</span><br>    <span class="hljs-attr">targetWWNs:</span> [<span class="hljs-string">&quot;50060e801049cfd1&quot;</span>]<br>    <span class="hljs-attr">lun:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="申请原始块卷的-PVC-申领"><a href="#申请原始块卷的-PVC-申领" class="headerlink" title="申请原始块卷的 PVC 申领"></a>申请原始块卷的 PVC 申领</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">block-pvc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">volumeMode:</span> <span class="hljs-string">Block</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br></code></pre></td></tr></table></figure><h3 id="在容器中添加原始块设备路径的-Pod-规约"><a href="#在容器中添加原始块设备路径的-Pod-规约" class="headerlink" title="在容器中添加原始块设备路径的 Pod 规约"></a>在容器中添加原始块设备路径的 Pod 规约</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod-with-block-volume</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">fc-container</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">fedora:26</span><br>      <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>]<br>      <span class="hljs-attr">args:</span> [ <span class="hljs-string">&quot;tail -f /dev/null&quot;</span> ]<br>      <span class="hljs-attr">volumeDevices:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>          <span class="hljs-attr">devicePath:</span> <span class="hljs-string">/dev/xvda</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>      <span class="hljs-attr">persistentVolumeClaim:</span><br>        <span class="hljs-attr">claimName:</span> <span class="hljs-string">block-pvc</span><br></code></pre></td></tr></table></figure><p><strong>说明：</strong> 向 Pod 中添加原始块设备时，你要在容器内设置设备路径而不是挂载路径。</p><h3 id="绑定块卷"><a href="#绑定块卷" class="headerlink" title="绑定块卷"></a>绑定块卷</h3><p>如果用户通过 PersistentVolumeClaim 规约的 <code>volumeMode</code> 字段来表明对原始块设备的请求， 绑定规则与之前版本中未在规约中考虑此模式的实现略有不同。 下面列举的表格是用户和管理员可以为请求原始块设备所作设置的组合。 此表格表明在不同的组合下卷是否会被绑定。</p><p>静态制备卷的卷绑定矩阵：</p><table><thead><tr><th>PV volumeMode</th><th>PVC volumeMode</th><th>Result</th></tr></thead><tbody><tr><td>未指定</td><td>未指定</td><td>绑定</td></tr><tr><td>未指定</td><td>Block</td><td>不绑定</td></tr><tr><td>未指定</td><td>Filesystem</td><td>绑定</td></tr><tr><td>Block</td><td>未指定</td><td>不绑定</td></tr><tr><td>Block</td><td>Block</td><td>绑定</td></tr><tr><td>Block</td><td>Filesystem</td><td>不绑定</td></tr><tr><td>Filesystem</td><td>Filesystem</td><td>绑定</td></tr><tr><td>Filesystem</td><td>Block</td><td>不绑定</td></tr><tr><td>Filesystem</td><td>未指定</td><td>绑定</td></tr></tbody></table><p><strong>说明：</strong> Alpha 发行版本中仅支持静态制备的卷。 管理员需要在处理原始块设备时小心处理这些值。</p><h1 id="8-对卷快照及从卷快照中恢复卷的支持"><a href="#8-对卷快照及从卷快照中恢复卷的支持" class="headerlink" title="8 对卷快照及从卷快照中恢复卷的支持"></a>8 对卷快照及从卷快照中恢复卷的支持</h1><p><strong>特性状态：</strong> <code>Kubernetes v1.20 [stable]</code></p><p>卷快照（Volume Snapshot）仅支持树外 CSI 卷插件。 有关细节可参阅<a href="https://kubernetes.io/zh-cn/docs/concepts/storage/volume-snapshots/">卷快照</a>文档。 树内卷插件被弃用。你可以查阅<a href="https://git.k8s.io/community/sig-storage/volume-plugin-faq.md">卷插件 FAQ</a> 了解已弃用的卷插件。</p><h3 id="基于卷快照创建-PVC-申领"><a href="#基于卷快照创建-PVC-申领" class="headerlink" title="基于卷快照创建 PVC 申领"></a>基于卷快照创建 PVC 申领</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">restore-pvc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">csi-hostpath-sc</span><br>  <span class="hljs-attr">dataSource:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">new-snapshot-test</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">VolumeSnapshot</span><br>    <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">snapshot.storage.k8s.io</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br></code></pre></td></tr></table></figure><h1 id="9-卷克隆"><a href="#9-卷克隆" class="headerlink" title="9 卷克隆"></a>9 卷克隆</h1><p>卷克隆功能特性仅适用于 CSI 卷插件。</p><h3 id="基于现有-PVC-创建新的-PVC-申领"><a href="#基于现有-PVC-创建新的-PVC-申领" class="headerlink" title="基于现有 PVC 创建新的 PVC 申领"></a>基于现有 PVC 创建新的 PVC 申领</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cloned-pvc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">my-csi-plugin</span><br>  <span class="hljs-attr">dataSource:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">existing-src-pvc-name</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br></code></pre></td></tr></table></figure><h1 id="10-卷填充器（Populator）与数据源"><a href="#10-卷填充器（Populator）与数据源" class="headerlink" title="10 卷填充器（Populator）与数据源"></a>10 卷填充器（Populator）与数据源</h1><p><strong>特性状态：</strong> <code>Kubernetes v1.24 [beta]</code></p><p>Kubernetes 支持自定义的卷填充器。要使用自定义的卷填充器，你必须为 kube-apiserver 和 kube-controller-manager 启用 <code>AnyVolumeDataSource</code> 特性门控。</p><p>卷填充器利用了 PVC 规约字段 <code>dataSourceRef</code>。 不像 <code>dataSource</code> 字段只能包含对另一个持久卷申领或卷快照的引用， <code>dataSourceRef</code> 字段可以包含对同一命名空间中任何对象的引用（不包含除 PVC 以外的核心资源）。 对于启用了特性门控的集群，使用 <code>dataSourceRef</code> 比 <code>dataSource</code> 更好。</p><h2 id="数据源引用"><a href="#数据源引用" class="headerlink" title="数据源引用"></a>数据源引用</h2><p><code>dataSourceRef</code> 字段的行为与 <code>dataSource</code> 字段几乎相同。 如果其中一个字段被指定而另一个字段没有被指定，API 服务器将给两个字段相同的值。 这两个字段都不能在创建后改变，如果试图为这两个字段指定不同的值，将导致验证错误。 因此，这两个字段将总是有相同的内容。</p><p>在 <code>dataSourceRef</code> 字段和 <code>dataSource</code> 字段之间有两个用户应该注意的区别：</p><ul><li><code>dataSource</code> 字段会忽略无效的值（如同是空值）， 而 <code>dataSourceRef</code> 字段永远不会忽略值，并且若填入一个无效的值，会导致错误。 无效值指的是 PVC 之外的核心对象（没有 apiGroup 的对象）。</li><li><code>dataSourceRef</code> 字段可以包含不同类型的对象，而 <code>dataSource</code> 字段只允许 PVC 和卷快照。</li></ul><p>用户应该始终在启用了特性门控的集群上使用 <code>dataSourceRef</code>，而在没有启用特性门控的集群上使用 <code>dataSource</code>。 在任何情况下都没有必要查看这两个字段。 这两个字段的值看似相同但是语义稍微不一样，是为了向后兼容。 特别是混用旧版本和新版本的控制器时，它们能够互通。</p><h2 id="使用卷填充器"><a href="#使用卷填充器" class="headerlink" title="使用卷填充器"></a>使用卷填充器</h2><p>卷填充器是能创建非空卷的<a href="https://kubernetes.io/zh-cn/docs/concepts/architecture/controller/">控制器</a>， 其卷的内容通过一个自定义资源决定。 用户通过使用 <code>dataSourceRef</code> 字段引用自定义资源来创建一个被填充的卷：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">populated-pvc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">dataSourceRef:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">example-name</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">ExampleDataSource</span><br>    <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">example.storage.k8s.io</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br></code></pre></td></tr></table></figure><p>因为卷填充器是外部组件，如果没有安装所有正确的组件，试图创建一个使用卷填充器的 PVC 就会失败。 外部控制器应该在 PVC 上产生事件，以提供创建状态的反馈，包括在由于缺少某些组件而无法创建 PVC 的情况下发出警告。</p><p>你可以把 alpha 版本的<a href="https://github.com/kubernetes-csi/volume-data-source-validator">卷数据源验证器</a> 控制器安装到你的集群中。 如果没有填充器处理该数据源的情况下，该控制器会在 PVC 上产生警告事件。 当一个合适的填充器被安装到 PVC 上时，该控制器的职责是上报与卷创建有关的事件，以及在该过程中发生的问题。</p><h2 id="编写可移植的配置"><a href="#编写可移植的配置" class="headerlink" title="编写可移植的配置"></a>编写可移植的配置</h2><p>如果你要编写配置模板和示例用来在很多集群上运行并且需要持久性存储，建议你使用以下模式：</p><ul><li><p>将 PersistentVolumeClaim 对象包含到你的配置包（Bundle）中，和 Deployment 以及 ConfigMap 等放在一起。</p></li><li><p>不要在配置中包含 PersistentVolume 对象，因为对配置进行实例化的用户很可能 没有创建 PersistentVolume 的权限。</p></li><li><p>为用户提供在实例化模板时指定存储类名称的能力。</p><p>仍按用户提供存储类名称，将该名称放到 <code>persistentVolumeClaim.storageClassName</code> 字段中。 这样会使得 PVC 在集群被管理员启用了存储类支持时能够匹配到正确的存储类，</p><p>如果用户未指定存储类名称，将 <code>persistentVolumeClaim.storageClassName</code> 留空（nil）。 这样，集群会使用默认 <code>StorageClass</code> 为用户自动制备一个存储卷。 很多集群环境都配置了默认的 <code>StorageClass</code>，或者管理员也可以自行创建默认的 <code>StorageClass</code>。</p></li><li><p>在你的工具链中，监测经过一段时间后仍未被绑定的 PVC 对象，要让用户知道这些对象， 因为这可能意味着集群不支持动态存储（因而用户必须先创建一个匹配的 PV），或者 集群没有配置存储系统（因而用户无法配置需要 PVC 的工作负载配置）。</p></li></ul><h1 id="11-StorageClasses"><a href="#11-StorageClasses" class="headerlink" title="11 StorageClasses"></a>11 StorageClasses</h1><p>每个StorageClass包含字段provisioninger和参数，当属于类的PersistentVolume需要动态配置时使用。 </p><p>StorageClass对象的名称很重要，用户可以如何请求特定的类。 管理员在首次创建StorageClass对象时设置类的名称和其他参数，并且在创建对象后无法更新对象。 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">standard</span><br><span class="hljs-attr">provisioner:</span> <span class="hljs-string">kubernetes.io/aws-ebs</span> <span class="hljs-comment"># 存储类有一个供应商，它确定用于配置PV的卷插件。 必须指定此字段。</span><br><span class="hljs-attr">parameters:</span> <span class="hljs-comment"># 存储类具有描述属于存储类的卷的参数。</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">gp2</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Provisioner</td><td>string</td><td>存储类有一个供应商，它确定用于配置PV的卷插件。 必须指定此字段</td></tr><tr><td>parameters</td><td>object</td><td>存储类具有描述属于存储类的卷的参数。 取决于供应商，可以接受不同的参数。</td></tr></tbody></table><h1 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h1><p><a href="https://kubernetes.io/zh/docs/concepts/storage/persistent-volumes">官方文档持久卷</a></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>spec.nfs</td><td>object</td><td>nfs服务器</td></tr><tr><td>spec.nfs.path</td><td>string</td><td>挂载路径</td></tr><tr><td>spec.nfs.server</td><td>string</td><td>nfs服务器地址</td></tr><tr><td>spec.volumeMode</td><td>string</td><td>Filesystem（文件系统）<code>和</code>Block（块）</td></tr><tr><td>spec.volumeName</td><td>string</td><td>pv</td></tr><tr><td>spec.accessModes</td><td>list</td><td>访问模式</td></tr><tr><td>spec.capacity</td><td>object</td><td>通常，PV将具有特定的存储容量。 这是使用PV的容量属性设置的。</td></tr><tr><td>spec.capacity.storage</td><td>string</td><td>使用PV的容量属性设置</td></tr><tr><td>spec.persistentVolumeReclaimPolicy</td><td>string</td><td>回收策略     保留（Retain），回收（Recycle）和删除（Delete）。</td></tr><tr><td>spec.storageClassName</td><td>string</td><td>通过将storageClassName属性设置为StorageClass的名称来指定。 特定类的PV只能绑定到请求该类的PVC。 没有storageClassName的PV没有类，只能绑定到不需要特定类的PVC。                 注：使用了(过去)注释volume.beta.kubernetes.io/storage-class 仍然可用，不建议</td></tr><tr><td>spec.gcePersistentDisk</td><td>object</td><td>gcePersistentDisk  持久卷</td></tr><tr><td>spec.gcePersistentDisk.fsType</td><td>string</td><td>文件系统类型 ext4 ext3</td></tr><tr><td>spec.gcePersistentDisk.pdName</td><td>string</td><td>gcePersistentDisk 名称</td></tr><tr><td>spec.resources</td><td>object</td><td>声明（如pod）可以请求特定数量的资源。</td></tr><tr><td>spec.resources.requests</td><td>object</td><td>可以请求特定数量的资源</td></tr><tr><td>spec.resources.requests.storage</td><td>string</td><td>存储限制 单位MIB ,GIB</td></tr><tr><td>spec.volumes[]</td><td>list</td><td>在该pod上定义的共享存储卷列表</td></tr><tr><td>spec.volumes[].name</td><td>string</td><td></td></tr><tr><td>spec.volumes[].persistentVolumeClaim</td><td>object</td><td>命名空间对象</td></tr><tr><td>spec.volumes[].persistentVolumeClaim.claimName</td><td>string</td><td>PersistentVolumeClaim name</td></tr><tr><td>spec.volumeMounts[]</td><td>list</td><td>指定容器内部的存储卷配置</td></tr><tr><td>spec.volumeMounts[].name</td><td>string</td><td>名称</td></tr><tr><td>spec.volumeMounts[].mountPath</td><td>string</td><td>挂载路径</td></tr><tr><td>metadata.annotations</td><td>object</td><td>持久卷上的注释</td></tr><tr><td>metadata.annotations.volume.beta.kubernetes.io/ mount-options</td><td>string</td><td>使用持久卷上的注释volume.beta.kubernetes.io/mount-options来指定安装选项</td></tr><tr><td>spec.selector</td><td>object</td><td>标签选择器</td></tr><tr><td>spec.selector.matchLabels</td><td></td><td>卷必须具有带此值的标签 key: value</td></tr><tr><td>spec.selector.matchExpressions[]</td><td></td><td>通过指定关键字和值的关键字，值列表和运算符所做的要求列表。 有效运算符包括In，NotIn，Exists和DoesNotExist</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernates 之 Secret</title>
    <link href="/2021/08/24/k8s/persistence/kubernates%20%E4%B9%8B%20Secret/"/>
    <url>/2021/08/24/k8s/persistence/kubernates%20%E4%B9%8B%20Secret/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Secret-存在意义"><a href="#一、Secret-存在意义" class="headerlink" title="一、Secret 存在意义"></a>一、Secret 存在意义</h1><p>Secret 解决了密码、token、密钥等敏感数据的配置问题,而不需要把这些敏感数据暴露到镜像或者Pod Spec中。Secret 可以以Volume或者环境变量的方式使用</p><h1 id="二、Secret有三种类型"><a href="#二、Secret有三种类型" class="headerlink" title="二、Secret有三种类型"></a>二、Secret有三种类型</h1><p>Service Account</p><p>用来访 Kubernetes API, 由Kubernetes 自动创建,并且会自动挂载到Pod的/run/secrets/kubernetes.io/serviceaccount 目录中</p><p>Opaque </p><p>base64编码格式的Secret,用来存储密码、密钥等</p><p>kubernetes.io/dockerconfigjson</p><p>用来存储私有 docker registry 的认证信息</p><h2 id="2-1-Service-Account"><a href="#2-1-Service-Account" class="headerlink" title="2.1 Service Account"></a>2.1 Service Account</h2><p>Service Account 用来访 Kubernetes API, 由Kubernetes 自动创建,并且会自动挂载到Pod的/run/secrets/kubernetes.io/serviceaccount 目录中</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">[root@k8s-master01 secret]<span class="hljs-comment"># kubectl run nginx --image harborcloud.com/library/nginx:1.9.1</span><br>pod/nginx created<br>[root@k8s-master01 secret]<span class="hljs-comment"># kubectl get pods</span><br>NAME    READY   STATUS    RESTARTS   AGE<br>nginx   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">12</span>s<br>[root@k8s-master01 secret]<span class="hljs-comment"># kubectl exec nginx ls /run/secrets/kubernetes.io/serviceaccount  </span><br>kubectl <span class="hljs-keyword">exec</span> [POD] [COMMAND] is DEPRECATED <span class="hljs-keyword">and</span> will be removed in a future version. Use kubectl <span class="hljs-keyword">exec</span> [POD] -- [COMMAND] instead.<br>ca.crt<br>namespace<br>token<br></code></pre></td></tr></table></figure><h2 id="2-2-Opaque-Secret"><a href="#2-2-Opaque-Secret" class="headerlink" title="2.2 Opaque Secret"></a>2.2 Opaque Secret</h2><h3 id="1、创建说明"><a href="#1、创建说明" class="headerlink" title="1、创建说明"></a>1、创建说明</h3><p>Opaque 类型的数据是一个map类型,要求value是base64编码格式:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-master01 secret]<span class="hljs-meta"># echo -n <span class="hljs-string">&quot;admin&quot;</span>|base64 #账号</span><br>YWRtaW4=<br>[root<span class="hljs-symbol">@k8s</span>-master01 secret]<span class="hljs-meta"># echo -n <span class="hljs-string">&quot;admin&quot;</span>|base64 #密码</span><br>YWRtaW4=<br></code></pre></td></tr></table></figure><p>secrets.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Secret</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysecret</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">Opaque</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">YWRtaW4=</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">YWRtaW4=</span><br></code></pre></td></tr></table></figure><h3 id="2、使用方式"><a href="#2、使用方式" class="headerlink" title="2、使用方式"></a>2、使用方式</h3><p>2.1、将Secret挂载到Volume中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">seret-test</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">seret-test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secrets</span><br>    <span class="hljs-attr">secret:</span><br>      <span class="hljs-attr">secretName:</span> <span class="hljs-string">mysecret</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/myapp:v1.23</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">secrets</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&#x27;/etc/secret&#x27;</span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>2.2、将Secret导出到环境变量中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">pod-deployment</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">pod-deployment</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">pod-1</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/myapp:v1.23</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">TEST_USER</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">secretKeyRef:</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">mysecret</span> <br>              <span class="hljs-attr">key:</span> <span class="hljs-string">username</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">TEST_PASSWORD</span><br>          <span class="hljs-attr">valueFrom:</span><br>            <span class="hljs-attr">secretKeyRef:</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">mysecret</span><br>              <span class="hljs-attr">key:</span> <span class="hljs-string">password</span><br></code></pre></td></tr></table></figure><h2 id="2-3-kubernetes-io-dockerconfigjson"><a href="#2-3-kubernetes-io-dockerconfigjson" class="headerlink" title="2.3 kubernetes.io/dockerconfigjson"></a>2.3 kubernetes.io/dockerconfigjson</h2><p>使用Kuberctl 创建 docker registry 认证的secret</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl create<span class="hljs-built_in"> secret </span>docker-registry myregistrykey <span class="hljs-attribute">--docker-server</span>=DOCKER_REGISTRY_SERVER <span class="hljs-attribute">-docker-username</span>=DOCKER_USER <span class="hljs-attribute">--docker-password</span>=DOCKER_PASSWORD <span class="hljs-attribute">--docker-email</span>=DOCKER_EMAIL<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master01 secret]# kubectl create<span class="hljs-built_in"> secret </span>docker-registry myregistrykey <span class="hljs-attribute">--docker-server</span>=harborcloud.com <span class="hljs-attribute">--docker-username</span>=admin <span class="hljs-attribute">--docker-password</span>=Harbor12345 <span class="hljs-attribute">--docker-email</span>=leelun@sina.cn<br>secret/myregistrykey created<br></code></pre></td></tr></table></figure><h3 id="1-公共镜像的pod"><a href="#1-公共镜像的pod" class="headerlink" title="1 公共镜像的pod"></a>1 公共镜像的pod</h3><p>未设置认证secret创建pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">foo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">foo</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/newland/myapp:1.9.1</span><br></code></pre></td></tr></table></figure><p>未设置认证secret的结果</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pf">[root@k8s-master01 secret]<span class="hljs-comment"># kubectl get pods</span><br>NAME                             READY   STATUS         RESTARTS   AGE<br>foo                              <span class="hljs-number">0</span>/<span class="hljs-number">1</span>     ErrImagePull   <span class="hljs-number">0</span>          <span class="hljs-number">4</span>s<br>[root@k8s-master01 secret]<span class="hljs-comment"># kubectl describe pod foo</span><br>Events:<br>  Type     Reason     Age                            From               Message<br>  ----     ------     ----                           ----               -------<br>  Normal   Scheduled  <span class="hljs-number">26</span>s                            default-scheduler  Successfully assigned <span class="hljs-keyword">default</span>/foo <span class="hljs-keyword">to</span> k8s-node02<br>  Normal   BackOff    <span class="hljs-variable">&lt;invalid&gt;</span>                      kubelet            Back-off pulling image <span class="hljs-string">&quot;harborcloud.com/newland/myapp:1.9.1&quot;</span><br>  Warning  Failed     <span class="hljs-variable">&lt;invalid&gt;</span>                      kubelet            Error: ImagePullBackOff<br>  Normal   Pulling    <span class="hljs-variable">&lt;invalid&gt;</span> (x2 over <span class="hljs-variable">&lt;invalid&gt;</span>)  kubelet            Pulling image <span class="hljs-string">&quot;harborcloud.com/newland/myapp:1.9.1&quot;</span><br>  Warning  Failed     <span class="hljs-variable">&lt;invalid&gt;</span> (x2 over <span class="hljs-variable">&lt;invalid&gt;</span>)  kubelet            Failed <span class="hljs-keyword">to</span> pull image <span class="hljs-string">&quot;harborcloud.com/newland/myapp:1.9.1&quot;</span>: rpc error: code = Unknown desc = Error response <span class="hljs-keyword">from</span> daemon: unauthorized: unauthorized <span class="hljs-keyword">to</span> access repository: newland/myapp, action: pull: unauthorized <span class="hljs-keyword">to</span> access repository: newland/myapp, action: pull<br>  Warning  Failed     <span class="hljs-variable">&lt;invalid&gt;</span> (x2 over <span class="hljs-variable">&lt;invalid&gt;</span>)  kubelet            Error: ErrImagePull<br></code></pre></td></tr></table></figure><h3 id="2-私有镜像"><a href="#2-私有镜像" class="headerlink" title="2 私有镜像"></a>2 私有镜像</h3><p>在创建Pod 的时候,通过imagePullSecrets来引用刚创建的’myregistrykey)</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">foo</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">containers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: foo</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">harborcloud.com/newland/myapp:1.9.1</span><br>  <span class="hljs-attribute">imagePullSecrets</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: myregistrykey</span><br></code></pre></td></tr></table></figure><p>创建并查询结果</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@k8s-master01</span> secret]<span class="hljs-comment"># kubectl create -f pod-secret-image.yaml </span><br>pod/foo created<br>[root<span class="hljs-meta">@k8s-master01</span> secret]<span class="hljs-comment"># kubectl get pod</span><br>NAME                             READY   STATUS    RESTARTS   AGE<br>foo                              1/1     Running   0          4s<br>[root<span class="hljs-meta">@k8s-master01</span> secret]<span class="hljs-comment"># kubectl describe pod foo</span><br>Events:<br>  Type    Reason     Age        From               Message<br>  ----    ------     ----       ----               -------<br>  Normal  Scheduled  43s        default-scheduler  Successfully assigned default/foo to k8s-node02<br>  Normal  Pulling    <span class="hljs-variable">&lt;invalid&gt;</span>  kubelet            Pulling image <span class="hljs-string">&quot;harborcloud.com/newland/myapp:1.9.1&quot;</span><br>  Normal  Pulled     <span class="hljs-variable">&lt;invalid&gt;</span>  kubelet            Successfully pulled image <span class="hljs-string">&quot;harborcloud.com/newland/myapp:1.9.1&quot;</span> in 1.289816846s<br>  Normal  Created    <span class="hljs-variable">&lt;invalid&gt;</span>  kubelet            Created container foo<br>  Normal  Started    <span class="hljs-variable">&lt;invalid&gt;</span>  kubelet            Started container foo<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s pvc作为存储的简单示例</title>
    <link href="/2021/08/23/k8s/persistence/k8s%20pvc%E4%BD%9C%E4%B8%BA%E5%AD%98%E5%82%A8%E7%9A%84%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/"/>
    <url>/2021/08/23/k8s/persistence/k8s%20pvc%E4%BD%9C%E4%B8%BA%E5%AD%98%E5%82%A8%E7%9A%84%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、pod直接使用pvc"><a href="#一、pod直接使用pvc" class="headerlink" title="一、pod直接使用pvc"></a>一、pod直接使用pvc</h1><p>Pod 使用 PersistentVolumeClaim 作为存储:</p><ol><li>创建由物理存储支持的 PersistentVolume，未与任何 Pod 关联。</li><li>创建一个 PersistentVolumeClaim， 它将自动绑定到合适的 PersistentVolume。</li><li>创建一个使用 PersistentVolumeClaim 作为存储的 Pod。</li></ol><h2 id="1-1-创建-PersistentVolume"><a href="#1-1-创建-PersistentVolume" class="headerlink" title="1.1 创建 PersistentVolume"></a>1.1 创建 PersistentVolume</h2><p>创建一个 <em>hostPath</em> 类型的 PersistentVolume。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">task-pv-volume</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">local</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">manual</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">hostPath:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;/data&quot;</span><br></code></pre></td></tr></table></figure><p>执行 ：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima"># 执行上面的清单配置<span class="hljs-built_in">pv</span><br>$ kubectl <span class="hljs-built_in">apply</span> -f <span class="hljs-built_in">pv</span>-volume.yaml<br>$ kubectl <span class="hljs-built_in">get</span> <span class="hljs-built_in">pv</span> task-<span class="hljs-built_in">pv</span>-volume<br>NAME             CAPACITY   ACCESSMODES   RECLAIMPOLICY   STATUS      CLAIM     STORAGECLASS   REASON    AGE<br>task-<span class="hljs-built_in">pv</span>-volume   10Gi       RWO           Retain          Available             manual                   4s<br></code></pre></td></tr></table></figure><p>输出结果显示该 PersistentVolume 的<code>状态（STATUS）</code> 为 <code>Available</code>。 这意味着它还没有被绑定给 PersistentVolumeClaim。</p><h2 id="1-2-创建-PersistentVolumeClaim"><a href="#1-2-创建-PersistentVolumeClaim" class="headerlink" title="1.2 创建 PersistentVolumeClaim"></a>1.2 创建 PersistentVolumeClaim</h2><p>创建一个 PersistentVolumeClaim，它请求至少 3 GB 容量的卷， 该卷至少可以为一个节点提供读写访问。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">task-pv-claim</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">manual</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">3Gi</span><br></code></pre></td></tr></table></figure><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl create -f pv-claim.yaml</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">现在输出的 STATUS 为 Bound。</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get pv task-pv-volume</span><br>NAME             CAPACITY   ACCESSMODES   RECLAIMPOLICY   STATUS    CLAIM                   STORAGECLASS   REASON    AGE<br>task-pv-volume   10Gi       RWO           Retain          Bound     default/task-pv-claim   manual                   2m<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get pvc task-pv-claim</span><br>NAME            STATUS    VOLUME           CAPACITY   ACCESSMODES   STORAGECLASS   AGE<br>task-pv-claim   Bound     task-pv-volume   10Gi       RWO           manual         30s<br></code></pre></td></tr></table></figure><p>输出结果表明该 PersistentVolumeClaim 绑定了你的 PersistentVolume <code>task-pv-volume</code>。</p><p>创建 PersistentVolumeClaim 之后，Kubernetes 控制平面将查找满足申领要求的 PersistentVolume。 如果控制平面找到具有相同 StorageClass 的适当的 PersistentVolume， 则将 PersistentVolumeClaim 绑定到该 PersistentVolume 上。</p><p>匹配原则：</p><ul><li>比较storageClassName是否相同</li><li>比较accessModes是否相同</li><li>比较storage是否满足</li></ul><h2 id="1-3-创建-Pod"><a href="#1-3-创建-Pod" class="headerlink" title="1.3 创建 Pod"></a>1.3 创建 Pod</h2><p>创建一个 Pod， 该 Pod 使用你的 PersistentVolumeClaim 作为存储卷。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">task-pv-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">task-pv-storage</span><br>      <span class="hljs-attr">persistentVolumeClaim:</span><br>        <span class="hljs-attr">claimName:</span> <span class="hljs-string">task-pv-claim</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">task-pv-container</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br>      <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;http-server&quot;</span><br>      <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/usr/share/nginx/html&quot;</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">task-pv-storage</span><br></code></pre></td></tr></table></figure><p>执行：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">kubectl <span class="hljs-built_in">apply</span> -f <span class="hljs-built_in">pv</span>-pod.yaml<br></code></pre></td></tr></table></figure><p>打开一个 Shell 访问 Pod 中的容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kubectl exec -it task-pv-pod -- /bin/bash<br></code></pre></td></tr></table></figure><p>在 Shell 中，验证 nginx 是否正在从 hostPath 卷提供 <code>index.html</code> 文件：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 一定要在上一步 <span class="hljs-string">&quot;kubectl exec&quot;</span> 所返回的 Shell 中执行下面三个命令</span><br>root<span class="hljs-symbol">@task</span>-pv-pod:/<span class="hljs-meta"># apt-get update</span><br>root<span class="hljs-symbol">@task</span>-pv-pod:/<span class="hljs-meta"># apt-get install curl</span><br>root<span class="hljs-symbol">@task</span>-pv-pod:/<span class="hljs-meta"># curl localhost</span><br></code></pre></td></tr></table></figure><p>输出结果是你之前写到 hostPath 卷中的 <code>index.html</code> 文件中的内容：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Hello <span class="hljs-keyword">from</span> Kubernetes <span class="hljs-keyword">storage</span><br></code></pre></td></tr></table></figure><p>如果你看到此消息，则证明你已经成功地配置了 Pod 使用 PersistentVolumeClaim 的存储。</p><h2 id="1-4-清理"><a href="#1-4-清理" class="headerlink" title="1.4 清理"></a>1.4 清理</h2><p>删除 Pod、PersistentVolumeClaim 和 PersistentVolume 对象：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl delete pod task-pv-pod</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl delete pvc task-pv-claim</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl delete pv task-pv-volume</span><br></code></pre></td></tr></table></figure><p>清理顺序和创建顺序相反 pod-&gt;pvc-&gt;pv</p><p>在节点的 Shell 上，删除你所创建的目录和文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">rm</span> /data/index.html</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">rm</span> /data</span><br></code></pre></td></tr></table></figure><h2 id="1-5-在两个地方挂载相同的-persistentVolume"><a href="#1-5-在两个地方挂载相同的-persistentVolume" class="headerlink" title="1.5 在两个地方挂载相同的 persistentVolume"></a>1.5 在两个地方挂载相同的 persistentVolume</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>      <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-comment"># 网站数据挂载</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/nginx/html</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">html</span><br>        <span class="hljs-comment"># Nginx 配置挂载</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/nginx/nginx.conf</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">nginx.conf</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>      <span class="hljs-attr">persistentVolumeClaim:</span><br>        <span class="hljs-attr">claimName:</span> <span class="hljs-string">test-nfs-claim</span><br></code></pre></td></tr></table></figure><p>你可以在 nginx 容器上执行两个卷挂载:</p><p><code>/usr/share/nginx/html</code> 用于静态网站 <code>/etc/nginx/nginx.conf</code> 作为默认配置</p><h2 id="1-6-访问控制"><a href="#1-6-访问控制" class="headerlink" title="1.6 访问控制"></a>1.6 访问控制</h2><p>使用组 ID（GID）配置的存储仅允许 Pod 使用相同的 GID 进行写入。 GID 不匹配或缺失将会导致无权访问错误。 为了减少与用户的协调，管理员可以对 PersistentVolume 添加 GID 注解。 这样 GID 就能自动添加到使用 PersistentVolume 的任何 Pod 中。</p><p>使用 <code>pv.beta.kubernetes.io/gid</code> 注解的方法如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pv1</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">pv.beta.kubernetes.io/gid:</span> <span class="hljs-string">&quot;1234&quot;</span><br></code></pre></td></tr></table></figure><p>当 Pod 使用带有 GID 注解的 PersistentVolume 时，注解的 GID 会被应用于 Pod 中的所有容器， 应用的方法与 Pod 的安全上下文中指定的 GID 相同。 每个 GID，无论是来自 PersistentVolume 注解还是来自 Pod 规约，都会被应用于每个容器中 运行的第一个进程。</p><h1 id="二、有状态服务创建"><a href="#二、有状态服务创建" class="headerlink" title="二、有状态服务创建"></a>二、有状态服务创建</h1><h2 id="2-1-部署PV"><a href="#2-1-部署PV" class="headerlink" title="2.1 部署PV"></a>2.1 部署PV</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfspv</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">1Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Recycle</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">nfs</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/nfsdata</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfspv2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">5Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Recycle</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">nfs</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/nfsdata2</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfspv3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Recycle</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">nfs</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/nfsdata3</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br></code></pre></td></tr></table></figure><h2 id="2-2-statefulset创建并使用PVC"><a href="#2-2-statefulset创建并使用PVC" class="headerlink" title="2.2 statefulset创建并使用PVC"></a>2.2 statefulset创建并使用PVC</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">&quot;nginx&quot;</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">www</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/nginx/html</span><br>  <span class="hljs-attr">volumeClaimTemplates:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">www</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>      <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">&quot;nfs&quot;</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">requests:</span><br>          <span class="hljs-attr">storage:</span> <span class="hljs-string">1Gi</span>  <br></code></pre></td></tr></table></figure><h2 id="2-3-创建服务"><a href="#2-3-创建服务" class="headerlink" title="2.3 创建服务"></a>2.3 创建服务</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernates 之 configMap</title>
    <link href="/2021/08/23/k8s/persistence/kubernates%20%E4%B9%8B%20configMap/"/>
    <url>/2021/08/23/k8s/persistence/kubernates%20%E4%B9%8B%20configMap/</url>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>ConfigMap功能在Kubernetes1.2 版本中引入，许多应用程序会从配置文件、命令行参数或环境变量中读取配置信息。ConfigMap API给我们提供了向容器中注入配置信息的机制， ConfigMap可以被用来保存单个属性，也可以用来保存整个配置文件或者JSON二进制大对象</p><h1 id="二、ConfigMap-的创建"><a href="#二、ConfigMap-的创建" class="headerlink" title="二、ConfigMap 的创建"></a>二、ConfigMap 的创建</h1><h2 id="1、使用目录创建"><a href="#1、使用目录创建" class="headerlink" title="1、使用目录创建"></a>1、使用目录创建</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master01 k8s-yaml]# mkdir -p configmap/folder<br>[root@k8s-master01 k8s-yaml]# cd configmap/folder<br>[root@k8s-master01 folder]# vi game.properties<br><span class="hljs-attribute">enemies</span>=aliens<br><span class="hljs-attribute">1ives</span>=3<br>enemies.<span class="hljs-attribute">cheat</span>=<span class="hljs-literal">true</span><br>enemies.cheat.<span class="hljs-attribute">level</span>=noGoodRotten<br>secret.code.<span class="hljs-attribute">passphrase</span>=UUDDLRLRBABAS<br>secret.code.<span class="hljs-attribute">allowed</span>=<span class="hljs-literal">true</span><br>secret.code.<span class="hljs-attribute">lives</span>=30<br>[root@k8s-master01 folder]# vi ui.properties<br>color.<span class="hljs-attribute">good</span>=purple<br>color.<span class="hljs-attribute">bad</span>=yellow<br>allow.<span class="hljs-attribute">textmode</span>=<span class="hljs-literal">true</span><br>how.nice.<span class="hljs-keyword">to</span>.<span class="hljs-attribute">look</span>=fairlyNice<br>[root@k8s-master01 folder]# kubectl create configmap game-config <span class="hljs-attribute">--from-file</span>=../folder<br>configmap/game-config created<br></code></pre></td></tr></table></figure><p>–from-file指定在目录下的所有文件都会被用在ConfigMap里面创建一个键值对，键的名字就是文件名，值就是文件的内容</p><p>配置查看：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master01 folder]# kubectl <span class="hljs-built_in">get</span> cm game-config  -o yaml<br>apiVersion: v1<br>data:<br>  game.properties: |<br>    <span class="hljs-attribute">enemies</span>=aliens<br>    <span class="hljs-attribute">1ives</span>=3<br>    enemies.<span class="hljs-attribute">cheat</span>=<span class="hljs-literal">true</span><br>    enemies.cheat.<span class="hljs-attribute">level</span>=noGoodRotten<br>    secret. code. <span class="hljs-attribute">passphrase</span>=UUDDLRLRBABAS<br>    secret， code. <span class="hljs-attribute">allowed</span>=<span class="hljs-literal">true</span><br>    secret， code. <span class="hljs-attribute">lives</span>=30<br>  ui.properties: |<br>    color.<span class="hljs-attribute">good</span>=purple<br>    color.<span class="hljs-attribute">bad</span>=yellow<br>    allow.<span class="hljs-attribute">textmode</span>=<span class="hljs-literal">true</span><br>    how.nice.<span class="hljs-keyword">to</span>.<span class="hljs-attribute">look</span>=fairlyNice<br>kind: ConfigMap<br>metadata:<br>  creationTimestamp: <span class="hljs-string">&quot;2022-07-18T23:12:14Z&quot;</span><br>  name: game-config<br>  namespace:<span class="hljs-built_in"> default</span><br><span class="hljs-built_in"></span>  resourceVersion: <span class="hljs-string">&quot;876568&quot;</span><br>  uid: f941e011-cb4d-47bd-9bb1-eecbddfed632<br></code></pre></td></tr></table></figure><h2 id="2、使用文件创建"><a href="#2、使用文件创建" class="headerlink" title="2、使用文件创建"></a>2、使用文件创建</h2><p>只要指定为一个文件就可以从单个文件中创建ConfigMap</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master01 folder]# kubectl create configmap game-config2 <span class="hljs-attribute">--from-file</span>=../folder/game.properties <br>configmap/game-config2 created<br>[root@k8s-master01 folder]# kubectl <span class="hljs-built_in">get</span> configmaps game-config2 -o yaml <br>apiVersion: v1<br>data:<br>  game.properties: |<br>    <span class="hljs-attribute">enemies</span>=aliens<br>    <span class="hljs-attribute">1ives</span>=3<br>    enemies.<span class="hljs-attribute">cheat</span>=<span class="hljs-literal">true</span><br>    enemies.cheat.<span class="hljs-attribute">level</span>=noGoodRotten<br>    secret.code.<span class="hljs-attribute">passphrase</span>=UUDDLRLRBABAS<br>    secret.code.<span class="hljs-attribute">allowed</span>=<span class="hljs-literal">true</span><br>    secret.code.<span class="hljs-attribute">lives</span>=30<br>kind: ConfigMap<br>metadata:<br>  creationTimestamp: <span class="hljs-string">&quot;2022-07-18T23:19:12Z&quot;</span><br>  name: game-config2<br>  namespace:<span class="hljs-built_in"> default</span><br><span class="hljs-built_in"></span>  resourceVersion: <span class="hljs-string">&quot;877263&quot;</span><br>  uid: b94f19cd-436d-4253-8320-3af94396847e<br></code></pre></td></tr></table></figure><p>–from-file 这个参数可以使用多次，你可以使用两次分别指定上个实例中的那两个配置文件，效果就跟指定整个目录是一样的</p><h2 id="3、使用字面值创建"><a href="#3、使用字面值创建" class="headerlink" title="3、使用字面值创建"></a>3、使用字面值创建</h2><p>使用文字值创建，利用–from-literal参数传递配置信息，该参数可以使用多次，格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master01</span> <span class="hljs-string">folder</span>]<span class="hljs-comment"># kubectl create configmap special-config --from-literal=special.how=very --from-literal=special.type=charm</span><br><span class="hljs-string">configmap/special-config</span> <span class="hljs-string">created</span><br>[<span class="hljs-string">root@k8s-master01</span> <span class="hljs-string">folder</span>]<span class="hljs-comment"># kubectl get configmaps special-config -o yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">special.how:</span> <span class="hljs-string">very</span><br>  <span class="hljs-attr">special.type:</span> <span class="hljs-string">charm</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-string">&quot;2022-07-18T23:20:24Z&quot;</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">resourceVersion:</span> <span class="hljs-string">&quot;877388&quot;</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">d8577f2c-155c-417b-ad42-cf5e8ef24546</span><br></code></pre></td></tr></table></figure><h1 id="三、Pod-中使用ConfigMap"><a href="#三、Pod-中使用ConfigMap" class="headerlink" title="三、Pod 中使用ConfigMap"></a>三、Pod 中使用ConfigMap</h1><p>1、使用ConfigMap来替代环境变量</p><p>special-config</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">special.how:</span> <span class="hljs-string">very</span><br>  <span class="hljs-attr">special.type:</span> <span class="hljs-string">charm</span><br></code></pre></td></tr></table></figure><p>env-config</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">env-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">log_level:</span> <span class="hljs-string">INFO</span><br></code></pre></td></tr></table></figure><p>dapi-test-pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dapi-test-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-container</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span><span class="hljs-string">，&quot;-c&quot;，&quot;env&quot;</span>]<br>    <span class="hljs-attr">env:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SPECIAL_LEVEL_KEY</span><br>      <span class="hljs-attr">valueFrom:</span><br>        <span class="hljs-attr">configMapKeyRef:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">special.how</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SPECIAL_TYPE_KEY</span><br>      <span class="hljs-attr">valueFrom:</span><br>        <span class="hljs-attr">configMapKeyRef:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">special.type</span><br>    <span class="hljs-attr">envFrom:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">configMapRef:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">env-config</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br></code></pre></td></tr></table></figure><p>2.用ConfigMap设置命令行参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dapi-test-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-container</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span><span class="hljs-string">，&quot;-c&quot;，&quot;echo</span> <span class="hljs-string">$(SPECIAL_LEVEL_KEY)</span> <span class="hljs-string">$(SPECIAL_TYPE_KEY)&quot;</span>]<br>    <span class="hljs-attr">env:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SPECIAL_LEVEL_KEY</span><br>      <span class="hljs-attr">valueFrom:</span><br>        <span class="hljs-attr">configMapKeyRef:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">special.how</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SPECIAL_TYPE_KEY</span><br>      <span class="hljs-attr">valueFrom:</span><br>        <span class="hljs-attr">configMapKeyRef:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">special.type</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br></code></pre></td></tr></table></figure><p>3、通过数据卷插件使用ConfigMap</p><p>在数据卷里面使用这个ConfigMap，有不同的选项。最基本的就是将文件填入数据卷，在这个文件中，键就是文件名，键值就是文件内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiversion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">dapi-test-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-container</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/myapp:v1.23</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span><span class="hljs-string">，&quot;-c&quot;，&quot;sleep</span> <span class="hljs-string">500s&quot;</span>]<br>    <span class="hljs-attr">volumeMounts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/config</span><br>  <span class="hljs-attr">volumes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>    <span class="hljs-attr">configMap:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">special-config</span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br><br></code></pre></td></tr></table></figure><h1 id="四、ConfigMap-的热更新"><a href="#四、ConfigMap-的热更新" class="headerlink" title="四、ConfigMap 的热更新"></a>四、ConfigMap 的热更新</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">log-config</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">log_level:</span> <span class="hljs-string">INFO</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-nginx</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">my-nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">my-nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">my-nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/myapp:v1.23</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/config</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>        <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">log-config</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl exec `kubectl <span class="hljs-built_in">get</span> pods -l <span class="hljs-attribute">run</span>=my-nginx <span class="hljs-attribute">-o</span>=name|cut -d <span class="hljs-string">&quot;/&quot;</span> -f2` cat /etc/config/log_level<br>INFO<br></code></pre></td></tr></table></figure><p>修改ConfigMap</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> kubectl edit configmap <span class="hljs-built_in">log</span>-config<br></code></pre></td></tr></table></figure><p>修改log_level的值为DEBUG等待大概10秒钟时间，再次查看环境变量的值</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master01 env]# kubectl exec `kubectl <span class="hljs-keyword">get</span> pods -l run=my-nginx -o=<span class="hljs-type">name</span>|cut -d &quot;/&quot; -f2` cat /etc/config/log_level<br>kubectl exec [POD] [COMMAND] <span class="hljs-keyword">is</span> DEPRECATED <span class="hljs-keyword">and</span> will be removed <span class="hljs-keyword">in</span> a future <span class="hljs-keyword">version</span>. Use kubectl exec [POD] <span class="hljs-comment">-- [COMMAND] instead.</span><br><span class="hljs-keyword">DEBUG</span><br></code></pre></td></tr></table></figure><h1 id="五、ConfigMap-更新后滚动更新-Pod"><a href="#五、ConfigMap-更新后滚动更新-Pod" class="headerlink" title="五、ConfigMap 更新后滚动更新 Pod"></a>五、ConfigMap 更新后滚动更新 Pod</h1><p>更新ConfigMap目前并不会触发相关Pod的滚动更新，可以通过修改 pod annotations的方式强制触发滚动更新</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ kubectl <span class="hljs-keyword">patch</span> deployment my-nginx <span class="hljs-params">--patch</span> &#x27;&#123;<span class="hljs-string">&quot;spec&quot;</span>:&#123;<span class="hljs-string">&quot;template&quot;</span>:&#123;<span class="hljs-string">&quot;metadata&quot;</span>:&#123;<span class="hljs-string">&quot;annotations&quot;</span>:&#123;<span class="hljs-string">&quot;version/config&quot;</span>:<span class="hljs-string">&quot;20190411&quot;</span>&#125;&#125;&#125;&#125;&#125;&#x27;<br></code></pre></td></tr></table></figure><p>这个例子里我们在.spec.template.metadata.annotations中添加 version/config，每次通过修改version/config来触发动更新</p><p>!!! 更新ConfigMap 后：</p><ul><li>使用该ConfigMap挂载的Env不会同步更新</li><li>使用该ConfigMap挂载的Volume中的数据需要一段时间(实测大概10秒)才能同步更新</li></ul>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prometheus  入门—架构及原理</title>
    <link href="/2021/08/23/k8s/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/Prometheus+grafana/"/>
    <url>/2021/08/23/k8s/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/Prometheus+grafana/</url>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>Prometheus是一个开源监控解决方案，用于收集和聚合指标作为时间序列数据，内置了PromQL，允许用户实时选择和汇聚时间序列数据。我们可以直接把它当作时序数据库来用。 </p><ul><li>一系列服务的组合</li><li>系统和服务的监控报警平台</li><li>由metric名称和kv标识的多维数据模型</li><li>灵活的查询语言(PromQL)</li><li>支持pull、push两种方式添加数据</li><li>支持基于Kubernetes服务发现的动态配置</li></ul><p><img src="https://camo.githubusercontent.com/f14ac82eda765733a5f2b5200d78b4ca84b62559d17c9835068423b223588939/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f70726f6d6574686575732f70726f6d65746865757340633334323537643036396336333036383564613335626365663038343633326666643564363230392f646f63756d656e746174696f6e2f696d616765732f6172636869746563747572652e737667" alt="Architecture overview"> </p><h1 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h1><ul><li><p>Counter</p></li><li><p>Gauge</p></li><li><p>Histogram &amp;&amp; Summary</p></li></ul><h1 id="三、数据来源-服务器基础指标"><a href="#三、数据来源-服务器基础指标" class="headerlink" title="三、数据来源-服务器基础指标"></a>三、数据来源-服务器基础指标</h1><p>![1658640734972](Prometheus  入门—架构及原理/1658640734972.png)</p><h1 id="四、开始搭建"><a href="#四、开始搭建" class="headerlink" title="四、开始搭建"></a>四、开始搭建</h1><p>自动证书：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cert-manager.io<span class="hljs-regexp">/docs/i</span>nstallation<span class="hljs-regexp">/helm/</span><span class="hljs-comment">#option-1-installing-crds-with-kubectl</span><br></code></pre></td></tr></table></figure><p>官网：<a href="https://artifacthub.io/packages/helm/prometheus-community/prometheus">prometheus 15.10.5 · prometheus/prometheus-community (artifacthub.io)</a> </p><p>要求：</p><ul><li>Kubernetes 1.16+</li><li>Helm 3+</li></ul><p>仓库设置：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">helm</span> repo <span class="hljs-keyword">add</span> prometheus-community https:<span class="hljs-comment">//prometheus-community.github.io/helm-charts</span><br><span class="hljs-symbol">helm</span> repo update<br></code></pre></td></tr></table></figure><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">helm install prometheus prometheus-community/prometheus    <br></code></pre></td></tr></table></figure><p>prometheus需要两个持久持久卷</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master01 pvc]# kubectl <span class="hljs-keyword">get</span> pvc<br><span class="hljs-type">NAME</span>                      STATUS   VOLUME   CAPACITY   <span class="hljs-keyword">ACCESS</span> MODES   STORAGECLASS   AGE<br>prometheus-alertmanager   Bound    nfspv2   <span class="hljs-number">5</span>Gi        RWO                           <span class="hljs-number">23</span>m<br>prometheus-<span class="hljs-keyword">server</span>         Bound    nfspv    <span class="hljs-number">8</span>Gi        RWO                           <span class="hljs-number">23</span>m<br></code></pre></td></tr></table></figure><p>持久卷创建（非官方纯属个人创建方式）:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfspv</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">8Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Recycle</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/nfsdata</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nfspv2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">5Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">persistentVolumeReclaimPolicy:</span> <span class="hljs-string">Recycle</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/nfsdata</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br></code></pre></td></tr></table></figure><p>开启往往访问端口：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master01 prometheus]# kubectl <span class="hljs-keyword">get</span> svc<br><span class="hljs-type">NAME</span>                            <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">CLUSTER</span>-IP       <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)         AGE<br>prometheus-<span class="hljs-keyword">server</span>               NodePort    <span class="hljs-number">10.96</span><span class="hljs-number">.194</span><span class="hljs-number">.155</span>    &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">80</span>:<span class="hljs-number">30092</span>/TCP    <span class="hljs-number">79</span>m<br></code></pre></td></tr></table></figure><p>将svc/prometheus-server的网络类型设置为NodePort</p><p>![1658650600515](Prometheus  入门—架构及原理/1658650600515.png)</p><h1 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h1><p>Grafana 是与Prometheus配合的可视化程序，它提供了强大和优雅的方式去创建、共享、浏览数据。利用它可以创建 不同metric数据源的优美 Dashboard，官方提供了多种成型Dashboard模板供你选择。 </p><p><a href="https://artifacthub.io/packages/helm/grafana/grafana">helm grafana网址</a></p><h2 id="仓库设置"><a href="#仓库设置" class="headerlink" title="仓库设置"></a>仓库设置</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">helm</span> repo <span class="hljs-keyword">add</span> grafana https:<span class="hljs-comment">//grafana.github.io/helm-charts</span><br><span class="hljs-symbol">helm</span> repo update<br></code></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs clean">[root@k8s-master01 prometheus]# helm repo update<br>Hang tight while we grab the latest <span class="hljs-keyword">from</span> your chart repositories...<br>...Successfully got an update <span class="hljs-keyword">from</span> the <span class="hljs-string">&quot;metrics-server&quot;</span> chart repository<br>...Successfully got an update <span class="hljs-keyword">from</span> the <span class="hljs-string">&quot;aliyun&quot;</span> chart repository<br>...Successfully got an update <span class="hljs-keyword">from</span> the <span class="hljs-string">&quot;kubernetes-dashboard&quot;</span> chart repository<br>...Successfully got an update <span class="hljs-keyword">from</span> the <span class="hljs-string">&quot;jetstack&quot;</span> chart repository<br>...Successfully got an update <span class="hljs-keyword">from</span> the <span class="hljs-string">&quot;grafana&quot;</span> chart repository<br>...Successfully got an update <span class="hljs-keyword">from</span> the <span class="hljs-string">&quot;prometheus-community&quot;</span> chart repository<br>...Successfully got an update <span class="hljs-keyword">from</span> the <span class="hljs-string">&quot;bitnami&quot;</span> chart repository<br>...Successfully got an update <span class="hljs-keyword">from</span> the <span class="hljs-string">&quot;stable&quot;</span> chart repository<br>Update Complete. ⎈Happy Helming!⎈<br>[root@k8s-master01 prometheus]# helm install grafana grafana/grafana   <br>W0724 <span class="hljs-number">16</span>:<span class="hljs-number">25</span>:<span class="hljs-number">23.104208</span>    <span class="hljs-number">7873</span> warnings.go:<span class="hljs-number">70</span>] policy/v1beta1 PodSecurityPolicy is deprecated <span class="hljs-keyword">in</span> v1<span class="hljs-number">.21</span>+, unavailable <span class="hljs-keyword">in</span> v1<span class="hljs-number">.25</span>+<br>W0724 <span class="hljs-number">16</span>:<span class="hljs-number">25</span>:<span class="hljs-number">23.106903</span>    <span class="hljs-number">7873</span> warnings.go:<span class="hljs-number">70</span>] policy/v1beta1 PodSecurityPolicy is deprecated <span class="hljs-keyword">in</span> v1<span class="hljs-number">.21</span>+, unavailable <span class="hljs-keyword">in</span> v1<span class="hljs-number">.25</span>+<br>W0724 <span class="hljs-number">16</span>:<span class="hljs-number">25</span>:<span class="hljs-number">23.302240</span>    <span class="hljs-number">7873</span> warnings.go:<span class="hljs-number">70</span>] policy/v1beta1 PodSecurityPolicy is deprecated <span class="hljs-keyword">in</span> v1<span class="hljs-number">.21</span>+, unavailable <span class="hljs-keyword">in</span> v1<span class="hljs-number">.25</span>+<br>W0724 <span class="hljs-number">16</span>:<span class="hljs-number">25</span>:<span class="hljs-number">23.302274</span>    <span class="hljs-number">7873</span> warnings.go:<span class="hljs-number">70</span>] policy/v1beta1 PodSecurityPolicy is deprecated <span class="hljs-keyword">in</span> v1<span class="hljs-number">.21</span>+, unavailable <span class="hljs-keyword">in</span> v1<span class="hljs-number">.25</span>+<br>NAME: grafana<br>LAST DEPLOYED: Sun Jul <span class="hljs-number">24</span> <span class="hljs-number">16</span>:<span class="hljs-number">25</span>:<span class="hljs-number">22</span> <span class="hljs-number">2022</span><br>NAMESPACE: default<br>STATUS: deployed<br>REVISION: <span class="hljs-number">1</span><br>NOTES:<br><span class="hljs-number">1.</span> Get your <span class="hljs-string">&#x27;admin&#x27;</span> user password by running:<br><br>   kubectl get secret --namespace default grafana -o jsonpath=<span class="hljs-string">&quot;&#123;.data.admin-password&#125;&quot;</span> | base64 --decode ; echo<br><br><span class="hljs-number">2.</span> The Grafana server can be accessed via port <span class="hljs-number">80</span> on the following DNS name <span class="hljs-keyword">from</span> within your cluster:<br><br>   grafana.default.svc.cluster.local<br><br>   Get the Grafana URL to visit by running these commands <span class="hljs-keyword">in</span> the same shell:<br><br>     <span class="hljs-keyword">export</span> POD_NAME=$(kubectl get pods --namespace default -l <span class="hljs-string">&quot;app.kubernetes.io/name=grafana,app.kubernetes.io/instance=grafana&quot;</span> -o jsonpath=<span class="hljs-string">&quot;&#123;.items[0].metadata.name&#125;&quot;</span>)<br>     kubectl --namespace default port-forward $POD_NAME <span class="hljs-number">3000</span><br><br><span class="hljs-number">3.</span> Login <span class="hljs-keyword">with</span> the password <span class="hljs-keyword">from</span> step <span class="hljs-number">1</span> and the username: admin<br>#################################################################################<br>######   WARNING: Persistence is disabled!!! You will lose your data when   #####<br>######            the Grafana pod is terminated.                            #####<br>#################################################################################<br></code></pre></td></tr></table></figure><h2 id="暴露grafana外网端口"><a href="#暴露grafana外网端口" class="headerlink" title="暴露grafana外网端口"></a>暴露grafana外网端口</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-master01 prometheus]<span class="hljs-meta"># kubectl edit svc/grafana</span><br>service/grafana edited<br></code></pre></td></tr></table></figure><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">clusterIP</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10.99.124.40</span><br>  <span class="hljs-attribute">clusterIPs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">10.99.124.40</span><br>  <span class="hljs-attribute">externalTrafficPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Cluster</span><br>  <span class="hljs-attribute">internalTrafficPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Cluster</span><br>  <span class="hljs-attribute">ipFamilies</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">IPv4</span><br>  <span class="hljs-attribute">ipFamilyPolicy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">SingleStack</span><br>  <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">name: service</span><br>    <span class="hljs-attribute">nodePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">31036</span><br>    <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>    <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attribute">targetPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">3000</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">app.kubernetes.io/instance</span><span class="hljs-punctuation">:</span> <span class="hljs-string">grafana</span><br>    <span class="hljs-attribute">app.kubernetes.io/name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">grafana</span><br>  <span class="hljs-attribute">sessionAffinity</span><span class="hljs-punctuation">:</span> <span class="hljs-string">None</span><br>  <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">NodePort</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master01 prometheus]# kubectl <span class="hljs-keyword">get</span> svc         <br><span class="hljs-type">NAME</span>                            <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">CLUSTER</span>-IP       <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)         AGE<br>grafana                         NodePort    <span class="hljs-number">10.99</span><span class="hljs-number">.124</span><span class="hljs-number">.40</span>     &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">80</span>:<span class="hljs-number">31036</span>/TCP    <span class="hljs-number">4</span>m29s<br></code></pre></td></tr></table></figure><h2 id="获取密码"><a href="#获取密码" class="headerlink" title="获取密码"></a>获取密码</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master01 prometheus]# kubectl <span class="hljs-built_in">get</span><span class="hljs-built_in"> secret </span>--namespace<span class="hljs-built_in"> default </span>grafana -o <span class="hljs-attribute">jsonpath</span>=<span class="hljs-string">&quot;&#123;.data.admin-password&#125;&quot;</span> | base64 --decode ; echo<br>tRiLK3Z5JEafE5IHsUFy0zfeetLi9scnWLfubXev<br></code></pre></td></tr></table></figure><h2 id="进入界面"><a href="#进入界面" class="headerlink" title="进入界面"></a>进入界面</h2><p>通过admin和上面得到的密码进入系统。</p><p>![1658651593882](Prometheus  入门—架构及原理/1658651593882.png)</p><h2 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h2><p>1 左下角的数据源配置</p><p>![1658654107540](Prometheus  入门—架构及原理/1658654107540.png)</p><p>2 配置prometheus</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master01 prometheus]# kubectl <span class="hljs-keyword">get</span> svc<br><span class="hljs-type">NAME</span>                            <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">CLUSTER</span>-IP       <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)         AGE<br>grafana                         NodePort    <span class="hljs-number">10.99</span><span class="hljs-number">.124</span><span class="hljs-number">.40</span>     &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">80</span>:<span class="hljs-number">31036</span>/TCP    <span class="hljs-number">24</span>m<br>prometheus-<span class="hljs-keyword">server</span>               NodePort    <span class="hljs-number">10.96</span><span class="hljs-number">.194</span><span class="hljs-number">.155</span>    &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">80</span>:<span class="hljs-number">30092</span>/TCP    <span class="hljs-number">110</span>m<br></code></pre></td></tr></table></figure><p>得到地址10.96.194.155:80</p><p>![1658654129031](Prometheus  入门—架构及原理/1658654129031.png)</p><p>保存测试后选择dashboards，选择2.0</p><p>![1658654461033](Prometheus  入门—架构及原理/1658654461033.png)</p><p>![1658653995632](Prometheus  入门—架构及原理/1658653995632.png)</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>性能监控</tag>
      
      <tag>prometheus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Charts模板指南</title>
    <link href="/2021/08/17/k8s/helm/Charts%E6%A8%A1%E6%9D%BF%E6%8C%87%E5%8D%97/"/>
    <url>/2021/08/17/k8s/helm/Charts%E6%A8%A1%E6%9D%BF%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Charts"><a href="#一、Charts" class="headerlink" title="一、Charts"></a>一、Charts</h1><h2 id="Helm-chart的结构"><a href="#Helm-chart的结构" class="headerlink" title="Helm chart的结构"></a>Helm chart的结构</h2><figure class="highlight graphql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs graphql">wordpress/<br>  Chart.yaml          <span class="hljs-comment"># 包含了chart信息的YAML文件</span><br>  LICENSE             <span class="hljs-comment"># 可选: 包含chart许可证的纯文本文件</span><br>  README.md           <span class="hljs-comment"># 可选: 可读的README文件</span><br>  values.yaml         <span class="hljs-comment"># chart 默认的配置值</span><br>  values.<span class="hljs-keyword">schema</span>.json  <span class="hljs-comment"># 可选: 一个使用JSON结构的values.yaml文件</span><br>  charts/             <span class="hljs-comment"># 包含chart依赖的其他chart</span><br>  crds/               <span class="hljs-comment"># 自定义资源的定义</span><br>  templates/          <span class="hljs-comment"># 模板目录， 当和values 结合时，可生成有效的Kubernetes manifest文件</span><br>  templates/NOTES.txt <span class="hljs-comment"># 可选: 包含简要使用说明的纯文本文件</span><br></code></pre></td></tr></table></figure><h2 id="通过命令创建helm"><a href="#通过命令创建helm" class="headerlink" title="通过命令创建helm"></a>通过命令创建helm</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>helm create mychart<br>Creating mychart<br></code></pre></td></tr></table></figure><p> <code>mychart/templates/</code> 目录：</p><ul><li><code>NOTES.txt</code>: chart的”帮助文本”。这会在你的用户执行<code>helm install</code>时展示给他们。</li><li><code>deployment.yaml</code>: 创建Kubernetes 工作负载的基本清单。</li><li><code>service.yaml</code>: 为你的工作负载创建一个 service终端基本清单。</li><li><code>_helpers.tpl</code>: 放置可以通过chart复用的模板辅助对象</li></ul><p>为了方便学习，先删除templates所有文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">rm</span> -rf mychart/templates/*</span><br></code></pre></td></tr></table></figure><h2 id="手动创建模板"><a href="#手动创建模板" class="headerlink" title="手动创建模板"></a>手动创建模板</h2><p>创建一个配置映射名为 <code>mychart/templates/configmap.yaml</code>的文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mychart-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><p>安装helm chart</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[root@k8s-master01 mychart]# helm install full-coral  ./mychart<br>NAME: full-coral<br>LAST DEPLOYED: Sat Jul 23 23:06:05 2022<br>NAMESPACE: default<br>STATUS: deployed<br>REVISION: 1<br><span class="hljs-keyword">TEST </span>SUITE: None<br></code></pre></td></tr></table></figure><p>查看helm chart清单明细</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master01</span> <span class="hljs-string">mychart</span>]<span class="hljs-comment"># helm get manifest full-coral</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mychart-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><p><code>helm get manifest</code> 命令后跟一个发布名称(<code>full-coral</code>)然后打印出了所有已经上传到server的Kubernetes资源。 每个文件以<code>---</code>开头表示YAML文件的开头，然后是自动生成的注释行，表示哪个模板文件生成了这个YAML文档。</p><p>现在卸载发布： <code>helm uninstall full-coral</code>。</p><h2 id="模板调用"><a href="#模板调用" class="headerlink" title="模板调用"></a>模板调用</h2><p>通过命令卸载full-coral，然后修改configmap.yaml</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts">$ helm uninstall full-coral<br>$ vi configmap.yaml<br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> .Release.Name <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>-configmap<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">helm</span> <span class="hljs-string">install</span> <span class="hljs-string">full-coral</span>  <span class="hljs-string">./mychart</span><br><span class="hljs-string">$</span> <span class="hljs-string">helm</span> <span class="hljs-string">get</span> <span class="hljs-string">manifest</span> <span class="hljs-string">full-coral</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">full-coral-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><p>模板命令要括在 <code>&#123;&#123;` 和 `&#125;&#125;</code> 之间，模板命令 <code>&#123;&#123; .Release.Name &#125;&#125;</code> 将发布名称注入了模板。值作为一个 <em>命名空间对象</em> 传给了模板，用点(<code>.</code>)分隔每个命名空间的元素。</p><p><code>Release</code>前面的点表示从作用域最顶层的命名空间开始（稍后会谈作用域）。这样<code>.Release.Name</code>就可解读为“通顶层命名空间开始查找 Release对象，然后在其中找Name对象”。<code>Release</code>是一个Helm的内置对象。</p><h2 id="非安装渲染模板"><a href="#非安装渲染模板" class="headerlink" title="非安装渲染模板"></a>非安装渲染模板</h2><p>当你想测试模板渲染的内容但又不想安装任何实际应用时，可以使用<code>helm install --debug --dry-run goodly-guppy ./mychart</code>。这样不会安装应用(chart)到你的kubenetes集群中，只会渲染模板内容到控制台（用于测试）。渲染后的模板如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ helm install --<span class="hljs-built_in">debug</span> --dry-<span class="hljs-built_in">run</span> goodly-guppy ./mychart<br></code></pre></td></tr></table></figure><p>使用<code>--dry-run</code>会让你变得更容易测试，但不能保证Kubernetes会接受你生成的模板。 最好不要仅仅因为<code>--dry-run</code>可以正常运行就觉得chart可以安装。</p><h1 id="二、内置对象"><a href="#二、内置对象" class="headerlink" title="二、内置对象"></a>二、内置对象</h1><p>对象可以通过模板引擎传递到模板中。对象可以是非常简单的:仅有一个值。或者可以包含其他对象或方法。比如，<code>Release</code>对象可以包含其他对象（比如：<code>Release.Name</code>）和<code>Files</code>对象有一组方法。</p><ul><li>Release： Release对象描述了版本发布本身。包含了以下对象：<ul><li>Release.Name： release名称</li><li>Release.Namespace： 版本中包含的命名空间(如果manifest没有覆盖的话)</li><li>Release.IsUpgrade： 如果当前操作是升级或回滚的话，该值将被设置为true</li><li>Release.IsInstall： 如果当前操作是安装的话，该值将被设置为true</li><li>Release.Revision： 此次修订的版本号。安装时是1，每次升级或回滚都会自增</li><li>Release.Service： 该service用来渲染当前模板。Helm里始终Helm</li></ul></li><li>Values： Values对象是从values.yaml文件和用户提供的文件传进模板的。默认为空</li><li>Chart： Chart.yaml文件内容。 Chart.yaml里的所有数据在这里都可以可访问的。</li><li>Files： 在chart中提供访问所有的非特殊文件的对象。你不能使用它访问Template对象，只能访问其他文件。<ul><li>Files.Get 通过文件名获取文件的方法。 （.Files.Getconfig.ini）</li><li>Files.GetBytes 用字节数组代替字符串获取文件内容的方法。 对图片之类的文件很有用</li><li>Files.Glob 用给定的shell glob模式匹配文件名返回文件列表的方法</li><li>Files.Lines 逐行读取文件内容的方法。迭代文件中每一行时很有用</li><li>Files.AsSecrets 使用Base 64编码字符串返回文件体的方法</li><li>Files.AsConfig 使用YAML格式返回文件体的方法</li></ul></li><li>Capabilities： 提供关于Kubernetes集群支持功能的信息<ul><li>Capabilities.APIVersions 是一个版本列表</li><li>Capabilities.APIVersions.Has $version 说明集群中的版本 (比如,batch/v1) 或是资源 (比如, apps/v1/Deployment) 是否可用</li><li>Capabilities.KubeVersion 和Capabilities.KubeVersion.Version 是Kubernetes的版本号</li><li>Capabilities.KubeVersion.Major Kubernetes的主版本</li><li>Capabilities.KubeVersion.Minor Kubernetes的次版本</li><li>Capabilities.HelmVersion 包含Helm版本详细信息的对象，和 helm version 的输出一致</li><li>Capabilities.HelmVersion.Version 是当前Helm语义格式的版本</li><li>Capabilities.HelmVersion.GitCommit Helm的git sha1值</li><li>Capabilities.HelmVersion.GitTreeState 是Helm git树的状态</li><li>Capabilities.HelmVersion.GoVersion 是使用的Go编译器版本</li></ul></li><li>Template： 包含当前被执行的当前模板信息<ul><li>Template.Name: 当前模板的命名空间文件路径 (e.g. mychart/templates/mytemplate.yaml)</li><li>Template.BasePath: 当前chart模板目录的路径 (e.g. mychart/templates)</li></ul></li></ul><p>内置的值都是以大写字母开始。 这是符合Go的命名惯例。</p><h1 id="三、Values-文件"><a href="#三、Values-文件" class="headerlink" title="三、Values 文件"></a>三、Values 文件</h1><p>其内容来自于多个位置：</p><ul><li>chart中的<code>values.yaml</code>文件</li><li>如果是子chart，就是父chart中的<code>values.yaml</code>文件</li><li>使用<code>-f</code>参数(<code>helm install -f myvals.yaml ./mychart</code>)传递到 <code>helm install</code> 或 <code>helm upgrade</code>的values文件</li><li>使用<code>--set</code> (比如<code>helm install --set foo=bar ./mychart</code>)传递的单个参数</li></ul><p>以上列表有明确顺序：默认使用<code>values.yaml</code>，可以被父chart的<code>values.yaml</code>覆盖，继而被用户提供values文件覆盖， 最后会被<code>--set</code>参数覆盖，优先级为<code>values.yaml</code>最低，<code>--set</code>参数最高。</p><p>删除<code>values.yaml</code>中的默认内容，仅设置一个参数：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">favoriteDrink:</span> coffee<br></code></pre></td></tr></table></figure><p>在模板中使用它：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> .Release.Name <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>-configmap<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-symbol">  drink:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> .Values.favoriteDrink <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>渲染结果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">helm</span> <span class="hljs-string">install</span> <span class="hljs-string">geared-marsupi</span> <span class="hljs-string">./mychart</span> <span class="hljs-string">--dry-run</span> <span class="hljs-string">--debug</span><br><span class="hljs-attr">MANIFEST:</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">geared-marsupi-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br>  <span class="hljs-attr">drink:</span> <span class="hljs-string">coffee</span><br></code></pre></td></tr></table></figure><p>调用<code>helm install</code>时设置<code>--set</code>，很容易就能覆盖这个值。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">helm</span> <span class="hljs-string">install</span> <span class="hljs-string">solid-vulture</span> <span class="hljs-string">./mychart</span> <span class="hljs-string">--dry-run</span> <span class="hljs-string">--debug</span> <span class="hljs-string">--set</span> <span class="hljs-string">favoriteDrink=slurm</span><br><span class="hljs-attr">MANIFEST:</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">solid-vulture-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br>  <span class="hljs-attr">drink:</span> <span class="hljs-string">slurm</span><br></code></pre></td></tr></table></figure><p>由于<code>--set</code>比默认的<code>values.yaml</code>文件优先级更高，模板就生成了<code>drink: slurm</code>。</p><p>values文件更多结构化的内容：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">favorite:</span><br><span class="hljs-symbol">  drink:</span> coffee<br><span class="hljs-symbol">  food:</span> pizza<br></code></pre></td></tr></table></figure><p>现在需要稍微修改一些模板：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> .Release.Name <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>-configmap<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-symbol">  drink:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> .Values.favorite.drink <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-symbol">  food:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> .Values.favorite.food <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>建议构建更加平坦的浅层树。以后想要给子chart赋值时，会看到如何使用树结构给value命名。</p><p><strong>删除默认的key</strong></p><p>如果需要从默认的value中删除key，可以将key设置为<code>null</code>，Helm将在覆盖的value合并时删除这个key。</p><p>比如，稳定的Drupal允许在配置自定义镜像时配置活动探针。默认值为<code>httpget</code>：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">livenessProbe:</span><br><span class="hljs-symbol">  httpGet:</span><br><span class="hljs-symbol">    path:</span> <span class="hljs-keyword">/user/</span>login<br><span class="hljs-symbol">    port:</span> http<br><span class="hljs-symbol">  initialDelaySeconds:</span> <span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><p>如果你想替换掉<code>httpGet</code>用<code>exec</code>重写活动探针，使用<code>--set livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt]</code>， Helm会把默认的key和重写的key合并在一起，从而生成以下YAML：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">livenessProbe</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">httpGet</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/user/login</span><br>    <span class="hljs-attribute">port</span><span class="hljs-punctuation">:</span> <span class="hljs-string">http</span><br>  <span class="hljs-attribute">exec</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docroot/CHANGELOG.txt</span><br>  <span class="hljs-attribute">initialDelaySeconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">120</span><br></code></pre></td></tr></table></figure><p>因为Kubernetes中不能声明多个活动探针句柄，从而会应用发布会失败。为了解决这个问题，Helm可以指定通过设定null来删除<code>livenessProbe.httpGet</code>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">helm install stable/drupal --<span class="hljs-built_in">set</span> <span class="hljs-attribute">image</span>=my-registry/drupal:0.1.0 --<span class="hljs-built_in">set</span> livenessProbe.exec.command=[cat,docroot/CHANGELOG.txt] --<span class="hljs-built_in">set</span> livenessProbe.<span class="hljs-attribute">httpGet</span>=<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h1 id="四、模板函数和流水线"><a href="#四、模板函数和流水线" class="headerlink" title="四、模板函数和流水线"></a>四、模板函数和流水线</h1><h2 id="quote函数"><a href="#quote函数" class="headerlink" title="quote函数"></a><code>quote</code>函数</h2><p>可以通过调用模板指令中的<code>quote</code>函数把<code>.Values</code>对象中的字符串属性用引号引起来，然后放到模板中。 </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-configmap</span><br><span class="language-xml">data:</span><br><span class="language-xml">  myvalue: &quot;Hello World&quot;</span><br><span class="language-xml">  drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">quote</span> .Values.favorite.drink &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  food: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">quote</span> .Values.favorite.food &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>模板函数的语法是 <code>functionName arg1 arg2...</code>。在上面的代码片段中，<code>quote .Values.favorite.drink</code>调用了<code>quote</code>函数并传递了一个参数(<code>.Values.favorite.drink</code>)。 </p><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h2><p>管道符是将一系列的模板语言紧凑地将多个流式处理结果合并的工具。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-configmap</span><br><span class="language-xml">data:</span><br><span class="language-xml">  myvalue: &quot;Hello World&quot;</span><br><span class="language-xml">  drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.favorite.drink</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  food: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.favorite.food</span> | quote &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>在这个示例中，并不是调用<code>quote 参数</code>，而是倒置了命令。使用管道符(<code>|</code>)将参数“发送”给函数： <code>.Values.favorite.drink | quote</code>。使用管道符可以将很多函数链接在一起：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Release.Name</span> &#125;&#125;<span class="hljs-string">-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br>  <span class="hljs-attr">drink:</span> &#123;&#123; <span class="hljs-string">.Values.favorite.drink</span> <span class="hljs-string">|</span> <span class="hljs-string">quote</span> &#125;&#125;<br>  <span class="hljs-attr">food:</span> &#123;&#123; <span class="hljs-string">.Values.favorite.food</span> <span class="hljs-string">|</span> <span class="hljs-string">upper</span> <span class="hljs-string">|</span> <span class="hljs-string">quote</span> &#125;&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master01</span> <span class="hljs-string">mychart</span>]<span class="hljs-comment"># helm install solid-vulture ../mychart --dry-run --debug</span><br><span class="hljs-attr">MANIFEST:</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">solid-vulture-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br>  <span class="hljs-attr">drink:</span> <span class="hljs-string">&quot;coffee&quot;</span><br>  <span class="hljs-attr">food:</span> <span class="hljs-string">&quot;PIZZA&quot;</span><br></code></pre></td></tr></table></figure><p>第一个表达式的结果(<code>.Values.favorite.drink | upper</code> 的结果) 作为了<code>quote</code>的最后一个参数。 </p><p><code>repeat COUNT STRING</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Release.Name</span> &#125;&#125;<span class="hljs-string">-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br>  <span class="hljs-attr">drink:</span> &#123;&#123; <span class="hljs-string">.Values.favorite.drink</span> <span class="hljs-string">|</span> <span class="hljs-string">repeat</span> <span class="hljs-number">5</span> <span class="hljs-string">|</span> <span class="hljs-string">quote</span> &#125;&#125;<br>  <span class="hljs-attr">food:</span> &#123;&#123; <span class="hljs-string">.Values.favorite.food</span> <span class="hljs-string">|</span> <span class="hljs-string">upper</span> <span class="hljs-string">|</span> <span class="hljs-string">quote</span> &#125;&#125;<br></code></pre></td></tr></table></figure><p><code>repeat</code>函数会返回给定参数特定的次数，则可以得到以下结果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">melting-porcup-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br>  <span class="hljs-attr">drink:</span> <span class="hljs-string">&quot;coffeecoffeecoffeecoffeecoffee&quot;</span><br>  <span class="hljs-attr">food:</span> <span class="hljs-string">&quot;PIZZA&quot;</span><br></code></pre></td></tr></table></figure><h2 id="使用default函数"><a href="#使用default函数" class="headerlink" title="使用default函数"></a>使用<code>default</code>函数</h2><p>模板中频繁使用的一个函数是<code>default</code>： <code>default DEFAULT_VALUE GIVEN_VALUE</code>。 这个函数允许你在模板中指定一个默认值，以防这个值被忽略。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.favorite.drink</span> | default <span class="hljs-string">&quot;tea&quot;</span> | quote &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>如果运行，会得到 <code>coffee</code>:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> virtuous-mink-configmap<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-symbol">  drink:</span> <span class="hljs-string">&quot;coffee&quot;</span><br><span class="hljs-symbol">  food:</span> <span class="hljs-string">&quot;PIZZA&quot;</span><br></code></pre></td></tr></table></figure><p>现在，从<code>values.yaml</code>中移除设置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">favorite:</span><br>  <span class="hljs-meta">#drink: coffee</span><br><span class="hljs-symbol">  food:</span> pizza<br></code></pre></td></tr></table></figure><p>现在重新运行 <code>helm install --dry-run --debug fair-worm ./mychart</code> 会生成如下内容：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> fair-worm-configmap<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-symbol">  drink:</span> <span class="hljs-string">&quot;tea&quot;</span><br><span class="hljs-symbol">  food:</span> <span class="hljs-string">&quot;PIZZA&quot;</span><br></code></pre></td></tr></table></figure><p>在实际的chart中，所有的静态默认值应该设置在 <code>values.yaml</code> 文件中，且不应该重复使用 <code>default</code> 命令 (否则会出现冗余)。然而这个<code>default</code> 命令很适合计算值，其不能声明在<code>values.yaml</code>文件中，比如：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.favorite.drink</span> | default (<span class="hljs-name">printf</span> <span class="hljs-string">&quot;%s-tea&quot;</span> (<span class="hljs-name">include</span> <span class="hljs-string">&quot;fullname&quot;</span> .)) &#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="使用lookup函数"><a href="#使用lookup函数" class="headerlink" title="使用lookup函数"></a>使用<code>lookup</code>函数</h2><p><code>lookup</code> 函数可以用于在运行的集群中 <em>查找</em> 资源。lookup函数简述为查找 <code>apiVersion, kind, namespace,name -&gt; 资源或者资源列表</code>。</p><table><thead><tr><th>parameter</th><th>type</th></tr></thead><tbody><tr><td>apiVersion</td><td>string</td></tr><tr><td>kind</td><td>string</td></tr><tr><td>namespace</td><td>string</td></tr><tr><td>name</td><td>string</td></tr></tbody></table><p><code>name</code> 和 <code>namespace</code> 都是选填的，且可以传空字符串(<code>&quot;&quot;</code>)作为空。</p><p>以下是可能的参数组合：</p><table><thead><tr><th>命令</th><th>Lookup 函数</th></tr></thead><tbody><tr><td><code>kubectl get pod mypod -n mynamespace</code></td><td><code>lookup &quot;v1&quot; &quot;Pod&quot; &quot;mynamespace&quot; &quot;mypod&quot;</code></td></tr><tr><td><code>kubectl get pods -n mynamespace</code></td><td><code>lookup &quot;v1&quot; &quot;Pod&quot; &quot;mynamespace&quot; &quot;&quot;</code></td></tr><tr><td><code>kubectl get pods --all-namespaces</code></td><td><code>lookup &quot;v1&quot; &quot;Pod&quot; &quot;&quot; &quot;&quot;</code></td></tr><tr><td><code>kubectl get namespace mynamespace</code></td><td><code>lookup &quot;v1&quot; &quot;Namespace&quot; &quot;&quot; &quot;mynamespace&quot;</code></td></tr><tr><td><code>kubectl get namespaces</code></td><td><code>lookup &quot;v1&quot; &quot;Namespace&quot; &quot;&quot; &quot;&quot;</code></td></tr></tbody></table><p>当<code>lookup</code>返回一个对象，它会返回一个字典。这个字典可以进一步被引导以获取特定值。</p><p>下面的例子将返回<code>mynamespace</code>对象的annotations属性：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">(<span class="hljs-built_in">lookup</span> <span class="hljs-string">&quot;v1&quot;</span> <span class="hljs-string">&quot;Namespace&quot;</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;mynamespace&quot;</span>).metadata.annotations<br></code></pre></td></tr></table></figure><p>当<code>lookup</code>返回一个对象列表时，可以通过<code>items</code>字段访问对象列表：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">range</span> $index, $service <span class="hljs-attr">:</span>= (<span class="hljs-name"><span class="hljs-built_in">lookup</span></span> <span class="hljs-string">&quot;v1&quot;</span> <span class="hljs-string">&quot;Service&quot;</span> <span class="hljs-string">&quot;mynamespace&quot;</span> <span class="hljs-string">&quot;&quot;</span>).items &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;&#123;/* <span class="hljs-name">do</span> <span class="hljs-name">something</span> <span class="hljs-name"><span class="hljs-built_in">with</span></span> <span class="hljs-name"><span class="hljs-built_in">each</span></span> <span class="hljs-name">service</span> */&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>当对象未找到时，会返回空值。可以用来检测对象是否存在。</p><p><code>lookup</code>函数使用Helm已有的Kubernetes连接配置查询Kubernetes。当与调用API服务交互时返回了错误 （比如缺少资源访问的权限），helm 的模板操作会失败。</p><p>请记住，Helm在<code>helm template</code>或者<code>helm install|update|delete|rollback --dry-run</code>时， 不应该请求Kubernetes API服务。由此，<code>lookup</code>函数在该案例中会返回空列表（即字典）。</p><h2 id="运算符也是函数"><a href="#运算符也是函数" class="headerlink" title="运算符也是函数"></a>运算符也是函数</h2><p>对于模板来说，运算符(<code>eq</code>, <code>ne</code>, <code>lt</code>, <code>gt</code>, <code>and</code>, <code>or</code>等等) 都是作为函数来实现的。 在管道符中，操作可以按照圆括号分组。</p><p>现在我们可以从函数和管道符返回到条件控制流，循环和范围修饰符。</p><h1 id="五、模板函数"><a href="#五、模板函数" class="headerlink" title="五、模板函数"></a>五、模板函数</h1><p><a href="https://helm.sh/zh/docs/chart_template_guide/function_list/">Helm | 模板函数列表</a> </p><h1 id="六、流控制"><a href="#六、流控制" class="headerlink" title="六、流控制"></a>六、流控制</h1><p>Helm的模板语言提供了以下控制结构：</p><ul><li><code>if</code>/<code>else</code>， 用来创建条件语句</li><li><code>with</code>， 用来指定范围</li><li><code>range</code>， 提供”for each”类型的循环</li></ul><p>除了这些之外，还提供了一些声明和使用命名模板的关键字：</p><ul><li><code>define</code> 在模板中声明一个新的命名模板</li><li><code>template</code> 导入一个命名模板</li><li><code>block</code> 声明一种特殊的可填充的模板块</li></ul><h2 id="If-Else"><a href="#If-Else" class="headerlink" title="If/Else"></a>If/Else</h2><p>基本的条件结构看起来像这样：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-built_in">if</span></span> PIPELINE &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  # Do something</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">else</span> if OTHER PIPELINE &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  # Do something else</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">else</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  # Default case</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>如果是以下值时，管道会被设置为 <em>false</em>：</p><ul><li>布尔false</li><li>数字0</li><li>空字符串</li><li><code>nil</code> (空或null)</li><li>空集合(<code>map</code>, <code>slice</code>, <code>tuple</code>, <code>dict</code>, <code>array</code>)</li></ul><p>在所有其他条件下，条件都为true。</p><p>让我们先在配置映射中添加一个简单的条件。如果饮品是coffee会添加另一个配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> &#123;&#123; <span class="hljs-string">.Release.Name</span> &#125;&#125;<span class="hljs-string">-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br>  <span class="hljs-attr">drink:</span> &#123;&#123; <span class="hljs-string">.Values.favorite.drink</span> <span class="hljs-string">|</span> <span class="hljs-string">default</span> <span class="hljs-string">&quot;tea&quot;</span> <span class="hljs-string">|</span> <span class="hljs-string">quote</span> &#125;&#125;<br>  <span class="hljs-attr">food:</span> &#123;&#123; <span class="hljs-string">.Values.favorite.food</span> <span class="hljs-string">|</span> <span class="hljs-string">upper</span> <span class="hljs-string">|</span> <span class="hljs-string">quote</span> &#125;&#125;<br>  &#123;&#123; <span class="hljs-string">if</span> <span class="hljs-string">eq</span> <span class="hljs-string">.Values.favorite.drink</span> <span class="hljs-string">&quot;coffee&quot;</span> &#125;&#125;<span class="hljs-attr">mug:</span> <span class="hljs-string">&quot;true&quot;</span>&#123;&#123; <span class="hljs-string">end</span> &#125;&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master01</span> <span class="hljs-string">mychart</span>]<span class="hljs-comment"># helm install solid-vulture ../mychart --dry-run --debug</span><br><span class="hljs-attr">MANIFEST:</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">solid-vulture-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br>  <span class="hljs-attr">drink:</span> <span class="hljs-string">&quot;coffee&quot;</span><br>  <span class="hljs-attr">food:</span> <span class="hljs-string">&quot;PIZZA&quot;</span><br>  <span class="hljs-attr">mug:</span> <span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><p>在values.yaml文件中注释favorite.drink</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">root@k8s-master01</span> <span class="hljs-string">mychart]#</span> <span class="hljs-string">helm</span> <span class="hljs-string">install</span> <span class="hljs-string">solid-vulture</span> <span class="hljs-string">../mychart</span> <span class="hljs-string">--dry-run</span> <span class="hljs-string">--debug</span><br><span class="hljs-attr">MANIFEST:</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">solid-vulture-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br>  <span class="hljs-attr">drink:</span> <span class="hljs-string">&quot;coffee&quot;</span><br>  <span class="hljs-attr">food:</span> <span class="hljs-string">&quot;PIZZA&quot;</span><br></code></pre></td></tr></table></figure><h2 id="控制空格"><a href="#控制空格" class="headerlink" title="控制空格"></a>控制空格</h2><p>查看条件时，我们需要快速了解一下模板中控制空白的方式，格式化之前的例子，使其更易于阅读：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-configmap</span><br><span class="language-xml">data:</span><br><span class="language-xml">  myvalue: &quot;Hello World&quot;</span><br><span class="language-xml">  drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.favorite.drink</span> | default <span class="hljs-string">&quot;tea&quot;</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  food: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.favorite.food</span> | upper | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-built_in">if</span></span> eq .Values.favorite.drink <span class="hljs-string">&quot;coffee&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    mug: &quot;true&quot;</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>初始情况下，看起来没问题。但是如果通过模板引擎运行时，我们将得到一个不幸的结果：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ helm install --dry-run --debug ./mychart<br>SERVER: <span class="hljs-string">&quot;localhost:44134&quot;</span><br>CHART PATH: <span class="hljs-regexp">/Users/m</span>attbutcher<span class="hljs-regexp">/Code/G</span>o<span class="hljs-regexp">/src/</span>helm.sh<span class="hljs-regexp">/helm/</span>_scratch/mychart<br>Error: YAML parse error on mychart<span class="hljs-regexp">/templates/</span>configmap.yaml: error converting YAML to JSON: yaml: line <span class="hljs-number">9</span>: did not <span class="hljs-keyword">find</span> expected key<br></code></pre></td></tr></table></figure><p>发生了啥？因为空格导致生成了错误的YAML。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> eyewitness-elk-configmap<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-symbol">  drink:</span> <span class="hljs-string">&quot;coffee&quot;</span><br><span class="hljs-symbol">  food:</span> <span class="hljs-string">&quot;PIZZA&quot;</span><br><span class="hljs-symbol">    mug:</span> <span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><p><code>mug</code>的缩进是不对的。取消缩进重新执行一下：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-configmap</span><br><span class="language-xml">data:</span><br><span class="language-xml">  myvalue: &quot;Hello World&quot;</span><br><span class="language-xml">  drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.favorite.drink</span> | default <span class="hljs-string">&quot;tea&quot;</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  food: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.favorite.food</span> | upper | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-built_in">if</span></span> eq .Values.favorite.drink <span class="hljs-string">&quot;coffee&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  mug: &quot;true&quot;</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>这个就得到了合法的YAML，但是看起来还是有点滑稽：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> telling-chimp-configmap<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-symbol">  drink:</span> <span class="hljs-string">&quot;coffee&quot;</span><br><span class="hljs-symbol">  food:</span> <span class="hljs-string">&quot;PIZZA&quot;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  mug:</span> <span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><p>注意在YAML中有一个空行，为什么？当模板引擎运行时，它 <em>移除了</em> <code>&#123;&#123;` 和 `&#125;&#125;</code> 里面的内容，但是留下的空白完全保持原样。</p><p>YAML认为空白是有意义的，因此管理空白变得很重要。幸运的是，Helm模板有些工具可以处理此类问题。</p><p>首先，模板声明的大括号语法可以通过特殊的字符修改，并通知模板引擎取消空白。<code>&#123;&#123;- `(包括添加的横杠和空格)表示向左删除空白， 而` -&#125;&#125;</code>表示右边的空格应该被去掉。 <em>一定注意空格就是换行</em></p><blockquote><p>要确保<code>-</code>和其他命令之间有一个空格。 <code>&#123;&#123;- 3 &#125;&#125;</code> 表示“删除左边空格并打印3”，而<code>&#123;&#123;-3 &#125;&#125;</code>表示“打印-3”。</p></blockquote><p>使用这个语法，我们就可修改我们的模板，去掉新加的空白行：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-configmap</span><br><span class="language-xml">data:</span><br><span class="language-xml">  myvalue: &quot;Hello World&quot;</span><br><span class="language-xml">  drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.favorite.drink</span> | default <span class="hljs-string">&quot;tea&quot;</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  food: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.favorite.food</span> | upper | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> if eq .Values.favorite.drink <span class="hljs-string">&quot;coffee&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  mug: &quot;true&quot;</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>注意这个删除字符的更改，很容易意外地出现情况：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">food: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.favorite.food</span> | upper | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> if eq .Values.favorite.drink <span class="hljs-string">&quot;coffee&quot;</span> -&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">mug: &quot;true&quot;</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end -&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>这样会变成<code>food: &quot;PIZZA&quot;mug:&quot;true&quot;</code>，因为这把两边的新行都删除了。</p><p>最终，有时这更容易告诉模板系统如何缩进，而不是试图控制模板指令间的间距。因此，您有时会发现使用<code>indent</code>方法(<code>&#123;&#123; indent 2 "mug:true" &#125;&#125;</code>)会很有用。</p><h2 id="修改使用with的范围"><a href="#修改使用with的范围" class="headerlink" title="修改使用with的范围"></a>修改使用<code>with</code>的范围</h2><p><code>with</code>的语法与<code>if</code>语句类似：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-built_in">with</span></span> PIPELINE &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  # restricted scope</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>作用域可以被改变。<code>with</code>允许你为特定对象设定当前作用域(<code>.</code>)。比如，我们已经在使用<code>.Values.favorite</code>。 修改配置映射中的<code>.</code>的作用域指向<code>.Values.favorite</code>：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-configmap</span><br><span class="language-xml">data:</span><br><span class="language-xml">  myvalue: &quot;Hello World&quot;</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> with .Values.favorite &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.drink</span> | default <span class="hljs-string">&quot;tea&quot;</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  food: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.food</span> | upper | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><p> 注意现在可以引用<code>.drink</code>和<code>.food</code>了，而不必限定他们。因为<code>with</code>语句设置了<code>.</code>指向<code>.Values.favorite</code>。 <code>.</code>被重置为<code>&#123;&#123; end &#125;&#125;</code>之后的上一个作用域。</p><p>但是这里有个注意事项，在限定的作用域内，无法使用<code>.</code>访问父作用域的对象。错误示例如下：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> with .Values.favorite &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.drink</span> | default <span class="hljs-string">&quot;tea&quot;</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">food: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.food</span> | upper | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">release: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>这样会报错因为<code>Release.Name</code>不在<code>.</code>限定的作用域内。但是如果对调最后两行就是正常的， 因为在<code>&#123;&#123; end &#125;&#125;</code>之后作用域被重置了。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> with .Values.favorite &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.drink</span> | default <span class="hljs-string">&quot;tea&quot;</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">food: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.food</span> | upper | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">release: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>或者，我们可以使用<code>$</code>从父作用域中访问<code>Release.Name</code>对象。当模板开始执行后<code>$</code>会被映射到根作用域，且执行过程中不会更改。 下面这种方式也可以正常工作：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> with .Values.favorite &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.drink</span> | default <span class="hljs-string">&quot;tea&quot;</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">food: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.food</span> | upper | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">release: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$.Release.Name</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="使用range操作循环"><a href="#使用range操作循环" class="headerlink" title="使用range操作循环"></a>使用<code>range</code>操作循环</h2><p>在Helm的模板语言中，在一个集合中迭代的方式是使用<code>range</code>操作符。</p><p>开始之前，我们先在<code>values.yaml</code>文件添加一个披萨的配料列表：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">favorite</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">drink</span><span class="hljs-punctuation">:</span> <span class="hljs-string">coffee</span><br>  <span class="hljs-attribute">food</span><span class="hljs-punctuation">:</span> <span class="hljs-string">pizza</span><br><span class="hljs-attribute">pizzaToppings</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mushrooms</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cheese</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">peppers</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">onions</span><br></code></pre></td></tr></table></figure><p>现在我们有了一个<code>pizzaToppings</code>列表（模板中称为切片）。修改模板把这个列表打印到配置映射中：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-configmap</span><br><span class="language-xml">data:</span><br><span class="language-xml">  myvalue: &quot;Hello World&quot;</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> with .Values.favorite &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.drink</span> | default <span class="hljs-string">&quot;tea&quot;</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  food: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.food</span> | upper | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  toppings: |-</span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> range .Values.pizzaToppings &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    - </span><span class="hljs-template-variable">&#123;&#123; . | <span class="hljs-name">title</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="language-xml">    </span><br></code></pre></td></tr></table></figure><p>我可以使用<code>$</code>从父作用域访问<code>Values.pizzaToppings</code>列表。当模板开始执行后<code>$</code>会被映射到根作用域， 且执行过程中不会更改。下面这种方式也可以正常工作：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-configmap</span><br><span class="language-xml">data:</span><br><span class="language-xml">  myvalue: &quot;Hello World&quot;</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> with .Values.favorite &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.drink</span> | default <span class="hljs-string">&quot;tea&quot;</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  food: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.food</span> | upper | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  toppings: |-</span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> range $.Values.pizzaToppings &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    - </span><span class="hljs-template-variable">&#123;&#123; . | <span class="hljs-name">title</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="language-xml">    </span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>让我们仔细看看<code>toppings:</code>列表。<code>range</code>方法“涵盖”（迭代）<code>pizzaToppings</code>列表。但现在发生了有意思的事情。 就像<code>with</code>设置了<code>.</code>的作用域，<code>range</code>操作符也做了同样的事。每一次循环，<code>.</code>都会设置为当前的披萨配料。 也就是说，第一次<code>.</code>设置成了<code>mushrooms</code>，第二次迭代设置成了<code>cheese</code>，等等。</p><p>我们可以直接发送<code>.</code>的值给管道，因此当我们执行<code>&#123;&#123; . | title | quote &#125;&#125;</code>时，它会发送<code>.</code>到<code>title</code>然后发送到<code>quote</code>。 如果执行这个模板，输出是这样的：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> edgy-dragonfly-configmap<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-symbol">  drink:</span> <span class="hljs-string">&quot;coffee&quot;</span><br><span class="hljs-symbol">  food:</span> <span class="hljs-string">&quot;PIZZA&quot;</span><br><span class="hljs-symbol">  toppings:</span> |-<br>    - <span class="hljs-string">&quot;Mushrooms&quot;</span><br>    - <span class="hljs-string">&quot;Cheese&quot;</span><br>    - <span class="hljs-string">&quot;Peppers&quot;</span><br>    - <span class="hljs-string">&quot;Onions&quot;</span>    <br></code></pre></td></tr></table></figure><p>现在，我们已经处理了一些棘手的事情。<code>toppings: |-</code>行是声明的多行字符串。所以这个配料列表实际上不是YAML列表， 是个大字符串。为什么要这样做？因为在配置映射<code>data</code>中的数据是由键值对组成，key和value都是简单的字符串。 </p><blockquote><p>正如例子中所示，<code>|-</code>标识在YAML中是指多行字符串。这在清单列表中嵌入大块数据是很有用的技术。</p></blockquote><p>有时能在模板中快速创建列表然后迭代很有用，Helm模板的<code>tuple</code>可以很容易实现该功能。在计算机科学中， 元组表示一个有固定大小的类似列表的集合，但可以是任意数据类型。这大致表达了<code>tuple</code>的用法。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">sizes: |-</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> range tuple <span class="hljs-string">&quot;small&quot;</span> <span class="hljs-string">&quot;medium&quot;</span> <span class="hljs-string">&quot;large&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  - </span><span class="hljs-template-variable">&#123;&#123; . &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="language-xml">    </span><br></code></pre></td></tr></table></figure><p>上述模板会生成以下内容：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">sizes</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|-</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">small</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">medium</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">large    </span><br></code></pre></td></tr></table></figure><p>除了列表和元组，<code>range</code>可被用于迭代有键值对的集合（像<code>map</code>或<code>dict</code>）。我们会在下一部分介绍模板变量是看到它是如何应用的。</p><h1 id="七、变量"><a href="#七、变量" class="headerlink" title="七、变量"></a>七、变量</h1><p>在<code>with</code>块开始之前，赋值<code>$relname := .Release.Name</code>。 现在在<code>with</code>块中，<code>$relname</code>变量仍会执行版本名称。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-configmap</span><br><span class="language-xml">data:</span><br><span class="language-xml">  myvalue: &quot;Hello World&quot;</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> $relname <span class="hljs-attr">:</span>= .Release.Name -&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> with .Values.favorite &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  drink: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.drink</span> | default <span class="hljs-string">&quot;tea&quot;</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  food: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.food</span> | upper | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  release: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$relname</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>运行之后会生成以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master01</span> <span class="hljs-string">mychart</span>]<span class="hljs-comment"># helm install solid-vulture ../mychart --dry-run --debug</span><br><span class="hljs-attr">MANIFEST:</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">solid-vulture-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br>  <span class="hljs-attr">drink:</span> <span class="hljs-string">&quot;coffee&quot;</span><br>  <span class="hljs-attr">food:</span> <span class="hljs-string">&quot;PIZZA&quot;</span><br>  <span class="hljs-attr">release:</span> <span class="hljs-string">solid-vulture</span><br></code></pre></td></tr></table></figure><p>变量在<code>range</code>循环中特别有用。可以用于类似列表的对象，以捕获索引和值：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">toppings: |-</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> range $index, $topping <span class="hljs-attr">:</span>= .Values.pizzaToppings &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$index</span> &#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$topping</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="language-xml">    </span><br></code></pre></td></tr></table></figure><p>注意先是<code>range</code>，然后是变量，然后是赋值运算符，然后是列表。会将整型索引（从0开始）赋值给<code>$index</code>并将值赋值给<code>$topping</code>。 执行会生成：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">toppings</span><span class="hljs-punctuation">:</span> <span class="hljs-string">|-</span><br>    <span class="hljs-attribute">0</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mushrooms</span><br>    <span class="hljs-attribute">1</span><span class="hljs-punctuation">:</span> <span class="hljs-string">cheese</span><br>    <span class="hljs-attribute">2</span><span class="hljs-punctuation">:</span> <span class="hljs-string">peppers</span><br>    <span class="hljs-attribute">3</span><span class="hljs-punctuation">:</span> <span class="hljs-string">onions      </span><br></code></pre></td></tr></table></figure><p>对于数据结构有key和value，可以使用<code>range</code>获取key和value。比如，可以通过<code>.Values.favorite</code>进行循环：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-configmap</span><br><span class="language-xml">data:</span><br><span class="language-xml">  myvalue: &quot;Hello World&quot;</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> range $key, $val <span class="hljs-attr">:</span>= .Values.favorite &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$key</span> &#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$val</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>第一次迭代，<code>$key</code>会是<code>drink</code>且<code>$val</code>会是<code>coffee</code>，第二次迭代<code>$key</code>会是<code>food</code>且<code>$val</code>会是<code>pizza</code>。 运行之后会生成：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> eager-rabbit-configmap<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-symbol">  drink:</span> <span class="hljs-string">&quot;coffee&quot;</span><br><span class="hljs-symbol">  food:</span> <span class="hljs-string">&quot;pizza&quot;</span><br></code></pre></td></tr></table></figure><p>变量一般不是”全局的”。作用域是其声明所在的块。上面我们在模板的顶层赋值了<code>$relname</code>。变量的作用域会是整个模板。 但在最后一个例子中<code>$key</code>和<code>$val</code>作用域会在<code>&#123;&#123; range... &#125;&#125;&#123;&#123; end &#125;&#125;</code>块内。</p><p>但有个变量一直是全局的 - <code>$</code> - 这个变量一直是指向根的上下文。当在一个范围内循环时会很有用，同时你要知道chart的版本名称。</p><h1 id="八、命名模板"><a href="#八、命名模板" class="headerlink" title="八、命名模板"></a>八、命名模板</h1><p><strong>模板名称是全局的</strong>。如果您想声明两个相同名称的模板，哪个最后加载就使用哪个。 因为在子chart中的模板和顶层模板一起编译，命名时要注意 <em>chart特定名称</em>。</p><p>常见命名惯例是用chart名称作为模板前缀：<code>&#123;&#123; define "mychart.labels" &#125;&#125;</code>。使用特定chart名称作为前缀可以避免可能因为 两个不同chart使用了相同名称的模板而引起的冲突。</p><h2 id="局部的和-文件"><a href="#局部的和-文件" class="headerlink" title="局部的和_文件"></a>局部的和<code>_</code>文件</h2><p>在编写模板细节之前，文件的命名惯例需要注意：</p><ul><li><code>templates/</code>中的大多数文件被视为包含Kubernetes清单</li><li><code>NOTES.txt</code>是个例外</li><li>命名以下划线(<code>_</code>)开始的文件则假定 <em>没有</em> 包含清单内容。这些文件不会渲染为Kubernetes对象定义，但在其他chart模板中都可用。</li></ul><p>这些文件用来存储局部和辅助对象，实际上当我们第一次创建<code>mychart</code>时，会看到一个名为<code>_helpers.tpl</code>的文件，这个文件是模板局部的默认位置。</p><h2 id="用define和template声明和使用模板"><a href="#用define和template声明和使用模板" class="headerlink" title="用define和template声明和使用模板"></a>用<code>define</code>和<code>template</code>声明和使用模板</h2><p><code>define</code>操作允许我们在模板文件中创建一个命名模板，语法如下：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> define <span class="hljs-string">&quot;MY.NAME&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  # body of template here</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>比如我们可以定义一个模板封装Kubernetes的标签：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> define <span class="hljs-string">&quot;mychart.labels&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  labels:</span><br><span class="language-xml">    generator: helm</span><br><span class="language-xml">    date: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">now</span> | htmlDate &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>现在我们将模板嵌入到了已有的配置映射中，然后使用<code>template</code>包含进来：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> define <span class="hljs-string">&quot;mychart.labels&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  labels:</span><br><span class="language-xml">    generator: helm</span><br><span class="language-xml">    date: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">now</span> | htmlDate &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-configmap</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> template <span class="hljs-string">&quot;mychart.labels&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">data:</span><br><span class="language-xml">  myvalue: &quot;Hello World&quot;</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> range $key, $val <span class="hljs-attr">:</span>= .Values.favorite &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$key</span> &#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$val</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>当模板引擎读取该文件时，它会存储<code>mychart.labels</code>的引用直到<code>template &quot;mychart.labels&quot;</code>被调用。 然后会按行渲染模板，因此结果类似这样：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> running-panda-configmap<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    generator:</span> helm<br><span class="hljs-symbol">    date:</span> <span class="hljs-number">2016</span><span class="hljs-number">-11</span><span class="hljs-number">-02</span><br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-symbol">  drink:</span> <span class="hljs-string">&quot;coffee&quot;</span><br><span class="hljs-symbol">  food:</span> <span class="hljs-string">&quot;pizza&quot;</span><br></code></pre></td></tr></table></figure><p>注意：<code>define</code>不会有输出，除非像本示例一样用模板调用它。</p><p>按照惯例，Helm chart将这些模板放置在局部文件中，一般是<code>_helpers.tpl</code>。把这个方法移到那里：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-tag">&#123;&#123;/* <span class="hljs-name">Generate</span> <span class="hljs-name">basic</span> <span class="hljs-name">labels</span> */&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> define <span class="hljs-string">&quot;mychart.labels&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  labels:</span><br><span class="language-xml">    generator: helm</span><br><span class="language-xml">    date: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">now</span> | htmlDate &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>按照惯例<code>define</code>方法会有个简单的文档块(<code>&#123;&#123;/* ... */&#125;&#125;</code>)来描述要做的事。</p><p>尽管这个定义是在<code>_helpers.tpl</code>中，但它仍能访问<code>configmap.yaml</code>：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-configmap</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> template <span class="hljs-string">&quot;mychart.labels&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">data:</span><br><span class="language-xml">  myvalue: &quot;Hello World&quot;</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> range $key, $val <span class="hljs-attr">:</span>= .Values.favorite &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$key</span> &#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$val</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>如上所述，<strong>模板名称是全局的</strong>。因此，如果两个模板使用相同名字声明，会使用最后出现的那个。由于子chart中的模板和顶层模板一起编译， 最好用 <em>chart特定名称</em> 命名你的模板。常用的命名规则是用chart的名字作为模板的前缀： <code>&#123;&#123; define "mychart.labels" &#125;&#125;</code>。</p><h2 id="设置模板范围"><a href="#设置模板范围" class="headerlink" title="设置模板范围"></a>设置模板范围</h2><p>在上面定义的模板中，我们没有使用任何对象，仅仅使用了方法。修改定义好的模板让其包含chart名称和版本号：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-tag">&#123;&#123;/* <span class="hljs-name">Generate</span> <span class="hljs-name">basic</span> <span class="hljs-name">labels</span> */&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> define <span class="hljs-string">&quot;mychart.labels&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  labels:</span><br><span class="language-xml">    generator: helm</span><br><span class="language-xml">    date: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">now</span> | htmlDate &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    chart: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Chart.Name</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    version: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Chart.Version</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>如果渲染这个，会得到以下错误：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ helm install <span class="hljs-comment">--dry-run moldy-jaguar ./mychart</span><br>Error: unable <span class="hljs-keyword">to</span> build kubernetes objects <span class="hljs-keyword">from</span> <span class="hljs-keyword">release</span> manifest: error validating &quot;&quot;: error validating data: [<span class="hljs-type">unknown</span> <span class="hljs-keyword">object</span> <span class="hljs-keyword">type</span> &quot;nil&quot; <span class="hljs-keyword">in</span> ConfigMap.metadata.labels.chart, <span class="hljs-type">unknown</span> <span class="hljs-keyword">object</span> <span class="hljs-keyword">type</span> &quot;nil&quot; <span class="hljs-keyword">in</span> ConfigMap.metadata.labels.<span class="hljs-keyword">version</span>]<br></code></pre></td></tr></table></figure><p>要查看渲染了什么，可以用<code>--disable-openapi-validation</code>参数重新执行： <code>helm install --dry-run --disable-openapi-validation moldy-jaguar ./mychart</code>。 结果并不是我们想要的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">moldy-jaguar-configmap</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">generator:</span> <span class="hljs-string">helm</span><br>    <span class="hljs-attr">date:</span> <span class="hljs-number">2021-03-06</span><br>    <span class="hljs-attr">chart:</span><br>    <span class="hljs-attr">version:</span><br></code></pre></td></tr></table></figure><p>名字和版本号怎么了？没有出现在我们定义的模板中。当一个（使用<code>define</code>创建的）命名模板被渲染时，会接收被<code>template</code>调用传入的内容。 在我们的示例中，包含模板如下：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> template <span class="hljs-string">&quot;mychart.labels&quot;</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>没有内容传入，所以模板中无法用<code>.</code>访问任何内容。但这个很容易解决，只需要传递一个范围给模板：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-configmap</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> template <span class="hljs-string">&quot;mychart.labels&quot;</span> . &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>注意这个在<code>template</code>调用末尾传入的<code>.</code>，我们可以简单传入<code>.Values</code>或<code>.Values.favorite</code>或其他需要的范围。但一定要是顶层范围。</p><p>现在我们可以用<code>helm install --dry-run --debug plinking-anaco ./mychart</code>执行模板，然后得到：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">plinking-anaco-configmap</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">generator:</span> <span class="hljs-string">helm</span><br>    <span class="hljs-attr">date:</span> <span class="hljs-number">2021-03-06</span><br>    <span class="hljs-attr">chart:</span> <span class="hljs-string">mychart</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><p>现在<code>&#123;&#123; .Chart.Name &#125;&#125;</code>解析为<code>mychart</code>，<code>&#123;&#123; .Chart.Version &#125;&#125;</code>解析为<code>0.1.0</code>。</p><h2 id="include方法"><a href="#include方法" class="headerlink" title="include方法"></a><code>include</code>方法</h2><p>假设定义了一个简单模板如下：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> define <span class="hljs-string">&quot;mychart.app&quot;</span> -&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">app_name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Chart.Name</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">app_version: &quot;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Chart.Version</span> &#125;&#125;</span><span class="language-xml">&quot;</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end -&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>现在假设我想把这个插入到模板的<code>labels:</code>部分和<code>data:</code>部分：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-configmap</span><br><span class="language-xml">  labels:</span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-built_in">template</span></span> <span class="hljs-string">&quot;mychart.app&quot;</span> . &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">data:</span><br><span class="language-xml">  myvalue: &quot;Hello World&quot;</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> range $key, $val <span class="hljs-attr">:</span>= .Values.favorite &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$key</span> &#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$val</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-built_in">template</span></span> <span class="hljs-string">&quot;mychart.app&quot;</span> . &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>如果渲染这个，会得到以下错误：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ helm install --dry-<span class="hljs-built_in">run</span> measly-whippet ./mychart<br>Error: unable <span class="hljs-keyword">to</span> build kubernetes objects <span class="hljs-keyword">from</span> release manifest: <span class="hljs-built_in">error</span> validating <span class="hljs-string">&quot;&quot;</span>: <span class="hljs-built_in">error</span> validating data: [ValidationError(ConfigMap): unknown field <span class="hljs-string">&quot;app_name&quot;</span> <span class="hljs-keyword">in</span> io.k8s.api.core.v1.ConfigMap, ValidationError(ConfigMap): unknown field <span class="hljs-string">&quot;app_version&quot;</span> <span class="hljs-keyword">in</span> io.k8s.api.core.v1.ConfigMap]<br></code></pre></td></tr></table></figure><p>要查看渲染了什么，可以用<code>--disable-openapi-validation</code>参数重新执行： <code>helm install --dry-run --disable-openapi-validation measly-whippet ./mychart</code>。 输入不是我们想要的：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> measly-whippet-configmap<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    app_name:</span> mychart<br><span class="hljs-symbol">app_version:</span> <span class="hljs-string">&quot;0.1.0&quot;</span><br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-symbol">  drink:</span> <span class="hljs-string">&quot;coffee&quot;</span><br><span class="hljs-symbol">  food:</span> <span class="hljs-string">&quot;pizza&quot;</span><br><span class="hljs-symbol">app_name:</span> mychart<br><span class="hljs-symbol">app_version:</span> <span class="hljs-string">&quot;0.1.0&quot;</span><br></code></pre></td></tr></table></figure><p>注意两处的<code>app_version</code>缩进都不对，为啥？因为被替换的模板中文本是左对齐的。由于<code>template</code>是一个行为，不是方法，无法将 <code>template</code>调用的输出传给其他方法，数据只是简单地按行插入。</p><p>为了处理这个问题，Helm提供了一个<code>template</code>的可选项，可以将模板内容导入当前管道，然后传递给管道中的其他方法。</p><p>下面这个示例，使用<code>indent</code>正确地缩进了<code>mychart.app</code>模板：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-configmap</span><br><span class="language-xml">  labels:</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">include</span> <span class="hljs-string">&quot;mychart.app&quot;</span> . | indent <span class="hljs-number">4</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">data:</span><br><span class="language-xml">  myvalue: &quot;Hello World&quot;</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> range $key, $val <span class="hljs-attr">:</span>= .Values.favorite &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$key</span> &#125;&#125;</span><span class="language-xml">: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$val</span> | quote &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">include</span> <span class="hljs-string">&quot;mychart.app&quot;</span> . | indent <span class="hljs-number">2</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>现在生成的YAML每一部分都可以正确缩进了：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> edgy-mole-configmap<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    app_name:</span> mychart<br><span class="hljs-symbol">    app_version:</span> <span class="hljs-string">&quot;0.1.0&quot;</span><br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  myvalue:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-symbol">  drink:</span> <span class="hljs-string">&quot;coffee&quot;</span><br><span class="hljs-symbol">  food:</span> <span class="hljs-string">&quot;pizza&quot;</span><br><span class="hljs-symbol">  app_name:</span> mychart<br><span class="hljs-symbol">  app_version:</span> <span class="hljs-string">&quot;0.1.0&quot;</span><br></code></pre></td></tr></table></figure><h1 id="九、在模板内部访问文件"><a href="#九、在模板内部访问文件" class="headerlink" title="九、在模板内部访问文件"></a>九、在模板内部访问文件</h1><p>Helm 提供了通过.Files对象访问文件的方法。不过，在我们使用模板示例之前，有些事情需要注意：</p><p>可以添加额外的文件到chart中。虽然这些文件会被绑定。但是要小心，由于Kubernetes对象的限制，Chart必须小于1M。<br>通常处于安全考虑，一些文件无法通过.Files对象访问：</p><ul><li>无法访问templates/中的文件</li><li>无法访问使用.helmignore排除的文件</li></ul><p><strong>Basic example</strong></p><p>直接放到mychart/myexample目录中。</p><p><code>config1.toml</code>:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">message</span> <span class="hljs-operator">=</span> Hello from config <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><code>config2.toml</code>:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">message</span> <span class="hljs-operator">=</span> This is config <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><code>config3.toml</code>:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">message</span> <span class="hljs-operator">=</span> Goodbye from config <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>使用<code>range</code>功能遍历它们并将它们的内容注入到我们的ConfigMap中。 </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-configmap</span><br><span class="language-xml">data:</span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> $files <span class="hljs-attr">:</span>= .Files &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> range tuple <span class="hljs-string">&quot;myexample/config1.tom&quot;</span> <span class="hljs-string">&quot;myexample/config2.tom&quot;</span> <span class="hljs-string">&quot;myexample/config3.tom&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; . &#125;&#125;</span><span class="language-xml">: |-</span><br><span class="language-xml">        </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$files.Get</span> . &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master01</span> <span class="hljs-string">mychart</span>]<span class="hljs-comment"># helm install solid-vulture ../mychart --dry-run --debug                      </span><br><span class="hljs-attr">MANIFEST:</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">solid-vulture-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myexample/config1.tom:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">        message = Hello from config 1</span><br><span class="hljs-string"></span><br>  <span class="hljs-attr">myexample/config2.tom:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">        message = This is config 2</span><br><span class="hljs-string"></span><br>  <span class="hljs-attr">myexample/config3.tom:</span> <span class="hljs-string">|-</span><br>        <span class="hljs-string">message</span> <span class="hljs-string">=</span> <span class="hljs-string">This</span> <span class="hljs-string">is</span> <span class="hljs-string">config</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="Glob-patterns"><a href="#Glob-patterns" class="headerlink" title="Glob patterns"></a>Glob patterns</h2><p>当你的chart不断变大时，你会发现你强烈需要组织你的文件，所以我们提供了一个 <code>Files.Glob(pattern string)</code>方法来使用 <a href="https://godoc.org/github.com/gobwas/glob">全局模式</a>的灵活性读取特定文件。</p><p><code>.Glob</code>返回一个<code>Files</code>类型，因此你可以在返回对象上调用任意的<code>Files</code>方法。</p><p>比如，假设有这样的目录结构：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">foo/:<br>  foo<span class="hljs-selector-class">.txt</span> foo<span class="hljs-selector-class">.yaml</span><br>bar/:<br>  bar<span class="hljs-selector-class">.go</span> bar<span class="hljs-selector-class">.conf</span> baz.yaml<br></code></pre></td></tr></table></figure><p>全局模式下您有多种选择：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$currentScope</span> <span class="hljs-attr">:</span>= .&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">range</span> $path, $_ <span class="hljs-attr">:</span>=  .Files.Glob  <span class="hljs-string">&quot;**.yaml&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> with $currentScope&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Files.Get</span> $path &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> end &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>Or</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">range</span> $path, $_ <span class="hljs-attr">:</span>=  .Files.Glob  <span class="hljs-string">&quot;**.yaml&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">      </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">$.Files.Get</span> $path &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="ConfigMap-and-Secrets-utility-functions"><a href="#ConfigMap-and-Secrets-utility-functions" class="headerlink" title="ConfigMap and Secrets utility functions"></a>ConfigMap and Secrets utility functions</h2><p>（在Helm 2.0.2及后续版本可用）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">conf</span><br><span class="hljs-attr">data:</span><br>&#123;&#123; <span class="hljs-string">(.Files.Glob</span> <span class="hljs-string">&quot;foo/*&quot;</span><span class="hljs-string">).AsConfig</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">2</span> &#125;&#125;<br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Secret</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">very-secret</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">Opaque</span><br><span class="hljs-attr">data:</span><br>&#123;&#123; <span class="hljs-string">(.Files.Glob</span> <span class="hljs-string">&quot;bar/*&quot;</span><span class="hljs-string">).AsSecrets</span> <span class="hljs-string">|</span> <span class="hljs-string">indent</span> <span class="hljs-number">2</span> &#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="Encoding"><a href="#Encoding" class="headerlink" title="Encoding"></a>Encoding</h2><p>您可以导入一个文件并使用模板的base-64方式对其进行编码来保证成功传输：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> .Release.Name <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>-secret<br><span class="hljs-symbol">type:</span> Opaque<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  token:</span> |-<br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> .Files.Get <span class="hljs-string">&quot;config1.toml&quot;</span> | b64enc <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>上面的内容使用我们之前使用的相同的<code>config1.toml</code>文件进行编码：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Source: mychart/templates/secret.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> lucky-turkey-secret<br><span class="hljs-symbol">type:</span> Opaque<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  token:</span> |-<br>        bWVzc2FnZSA9IEhlbGxvIGZyb20gY29uZmlnIDEK<br></code></pre></td></tr></table></figure><h2 id="Lines"><a href="#Lines" class="headerlink" title="Lines"></a>Lines</h2><p>有时需要访问模板中的文件的每一行。我们提供了一个方便的<code>Lines</code>方法。</p><p>你可以使用<code>range</code>方法遍历<code>Lines</code>：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">data:</span><br><span class="language-xml">  some-file.txt: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">range</span> .Files.Lines <span class="hljs-string">&quot;foo/bar.txt&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; . &#125;&#125;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>在<code>helm install</code>过程中无法将文件传递到chart外。因此如果你想请求用户提供数据，必须使用<code>helm install -f</code>或<code>helm install --set</code>加载。</p><h1 id="十、创建一个NOTES-txt文件"><a href="#十、创建一个NOTES-txt文件" class="headerlink" title="十、创建一个NOTES.txt文件"></a>十、创建一个NOTES.txt文件</h1><p>该部分会介绍为chart用户提供说明的Helm工具。在<code>helm install</code> 或 <code>helm upgrade</code>命令的最后，Helm会打印出对用户有用的信息。 使用模板可以高度自定义这部分信息。</p><p>要在chart添加安装说明，只需创建<code>templates/NOTES.txt</code>文件即可。该文件是纯文本，但会像模板一样处理， 所有正常的模板函数和对象都是可用的。</p><p>让我们创建一个简单的<code>NOTES.txt</code>文件：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">Thank you for installing </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Chart.Name</span> &#125;&#125;</span><span class="language-xml">.</span><br><span class="language-xml"></span><br><span class="language-xml">Your release is named </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">.</span><br><span class="language-xml"></span><br><span class="language-xml">To learn more about the release, try:</span><br><span class="language-xml"></span><br><span class="language-xml">  $ helm status </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  $ helm get all </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>执行会在底部看到：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master01 mychart]# helm install solid-vulture <span class="hljs-built_in">..</span>/mychart --dry-<span class="hljs-built_in">run</span> --<span class="hljs-built_in">debug</span><br>NOTES:<br>Thank you <span class="hljs-keyword">for</span> installing mychart.<br><br>Your release is named solid-vulture.<br><br><span class="hljs-keyword">To</span> learn more about the release, try:<br><br>  $ helm status solid-vulture<br>  $ helm <span class="hljs-built_in">get</span> all solid-vulture<br></code></pre></td></tr></table></figure><p>使用<code>NOTES.txt</code>这种方式是给用户提供关于如何使用新安装的chart细节信息的好方法。尽管并不是必需的，强烈建议创建一个<code>NOTES.txt</code>文件。</p><h1 id="十一、子chart和全局值"><a href="#十一、子chart和全局值" class="headerlink" title="十一、子chart和全局值"></a>十一、子chart和全局值</h1><p>在深入研究代码之前，需要了解一些子chart的重要细节：</p><ol><li>子chart被认为是“独立的”，意味着子chart从来不会显示依赖它的父chart。</li><li>因此，子chart无法访问父chart的值。</li><li>父chart可以覆盖子chart的值。</li><li>Helm有一个 <em>全局值</em> 的概念，所有的chart都可以访问。</li></ol><h2 id="创建子chart"><a href="#创建子chart" class="headerlink" title="创建子chart"></a>创建子chart</h2><p>为了做这些练习，我们可以从本指南开始时创建的<code>mychart/</code>开始，并在其中添加一个新的chart。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> mychart/charts</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">helm create mysubchart</span><br>Creating mysubchart<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">rm</span> -rf mysubchart/templates/*</span><br></code></pre></td></tr></table></figure><h2 id="在子chart中添加值和模板"><a href="#在子chart中添加值和模板" class="headerlink" title="在子chart中添加值和模板"></a>在子chart中添加值和模板</h2><p>下一步，为<code>mysubchart</code>创建一个简单的模板和values文件。<code>mychart/charts/mysubchart</code>应该已经有一个<code>values.yaml</code>。 设置如下：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">dessert:</span> cake<br><br></code></pre></td></tr></table></figure><p>下一步，在<code>mychart/charts/mysubchart/templates/configmap.yaml</code>中创建一个新的配置映射模板：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> .Release.Name <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>-cfgmap2<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  dessert:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> .Values.dessert <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>因为每个子chart都是 <em>独立的chart</em>，可以单独测试<code>mysubchart</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master01</span> <span class="hljs-string">charts</span>]<span class="hljs-comment"># helm install mysubchart  mysubchart --dry-run --debug </span><br><span class="hljs-attr">MANIFEST:</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: mysubchart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysubchart-cfgmap2</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">dessert:</span> <span class="hljs-string">cake</span><br></code></pre></td></tr></table></figure><p>父chart测试mychart</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master01</span> <span class="hljs-string">charts</span>]<span class="hljs-comment"># helm install mychart  ../../mychart --dry-run --debug </span><br><span class="hljs-attr">MANIFEST:</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: mychart/charts/mysubchart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysubchart-cfgmap2</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">dessert:</span> <span class="hljs-string">cake</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mysubchart-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">myexample/config1.tom:</span> <span class="hljs-string">|-</span><br></code></pre></td></tr></table></figure><h2 id="用父chart的值来覆盖"><a href="#用父chart的值来覆盖" class="headerlink" title="用父chart的值来覆盖"></a>用父chart的值来覆盖</h2><p>原始chart，<code>mychart</code>现在是<code>mysubchart</code>的 <em>父</em>。这种关系是基于<code>mysubchart</code>在<code>mychart/charts</code>中这一事实。</p><p>因为<code>mychart</code>是父级，可以在<code>mychart</code>指定配置并将配置推送到<code>mysubchart</code>。比如可以修改<code>mychart/values.yaml</code>如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">favorite</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">drink</span><span class="hljs-punctuation">:</span> <span class="hljs-string">coffee</span><br>  <span class="hljs-attribute">food</span><span class="hljs-punctuation">:</span> <span class="hljs-string">pizza</span><br><span class="hljs-attribute">pizzaToppings</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mushrooms</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cheese</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">peppers</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">onions</span><br><br><span class="hljs-attribute">mysubchart</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">dessert</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ice cream</span><br></code></pre></td></tr></table></figure><p>注意最后两行，在<code>mysubchart</code>中的所有指令会被发送到<code>mysubchart</code>chart中。因此如果运行<code>helm install --dry-run --debug mychart</code>，会看到一项<code>mysubchart</code>的配置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Source: mychart/charts/mysubchart/templates/configmap.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> unhinged-bee-cfgmap2<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  dessert:</span> ice cream<br></code></pre></td></tr></table></figure><p>现在，子chart的值已经被顶层的值覆盖了。</p><p>这里需要注意个重要细节。我们不会改变<code>mychart/charts/mysubchart/templates/configmap.yaml</code>模板到 <code>.Values.mysubchart.dessert</code>的指向。从模板的角度来看，值依然是在<code>.Values.dessert</code>。当模板引擎传递值时，会设置范围。 因此对于<code>mysubchart</code>模板，<code>.Values</code>中只提供专门用于<code>mysubchart</code>的值。</p><p>但是有时确实希望某些值对所有模板都可用。这是使用全局chart值完成的。</p><h2 id="全局Chart值"><a href="#全局Chart值" class="headerlink" title="全局Chart值"></a>全局Chart值</h2><p>全局值是使用完全一样的名字在所有的chart及子chart中都能访问的值。全局变量需要显示声明。不能将现有的非全局值作为全局值使用。</p><p>这些值数据类型有个保留部分叫<code>Values.global</code>，可以用来设置全局值。在<code>mychart/values.yaml</code>文件中设置一个值如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">favorite</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">drink</span><span class="hljs-punctuation">:</span> <span class="hljs-string">coffee</span><br>  <span class="hljs-attribute">food</span><span class="hljs-punctuation">:</span> <span class="hljs-string">pizza</span><br><span class="hljs-attribute">pizzaToppings</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mushrooms</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cheese</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">peppers</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">onions</span><br><br><span class="hljs-attribute">mysubchart</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">dessert</span><span class="hljs-punctuation">:</span> <span class="hljs-string">ice cream</span><br><br><span class="hljs-attribute">global</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">salad</span><span class="hljs-punctuation">:</span> <span class="hljs-string">caesar</span><br></code></pre></td></tr></table></figure><p>因为全局的工作方式，<code>mychart/templates/configmap.yaml</code>和<code>mysubchart/templates/configmap.yaml</code> 应该都能以<code>&#123;&#123; .Values.global.salad &#125;&#125;</code>进行访问。</p><p><code>mychart/templates/configmap.yaml</code>:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> ConfigMap<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> .Release.Name <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>-configmap<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  salad:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span> .Values.global.salad <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>mysubchart/templates/configmap.yaml</code>:</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">apiVersion: v1</span><br><span class="language-xml">kind: ConfigMap</span><br><span class="language-xml">metadata:</span><br><span class="language-xml">  name: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Release.Name</span> &#125;&#125;</span><span class="language-xml">-cfgmap2</span><br><span class="language-xml">data:</span><br><span class="language-xml">  dessert: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.dessert</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  salad: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">.Values.global.salad</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>现在如果预安装，两个输出会看到相同的值：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Source: mychart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">silly-snake-configmap</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">salad:</span> <span class="hljs-string">caesar</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># Source: mychart/charts/mysubchart/templates/configmap.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">silly-snake-cfgmap2</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">dessert:</span> <span class="hljs-string">ice</span> <span class="hljs-string">cream</span><br>  <span class="hljs-attr">salad:</span> <span class="hljs-string">caesar</span><br></code></pre></td></tr></table></figure><p>全局值在类似这样传递信息时很有用，不过要确保使用全局值配置正确的模板，确实需要一些计划。</p><h2 id="与子chart共享模板"><a href="#与子chart共享模板" class="headerlink" title="与子chart共享模板"></a>与子chart共享模板</h2><p>父chart和子chart可以共享模板。在任意chart中定义的块在其他chart中也是可用的。</p><p>比如，我们可以这样定义一个简单的模板：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">-</span> define <span class="hljs-string">&quot;labels&quot;</span> &#125;&#125;</span><span class="language-xml">from: mychart</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>回想一下模板标签时如何 <em>全局共享的</em>。因此，<code>标签</code>chart可以包含在任何其他chart中。</p><p>当chart开发者在<code>include</code> 和 <code>template</code> 之间选择时，使用<code>include</code>的一个优势是<code>include</code>可以动态引用模板：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">include</span> $mytemplate &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>上述会取消对<code>$mytemplate</code>的引用，相反，<code>template</code>函数只接受字符串字符。</p><h2 id="避免使用块"><a href="#避免使用块" class="headerlink" title="避免使用块"></a>避免使用块</h2><p>Go 模板语言提供了一个 <code>block</code> 关键字允许开发者提供一个稍后会被重写的默认实现。在Helm chart中， 块并不是用于覆盖的最好工具，因为如果提供了同一个块的多个实现，无法预测哪个会被选定。</p><p>建议改为使用<code>include</code>。</p><h1 id="十二、-helmignore-文件"><a href="#十二、-helmignore-文件" class="headerlink" title="十二、.helmignore 文件"></a>十二、.helmignore 文件</h1><p><code>.helmignore</code> 文件用来指定你不想包含在你的helm chart中的文件。</p><p>如果该文件存在，<code>helm package</code> 命令会在打包应用时忽略所有在<code>.helmignore</code>文件中匹配的文件。</p><p>这有助于避免不需要的或敏感文件及目录添加到你的helm chart中。</p><p><code>.helmignore</code> 文件支持Unix shell的全局匹配，相对路径匹配，以及反向匹配（以！作为前缀）。每行只考虑一种模式。</p><p>这里是一个<code>.helmignore</code>文件示例：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">.git</span><br>*<span class="hljs-string">.txt</span><br>mydir/<br>/*<span class="hljs-string">.txt</span><br><span class="hljs-string">/foo.txt</span><br>a[b-d]<span class="hljs-string">.txt</span><br>*<span class="hljs-string">/temp</span>*<br>*/*<span class="hljs-string">/temp</span>*<br>temp?<br></code></pre></td></tr></table></figure><p>一些值得注意的和.gitignore不同之处：</p><ul><li>不支持’**’语法。</li><li>globbing库是Go的 ‘filepath.Match’，不是fnmatch(3)</li><li>末尾空格总会被忽略(不支持转义序列)</li><li>不支持’!’作为特殊的引导序列</li></ul>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>helm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>helm快速入门</title>
    <link href="/2021/08/16/k8s/helm/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2021/08/16/k8s/helm/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>Helm 是一个 Kubernetes 的包管理工具，就像 Linux 下的包管理器，如 yum/apt 等，可以很方便的将之前打包好的 yaml 文件部署到 kubernetes 上。 </p><p>Helm 有 3 个重要概念： </p><p>（1）helm：一个命令行客户端工具，主要用于 Kubernetes 应用 chart 的创建、打包、发 布和管理。 </p><p>（2）Chart：应用描述，一系列用于描述 k8s 资源相关文件的集合。 </p><p>（3）Release：基于 Chart 的部署实体，一个 chart 被 Helm 运行后将会生成对应的一个 release；将在 k8s 中创建出真实运行的资源对象。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Helm</span> VersionSupported Kubernetes Versions<br><span class="hljs-attribute">3</span>.<span class="hljs-number">9</span>.x<span class="hljs-number">1</span>.<span class="hljs-number">24</span>.x - <span class="hljs-number">1</span>.<span class="hljs-number">21</span>.x<br><span class="hljs-attribute">3</span>.<span class="hljs-number">8</span>.x<span class="hljs-number">1</span>.<span class="hljs-number">23</span>.x - <span class="hljs-number">1</span>.<span class="hljs-number">20</span>.x<br><span class="hljs-attribute">3</span>.<span class="hljs-number">7</span>.x<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.x - <span class="hljs-number">1</span>.<span class="hljs-number">19</span>.x<br></code></pre></td></tr></table></figure><p>Helm v3 变化：</p><img src="/2021/08/16/k8s/helm/helm%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/image-20210906174450605.png" class="" title="image-20210906174450605"><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -c https:<span class="hljs-regexp">//g</span>et.helm.sh/helm-v3.<span class="hljs-number">9.2</span>-linux-amd64.tar.gz<br>tar -xf helm-v3.<span class="hljs-number">9.2</span>-linux-amd64.tar.gz<br>cd linux-amd64/<br>mv helm <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span><br></code></pre></td></tr></table></figure><h2 id="2-1-配置国内-chart-仓库"><a href="#2-1-配置国内-chart-仓库" class="headerlink" title="2.1 配置国内 chart 仓库"></a>2.1 配置国内 chart 仓库</h2><p>微软仓库（<a href="http://mirror.azure.cn/kubernetes/charts/%EF%BC%89%E8%BF%99%E4%B8%AA%E4%BB%93%E5%BA%93%E6%8E%A8%E8%8D%90%EF%BC%8C%E5%9F%BA%E6%9C%AC%E4%B8%8A%E5%AE%98%E7%BD%91%E6%9C%89%E7%9A%84">http://mirror.azure.cn/kubernetes/charts/）这个仓库推荐，基本上官网有的</a> chart 这里都有。 </p><p>阿里云仓库（<a href="https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts">https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</a> ）</p><p>官方仓库（<a href="https://hub.kubeapps.com/charts/incubator%EF%BC%89%E5%AE%98%E6%96%B9">https://hub.kubeapps.com/charts/incubator）官方</a> chart 仓库，国内有点不好使。</p><p><strong>添加存储库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">helm repo add stable http://mirror.azure.cn/kubernetes/charts</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">helm repo add aliyun https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">helm repo update</span><br></code></pre></td></tr></table></figure><p><strong>查看配置的存储库</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">helm repo list</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">helm search repo stable</span><br></code></pre></td></tr></table></figure><p><strong>删除存储库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">helm repo remove aliyun<br></code></pre></td></tr></table></figure><h1 id="三、命令"><a href="#三、命令" class="headerlink" title="三、命令"></a>三、命令</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>dependency</td><td>管理 chart 依赖</td></tr><tr><td>get</td><td>下载一个 release。可用子命令：all、hooks、manifest、notes、values</td></tr><tr><td>history</td><td>获取 release 历史</td></tr><tr><td>install</td><td>安装一个 chart</td></tr><tr><td>list</td><td>列出 release</td></tr><tr><td>package</td><td>将 chart 目录打包到 chart 存档文件中</td></tr><tr><td>pull</td><td>从远程仓库中下载 chart 并解压到本地 # helm pull stable/mysql –untar</td></tr><tr><td>repo</td><td>添加，列出，移除，更新和索引 chart 仓库。可用子命令：add、index、</td></tr><tr><td>rollback</td><td>从之前版本回滚</td></tr><tr><td>search</td><td>根据关键字搜索 chart。可用子命令：hub、repo</td></tr><tr><td>show</td><td>查看 chart 详细信息。可用子命令：all、chart、readme、values</td></tr><tr><td>status</td><td>显示已命名版本的状态</td></tr><tr><td>template</td><td>本地呈现模板</td></tr><tr><td>uninstall</td><td>卸载一个 release</td></tr><tr><td>upgrade</td><td>更新一个 release</td></tr><tr><td>version</td><td>查看 helm 客户端版本</td></tr></tbody></table><h2 id="3-1-添加库"><a href="#3-1-添加库" class="headerlink" title="3.1 添加库"></a>3.1 添加库</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">添加图表存储库<br><span class="hljs-symbol">helm</span> repo <span class="hljs-keyword">add</span> bitnami https:<span class="hljs-comment">//charts.bitnami.com/bitnami</span><br></code></pre></td></tr></table></figure><h2 id="3-2-列出可以安装的"><a href="#3-2-列出可以安装的" class="headerlink" title="3.2 列出可以安装的"></a>3.2 列出可以安装的</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 列入可以安装的bitnami库</span><br>helm search repo <span class="hljs-keyword">bitnami </span><br></code></pre></td></tr></table></figure><h2 id="3-3-更新charts"><a href="#3-3-更新charts" class="headerlink" title="3.3 更新charts"></a>3.3 更新charts</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">helm repo update</span> <br></code></pre></td></tr></table></figure><h2 id="3-4-安装"><a href="#3-4-安装" class="headerlink" title="3.4 安装"></a>3.4 安装</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">helm install bitnami/mysql --<span class="hljs-keyword">generate</span>-name<br># values配置覆盖安装<br>helm install -f values<span class="hljs-variable">.yaml</span> bitnami/wordpress --<span class="hljs-keyword">generate</span>-name<br></code></pre></td></tr></table></figure><h2 id="3-5-列表"><a href="#3-5-列表" class="headerlink" title="3.5  列表"></a>3.5  列表</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">helm list -<span class="hljs-built_in">n</span> 空间<br></code></pre></td></tr></table></figure><h2 id="3-6-查看chart的基本信息"><a href="#3-6-查看chart的基本信息" class="headerlink" title="3.6 查看chart的基本信息"></a>3.6 查看chart的基本信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">helm show chart bitnami/mysql<br></code></pre></td></tr></table></figure><h2 id="3-7-卸载"><a href="#3-7-卸载" class="headerlink" title="3.7 卸载"></a>3.7 <strong>卸载</strong></h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">helm</span> uninstall mysql-<span class="hljs-number">1612624192</span><br></code></pre></td></tr></table></figure><h2 id="3-8-查看该版本的信息"><a href="#3-8-查看该版本的信息" class="headerlink" title="3.8 查看该版本的信息"></a>3.8 <strong>查看该版本的信息</strong></h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">helm</span> status mysql-<span class="hljs-number">1612624192</span><br></code></pre></td></tr></table></figure><h2 id="3-9-回滚版本"><a href="#3-9-回滚版本" class="headerlink" title="3.9 回滚版本"></a>3.9 <strong>回滚版本</strong></h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">helm <span class="hljs-keyword">rollback</span> <span class="hljs-keyword">version</span><br></code></pre></td></tr></table></figure><h2 id="3-10-搜索"><a href="#3-10-搜索" class="headerlink" title="3.10 搜索"></a>3.10 搜索</h2><p>Helm 搜索使用模糊字符串匹配算法</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">helm search hub wordpress</span><br></code></pre></td></tr></table></figure><h2 id="3-11-拉取到本地"><a href="#3-11-拉取到本地" class="headerlink" title="3.11 拉取到本地"></a>3.11 拉取到本地</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">helm pull chartrepo/chartname<br></code></pre></td></tr></table></figure><h1 id="四、-安装前自定义-chart"><a href="#四、-安装前自定义-chart" class="headerlink" title="四、 安装前自定义 chart"></a>四、 安装前自定义 chart</h1><p>配置优先级：</p><ol><li>–set值,优先级更高,覆盖的内容会被被保存在 ConfigMap 中,可以通过 helm get values <release-name> 来查看指定 release 中 –set设置的值</li><li> 可以通过运行 helm upgrade 并指定 –reset-values 字段来清除 –set 中设置的值。</li></ol><p>–set选项使用0或多个 name/value 对。最简单的用法类似于：–set name=value，等价于如下 YAML 格式：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">name:</span> value<br></code></pre></td></tr></table></figure><p>多个值使用逗号分割，因此 –set a=b,c=d 的 YAML 表示是：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">a:</span> b<br><span class="hljs-symbol">c:</span> d<br></code></pre></td></tr></table></figure><p>支持更复杂的表达式。例如，–set outer.inner=value 被转换成了：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">outer:</span><br><span class="hljs-symbol">  inner:</span> value<br></code></pre></td></tr></table></figure><p>列表使用花括号（{}）来表示。例如，–set name={a, b, c}被转换成了：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">a</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">b</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">c</span><br></code></pre></td></tr></table></figure><p>从 2.5.0 版本开始，可以使用数组下标的语法来访问列表中的元素。例如 <code>--set servers[0].port=80</code> 就变成了：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">servers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">port: 80</span><br></code></pre></td></tr></table></figure><p>多个值也可以通过这种方式来设置。<code>--set servers[0].port=80,servers[0].host=example</code> 变成了：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">servers</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">port: 80</span><br>    <span class="hljs-attribute">host</span><span class="hljs-punctuation">:</span> <span class="hljs-string">example</span><br></code></pre></td></tr></table></figure><p>如果需要在 <code>--set</code> 中使用特殊字符，你可以使用反斜线来进行转义；<code>--set name=value1\,value2</code> 就变成了：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">name:</span> <span class="hljs-string">&quot;value1,value2&quot;</span><br></code></pre></td></tr></table></figure><p>类似的，你也可以转义点序列（英文句号）。这可能会在 chart 使用 <code>toYaml</code> 函数来解析 annotations，labels，和 node selectors 时派上用场。<code>--set nodeSelector.&quot;kubernetes\.io/role&quot;=master</code> 语法就变成了：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">nodeSelector</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">kubernetes.io/role</span><span class="hljs-punctuation">:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h1 id="五、版本控制"><a href="#五、版本控制" class="headerlink" title="五、版本控制"></a>五、版本控制</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 升级</span><br><span class="hljs-attribute">helm</span> upgrade -f panda.yaml happy-panda bitnami/wordpress<br><span class="hljs-comment"># 版本查看</span><br><span class="hljs-attribute">helm</span> history<span class="hljs-meta"> [RELEASE]</span><br><span class="hljs-comment"># 回滚</span><br><span class="hljs-attribute">helm</span> rollback happy-panda <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="六、创建你自己的-charts"><a href="#六、创建你自己的-charts" class="headerlink" title="六、创建你自己的 charts"></a>六、创建你自己的 charts</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 创建charts</span><br><span class="hljs-attribute">helm</span> create deis-workflow<br><span class="hljs-comment"># 格式检查</span><br><span class="hljs-attribute">helm</span> lint deis-workflow<br><span class="hljs-comment"># 打包生成deis-workflow-0.1.0.tgz</span><br><span class="hljs-attribute">helm</span> package deis-workflow<br><span class="hljs-comment"># 安装</span><br><span class="hljs-attribute">helm</span> install deis-workflow ./deis-workflow-<span class="hljs-number">0</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.tgz<br><span class="hljs-comment"># 非安装预览</span><br><span class="hljs-attribute">helm</span> install deis-workflow ./deis-workflow-<span class="hljs-number">0</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.tgz --dry-run --debug<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>helm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s之Ingress安装部署</title>
    <link href="/2021/08/14/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/k8s%E4%B9%8BIngress/"/>
    <url>/2021/08/14/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/k8s%E4%B9%8BIngress/</url>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>Ingress 是对集群中服务的外部访问进行管理的 API 对象，典型的访问方式是 HTTP。</p><p>Ingress 可以提供负载均衡、SSL 终结和基于名称的虚拟托管。</p><p>Ingress 公开从集群外部到集群内服务的 HTTP 和 HTTPS 路由。 流量路由由 Ingress 资源上定义的规则控制。</p><p>Ingress-Nginx github 地址：<a href="https://github.com/kubernetes/ingress-nginx">https://github.com/kubernetes/ingress-nginx</a></p><p>Ingress-Nginx 官方网站：<a href="https://kubernetes.github.io/ingress-nginx/">https://kubernetes.github.io/ingress-nginx/</a></p><p>Ingress 可为 Service 提供外部可访问的 URL、负载均衡流量、终止 SSL/TLS，以及基于名称的虚拟托管。 Ingress 控制器 通常负责通过负载均衡器来实现 Ingress，尽管它也可以配置边缘路由器或其他前端来帮助处理流量。</p><p>Ingress 不会公开任意端口或协议。 将 HTTP 和 HTTPS 以外的服务公开到 Internet 时，通常使用 Service.Type=NodePort 或 Service.Type=LoadBalancer 类型的 Service。</p><img src="/2021/08/14/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/k8s%E4%B9%8BIngress/1658076255285.png" class="" width="1658076255285"><img src="/2021/08/14/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/k8s%E4%B9%8BIngress/1658076235635.png" class="" width="1658076235635"><h1 id="二、快速开始"><a href="#二、快速开始" class="headerlink" title="二、快速开始"></a>二、快速开始</h1><h2 id="非helm创建-Ingress-控制器"><a href="#非helm创建-Ingress-控制器" class="headerlink" title="非helm创建 Ingress 控制器"></a>非helm创建 Ingress 控制器</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes/i</span>ngress-nginx<span class="hljs-regexp">/controller-v1.3.0/</span>deploy<span class="hljs-regexp">/static/</span>provider<span class="hljs-regexp">/cloud/</span>deploy.yaml<br></code></pre></td></tr></table></figure><h2 id="检查Ingress状态"><a href="#检查Ingress状态" class="headerlink" title="检查Ingress状态"></a>检查Ingress状态</h2><p>命名空间中启动：<code>ingress-nginx</code> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 <span class="hljs-operator">~</span>]# kubectl <span class="hljs-keyword">get</span> pods <span class="hljs-comment">--namespace=ingress-nginx</span><br>NAME                                        READY   STATUS      RESTARTS   AGE<br>ingress<span class="hljs-operator">-</span>nginx<span class="hljs-operator">-</span>admission<span class="hljs-operator">-</span><span class="hljs-keyword">create</span><span class="hljs-comment">--1-mrp7c     0/1     Completed   0          98m</span><br>ingress<span class="hljs-operator">-</span>nginx<span class="hljs-operator">-</span>admission<span class="hljs-operator">-</span>patch<span class="hljs-comment">--1-bd9ns      0/1     Completed   3          98m</span><br>ingress<span class="hljs-operator">-</span>nginx<span class="hljs-operator">-</span>controller<span class="hljs-number">-787</span>f856bb4<span class="hljs-operator">-</span>jn7xz   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>          <span class="hljs-number">98</span>m<br></code></pre></td></tr></table></figure><p>以下命令将等待入口控制器 Pod 启动、运行并准备就绪： </p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">[root@k8s-master01 ~]# kubectl wait --namespace ingress-nginx \<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">  --<span class="hljs-keyword">for</span>=condition=ready pod \</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">  --selector=app.<span class="hljs-property">kubernetes</span>.<span class="hljs-property">io</span>/component=controller \</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">  --timeout=120s</span><br>pod/ingress-nginx-controller-787f856bb4-jn7xz condition met<br></code></pre></td></tr></table></figure><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><p>配置自定义域名：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@k8s-master01 ~]</span># vi /etc/hosts<br><span class="hljs-number">127.0.0.1</span> ingress.site<br></code></pre></td></tr></table></figure><p>创建一个简单的 Web 服务器和关联的服务： </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create deployment demo <span class="hljs-attribute">--image</span>=httpd <span class="hljs-attribute">--port</span>=80<br>kubectl expose deployment demo<br></code></pre></td></tr></table></figure><p>然后创建入口资源。下面的示例使用映射到 的主机：<code>localhost</code> </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create ingress demo-localhost <span class="hljs-attribute">--class</span>=nginx \<br>  <span class="hljs-attribute">--rule</span>=<span class="hljs-string">&quot;ingress.site/*=demo:80&quot;</span><br></code></pre></td></tr></table></figure><p>现在，将本地端口转发到入口控制器： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubectl</span> port-forward --namespace=ingress-nginx service/ingress-nginx-controller <span class="hljs-number">8080</span>:<span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h3 id="结果查看"><a href="#结果查看" class="headerlink" title="结果查看"></a>结果查看</h3><p>1 本地监听端口查看，可以看出ipv4（127.0.0.1:8080）和ipv6（::1:8080），说明ingress本地端口已经转发设置成功</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">[root@k8s-master01 ~]# netstat -anp|grep <span class="hljs-number">8080</span><br>tcp        <span class="hljs-number">0</span>      <span class="hljs-number">0 127.0.0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8080</span>          <span class="hljs-number">0.0.0.0</span>:*               LISTEN      <span class="hljs-number">101027</span>/kubectl      <br>tcp        <span class="hljs-number">0</span>      <span class="hljs-number">0 10.244.0</span>.<span class="hljs-number">1:39020</span>        <span class="hljs-number">10.244.0.13</span>:<span class="hljs-number">8080</span>        TIME_WAIT   -                   <br>tcp        <span class="hljs-number">0</span>      <span class="hljs-number">0 10.244.0</span>.<span class="hljs-number">1:36236</span>        <span class="hljs-number">10.244.0.12</span>:<span class="hljs-number">8080</span>        TIME_WAIT   -                   <br>tcp6       <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <span class="hljs-number">::1:8080</span>                :::*                    LISTEN      <span class="hljs-number">101027</span>/kubectl <br></code></pre></td></tr></table></figure><p>2 查看k8s demo服务，可以看出demo的服务分布在k8s-node02上，demo的serviceip（10.109.72.57）====&gt;podip（10.244.2.112）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master01 ~]# kubectl <span class="hljs-keyword">get</span> deployment,svc,pod -o wide<br><span class="hljs-type">NAME</span>                   READY   UP-<span class="hljs-keyword">TO</span>-<span class="hljs-type">DATE</span>   AVAILABLE   AGE   CONTAINERS   IMAGES   SELECTOR<br>deployment.apps/demo   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">37</span>m   httpd        httpd    app=demo<br><br><span class="hljs-type">NAME</span>                 <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">CLUSTER</span>-IP     <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)   AGE   SELECTOR<br>service/demo         ClusterIP   <span class="hljs-number">10.109</span><span class="hljs-number">.72</span><span class="hljs-number">.57</span>   &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">80</span>/TCP    <span class="hljs-number">37</span>m   app=demo<br>service/kubernetes   ClusterIP   <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>      &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">443</span>/TCP   <span class="hljs-number">6</span>d    &lt;<span class="hljs-keyword">none</span>&gt;<br><br><span class="hljs-type">NAME</span>                        READY   STATUS    RESTARTS   AGE   IP             NODE         NOMINATED NODE   READINESS GATES<br>pod/demo<span class="hljs-number">-654</span>c477f6d-gzmrp   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">37</span>m   <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.112</span>   k8s-node02   &lt;<span class="hljs-keyword">none</span>&gt;           &lt;<span class="hljs-keyword">none</span>&gt;<br></code></pre></td></tr></table></figure><p>3 查看ingress的服务启动情况，通过namespace=ingress-nginx进行过滤。ingress的serviceip（10.98.62.200）====&gt;podip（10.244.1.170）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get deployment,svc,pod -o wide -n=ingress-nginx</span><br>NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE    CONTAINERS   IMAGES                                                                                                                    SELECTOR<br>deployment.apps<span class="hljs-regexp">/ingress-nginx-controller   1/</span><span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">117</span>m   controller   registry.k8s.io<span class="hljs-regexp">/ingress-nginx/</span>controller:v1.<span class="hljs-number">3.0</span>@sha256:d1707ca76d3b044ab8a28277a2466a02100ee9f58a86af1535a3edf9323ea1b5   app.kubernetes.io<span class="hljs-regexp">/component=controller,app.kubernetes.io/i</span>nstance=ingress-nginx,app.kubernetes.io/name=ingress-nginx<br><br>NAME                                         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)                      AGE    SELECTOR<br>service<span class="hljs-regexp">/ingress-nginx-controller             NodePort    10.98.62.200   &lt;none&gt;        80:31069/</span>TCP,<span class="hljs-number">443</span>:<span class="hljs-number">31940</span><span class="hljs-regexp">/TCP   117m   app.kubernetes.io/</span>component=controller,app.kubernetes.io<span class="hljs-regexp">/instance=ingress-nginx,app.kubernetes.io/</span>name=ingress-nginx<br>service<span class="hljs-regexp">/ingress-nginx-controller-admission   ClusterIP   10.97.3.59     &lt;none&gt;        443/</span>TCP                      <span class="hljs-number">117</span>m   app.kubernetes.io<span class="hljs-regexp">/component=controller,app.kubernetes.io/i</span>nstance=ingress-nginx,app.kubernetes.io/name=ingress-nginx<br><br>NAME                                            READY   STATUS      RESTARTS   AGE    IP             NODE         NOMINATED NODE   READINESS GATES<br>pod<span class="hljs-regexp">/ingress-nginx-admission-create--1-mrp7c     0/</span><span class="hljs-number">1</span>     Completed   <span class="hljs-number">0</span>          <span class="hljs-number">117</span>m   <span class="hljs-number">10.244</span>.<span class="hljs-number">1.168</span>   k8s-node01   &lt;none&gt;           &lt;none&gt;<br>pod<span class="hljs-regexp">/ingress-nginx-admission-patch--1-bd9ns      0/</span><span class="hljs-number">1</span>     Completed   <span class="hljs-number">3</span>          <span class="hljs-number">117</span>m   <span class="hljs-number">10.244</span>.<span class="hljs-number">2.111</span>   k8s-node02   &lt;none&gt;           &lt;none&gt;<br>pod<span class="hljs-regexp">/ingress-nginx-controller-787f856bb4-jn7xz   1/</span><span class="hljs-number">1</span>     Running     <span class="hljs-number">0</span>          <span class="hljs-number">117</span>m   <span class="hljs-number">10.244</span>.<span class="hljs-number">1.170</span>   k8s-node01   &lt;none&gt;           &lt;none&gt;<br></code></pre></td></tr></table></figure><p>4 通过ipvsadm查看路由表</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-master01 ~]<span class="hljs-comment"># ipvsadm -Ln</span><br>IP Virtual Server version 1.2.1 (size=4096)<br>Prot LocalAddress:Port Scheduler Flags<br>  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn<br>...<br>TCP  10.109.72.57:80 rr<br>  -&gt; 10.244.2.112:80              Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>        <span class="hljs-number"> 0 </span>        <br>TCP  10.98.62.200:80 rr<br>  -&gt; 10.244.1.170:80              Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>        <span class="hljs-number"> 0 </span>        <br>TCP  10.98.62.200:443 rr<br>  -&gt; 10.244.1.170:443             Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>        <span class="hljs-number"> 0 </span>  <br></code></pre></td></tr></table></figure><p>分析：ingress-nginx-controller（10.98.62.200）接收来自localhost端口80、443的流量，当访问ingress.site的时ingress-nginx-controller会把请求路由到demo（10.109.72.57:80），最后demo分配到具体的pod</p><p>5 url请求</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[root@k8s-master01 ~]<span class="hljs-comment"># wget http://ingress.site:8080/</span><br><span class="hljs-params">--2022-07-18</span> 09<span class="hljs-function">:14</span><span class="hljs-function">:09--</span>  http:<span class="hljs-string">//ingress.site</span><span class="hljs-function">:8080</span>/<br>正在解析主机 ingress.site <span class="hljs-params">(ingress.site)</span><span class="hljs-string">...</span> 127.0.0.1<br>正在连接 ingress.site <span class="hljs-params">(ingress.site)</span>|127.0.0.1|<span class="hljs-function">:8080...</span> 已连接。<br>已发出 HTTP 请求，正在等待回应<span class="hljs-string">...</span> 200 OK<br>长度：45 [text/html]<br>正在保存至: “index.html.1”<br><br>100%[===============================================================================================================================================================================================&gt;] 45          --<span class="hljs-string">.-K/s</span> 用时 0s      <br><br>2022-07-18 09<span class="hljs-function">:14</span><span class="hljs-function">:09</span> <span class="hljs-params">(6.75 MB/s)</span> - 已保存 “index.html.1” [45/45])<br></code></pre></td></tr></table></figure><h1 id="三、部署Ingress-Nginx"><a href="#三、部署Ingress-Nginx" class="headerlink" title="三、部署Ingress-Nginx"></a>三、部署Ingress-Nginx</h1><p>查看ingress-nginx端口信息：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8s-master01 ingress]# kubectl <span class="hljs-keyword">get</span> svc -n ingress-nginx<br><span class="hljs-type">NAME</span>                                 <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">CLUSTER</span>-IP     <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)                      AGE<br>ingress-nginx-controller             NodePort    <span class="hljs-number">10.98</span><span class="hljs-number">.62</span><span class="hljs-number">.200</span>   &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">80</span>:<span class="hljs-number">31069</span>/TCP,<span class="hljs-number">443</span>:<span class="hljs-number">31940</span>/TCP   <span class="hljs-number">23</span>h<br>ingress-nginx-controller-admission   ClusterIP   <span class="hljs-number">10.97</span><span class="hljs-number">.3</span><span class="hljs-number">.59</span>     &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">443</span>/TCP                      <span class="hljs-number">23</span>h<br></code></pre></td></tr></table></figure><h2 id="Ingress-HTTP-代理访问"><a href="#Ingress-HTTP-代理访问" class="headerlink" title="Ingress HTTP 代理访问"></a>Ingress HTTP 代理访问</h2><p>deployment, Service, Ingress Yaml 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-dm</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.7.9</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ingressClassName:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">www1.ingress.site</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">service:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-svc</span><br>            <span class="hljs-attr">port:</span> <br>              <span class="hljs-attr">number:</span> <span class="hljs-number">80</span><br>        <span class="hljs-attr">pathType:</span> <span class="hljs-string">Prefix</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="C:\Users\leell\AppData\Local\Temp\1658155076596.png" alt="1658155076596"></p><h2 id="Ingress-HTTPS-代理访问"><a href="#Ingress-HTTPS-代理访问" class="headerlink" title="Ingress HTTPS 代理访问"></a>Ingress HTTPS 代理访问</h2><p>使用以下命令生成自签名证书和私钥： </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> openssl req <span class="hljs-literal">-x509</span> <span class="hljs-literal">-nodes</span> <span class="hljs-literal">-days</span> <span class="hljs-number">365</span> <span class="hljs-literal">-newkey</span> rsa:<span class="hljs-number">2048</span> <span class="hljs-literal">-keyout</span> <span class="hljs-variable">$</span>&#123;KEY_FILE&#125; <span class="hljs-literal">-out</span> <span class="hljs-variable">$</span>&#123;CERT_FILE&#125; <span class="hljs-literal">-subj</span> <span class="hljs-string">&quot;/CN=<span class="hljs-variable">$</span>&#123;HOST&#125;/O=<span class="hljs-variable">$</span>&#123;HOST&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>然后通过以下方式在群集中创建密钥： </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">kubectl</span> create secret tls <span class="hljs-variable">$&#123;CERT_NAME&#125;</span> --key <span class="hljs-variable">$&#123;KEY_FILE&#125;</span> --cert <span class="hljs-variable">$&#123;CERT_FILE&#125;</span><br></code></pre></td></tr></table></figure><p>生成的密钥的类型为 。<code>kubernetes.io/tls</code> </p><p>例如：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas">$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.<span class="hljs-keyword">key</span> -<span class="hljs-keyword">out</span> tls.crt -subj <span class="hljs-string">&quot;/CN=nginxsvc/O=nginxsvc&quot;</span><br>$ kubectl <span class="hljs-keyword">create</span> secret tls tls-secret --<span class="hljs-keyword">key</span> tls.<span class="hljs-keyword">key</span> --cert tls.crt<br></code></pre></td></tr></table></figure><p>deployment, Service, Ingress Yaml 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-test</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ingressClassName:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">tls:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">www2.ingress.site</span><br>    <span class="hljs-attr">secretName:</span> <span class="hljs-string">tls-secret</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">www2.ingress.site</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">service:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-svc</span><br>            <span class="hljs-attr">port:</span> <br>              <span class="hljs-attr">number:</span> <span class="hljs-number">80</span><br>        <span class="hljs-attr">pathType:</span> <span class="hljs-string">Prefix</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="C:\Users\leell\AppData\Local\Temp\1658155050852.png" alt="1658155050852"></p><h2 id="Nginx-进行-BasicAuth"><a href="#Nginx-进行-BasicAuth" class="headerlink" title="Nginx 进行 BasicAuth"></a>Nginx 进行 BasicAuth</h2><p>安装httpd</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-master01 ingress]<span class="hljs-meta"># yum -y install httpd</span><br></code></pre></td></tr></table></figure><p>创建 htpasswd 文件 用户名foo，密码：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-master01 ingress]<span class="hljs-comment"># htpasswd -c auth foo</span><br>New password: <br>Re-<span class="hljs-keyword">type</span> new password: <br>Adding password for <span class="hljs-keyword">user</span> <span class="hljs-title">foo</span><br></code></pre></td></tr></table></figure><p>htpasswd生成auth文件查看</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-master01 ingress]<span class="hljs-meta"># ls</span><br>auth  deploy.yaml  ingress-nginx-tls.yaml  ingress-nginx.yaml  tls.crt  tls.key<br></code></pre></td></tr></table></figure><p>将 htpasswd 转换为机密</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@k8s-master01 ingress]<span class="hljs-comment"># kubectl create secret generic basic-auth --from-file=auth</span><br>secret/basic-auth created<br></code></pre></td></tr></table></figure><p>检查机密</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@k8s-master01 ingress]<span class="hljs-meta"># kubectl get secret basic-auth -o yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">data:</span><br><span class="hljs-symbol">  auth:</span> Zm9vOiRhcHIxJFdyTFg0MWRoJEtxRHlHaDdZNWdtUDgvOGxqd0FOQS4K<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  creationTimestamp:</span> <span class="hljs-string">&quot;2022-07-18T22:39:56Z&quot;</span><br><span class="hljs-symbol">  name:</span> basic-auth<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">  resourceVersion:</span> <span class="hljs-string">&quot;873318&quot;</span><br><span class="hljs-symbol">  uid:</span> <span class="hljs-number">45541</span>ee0<span class="hljs-number">-4</span>acc<span class="hljs-number">-4</span>fd1<span class="hljs-number">-869</span>c<span class="hljs-number">-2</span>c2a19f59264<br><span class="hljs-symbol">type:</span> Opaque<br></code></pre></td></tr></table></figure><p>使用 kubectl 创建一个绑定到基本身份验证密钥的入口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingress-with-auth</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-comment"># type of authentication</span><br>    <span class="hljs-attr">nginx.ingress.kubernetes.io/auth-type:</span> <span class="hljs-string">basic</span><br>    <span class="hljs-comment"># name of the secret that contains the user/password definitions</span><br>    <span class="hljs-attr">nginx.ingress.kubernetes.io/auth-secret:</span> <span class="hljs-string">basic-auth</span><br>    <span class="hljs-comment"># message to display with an appropriate context why the authentication is required</span><br>    <span class="hljs-attr">nginx.ingress.kubernetes.io/auth-realm:</span> <span class="hljs-string">&#x27;Authentication Required - foo&#x27;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ingressClassName:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">auth.ingress.site</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>        <span class="hljs-attr">pathType:</span> <span class="hljs-string">Prefix</span><br>        <span class="hljs-attr">backend:</span><br>          <span class="hljs-attr">service:</span> <br>            <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-svc</span><br>            <span class="hljs-attr">port:</span> <br>              <span class="hljs-attr">number:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>访问auth.ingress.site:31069</p><p><img src="C:\Users\leell\AppData\Local\Temp\1658156455121.png" alt="1658156455121"></p><p>取消则出现：</p><p><img src="C:\Users\leell\AppData\Local\Temp\1658156600577.png" alt="1658156600577"></p><p>输入上面设置的用户名和密码进入主界面</p><p><img src="C:\Users\leell\AppData\Local\Temp\1658156528396.png" alt="1658156528396"></p><h2 id="Nginx-进行重写"><a href="#Nginx-进行重写" class="headerlink" title="Nginx 进行重写"></a>Nginx 进行重写</h2><table><thead><tr><th>名称</th><th>描述</th><th>值</th></tr></thead><tbody><tr><td>nginx.ingress.kubernetes.io/rewrite-target</td><td>必须重定向流量的目标URI</td><td>串</td></tr><tr><td>nginx.ingress.kubernetes.io/ssl-redirect</td><td>指示位置部分是否仅可访问SSL (当Ingress包含证书时默认为True)</td><td>布尔</td></tr><tr><td>nginx.ingress.kubernetes.io/force-ssl-redirect</td><td>即使Ingress未启用TLS,也强制重定向到HTTPS</td><td>布尔</td></tr><tr><td>nginx.ingress.kubernetes.io/app-root</td><td>定义Controller必须重定向的应用程序根,如果它在’/‘上下文中</td><td>串</td></tr><tr><td>nginx.ingress.kubernetes.io/use-regex</td><td>指示Ingress上定义的路径是否使用正则表达式</td><td>布尔</td></tr></tbody></table><p>输入rewrite.ingress.site:31069重定向ingress官网</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="hljs-string">https://kubernetes.github.io/ingress-nginx/</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">rewrite</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ingressClassName:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">rewrite.ingress.site</span><br>    <span class="hljs-attr">http:</span><br>      <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>        <span class="hljs-attr">pathType:</span> <span class="hljs-string">Prefix</span><br>        <span class="hljs-attr">backend:</span> <span class="hljs-comment">#后端</span><br>          <span class="hljs-attr">service:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-svc</span><br>            <span class="hljs-attr">port:</span> <br>              <span class="hljs-attr">number:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>ingress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s Service的概述、类型及代理模式</title>
    <link href="/2021/08/13/k8s/basic/k8s%20Service%E7%9A%84%E6%A6%82%E8%BF%B0%E3%80%81%E7%B1%BB%E5%9E%8B%E5%8F%8A%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/08/13/k8s/basic/k8s%20Service%E7%9A%84%E6%A6%82%E8%BF%B0%E3%80%81%E7%B1%BB%E5%9E%8B%E5%8F%8A%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>Kubernete Service 是一个定义了一组Pod的策略的抽象，我们也有时候叫做宏观服务。这些被服务标记的Pod都是（一般）通过label Selector决定的 。</p><p>通过创建Service,可以为一组具有相同功能的容器应用提供一个统一的入口地址，并且将请求负载分发到后端的各个容器应用上。</p><p>对于Kubernete原生的应用，Kubernete提供了一个简单的Endpoints API，这个Endpoints api的作用就是当一个服务中的pod发生变化时，Endpoints API随之变化，对于哪些不是原生的程序，Kubernetes提供了一个基于虚拟IP的网桥的服务，这个服务会将请求转发到对应的后台pod 。</p><p>![1658045368211](k8s Service的概述、类型及代理模式/1658045368211.png)</p><h1 id="二、代理模式"><a href="#二、代理模式" class="headerlink" title="二、代理模式"></a>二、代理模式</h1><p>Service能够提供负载均衡的能力,但是在使用上有以下限制:</p><p>只提供4层负载均衡能力,而没有7层功能,但有时我们可能需要更多的匹配规则来转发请求,这点上4层负载均衡是不支持的</p><p>VIP和Service代理：</p><p>在Kubernetes 集群中,每个Node运行一个 kube-proxy进程。kube-proxy负责为Service实现了一种VIP (虚拟IP)的形式,而不是ExternalName的形式。</p><ul><li>在Kubernetes v1.0版本,代理完全在userspace.</li><li>在Kubernetes v1.1版本,新增了 iptables 代理,但并不是默认的运行模式。</li><li>从Kubemetes v1.2起,默认就是iptables代理。</li><li>在Kubernetes v1.8.0-beta.0中,添加了ipvs代理</li><li>在Kubernetes 1.14版本开始默认使用ipvs代理</li><li>在Kubernetes v1.0版本, Service是4层概念。在Kubernetes v1.1版本，新增了  Ingress API (beta版) ,用来表示“7层（Http）服务</li></ul><p>为什么不用DNS?</p><p>因为DNS需要在客服端保留记录，存在缓存等干扰，可能导致过期解析。</p><h2 id="1-userspace代理模式"><a href="#1-userspace代理模式" class="headerlink" title="1 userspace代理模式"></a>1 userspace代理模式</h2><p>![1658044956049](k8s Service的概述、类型及代理模式/1658044956049.png)</p><h2 id="2-iptables代理模式"><a href="#2-iptables代理模式" class="headerlink" title="2 iptables代理模式"></a>2 iptables代理模式</h2><p>![1658044977401](k8s Service的概述、类型及代理模式/1658044977401.png)</p><h2 id="3-ipvs代理模式"><a href="#3-ipvs代理模式" class="headerlink" title="3  ipvs代理模式"></a>3  ipvs代理模式</h2><p>这种模式, kube-proxy会监视Kubernetes Service对象和Endpoints,调用netlink接口以相应地创建ipvs规则并定期与Kubernetes Service对象和Endpoints对象同步ipvs规则,以确保ipvs状态与期望一致。访问服务时,流量将被重定向到其中一个后端Pod与iptables 类似, ipvs于netfilter的hook功能,但使用哈希表作为底层数据结构并在内核空间中工作。这意味着ipvs可以更快地重定向流量,并且在同步代理规则时具有更好的性能。此外,ipvs为负载均衡算法提供了更多选项,例如:</p><ul><li>rr:轮询调度</li><li>1c:最小连接数</li><li>dh:目标哈希</li><li>sh:源哈希</li><li>sed:最短期望延迟</li><li>nq:不排队调度</li></ul><p>![1658045067670](k8s Service的概述、类型及代理模式/1658045067670.png)</p><h1 id="三、Service-的类型"><a href="#三、Service-的类型" class="headerlink" title="三、Service 的类型"></a>三、Service 的类型</h1><p>Service 在K8s中有以下四种类型</p><ul><li>Clusterlp:默认类型,自动分配一个仅Cluster内部可以访问的虚拟IP</li><li>NodePort: 在ClusterIP基础上为Service在每台机器上绑定一个端口,这样就可以通过:NodePort来访问该服务</li><li>LoadBalancer: 在NodePort的基础上,借助cloud provider创建一个外部负载均衡器,并将请求转发到: NodePort</li><li>ExternalName:把集群外部的服务引入到集群内部来,在集群内部直接使用。没有任何类型代理被创建,这只有kubernetes 1.7或更高版本的kube-dns才支持</li></ul><h2 id="1-ClusterIP"><a href="#1-ClusterIP" class="headerlink" title="1 ClusterIP"></a>1 ClusterIP</h2><p>clusterIP 主要在每个 node 节点使用iptables,将发向 clusterIP 对应端口的数据,转发到kube-proxy中。然后kube-proxy 自己内部实现有负载均衡的方法,并可以查询到这个 service下对应pod的地址和端口,进而把数据转发给对应的pod的地址和端口</p><p>![1658045231642](k8s Service的概述、类型及代理模式/1658045231642.png)</p><p>协同工作原理:</p><ul><li>apiserver 用户通过kubectl命令向apiserver发送创建service的命令, apiserver接收到请求后将数据存储到etcd中</li><li>kube-proxy kubernetes的每个节点中都有一个叫做kube-porxy的进程,这个进程负责感知service, pod的变化,并将变化的信息写入本地的iptables规则中</li><li>iptables 使用NAT等技术将virtualIP的流量转至endpoint中</li></ul><p>创建myapp-deploy.yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp-deploy</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>      <span class="hljs-attr">release:</span> <span class="hljs-string">stabel</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>        <span class="hljs-attr">release:</span> <span class="hljs-string">stabel</span><br>        <span class="hljs-attr">env:</span> <span class="hljs-string">test</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>          <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>创建Service信息，myapp-service.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ClusterIP</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">release:</span> <span class="hljs-string">stabel</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h2 id="2-Headless-Service"><a href="#2-Headless-Service" class="headerlink" title="2 Headless Service"></a>2 Headless Service</h2><p>有时不需要或不想要负载均衡,以及单独的Service IP.遇到这种情况,可以通过指定ClusterIP(spec.clusterIP) 的值为”None”来创建Headless Service。这类Service并不会分配Cluster IP，kube-proxy不会处理它们,而且平台也不会为它们进行负载均衡和路由。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-<span class="hljs-keyword">master</span> <span class="hljs-title">mainfests</span>]<span class="hljs-comment"># vim myapp-svc-headless.yaml</span><br></code></pre></td></tr></table></figure><p>myapp-svc-headless.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp-headless</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">&quot;None&quot;</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">[root@k8s-master01 service]# yum install -y  bind-utils<br>[root@k8s-master01 service]# dig -t A myapp-headless.<span class="hljs-keyword">default</span>.svc.<span class="hljs-keyword">cluster</span>.local. @10<span class="hljs-number">.244</span><span class="hljs-number">.0</span><span class="hljs-number">.12</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@k8s-master01 service]</span># kubectl get pod -n kube-system -o wide<br>NAME                                   READY   STATUS    RESTARTS        AGE     IP                    NODE           NOMINATED NODE   READINESS GATES<br>coredns-<span class="hljs-number">7</span>f6cbbb7b8-pbv77               <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">4</span> (<span class="hljs-number">2</span>d20h ago)   <span class="hljs-number">5</span>d20h   <span class="hljs-number">10.244</span>.<span class="hljs-number">0.13</span>           k8s-master01   &lt;<span class="hljs-attribute">none</span>&gt;           &lt;<span class="hljs-attribute">none</span>&gt;<br>coredns-<span class="hljs-number">7</span>f6cbbb7b8-qxw99               <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">4</span> (<span class="hljs-number">2</span>d20h ago)   <span class="hljs-number">5</span>d20h   <span class="hljs-number">10.244</span>.<span class="hljs-number">0.12</span>           k8s-master01   &lt;<span class="hljs-attribute">none</span>&gt;           &lt;<span class="hljs-attribute">none</span>&gt;<br>etcd-k8s-master01                      <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">7</span> (<span class="hljs-number">2</span>d20h ago)   <span class="hljs-number">5</span>d20h   <span class="hljs-number">10.0</span>.<span class="hljs-number">0.10</span>             k8s-master01   &lt;<span class="hljs-attribute">none</span>&gt;           &lt;<span class="hljs-attribute">none</span>&gt;<br>kube-apiserver-k8s-master01            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">7</span> (<span class="hljs-number">2</span>d20h ago)   <span class="hljs-number">5</span>d20h   <span class="hljs-number">10.0</span>.<span class="hljs-number">0.10</span>             k8s-master01   &lt;<span class="hljs-attribute">none</span>&gt;           &lt;<span class="hljs-attribute">none</span>&gt;<br>kube-controller-manager-k8s-master01   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">9</span> (<span class="hljs-number">2</span>d20h ago)   <span class="hljs-number">5</span>d20h   <span class="hljs-number">10.0</span>.<span class="hljs-number">0.10</span>             k8s-master01   &lt;<span class="hljs-attribute">none</span>&gt;           &lt;<span class="hljs-attribute">none</span>&gt;<br>kube-proxy-ml24c                       <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">3</span> (<span class="hljs-number">2</span>d20h ago)   <span class="hljs-number">3</span>d22h   fd56:a9ae:cb0f::<span class="hljs-number">7</span>a1   k8s-node01     &lt;none&gt;           &lt;none&gt;<br>kube-proxy-mrbsk                       <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">4</span> (<span class="hljs-number">2</span>d20h ago)   <span class="hljs-number">3</span>d22h   <span class="hljs-number">10.0</span>.<span class="hljs-number">0.10</span>             k8s-master01   &lt;none&gt;           &lt;none&gt;<br>kube-proxy-tkszd                       <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span> (<span class="hljs-number">22</span>h ago)     <span class="hljs-number">3</span>d22h   fd56:a9ae:cb0f::<span class="hljs-number">853</span>   k8s-node02     &lt;none&gt;           &lt;none&gt;<br>kube-scheduler-k8s-master01            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">8</span> (<span class="hljs-number">2</span>d20h ago)   <span class="hljs-number">5</span>d20h   <span class="hljs-number">10.0</span>.<span class="hljs-number">0.10</span>             k8s-master01   &lt;none&gt;           &lt;none&gt;<br>[root@k8s-master01 service]# dig -t A myapp-headless.default.svc.cluster.local. @<span class="hljs-number">10.244</span>.<span class="hljs-number">0.12</span><br><br>; &lt;&lt;&gt;&gt; DiG <span class="hljs-number">9.11</span>.<span class="hljs-number">4</span>-P2-RedHat-<span class="hljs-number">9.11</span>.<span class="hljs-number">4</span>-<span class="hljs-number">26</span><span class="hljs-selector-class">.P2</span><span class="hljs-selector-class">.el7_9</span>.<span class="hljs-number">9</span> &lt;&lt;&gt;&gt; -t <span class="hljs-selector-tag">A</span> myapp-headless<span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span>. <span class="hljs-keyword">@10</span>.244.0.12<br>;; global options: +cmd<br>;; Got answer:<br>;; WARNING: .local is reserved for Multicast DNS<br>;; You are currently testing what happens when an mDNS query is leaked <span class="hljs-selector-tag">to</span> DNS<br>;; -&gt;&gt;<span class="hljs-selector-tag">HEADER</span>&lt;&lt;- opcode: QUERY, status: NOERROR, id: <span class="hljs-number">14989</span><br>;; flags: qr aa rd; QUERY: <span class="hljs-number">1</span>, ANSWER: <span class="hljs-number">3</span>, AUTHORITY: <span class="hljs-number">0</span>, ADDITIONAL: <span class="hljs-number">1</span><br>;; WARNING: recursion requested but not available<br><br>;; OPT PSEUDOSECTION:<br>; EDNS: version: <span class="hljs-number">0</span>, flags:; udp: <span class="hljs-number">4096</span><br>;; QUESTION <span class="hljs-selector-tag">SECTION</span>:<br>;myapp-headless<span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span>. IN <span class="hljs-selector-tag">A</span><br><br>;; ANSWER <span class="hljs-selector-tag">SECTION</span>:<br>myapp-headless.default.svc.cluster.local. <span class="hljs-number">30</span> IN A <span class="hljs-number">10.244</span>.<span class="hljs-number">2.109</span><br>myapp-headless.default.svc.cluster.local. <span class="hljs-number">30</span> IN A <span class="hljs-number">10.244</span>.<span class="hljs-number">1.165</span><br>myapp-headless.default.svc.cluster.local. <span class="hljs-number">30</span> IN A <span class="hljs-number">10.244</span>.<span class="hljs-number">2.108</span><br><br>;; Query <span class="hljs-selector-tag">time</span>: <span class="hljs-number">2</span> msec<br>;; SERVER: <span class="hljs-number">10.244</span>.<span class="hljs-number">0.12</span>#<span class="hljs-number">53</span>(<span class="hljs-number">10.244</span>.<span class="hljs-number">0.12</span>)<br>;; WHEN: 一 <span class="hljs-number">7</span>月 <span class="hljs-number">18</span> <span class="hljs-number">05</span>:<span class="hljs-number">05</span>:<span class="hljs-number">52</span> CST <span class="hljs-number">2022</span><br>;; MSG SIZE  rcvd: <span class="hljs-number">237</span><br><br>[root@k8s-master01 service]# kubectl get pod -o wide<br>NAME                            READY   STATUS    RESTARTS   AGE     IP             NODE         NOMINATED NODE   READINESS GATES<br>myapp-deploy-<span class="hljs-number">85</span>bb565996-<span class="hljs-number">2</span>tvcg   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m20s   <span class="hljs-number">10.244</span>.<span class="hljs-number">2.108</span>   k8s-node02   &lt;none&gt;           &lt;none&gt;<br>myapp-deploy-<span class="hljs-number">85</span>bb565996-dgzgz   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m20s   <span class="hljs-number">10.244</span>.<span class="hljs-number">2.109</span>   k8s-node02   &lt;none&gt;           &lt;none&gt;<br>myapp-deploy-<span class="hljs-number">85</span>bb565996-mlnh8   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m20s   <span class="hljs-number">10.244</span>.<span class="hljs-number">1.165</span>   k8s-node01   &lt;none&gt;           &lt;none&gt;<br></code></pre></td></tr></table></figure><p>通过Headless Service一样可以访问到对应的pod上去</p><h2 id="3-NodePort"><a href="#3-NodePort" class="headerlink" title="3 NodePort"></a>3 NodePort</h2><p>nodePort 的原理在于在node上开了一个端口,将向该端口的流量导入到kube-proxy,然后由kube-proxy进一步到给对应的pod</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@<span class="hljs-keyword">master</span> <span class="hljs-title">manifests</span>]<span class="hljs-comment"># vi myapp-np-service.yaml</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">release:</span> <span class="hljs-string">stabel</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>查看结果</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 查看service服务暴露端口</span><br>[root<span class="hljs-meta">@k8s-master01</span> service]<span class="hljs-comment"># kubectl get svc -o wide</span><br>NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE     SELECTOR<br>kubernetes   ClusterIP   10.96.0.1       <span class="hljs-variable">&lt;none&gt;</span>        443/TCP        5d20h   <span class="hljs-variable">&lt;none&gt;</span><br>myapp        NodePort    10.98.226.253   <span class="hljs-variable">&lt;none&gt;</span>        80:30247/TCP   17s     app=myapp,release=stabel<br><span class="hljs-comment">#查看myapp分布在哪些节点</span><br>[root<span class="hljs-meta">@k8s-master01</span> service]<span class="hljs-comment"># kubectl get pod -o wide</span><br>NAME                            READY   STATUS    RESTARTS   AGE   IP             NODE         NOMINATED NODE   READINESS GATES<br>myapp-deploy-85bb565996-dcgzh   1/1     Running   0          54s   10.244.1.167   k8s-node01   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>myapp-deploy-85bb565996-snpfg   1/1     Running   0          54s   10.244.1.166   k8s-node01   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>myapp-deploy-85bb565996-xv2q4   1/1     Running   0          54s   10.244.2.110   k8s-node02   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br><span class="hljs-comment">#查看所有节点的信息</span><br>[root<span class="hljs-meta">@k8s-master01</span> service]<span class="hljs-comment"># kubectl get node -o wide           </span><br>NAME           STATUS   ROLES                  AGE     VERSION   INTERNAL-IP           EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME<br>k8s-master01   Ready    control-plane,master   5d20h   v1.22.0   10.0.0.10             <span class="hljs-variable">&lt;none&gt;</span>        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   docker://18.6.1<br>k8s-node01     Ready    <span class="hljs-variable">&lt;none&gt;</span>                 4d22h   v1.22.0   10.0.0.21             <span class="hljs-variable">&lt;none&gt;</span>        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   docker://18.6.1<br>k8s-node02     Ready    <span class="hljs-variable">&lt;none&gt;</span>                 4d22h   v1.22.0   10.0.0.22             <span class="hljs-variable">&lt;none&gt;</span>        CentOS Linux 7 (Core)   3.10.0-1160.71.1.el7.x86_64   docker://18.6.1<br></code></pre></td></tr></table></figure><p>通过访问10.0.0.10:30247,10.0.0.21:30247,10.0.0.22:30247都可以得到：</p><p>![1658064476544](k8s Service的概述、类型及代理模式.assets/1658064476544.png)</p><p>查询流程</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@k8s-master01 service]<span class="hljs-comment"># iptables -t nat -nvL KUBE-NODEPORTS</span><br>Chain KUBE-NODEPORTS (<span class="hljs-number">0</span> references)<br> pkts bytes target     prot opt <span class="hljs-keyword">in</span>     out     source               destination         <br>    <span class="hljs-number">0</span>     <span class="hljs-number">0</span> KUBE-SVC-<span class="hljs-number">2</span>CMXP7HKUVJN7L6M  tcp  --  *      *       <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><span class="hljs-regexp">/0            0.0.0.0/</span><span class="hljs-number">0</span>            <span class="hljs-regexp">/* default/</span>nginx */ tcp dpt:<span class="hljs-number">30029</span><br></code></pre></td></tr></table></figure><h2 id="4-LoadBalancer"><a href="#4-LoadBalancer" class="headerlink" title="4 LoadBalancer"></a>4 LoadBalancer</h2><p>loadBalancer 和 nodePort其实是同一种方式,区别在于loadBalancer 比 nodePort多了一步,就是可以调用cloud provider 去创建 LB 来向节点导流。</p><p>![1658046066962](k8s Service的概述、类型及代理模式/1658046066962.png)</p><h1 id="5-ExternalName"><a href="#5-ExternalName" class="headerlink" title="5 ExternalName"></a>5 ExternalName</h1><p>这种类型的Service通过返回CNAME和它的值,可以将服务映射到externalName字段的内容(例如:hub.atguigu.com). ExternalName Service 是 Service的特例,它没有 selector,也没有定义任何的端口和Endpoint。相反的,对于运行在集群外部的服务,它通过返回该外部服务的别名这种方式来提供服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiversion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">my-service-1</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">ExternalName</span><br>  <span class="hljs-attr">externalName:</span> <span class="hljs-string">www.qingyeshuijian.com</span><br></code></pre></td></tr></table></figure><p>当查询主机 my-service-1.defalut.svc.cluster.local (SVC_NAME.NAMESPACE.svc.cluster.local )时,集群的DNS服务将返回一个值my.database.example.com的CNAME记录。访问这个服务的工作方式和其他的相同,唯一不同的是重定向发生在DNS层,而且不会进行代理或转发。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@k8s-master01 service]</span># dig -t <span class="hljs-selector-tag">A</span> my-service-<span class="hljs-number">1</span><span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span>. <span class="hljs-keyword">@10</span>.244.0.12              <br><br>; &lt;&lt;&gt;&gt; DiG <span class="hljs-number">9.11</span>.<span class="hljs-number">4</span>-P2-RedHat-<span class="hljs-number">9.11</span>.<span class="hljs-number">4</span>-<span class="hljs-number">26</span><span class="hljs-selector-class">.P2</span><span class="hljs-selector-class">.el7_9</span>.<span class="hljs-number">9</span> &lt;&lt;&gt;&gt; -t <span class="hljs-selector-tag">A</span> my-service-<span class="hljs-number">1</span><span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span>. <span class="hljs-keyword">@10</span>.244.0.12<br>;; global options: +cmd<br>;; Got answer:<br>;; WARNING: .local is reserved for Multicast DNS<br>;; You are currently testing what happens when an mDNS query is leaked <span class="hljs-selector-tag">to</span> DNS<br>;; -&gt;&gt;<span class="hljs-selector-tag">HEADER</span>&lt;&lt;- opcode: QUERY, status: NOERROR, id: <span class="hljs-number">3150</span><br>;; flags: qr aa rd; QUERY: <span class="hljs-number">1</span>, ANSWER: <span class="hljs-number">2</span>, AUTHORITY: <span class="hljs-number">0</span>, ADDITIONAL: <span class="hljs-number">1</span><br>;; WARNING: recursion requested but not available<br><br>;; OPT PSEUDOSECTION:<br>; EDNS: version: <span class="hljs-number">0</span>, flags:; udp: <span class="hljs-number">4096</span><br>;; QUESTION <span class="hljs-selector-tag">SECTION</span>:<br>;my-service-<span class="hljs-number">1</span><span class="hljs-selector-class">.default</span><span class="hljs-selector-class">.svc</span><span class="hljs-selector-class">.cluster</span><span class="hljs-selector-class">.local</span>.        IN <span class="hljs-selector-tag">A</span><br><br>;; ANSWER <span class="hljs-selector-tag">SECTION</span>:<br>my-service-<span class="hljs-number">1</span>.default.svc.cluster.local. <span class="hljs-number">30</span> IN CNAME www.qingyeshuijian.com.<br>www.qingyeshuijian.com. <span class="hljs-number">30</span>      IN      A       <span class="hljs-number">39.107</span>.<span class="hljs-number">115.153</span><br><br>;; Query <span class="hljs-selector-tag">time</span>: <span class="hljs-number">50</span> msec<br>;; SERVER: <span class="hljs-number">10.244</span>.<span class="hljs-number">0.12</span>#<span class="hljs-number">53</span>(<span class="hljs-number">10.244</span>.<span class="hljs-number">0.12</span>)<br>;; WHEN: 一 <span class="hljs-number">7</span>月 <span class="hljs-number">18</span> <span class="hljs-number">05</span>:<span class="hljs-number">30</span>:<span class="hljs-number">32</span> CST <span class="hljs-number">2022</span><br>;; MSG SIZE  rcvd: <span class="hljs-number">179</span><br></code></pre></td></tr></table></figure><p>通过上面的dig查看ExternalName找到cname指向了<a href="http://www.qingyeshuijian.com/">www.qingyeshuijian.com</a></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s pod重启策略与状态</title>
    <link href="/2021/08/10/k8s/pod/k8s%20pod%E9%87%8D%E5%90%AF%E7%AD%96%E7%95%A5%E4%B8%8E%E7%8A%B6%E6%80%81/"/>
    <url>/2021/08/10/k8s/pod/k8s%20pod%E9%87%8D%E5%90%AF%E7%AD%96%E7%95%A5%E4%B8%8E%E7%8A%B6%E6%80%81/</url>
    
    <content type="html"><![CDATA[<h1 id="重启策略"><a href="#重启策略" class="headerlink" title="重启策略"></a>重启策略</h1><p>PodSpec中有一个 restartPolicy字段，可能的值为Always、OnFailure和Never。默认为Always. </p><p>restartPolicy 适用于Pod中的所有容器。restartPolicy仅指通过同一节点上的kubelet 重新启动容器。失败的容器由kubelet以五分钟为上限的指数退避延迟(10秒,20秒, 40秒.)重新启动,并在成功执行十分钟后重置。如Pod文档中所述,一旦绑定到一个节点, Pod将永远不会重新绑定到另一个节点。</p><h1 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h1><p>Pod的status字段是一个PodStatus对象, PodStatus中有一个 phase字段。</p><p>Pod的相位(phase)是Pod在其生命周期中的简单宏观概述。该阶段并不是对容器或Pod的综合汇总,也不是为了做为综合状态机</p><p>挂起(Pending)：Pod已被Kubernetes系统接受,但有一个或者多个容器镜像尚未创建。等待时间包括调度Pod的时间和通过网络下载镜像的时间，这可能需要花点时间</p><p>运行中(Running)：该Pod已经绑定到了一个节点上, Pod中所有的容器都已被创建。至少有一个容器正在运行,或者正处于启动或重启状态</p><p>成功(Succeeded)： Pod中的所有容器都被成功终止,并且不会再重启</p><p>失败(Failed)：Pod中的所有容器都已终止了,并且至少有一个容器是因为失败终止。也就是说,容器以非0状态退出或者被系统终止</p><p>未知(Unknown)：因为某些原因无法取得Pod的状态,通常是因为与Pod所在主机通信失败</p><h1 id="状态示例"><a href="#状态示例" class="headerlink" title="状态示例"></a>状态示例</h1><p>Pod中只有一个容器并且正在运行，容器成功退出</p><ul><li>记录事件完成</li><li>如果restartPolicy为:<pre><code class="hljs">Always：重启容器；Pod phase 仍为RunningOnFailure： Pod phase变成 SucceededNever：Pod phase成 Succeeded</code></pre></li></ul><p>Pod中只有一个容器并且正在运行。容器退出失败</p><ul><li>记录失败事件</li><li>如果restartPolicy为:<pre><code class="hljs">Always：重启容器: Pod phase 仍为RunningOnFailure：重启容器; Pod phase仍为RunningNever：Pod phase 变成 Failed</code></pre></li></ul><p>Pod中有两个容器并且正在运行。容器1退出失败</p><ul><li>记录失败事件</li><li>如果restartPolicy为:<pre><code class="hljs">Always：重启容器; Pod phase仍为RunningOnFailure：重启容器: Pod phase仍为RunningNever： 重启容器: Pod phase为Running</code></pre></li><li>如果有容器1没有处于运行状态,并且容器2退出:<pre><code class="hljs">    记录失败事件    如果restartPolicy为:            Always: 重启容器: Pod phase为 Running           OnFailure: 重启容器; Pod phase仍为Running           Never: Pod phase 变成 Failed</code></pre></li></ul><p>Pod 中只有一个容器并处于运行状态。容器运行时内存超出限制</p><ul><li>容器以失败状态终止</li><li>记录OOM事件</li><li>如果restartPolicy为:<br>Always: 重启容器: Pod phase为Running<br>OnFailure:重启容器; Pod phase 为Running<br>Never: 记录失败事件: Pod phase仍为Failed</li></ul><p>Pod正在运行,磁盘故障.</p><ul><li>杀掉所有容器。记录适当事件</li><li>Pod phase变成 Failed</li><li>如果使用控制器来运行, Pod将在别处重建</li></ul><p>Pod正在运行,其节点被分段</p><ul><li>节点控制器等待直到超时</li><li>节点控制器将Pod phase设置为Failed</li><li>如果是用控制器来运行, Pod将在别处重建</li></ul><h1 id="启动退出"><a href="#启动退出" class="headerlink" title="启动退出"></a>启动退出</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">lifecycle-demo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">lifecycle-demo-containen</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/myapp:v1.23</span>   <span class="hljs-comment">#本地搭建仓库  </span><br>    <span class="hljs-attr">lifecycle:</span><br>      <span class="hljs-attr">postStart:</span> <span class="hljs-comment">#pod创建后执行</span><br>        <span class="hljs-attr">exec:</span><br>          <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;touch /tmp/live&quot;</span>]<br>      <span class="hljs-attr">preStop:</span> <span class="hljs-comment">#pod退出前执行</span><br>        <span class="hljs-attr">exec:</span><br>          <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;rm -rf /tmp/live&quot;</span>]<br></code></pre></td></tr></table></figure><p>查看是否成功：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@k8s-master01 probe]<span class="hljs-comment"># kubectl exec lifecycle-demo -it -- /bin/sh</span><br><span class="hljs-comment"># ls /tmp</span><br>live<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s pod生命周期—探针</title>
    <link href="/2021/08/08/k8s/pod/k8s%20pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E2%80%94%E6%8E%A2%E9%92%88/"/>
    <url>/2021/08/08/k8s/pod/k8s%20pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E2%80%94%E6%8E%A2%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h1 id="三种类型处理程序"><a href="#三种类型处理程序" class="headerlink" title="三种类型处理程序"></a>三种类型处理程序</h1><p>探针是由kubelet对容器执行的定期诊断。要执行诊断, kubelet调用由容器实现的Handler。有三种类型的处理程序:</p><p>ExecAction：在容器内执行指定命令。如果命令退出时返回码为0则认为诊断成功。</p><p>TCPSocketAction：对指定端口上的容器的IP地址进行TCP检查。如果端口打开,则诊断被认为是成功的。</p><p>HTTPGetAction：对指定的端口和路径上的容器的IP地址执行HTTP Get请求。如果响应的状态码大于等于200且小于400,则诊断被认为是成功的</p><p>每次探测都将获得以下三种结果之一：</p><p>成功：容器通过了诊断。</p><p>失败：容器未通过诊断。</p><p>未知：诊断失败,因此不会采取任何行动</p><h1 id="探测方式"><a href="#探测方式" class="headerlink" title="探测方式"></a>探测方式</h1><p><strong>livenessProbe</strong></p><p>指示容器是否正在运行。如果存活探测失败,则kubelet会杀死容器,并且容器将受到其重启策略的影响。如果容器不提供存活探针,则默认状态为Success</p><p><strong>readinessProbe</strong></p><p>指示容器是否准备好服务请求。如果就绪探测失败,端点控制器将从与Pod匹配的所有Service的端点中删除该Pod的IP地址。初始延迟之前的就绪状态默认为Failure。如果容器不提供就绪探针,则默认状态为Success</p><h1 id="Pod-hook"><a href="#Pod-hook" class="headerlink" title="Pod hook"></a>Pod hook</h1><p>Pod hook (子)是由Kubernetes 管理的kubelet发起的,当容器中的进程启动前或者容器中的进程终止之前运行,这是包含在容器的生命周期之中。可以同时为Pod中的所有容器都配置hook</p><p>Hook 的类型包括两种:</p><ul><li>exec:执行一段命令</li><li>HTTP:发送HTTP请求</li></ul><h1 id="探针示例"><a href="#探针示例" class="headerlink" title="探针示例"></a>探针示例</h1><p>注意：harborcloud.com是我本地搭建的云仓库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">harborcloud.com<span class="hljs-regexp">/library/my</span>app:v1.<span class="hljs-number">23</span> =&gt;nginx<br>harborcloud.com<span class="hljs-regexp">/library/</span>busybox:v1.<span class="hljs-number">35</span> =&gt;busybox<br></code></pre></td></tr></table></figure><h2 id="就绪探针"><a href="#就绪探针" class="headerlink" title="就绪探针"></a>就绪探针</h2><h3 id="资源清单"><a href="#资源清单" class="headerlink" title="资源清单"></a>资源清单</h3><p>readinessProbe-httpget</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">readiness-httpget-pod</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">readiness-httpget-container</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/myapp:v1.23</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">readinessProbe:</span><br>      <span class="hljs-attr">httpGet:</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/index1.html</span><br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="清单应用"><a href="#清单应用" class="headerlink" title="清单应用"></a>清单应用</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@k8s-master01 probe]<span class="hljs-comment"># vi readinessProbe-httpget.ymal</span><br>[root@k8s-master01 probe]<span class="hljs-comment"># kubectl create -f readinessProbe-httpget.ymal</span><br><span class="hljs-comment"># kubectl get pod 可能需要等待一会才会 status：running</span><br>[root@k8s-master01 probe]<span class="hljs-comment"># kubectl get pod</span><br>NAME                    READY   STATUS    RESTARTS   AGE<br>readiness-httpget-pod   <span class="hljs-number">0</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m3s<br></code></pre></td></tr></table></figure><p>结果分析：为什么会出现READY 0/1</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master01</span> <span class="hljs-string">probe</span>]<span class="hljs-comment"># kubectl describe pod readiness-httpget-pod</span><br><span class="hljs-attr">Name:</span>         <span class="hljs-string">readiness-httpget-pod</span><br><span class="hljs-attr">Namespace:</span>    <span class="hljs-string">default</span><br><span class="hljs-attr">Priority:</span>     <span class="hljs-number">0</span><br><span class="hljs-attr">Node:</span>         <span class="hljs-string">k8s-node02/fd56:a9ae:cb0f::853</span><br><span class="hljs-attr">Start Time:</span>   <span class="hljs-string">Sun,</span> <span class="hljs-number">17</span> <span class="hljs-string">Jul</span> <span class="hljs-number">2022 00:10:36</span> <span class="hljs-string">+0800</span><br><span class="hljs-attr">Labels:</span>       <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Annotations:</span>  <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Status:</span>       <span class="hljs-string">Running</span><br><span class="hljs-attr">IP:</span>           <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.5</span><br><span class="hljs-attr">IPs:</span><br>  <span class="hljs-attr">IP:</span>  <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.5</span><br><span class="hljs-attr">Containers:</span><br>  <span class="hljs-attr">readiness-httpget-container:</span><br>    <span class="hljs-attr">Container ID:</span>   <span class="hljs-string">docker://692f676aa6a3b9a16eac5373d78398df1780d6e7b87e129a3035a871e3617d61</span><br>    <span class="hljs-attr">Image:</span>          <span class="hljs-string">wangyanglinux/myapp:v1</span><br>    <span class="hljs-attr">Image ID:</span>       <span class="hljs-string">docker-pullable://wangyanglinux/myapp@sha256:9c3dc30b5219788b2b8a4b065f548b922a34479577befb54b03330999d30d513</span><br>    <span class="hljs-attr">Port:</span>           <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Host Port:</span>      <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">State:</span>          <span class="hljs-string">Running</span><br>      <span class="hljs-attr">Started:</span>      <span class="hljs-string">Sun,</span> <span class="hljs-number">17</span> <span class="hljs-string">Jul</span> <span class="hljs-number">2022 00:12:13</span> <span class="hljs-string">+0800</span><br>    <span class="hljs-attr">Ready:</span>          <span class="hljs-literal">False</span><br>    <span class="hljs-attr">Restart Count:</span>  <span class="hljs-number">0</span><br>    <span class="hljs-attr">Readiness:</span>      <span class="hljs-string">http-get</span> <span class="hljs-string">http://:80/index1.html</span> <span class="hljs-string">delay=1s</span> <span class="hljs-string">timeout=1s</span> <span class="hljs-string">period=3s</span> <span class="hljs-comment">#success=1 #failure=3</span><br>    <span class="hljs-attr">Environment:</span>    <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Mounts:</span><br>      <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class="hljs-string">from</span> <span class="hljs-string">kube-api-access-2n7st</span> <span class="hljs-string">(ro)</span><br><span class="hljs-attr">Conditions:</span><br>  <span class="hljs-string">Type</span>              <span class="hljs-string">Status</span><br>  <span class="hljs-string">Initialized</span>       <span class="hljs-literal">True</span> <br>  <span class="hljs-string">Ready</span>             <span class="hljs-literal">False</span> <br>  <span class="hljs-string">ContainersReady</span>   <span class="hljs-literal">False</span> <br>  <span class="hljs-string">PodScheduled</span>      <span class="hljs-literal">True</span> <br><span class="hljs-attr">Volumes:</span><br>  <span class="hljs-attr">kube-api-access-2n7st:</span><br>    <span class="hljs-attr">Type:</span>                    <span class="hljs-string">Projected</span> <span class="hljs-string">(a</span> <span class="hljs-string">volume</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">injected</span> <span class="hljs-string">data</span> <span class="hljs-string">from</span> <span class="hljs-string">multiple</span> <span class="hljs-string">sources)</span><br>    <span class="hljs-attr">TokenExpirationSeconds:</span>  <span class="hljs-number">3607</span><br>    <span class="hljs-attr">ConfigMapName:</span>           <span class="hljs-string">kube-root-ca.crt</span><br>    <span class="hljs-attr">ConfigMapOptional:</span>       <span class="hljs-string">&lt;nil&gt;</span><br>    <span class="hljs-attr">DownwardAPI:</span>             <span class="hljs-literal">true</span><br><span class="hljs-attr">QoS Class:</span>                   <span class="hljs-string">BestEffort</span><br><span class="hljs-attr">Node-Selectors:</span>              <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Tolerations:</span>                 <span class="hljs-string">node.kubernetes.io/not-ready:NoExecute</span> <span class="hljs-string">op=Exists</span> <span class="hljs-string">for</span> <span class="hljs-string">300s</span><br>                             <span class="hljs-string">node.kubernetes.io/unreachable:NoExecute</span> <span class="hljs-string">op=Exists</span> <span class="hljs-string">for</span> <span class="hljs-string">300s</span><br><span class="hljs-attr">Events:</span><br>  <span class="hljs-string">Type</span>     <span class="hljs-string">Reason</span>     <span class="hljs-string">Age</span>                             <span class="hljs-string">From</span>               <span class="hljs-string">Message</span><br>  <span class="hljs-string">----</span>     <span class="hljs-string">------</span>     <span class="hljs-string">----</span>                            <span class="hljs-string">----</span>               <span class="hljs-string">-------</span><br>  <span class="hljs-string">Normal</span>   <span class="hljs-string">Scheduled</span>  <span class="hljs-string">2m17s</span>                           <span class="hljs-string">default-scheduler</span>  <span class="hljs-string">Successfully</span> <span class="hljs-string">assigned</span> <span class="hljs-string">default/readiness-httpget-pod</span> <span class="hljs-string">to</span> <span class="hljs-string">k8s-node02</span><br>  <span class="hljs-string">Warning</span>  <span class="hljs-string">Failed</span>     <span class="hljs-string">&lt;invalid&gt;</span>                       <span class="hljs-string">kubelet</span>            <span class="hljs-string">Failed</span> <span class="hljs-string">to</span> <span class="hljs-string">pull</span> <span class="hljs-string">image</span> <span class="hljs-attr">&quot;wangyanglinux/myapp:v1&quot;:</span> <span class="hljs-attr">rpc error:</span> <span class="hljs-string">code</span> <span class="hljs-string">=</span> <span class="hljs-string">Unknown</span> <span class="hljs-string">desc</span> <span class="hljs-string">=</span> <span class="hljs-attr">Get https://registry-1.docker.io/v2/: net/http:</span> <span class="hljs-string">TLS</span> <span class="hljs-string">handshake</span> <span class="hljs-string">timeout</span><br>  <span class="hljs-string">Warning</span>  <span class="hljs-string">Failed</span>     <span class="hljs-string">&lt;invalid&gt;</span>                       <span class="hljs-attr">kubelet            Error:</span> <span class="hljs-string">ErrImagePull</span><br>  <span class="hljs-string">Normal</span>   <span class="hljs-string">BackOff</span>    <span class="hljs-string">&lt;invalid&gt;</span>                       <span class="hljs-string">kubelet</span>            <span class="hljs-string">Back-off</span> <span class="hljs-string">pulling</span> <span class="hljs-string">image</span> <span class="hljs-string">&quot;wangyanglinux/myapp:v1&quot;</span><br>  <span class="hljs-string">Warning</span>  <span class="hljs-string">Failed</span>     <span class="hljs-string">&lt;invalid&gt;</span>                       <span class="hljs-attr">kubelet            Error:</span> <span class="hljs-string">ImagePullBackOff</span><br>  <span class="hljs-string">Normal</span>   <span class="hljs-string">Pulling</span>    <span class="hljs-string">&lt;invalid&gt;</span> <span class="hljs-string">(x2</span> <span class="hljs-string">over</span> <span class="hljs-string">45s)</span>         <span class="hljs-string">kubelet</span>            <span class="hljs-string">Pulling</span> <span class="hljs-string">image</span> <span class="hljs-string">&quot;wangyanglinux/myapp:v1&quot;</span><br>  <span class="hljs-string">Normal</span>   <span class="hljs-string">Pulled</span>     <span class="hljs-string">&lt;invalid&gt;</span>                       <span class="hljs-string">kubelet</span>            <span class="hljs-string">Successfully</span> <span class="hljs-string">pulled</span> <span class="hljs-string">image</span> <span class="hljs-string">&quot;wangyanglinux/myapp:v1&quot;</span> <span class="hljs-string">in</span> <span class="hljs-number">16.</span><span class="hljs-string">208867618s</span><br>  <span class="hljs-string">Normal</span>   <span class="hljs-string">Created</span>    <span class="hljs-string">&lt;invalid&gt;</span>                       <span class="hljs-string">kubelet</span>            <span class="hljs-string">Created</span> <span class="hljs-string">container</span> <span class="hljs-string">readiness-httpget-container</span><br>  <span class="hljs-string">Normal</span>   <span class="hljs-string">Started</span>    <span class="hljs-string">&lt;invalid&gt;</span>                       <span class="hljs-string">kubelet</span>            <span class="hljs-string">Started</span> <span class="hljs-string">container</span> <span class="hljs-string">readiness-httpget-container</span><br>  <span class="hljs-string">Warning</span>  <span class="hljs-string">Unhealthy</span>  <span class="hljs-string">&lt;invalid&gt;</span> <span class="hljs-string">(x15</span> <span class="hljs-string">over</span> <span class="hljs-string">&lt;invalid&gt;)</span>  <span class="hljs-attr">kubelet            Readiness probe failed: HTTP probe failed with statuscode:</span> <span class="hljs-number">404</span><br></code></pre></td></tr></table></figure><p>通过上面分析可以看出 </p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">Readiness:      http-get http://:80/index1.html delay=1s timeout=1s period=3s #success=1 #failure=3<br><span class="hljs-keyword">error: </span>code = Unknown desc = Get https://registry<span class="hljs-string">-1</span>.docker.io/v2/: net/http: TLS handshake timeout<br>statuscode: 404<br></code></pre></td></tr></table></figure><p>处理异常</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-master01 probe]<span class="hljs-meta"># kubectl exec readiness-httpget-pod -it -- /bin/sh</span><br><span class="hljs-meta"># cd /usrshare/nginx/html</span><br><span class="hljs-meta"># echo <span class="hljs-string">&quot;234srwerwe&quot;</span>&gt;&gt;index1.html</span><br>[root<span class="hljs-symbol">@k8s</span>-master01 probe]<span class="hljs-meta"># kubectl get pod</span><br>NAME                    READY   STATUS    RESTARTS   AGE<br>readiness-httpget-pod   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">6</span>m22s<br></code></pre></td></tr></table></figure><p>当index1.html添加后pod正常启动</p><h2 id="存活检测"><a href="#存活检测" class="headerlink" title="存活检测"></a>存活检测</h2><h3 id="livenessProbe-exec"><a href="#livenessProbe-exec" class="headerlink" title="livenessProbe-exec"></a>livenessProbe-exec</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">liveness-exec-pod</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">liveness-exec-containen</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/busybox:v1.35</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;touch /tmp/live;sleep 60;rm -rf /tmp/live;sleep 3600&quot;</span>]<br>    <span class="hljs-attr">livenessProbe:</span><br>      <span class="hljs-attr">exec:</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;-e&quot;</span>,<span class="hljs-string">&quot;/tmp/live&quot;</span>]<br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 probe]# kubectl <span class="hljs-keyword">create</span> <span class="hljs-operator">-</span>f livenessProbe<span class="hljs-operator">-</span>exec.yaml <br>pod<span class="hljs-operator">/</span>liveness<span class="hljs-operator">-</span><span class="hljs-keyword">exec</span><span class="hljs-operator">-</span>pod created<br>[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 probe]# kubectl <span class="hljs-keyword">get</span> pod<br>NAME                READY   STATUS    RESTARTS   AGE<br>liveness<span class="hljs-operator">-</span><span class="hljs-keyword">exec</span><span class="hljs-operator">-</span>pod   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">14</span>s<br>[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 probe]# kubectl <span class="hljs-keyword">get</span> pod<br>NAME                READY   STATUS    RESTARTS            AGE<br>liveness<span class="hljs-operator">-</span><span class="hljs-keyword">exec</span><span class="hljs-operator">-</span>pod   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">1</span> (<span class="hljs-operator">&lt;</span>invalid<span class="hljs-operator">&gt;</span> ago)   <span class="hljs-number">2</span>m11s<br></code></pre></td></tr></table></figure><p>时间轴：</p><p>创建pod成功——等待60秒后删除/tmp/live——存活检测/tmp/live被删除了，然后就重启pod</p><h3 id="livenessProbe-httpget"><a href="#livenessProbe-httpget" class="headerlink" title="livenessProbe-httpget"></a>livenessProbe-httpget</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">liveness-httpget-pod</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">liveness-httpget-containen</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/myapp:v1.23</span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">livenessProbe:</span><br>      <span class="hljs-attr">httpGet:</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-string">http</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/index.html</span><br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">3</span><br>      <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="livenessProbe-tcp"><a href="#livenessProbe-tcp" class="headerlink" title="livenessProbe-tcp"></a>livenessProbe-tcp</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">probe-tcp</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/myapp:v1.23</span><br>    <span class="hljs-attr">livenessProbe:</span><br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">tcpSocket:</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s pod生命周期</title>
    <link href="/2021/08/06/k8s/pod/k8s%20pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2021/08/06/k8s/pod/k8s%20pod%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="k8s-pod生命周期—Init容器"><a href="#k8s-pod生命周期—Init容器" class="headerlink" title="k8s pod生命周期—Init容器"></a>k8s pod生命周期—Init容器</h1><h1 id="pod生命周期"><a href="#pod生命周期" class="headerlink" title="pod生命周期"></a>pod生命周期</h1><p>![1657944206659](k8s pod生命周期/1657944206659.png)</p><p>Pod能够具有多个容器,应用运行在容器里面,但是它也可能有一个或多个先于应用容器启动的Init容器。</p><p>Init容器与普通的容器非常像,除了如下两点:</p><ul><li>Init 容器总是运行到成功完成为止</li><li>每个Init容器都必须在下一个Init容器启动之前成功完成</li></ul><p>如果Pod的Init容器失败, Kubernetes会不断地重启该Pod,直到Init容器成功为止。然而,如果Pod对应的restartPolicy 为Never,它不会重新启动。</p><p><strong>因为Init容器具有与应用程序容器分离的单独镜像,所以它们的启动相关代码具有如下优势:</strong></p><ul><li>它们可以包含并运行实用工具,但是出于安全考虑,是不建议在应用程序容器镜像中包含这些实用工具的。</li><li>它们可以包含使用工具和定制化代码来安装,但是不能出现在应用程序镜像中。例如,创建镜像没必要FROM另一个镜像,只需要在安装过程中使用类似sed、 awk、 python或dig这样的工具。</li><li>应用程序镜像可以分离出创建和部署的角色,而没有必要联合它们构建一个单独的镜像。</li><li>Init 容器使用Linux Namespace,所以相对应用程序容器来说具有不同的文件系统视图。因此,它们能够具有访问Secret的权限,而应用程序容器则不能。</li><li>它们必须在应用程序容器启动之前运行完成,而应用程序容器是并行运行的,所以Init容器能够提供了一种简单的阻塞或延迟应用容器的启动的方法,直到满足了一组先决条件。</li></ul><p>在Pod启动过程中,Init容器会按顺序在网络和数据卷初始化之后启动。每个容器必须在下一个容器启动之前成功退出。</p><p>如果由于运行时或失败退出,将导致容器启动失败,它会根据Pod的restartPolicy指定的策略进行重试。然而,如果Pod的restartPolicy设置为Always, Init容器失败时会使用RestartPolicy策略。</p><p>在所有的Init容器没有成功之前, Pod将不会变成Ready状态。Init容器的端口将不会在Service 中进行聚集。正在初始化中的Pod处于Pending状态,但应该会将Initializing状态设置为true。</p><p>如果Pod重启,所有Init容器必须重新执行。</p><p>对Init容器spec的修改被限制在容器image字段,修改其他字段都不会生效。更改Init容器的image字段,等价于重启该Pod。(kubectl edit pod myapp-pod)</p><p>Init容器具有应用容器的所有字段。除了readinessProbe，因为Init容器无法定义不同于完成(completion)的就绪(readiness)之外的其他状态。这会在验证过程中强制执行。</p><p>在Pod中的每个app和Init容器的名称必须唯一；与任何其它容器共享同一个名称,会在验证时抛出错误。</p><h1 id="Init容器"><a href="#Init容器" class="headerlink" title="Init容器"></a>Init容器</h1><p>Init模板</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myapp-pod</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">myapp</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp-container</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>, <span class="hljs-string">&#x27;echo The app is running! &amp;&amp; sleep 3600&#x27;</span>]<br>  <span class="hljs-attr">initContainers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">init-myservice</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>, <span class="hljs-string">&#x27;until nslookup myservice; do echo waiting for myservice; sleep 2;done;&#x27;</span>]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">init-mydb</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>, <span class="hljs-string">&#x27;until nslookup mydb; do echo waiting for mydb; sleep 2; done; &#x27;</span>]<br></code></pre></td></tr></table></figure><p>myservice模板</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myservice</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9376</span><br></code></pre></td></tr></table></figure><p>mydb模板</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mydb</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9377</span><br></code></pre></td></tr></table></figure><h1 id="Init容器操作查看"><a href="#Init容器操作查看" class="headerlink" title="Init容器操作查看"></a>Init容器操作查看</h1><h2 id="第一步：之创建init状态检测pod"><a href="#第一步：之创建init状态检测pod" class="headerlink" title="第一步：之创建init状态检测pod"></a>第一步：之创建init状态检测pod</h2><p>通过init容器模板创建pod</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"># 先生成<span class="hljs-keyword">init</span>配置清单<br>[<span class="hljs-symbol">root@</span>k8s-master01 <span class="hljs-keyword">init</span>-container]# vi <span class="hljs-keyword">init</span>.yaml<br># 通过<span class="hljs-keyword">init</span>.yaml创建pod<br>[<span class="hljs-symbol">root@</span>k8s-master01 <span class="hljs-keyword">init</span>-container]# kubectl create -f  <span class="hljs-keyword">init</span>.yaml<br># 查看pod的状态<br>[<span class="hljs-symbol">root@</span>k8s-master01 <span class="hljs-keyword">init</span>-container]# kubectl <span class="hljs-keyword">get</span> pod<br>NAME        READY   STATUS     RESTARTS   AGE<br>myapp-pod   <span class="hljs-number">0</span>/<span class="hljs-number">1</span>     Init:<span class="hljs-number">0</span>/<span class="hljs-number">2</span>   <span class="hljs-number">0</span>          3m8s<br></code></pre></td></tr></table></figure><p>查看myapp-pod的启动日志</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@k8s-master01</span> <span class="hljs-string">init-container</span>]<span class="hljs-comment"># kubectl describe pod myapp-pod</span><br><span class="hljs-attr">Name:</span>         <span class="hljs-string">myapp-pod</span><br><span class="hljs-attr">Namespace:</span>    <span class="hljs-string">default</span><br><span class="hljs-attr">Priority:</span>     <span class="hljs-number">0</span><br><span class="hljs-attr">Node:</span>         <span class="hljs-string">k8s-node02/fd56:a9ae:cb0f::853</span><br><span class="hljs-attr">Start Time:</span>   <span class="hljs-string">Sat,</span> <span class="hljs-number">16</span> <span class="hljs-string">Jul</span> <span class="hljs-number">2022 20:56:13</span> <span class="hljs-string">+0800</span><br><span class="hljs-attr">Labels:</span>       <span class="hljs-string">app=myapp</span><br><span class="hljs-attr">Annotations:</span>  <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Status:</span>       <span class="hljs-string">Pending</span><br><span class="hljs-attr">IP:</span>           <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.4</span><br><span class="hljs-attr">IPs:</span><br>  <span class="hljs-attr">IP:</span>  <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.4</span><br><span class="hljs-attr">Init Containers:</span><br>  <span class="hljs-attr">init-myservice:</span><br>    <span class="hljs-attr">Container ID:</span>  <span class="hljs-string">docker://b4e6898bf71991f1571f0750d7ed58f54aeb511ca175b9dcafbbdf457aac3971</span><br>    <span class="hljs-attr">Image:</span>         <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">Image ID:</span>      <span class="hljs-string">docker-pullable://busybox@sha256:5acba83a746c7608ed544dc1533b87c737a0b0fb730301639a0179f9344b1678</span><br>    <span class="hljs-attr">Port:</span>          <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Host Port:</span>     <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Command:</span><br>      <span class="hljs-string">sh</span><br>      <span class="hljs-string">-c</span><br>      <span class="hljs-string">until</span> <span class="hljs-string">nslookup</span> <span class="hljs-string">myservice;</span> <span class="hljs-string">do</span> <span class="hljs-string">echo</span> <span class="hljs-string">waiting</span> <span class="hljs-string">for</span> <span class="hljs-string">myservice;</span> <span class="hljs-string">sleep</span> <span class="hljs-number">2</span><span class="hljs-string">;done;</span><br>    <span class="hljs-attr">State:</span>          <span class="hljs-string">Running</span><br>      <span class="hljs-attr">Started:</span>      <span class="hljs-string">Sat,</span> <span class="hljs-number">16</span> <span class="hljs-string">Jul</span> <span class="hljs-number">2022 20:56:33</span> <span class="hljs-string">+0800</span><br>    <span class="hljs-attr">Ready:</span>          <span class="hljs-literal">False</span><br>    <span class="hljs-attr">Restart Count:</span>  <span class="hljs-number">0</span><br>    <span class="hljs-attr">Environment:</span>    <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Mounts:</span><br>      <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class="hljs-string">from</span> <span class="hljs-string">kube-api-access-4vx22</span> <span class="hljs-string">(ro)</span><br>  <span class="hljs-attr">init-mydb:</span><br>    <span class="hljs-attr">Container ID:</span>  <br>    <span class="hljs-attr">Image:</span>         <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">Image ID:</span>      <br>    <span class="hljs-attr">Port:</span>          <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Host Port:</span>     <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Command:</span><br>      <span class="hljs-string">sh</span><br>      <span class="hljs-string">-c</span><br>      <span class="hljs-string">until</span> <span class="hljs-string">nslookup</span> <span class="hljs-string">mydb;</span> <span class="hljs-string">do</span> <span class="hljs-string">echo</span> <span class="hljs-string">waiting</span> <span class="hljs-string">for</span> <span class="hljs-string">mydb;</span> <span class="hljs-string">sleep</span> <span class="hljs-number">2</span><span class="hljs-string">;</span> <span class="hljs-string">done;</span> <br>    <span class="hljs-attr">State:</span>          <span class="hljs-string">Waiting</span><br>      <span class="hljs-attr">Reason:</span>       <span class="hljs-string">PodInitializing</span><br>    <span class="hljs-attr">Ready:</span>          <span class="hljs-literal">False</span><br>    <span class="hljs-attr">Restart Count:</span>  <span class="hljs-number">0</span><br>    <span class="hljs-attr">Environment:</span>    <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Mounts:</span><br>      <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class="hljs-string">from</span> <span class="hljs-string">kube-api-access-4vx22</span> <span class="hljs-string">(ro)</span><br><span class="hljs-attr">Containers:</span><br>  <span class="hljs-attr">myapp-container:</span><br>    <span class="hljs-attr">Container ID:</span>  <br>    <span class="hljs-attr">Image:</span>         <span class="hljs-string">busybox</span><br>    <span class="hljs-attr">Image ID:</span>      <br>    <span class="hljs-attr">Port:</span>          <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Host Port:</span>     <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Command:</span><br>      <span class="hljs-string">sh</span><br>      <span class="hljs-string">-c</span><br>      <span class="hljs-string">echo</span> <span class="hljs-string">The</span> <span class="hljs-string">app</span> <span class="hljs-string">is</span> <span class="hljs-string">running!</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">sleep</span> <span class="hljs-number">3600</span><br>    <span class="hljs-attr">State:</span>          <span class="hljs-string">Waiting</span><br>      <span class="hljs-attr">Reason:</span>       <span class="hljs-string">PodInitializing</span><br>    <span class="hljs-attr">Ready:</span>          <span class="hljs-literal">False</span><br>    <span class="hljs-attr">Restart Count:</span>  <span class="hljs-number">0</span><br>    <span class="hljs-attr">Environment:</span>    <span class="hljs-string">&lt;none&gt;</span><br>    <span class="hljs-attr">Mounts:</span><br>      <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount</span> <span class="hljs-string">from</span> <span class="hljs-string">kube-api-access-4vx22</span> <span class="hljs-string">(ro)</span><br><span class="hljs-attr">Conditions:</span><br>  <span class="hljs-string">Type</span>              <span class="hljs-string">Status</span><br>  <span class="hljs-string">Initialized</span>       <span class="hljs-literal">False</span> <br>  <span class="hljs-string">Ready</span>             <span class="hljs-literal">False</span> <br>  <span class="hljs-string">ContainersReady</span>   <span class="hljs-literal">False</span> <br>  <span class="hljs-string">PodScheduled</span>      <span class="hljs-literal">True</span> <br><span class="hljs-attr">Volumes:</span><br>  <span class="hljs-attr">kube-api-access-4vx22:</span><br>    <span class="hljs-attr">Type:</span>                    <span class="hljs-string">Projected</span> <span class="hljs-string">(a</span> <span class="hljs-string">volume</span> <span class="hljs-string">that</span> <span class="hljs-string">contains</span> <span class="hljs-string">injected</span> <span class="hljs-string">data</span> <span class="hljs-string">from</span> <span class="hljs-string">multiple</span> <span class="hljs-string">sources)</span><br>    <span class="hljs-attr">TokenExpirationSeconds:</span>  <span class="hljs-number">3607</span><br>    <span class="hljs-attr">ConfigMapName:</span>           <span class="hljs-string">kube-root-ca.crt</span><br>    <span class="hljs-attr">ConfigMapOptional:</span>       <span class="hljs-string">&lt;nil&gt;</span><br>    <span class="hljs-attr">DownwardAPI:</span>             <span class="hljs-literal">true</span><br><span class="hljs-attr">QoS Class:</span>                   <span class="hljs-string">BestEffort</span><br><span class="hljs-attr">Node-Selectors:</span>              <span class="hljs-string">&lt;none&gt;</span><br><span class="hljs-attr">Tolerations:</span>                 <span class="hljs-string">node.kubernetes.io/not-ready:NoExecute</span> <span class="hljs-string">op=Exists</span> <span class="hljs-string">for</span> <span class="hljs-string">300s</span><br>                             <span class="hljs-string">node.kubernetes.io/unreachable:NoExecute</span> <span class="hljs-string">op=Exists</span> <span class="hljs-string">for</span> <span class="hljs-string">300s</span><br><span class="hljs-attr">Events:</span><br>  <span class="hljs-string">Type</span>    <span class="hljs-string">Reason</span>     <span class="hljs-string">Age</span>    <span class="hljs-string">From</span>               <span class="hljs-string">Message</span><br>  <span class="hljs-string">----</span>    <span class="hljs-string">------</span>     <span class="hljs-string">----</span>   <span class="hljs-string">----</span>               <span class="hljs-string">-------</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Scheduled</span>  <span class="hljs-string">4m6s</span>   <span class="hljs-string">default-scheduler</span>  <span class="hljs-string">Successfully</span> <span class="hljs-string">assigned</span> <span class="hljs-string">default/myapp-pod</span> <span class="hljs-string">to</span> <span class="hljs-string">k8s-node02</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Pulling</span>    <span class="hljs-string">2m34s</span>  <span class="hljs-string">kubelet</span>            <span class="hljs-string">Pulling</span> <span class="hljs-string">image</span> <span class="hljs-string">&quot;busybox&quot;</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Pulled</span>     <span class="hljs-string">2m16s</span>  <span class="hljs-string">kubelet</span>            <span class="hljs-string">Successfully</span> <span class="hljs-string">pulled</span> <span class="hljs-string">image</span> <span class="hljs-string">&quot;busybox&quot;</span> <span class="hljs-string">in</span> <span class="hljs-number">17.</span><span class="hljs-string">673975295s</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Created</span>    <span class="hljs-string">2m16s</span>  <span class="hljs-string">kubelet</span>            <span class="hljs-string">Created</span> <span class="hljs-string">container</span> <span class="hljs-string">init-myservice</span><br>  <span class="hljs-string">Normal</span>  <span class="hljs-string">Started</span>    <span class="hljs-string">2m16s</span>  <span class="hljs-string">kubelet</span>            <span class="hljs-string">Started</span> <span class="hljs-string">container</span> <span class="hljs-string">init-myservice</span><br></code></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs golo">[root<span class="hljs-meta">@k</span>8s-master01 init-container]<span class="hljs-comment"># kubectl logs myapp-pod -c  init-myservice</span><br>waiting <span class="hljs-keyword">for</span> myservice<br>Server:         <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span><br>Address:        <span class="hljs-number">10.96</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span>:<span class="hljs-number">53</span><br><br>** server can&#x27;t <span class="hljs-keyword">find</span> myservice.default.svc.cluster.<span class="hljs-keyword">local</span>: NXDOMAIN<br><br>*** Can&#x27;t <span class="hljs-keyword">find</span> myservice.svc.cluster.<span class="hljs-keyword">local</span>: No answer<br>*** Can&#x27;t <span class="hljs-keyword">find</span> myservice.cluster.<span class="hljs-keyword">local</span>: No answer<br>*** Can&#x27;t <span class="hljs-keyword">find</span> myservice.default.svc.cluster.<span class="hljs-keyword">local</span>: No answer<br>*** Can&#x27;t <span class="hljs-keyword">find</span> myservice.svc.cluster.<span class="hljs-keyword">local</span>: No answer<br>*** Can&#x27;t <span class="hljs-keyword">find</span> myservice.cluster.<span class="hljs-keyword">local</span>: No answer<br></code></pre></td></tr></table></figure><h2 id="第二步：创建myservice"><a href="#第二步：创建myservice" class="headerlink" title="第二步：创建myservice"></a>第二步：创建myservice</h2><p>通过myservice模板创建svc</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">vi myservice.yaml<br>kubectl <span class="hljs-keyword">create</span> -f myservice.yaml<br></code></pre></td></tr></table></figure><p>查看pod状态，可以看出status中的显示变成了Init:1/2,说明检测状态中，有一个service已经成功启动。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@k8s-master01 init-container]<span class="hljs-comment"># kubectl get pod</span><br>NAME        READY   STATUS     RESTARTS   AGE<br>myapp-pod   <span class="hljs-number">0</span><span class="hljs-regexp">/1     Init:1/</span><span class="hljs-number">2</span>   <span class="hljs-number">0</span>          <span class="hljs-number">16</span>m<br></code></pre></td></tr></table></figure><h2 id="第三步：创建mydb"><a href="#第三步：创建mydb" class="headerlink" title="第三步：创建mydb"></a>第三步：创建mydb</h2><p>通过myservice模板创建svc</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">vi mydb.yaml<br>kubectl <span class="hljs-keyword">create</span> -f mydb.yaml<br></code></pre></td></tr></table></figure><p>查看pod状态，可以看出READY显示为1/1,status中的显示变成了Running,说明检测状态中，已经成功启动。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">[<span class="hljs-symbol">root@</span>k8s-master01 <span class="hljs-keyword">init</span>-container]# kubectl <span class="hljs-keyword">get</span> pod<br>NAME        READY   STATUS    RESTARTS   AGE<br>myapp-pod   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          22m<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes调度器scheduler</title>
    <link href="/2021/08/04/k8s/%E9%9B%86%E7%BE%A4/kubeadm%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2kubernetes%E9%9B%86%E7%BE%A4/"/>
    <url>/2021/08/04/k8s/%E9%9B%86%E7%BE%A4/kubeadm%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2kubernetes%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="kubeadm快速部署kubernetes集群"><a href="#kubeadm快速部署kubernetes集群" class="headerlink" title="kubeadm快速部署kubernetes集群"></a>kubeadm快速部署kubernetes集群</h1><h1 id="1-安装要求"><a href="#1-安装要求" class="headerlink" title="1 安装要求"></a>1 安装要求</h1><ul><li>一台或多台机器，操作系统 CentOS7.x-86_x64</li><li>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多(master必须2cpu,node可以不用)</li><li>可以访问外网，需要拉取镜像，如果服务器不能上网，需要提前下载镜像并导入节点</li><li>禁止swap分区</li></ul><p><a href="https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">安装 kubeadm | Kubernetes</a></p><h1 id="2-准备环境"><a href="#2-准备环境" class="headerlink" title="2 准备环境"></a>2 准备环境</h1><table><thead><tr><th>角色</th><th>IP</th></tr></thead><tbody><tr><td>master</td><td>192.168.66.11</td></tr><tr><td>node1</td><td>192.168.66.21</td></tr><tr><td>node2</td><td>192.168.66.22</td></tr></tbody></table><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">yum <span class="hljs-keyword">update</span> -y<br>yum install -y firewalld ntpdate <span class="hljs-keyword">net</span>-tools ipvsadm wget<br></code></pre></td></tr></table></figure><h2 id="2-1-关闭防火墙及selinux"><a href="#2-1-关闭防火墙及selinux" class="headerlink" title="2.1 关闭防火墙及selinux"></a>2.1 关闭防火墙及selinux</h2><p>所有节点执行一下命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 关闭防火墙</span><br>systemctl stop firewalld<br>systemctl <span class="hljs-built_in">disable</span> firewalld<br><br><span class="hljs-comment"># 关闭selinux</span><br><span class="hljs-comment"># 永久</span><br>sed -i <span class="hljs-string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux<span class="hljs-built_in">/config </span> <br><span class="hljs-comment"># 临时</span><br>setenforce 0  <br></code></pre></td></tr></table></figure><h2 id="2-2-关闭swap"><a href="#2-2-关闭swap" class="headerlink" title="2.2 关闭swap"></a>2.2 关闭swap</h2><p>所有节点执行一下命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 关闭swap</span><br><span class="hljs-comment"># 临时</span><br>swapoff -a  <br><span class="hljs-comment"># 永久</span><br>sed -ri <span class="hljs-string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> <span class="hljs-regexp">/etc/</span>fstab    <br></code></pre></td></tr></table></figure><h2 id="2-3-根据规划设置主机名及hosts"><a href="#2-3-根据规划设置主机名及hosts" class="headerlink" title="2.3 根据规划设置主机名及hosts"></a>2.3 根据规划设置主机名及hosts</h2><p>所有节点执行hostnamectl set-hostname <hostname>命令</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># k8smaster节点执行</span><br><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-master01</span><br><span class="hljs-comment"># k8snode1节点执行</span><br><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-node01</span><br><span class="hljs-comment"># k8snode2节点执行</span><br><span class="hljs-string">hostnamectl</span> <span class="hljs-built_in">set-hostname</span> <span class="hljs-string">k8s-node02</span><br></code></pre></td></tr></table></figure><p>k8smaster主节点执行</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">cat &gt;&gt; /etc/hosts &lt;&lt; EOF<br><span class="hljs-number">192.168.66.11</span> k8s-master01<br><span class="hljs-number">192.168.66.21</span> k8s-node01<br><span class="hljs-number">192.168.66.22</span> k8s-node02<br>EOF<br></code></pre></td></tr></table></figure><h2 id="2-4-将桥接的IPv4流量传递到iptables的链"><a href="#2-4-将桥接的IPv4流量传递到iptables的链" class="headerlink" title="2.4 将桥接的IPv4流量传递到iptables的链"></a>2.4 将桥接的IPv4流量传递到iptables的链</h2><p>确保 <code>br_netfilter</code> 模块被加载。这一操作可以通过运行 <code>lsmod | grep br_netfilter</code> 来完成。若要显式加载该模块，可执行 <code>sudo modprobe br_netfilter</code>。 </p><p>确保在你的 <code>sysctl</code> 配置中将 <code>net.bridge.bridge-nf-call-iptables</code> 设置为 1。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="hljs-string">br_netfilter</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">#将桥接的IPv4流量传递到iptables的链</span><br><span class="hljs-built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br><span class="hljs-comment"># 生效</span><br>sysctl --system  <br></code></pre></td></tr></table></figure><h2 id="2-5-时间同步"><a href="#2-5-时间同步" class="headerlink" title="2.5 时间同步"></a>2.5 时间同步</h2><p>所有节点执行一下命令</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yum <span class="hljs-keyword">install </span>ntpdate -y<br>ntpdate time.windows.com<br><span class="hljs-comment"># 强制把系统时间写入CMOS</span><br><span class="hljs-keyword">clock </span>-w<br></code></pre></td></tr></table></figure><h1 id="3-所有节点安装Docker-kubeadm-kubelet"><a href="#3-所有节点安装Docker-kubeadm-kubelet" class="headerlink" title="3 所有节点安装Docker/kubeadm/kubelet"></a>3 所有节点安装Docker/kubeadm/kubelet</h1><h2 id="3-1-安装Docker"><a href="#3-1-安装Docker" class="headerlink" title="3.1 安装Docker"></a>3.1 安装Docker</h2><p>k8snode1和k8snode2下安装docker</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span>docker-ce.repo -O <span class="hljs-regexp">/etc/yum</span>.repos.d/docker-ce.repo<br>yum -y install docker-ce-<span class="hljs-number">18.06</span>.<span class="hljs-number">1</span>.ce-<span class="hljs-number">3</span>.el7<br>systemctl enable docker &amp;&amp; systemctl start docker<br>docker --version<br></code></pre></td></tr></table></figure><h2 id="3-2-配置docker镜像加速"><a href="#3-2-配置docker镜像加速" class="headerlink" title="3.2 配置docker镜像加速"></a>3.2 配置docker镜像加速</h2><img src="/2021/08/04/k8s/%E9%9B%86%E7%BE%A4/kubeadm%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2kubernetes%E9%9B%86%E7%BE%A4/1629031322356.png" class="" title="img"><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cat &gt; /etc/docker/daemon<span class="hljs-selector-class">.json</span> &lt;&lt; EOF<br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;https://onozxvpe.mirror.aliyuncs.com&quot;</span>,<span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>, <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>]</span>,<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>]</span><br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>添加镜像加入和本地搭建harbor后：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://onozxvpe.mirror.aliyuncs.com&quot;</span>],<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>],<br>  <span class="hljs-string">&quot;insecure-registries&quot;</span>: [<span class="hljs-string">&quot;harborcloud.com&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-添加阿里云YUM软件源"><a href="#3-3-添加阿里云YUM软件源" class="headerlink" title="3.3 添加阿里云YUM软件源"></a>3.3 添加阿里云YUM软件源</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat &gt; <span class="hljs-regexp">/etc/yum</span>.repos.d/kubernetes.repo &lt;&lt; EOF<br>[kubernetes]<br>name=Kubernetes<br>baseurl=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/repos/</span>kubernetes-el7-x86_64<br>enabled=<span class="hljs-number">1</span><br>gpgcheck=<span class="hljs-number">0</span><br>repo_gpgcheck=<span class="hljs-number">0</span><br>gpgkey=https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/doc/yum</span>-key.gpg https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/kubernetes/yum</span><span class="hljs-regexp">/doc/</span>rpm-package-key.gpg<br>EOF<br></code></pre></td></tr></table></figure><h2 id="3-4-安装kubeadm，kubelet和kubectl"><a href="#3-4-安装kubeadm，kubelet和kubectl" class="headerlink" title="3.4 安装kubeadm，kubelet和kubectl"></a>3.4 安装kubeadm，kubelet和kubectl</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yum</span> install -y kubeadm-<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">0</span> kubectl-<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">0</span> kubelet-<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">systemctl</span> enable kubelet<br></code></pre></td></tr></table></figure><h1 id="4-部署Kubernetes-Master"><a href="#4-部署Kubernetes-Master" class="headerlink" title="4 部署Kubernetes Master"></a>4 部署Kubernetes Master</h1><p><a href="https://kubernetes.io/zh-cn/docs/reference/setup-tools/kubeadm/kubeadm-init/">https://kubernetes.io/zh-cn/docs/reference/setup-tools/kubeadm/kubeadm-init/</a></p><p>在192.168.66.10（k8smaster）执行。</p><p>由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址</p><p><strong>–pod-network-cidr</strong></p><p>指定pod网络的IP地址范围。 设置后，控制平面将自动为每个节点分配cidr。</p><p><strong>–service-cidr</strong></p><p>集群内部虚拟网络，Pod统一访问入口</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubeadm init \<br><span class="hljs-attribute">--apiserver-advertise-address</span>=192.168.66.10 \<br>--image-repository registry.aliyuncs.com/google_containers \<br>--kubernetes-version v1.22.0 \<br><span class="hljs-attribute">--service-cidr</span>=10.96.0.0/12 \<br><span class="hljs-attribute">--pod-network-cidr</span>=10.244.0.0/16<br></code></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[init]</span> Using Kubernetes version: v1.<span class="hljs-number">22.0</span><br><span class="hljs-selector-attr">[preflight]</span> Running pre-flight checks<br><span class="hljs-selector-attr">[preflight]</span> Pulling images required <span class="hljs-keyword">for</span> setting up <span class="hljs-selector-tag">a</span> Kubernetes cluster<br><span class="hljs-selector-attr">[preflight]</span> This might take <span class="hljs-selector-tag">a</span> minute or two, depending on the speed of your internet connection<br><span class="hljs-selector-attr">[preflight]</span> You can also perform this action <span class="hljs-keyword">in</span> beforehand using <span class="hljs-string">&#x27;kubeadm config images pull&#x27;</span><br><span class="hljs-selector-attr">[certs]</span> Using certificateDir folder <span class="hljs-string">&quot;/etc/kubernetes/pki&quot;</span><br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;ca&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;apiserver&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> apiserver serving cert is signed <span class="hljs-keyword">for</span> DNS names <span class="hljs-selector-attr">[k8s-master01 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local]</span> and IPs <span class="hljs-selector-attr">[10.96.0.1 192.168.66.11]</span><br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;apiserver-kubelet-client&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;front-proxy-ca&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;front-proxy-client&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;etcd/ca&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;etcd/server&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> etcd/server serving cert is signed <span class="hljs-keyword">for</span> DNS names <span class="hljs-selector-attr">[k8s-master01 localhost]</span> and IPs <span class="hljs-selector-attr">[192.168.66.11 127.0.0.1 ::1]</span><br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;etcd/peer&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> etcd/peer serving cert is signed <span class="hljs-keyword">for</span> DNS names <span class="hljs-selector-attr">[k8s-master01 localhost]</span> and IPs <span class="hljs-selector-attr">[192.168.66.11 127.0.0.1 ::1]</span><br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;etcd/healthcheck-client&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;apiserver-etcd-client&quot;</span> certificate and key<br><span class="hljs-selector-attr">[certs]</span> Generating <span class="hljs-string">&quot;sa&quot;</span> key and public key<br><span class="hljs-selector-attr">[kubeconfig]</span> Using kubeconfig folder <span class="hljs-string">&quot;/etc/kubernetes&quot;</span><br><span class="hljs-selector-attr">[kubeconfig]</span> Writing <span class="hljs-string">&quot;admin.conf&quot;</span> kubeconfig file<br><span class="hljs-selector-attr">[kubeconfig]</span> Writing <span class="hljs-string">&quot;kubelet.conf&quot;</span> kubeconfig file<br><span class="hljs-selector-attr">[kubeconfig]</span> Writing <span class="hljs-string">&quot;controller-manager.conf&quot;</span> kubeconfig file<br><span class="hljs-selector-attr">[kubeconfig]</span> Writing <span class="hljs-string">&quot;scheduler.conf&quot;</span> kubeconfig file<br><span class="hljs-selector-attr">[kubelet-start]</span> Writing kubelet environment file with flags to file <span class="hljs-string">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class="hljs-selector-attr">[kubelet-start]</span> Writing kubelet configuration to file <span class="hljs-string">&quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class="hljs-selector-attr">[kubelet-start]</span> Starting the kubelet<br><span class="hljs-selector-attr">[control-plane]</span> Using manifest folder <span class="hljs-string">&quot;/etc/kubernetes/manifests&quot;</span><br><span class="hljs-selector-attr">[control-plane]</span> Creating static Pod manifest <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;kube-apiserver&quot;</span><br><span class="hljs-selector-attr">[control-plane]</span> Creating static Pod manifest <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;kube-controller-manager&quot;</span><br><span class="hljs-selector-attr">[control-plane]</span> Creating static Pod manifest <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;kube-scheduler&quot;</span><br><span class="hljs-selector-attr">[etcd]</span> Creating static Pod manifest <span class="hljs-keyword">for</span> local etcd <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;/etc/kubernetes/manifests&quot;</span><br><span class="hljs-selector-attr">[wait-control-plane]</span> Waiting <span class="hljs-keyword">for</span> the kubelet to boot up the control plane as static Pods from directory <span class="hljs-string">&quot;/etc/kubernetes/manifests&quot;</span>. This can take up to <span class="hljs-number">4</span>m0s<br><span class="hljs-selector-attr">[apiclient]</span> All control plane components are healthy after <span class="hljs-number">12.003757</span> seconds<br><span class="hljs-selector-attr">[upload-config]</span> Storing the configuration used <span class="hljs-keyword">in</span> ConfigMap <span class="hljs-string">&quot;kubeadm-config&quot;</span> <span class="hljs-keyword">in</span> the <span class="hljs-string">&quot;kube-system&quot;</span> Namespace<br><span class="hljs-selector-attr">[kubelet]</span> Creating <span class="hljs-selector-tag">a</span> ConfigMap <span class="hljs-string">&quot;kubelet-config-1.22&quot;</span> <span class="hljs-keyword">in</span> namespace kube-system with the configuration <span class="hljs-keyword">for</span> the kubelets <span class="hljs-keyword">in</span> the cluster<br><span class="hljs-selector-attr">[upload-certs]</span> Skipping phase. Please see <span class="hljs-attr">--upload-certs</span><br><span class="hljs-selector-attr">[mark-control-plane]</span> Marking the node k8s-master01 as control-plane by adding the labels: <span class="hljs-selector-attr">[node-role.kubernetes.io/master(deprecated) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]</span><br><span class="hljs-selector-attr">[mark-control-plane]</span> Marking the node k8s-master01 as control-plane by adding the taints <span class="hljs-selector-attr">[node-role.kubernetes.io/master:NoSchedule]</span><br><span class="hljs-selector-attr">[bootstrap-token]</span> Using token: ii3pse<span class="hljs-selector-class">.bfxj9fqc9tvz6yrr</span><br><span class="hljs-selector-attr">[bootstrap-token]</span> Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles<br><span class="hljs-selector-attr">[bootstrap-token]</span> configured RBAC rules to allow Node Bootstrap tokens to get nodes<br><span class="hljs-selector-attr">[bootstrap-token]</span> configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="hljs-keyword">in</span> <span class="hljs-attribute">order</span> for nodes to get long term certificate credentials<br><span class="hljs-selector-attr">[bootstrap-token]</span> configured RBAC rules to allow the csrapprover controller automatically approve CSRs from <span class="hljs-selector-tag">a</span> Node Bootstrap Token<br><span class="hljs-selector-attr">[bootstrap-token]</span> configured RBAC rules to allow certificate rotation <span class="hljs-keyword">for</span> <span class="hljs-attribute">all</span> node client certificates in the cluster<br><span class="hljs-selector-attr">[bootstrap-token]</span> Creating the <span class="hljs-string">&quot;cluster-info&quot;</span> ConfigMap <span class="hljs-keyword">in</span> the <span class="hljs-string">&quot;kube-public&quot;</span> namespace<br><span class="hljs-selector-attr">[kubelet-finalize]</span> Updating <span class="hljs-string">&quot;/etc/kubernetes/kubelet.conf&quot;</span> to point to <span class="hljs-selector-tag">a</span> rotatable kubelet client certificate and key<br><span class="hljs-selector-attr">[addons]</span> Applied essential addon: CoreDNS<br><span class="hljs-selector-attr">[addons]</span> Applied essential addon: kube-proxy<br><br>Your Kubernetes control-plane has initialized successfully!<br><br>To start using your cluster, you need to run the following as <span class="hljs-selector-tag">a</span> regular user:<br><br>  mkdir -<span class="hljs-selector-tag">p</span> <span class="hljs-variable">$HOME</span>/<span class="hljs-selector-class">.kube</span><br>  sudo cp -<span class="hljs-selector-tag">i</span> /etc/kubernetes/admin<span class="hljs-selector-class">.conf</span> <span class="hljs-variable">$HOME</span>/.kube/config<br>  sudo chown $(id -u):$(id -g) <span class="hljs-variable">$HOME</span>/.kube/config<br><br>Alternatively, <span class="hljs-keyword">if</span> you are the root user, you can run:<br><br>  export KUBECONFIG=/etc/kubernetes/admin<span class="hljs-selector-class">.conf</span><br><br>You should now deploy <span class="hljs-selector-tag">a</span> pod network to the cluster.<br>Run <span class="hljs-string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:<br>  https:<span class="hljs-comment">//kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><br>Then you can join any number of worker nodes by running the following on each as root:<br><br>kubeadm join <span class="hljs-number">192.168</span>.<span class="hljs-number">66.11</span>:<span class="hljs-number">6443</span> <span class="hljs-attr">--token</span> ii3pse<span class="hljs-selector-class">.bfxj9fqc9tvz6yrr</span> \<br>        <span class="hljs-attr">--discovery-token-ca-cert-hash</span> sha256:<span class="hljs-number">643</span>b48706d97589356e2a4be7294a898ac9a909baa56fecca277b7b4e5634e0e <br></code></pre></td></tr></table></figure><ul><li>preflight，系统前置检查</li><li>certs 各种证书的文件生成</li><li>kubeconfig生成kubeconfig文件，主要是kubenetes的几大组件的配置文件。</li><li>kubelet-start 启动kubelet</li><li>control-plane 生成所有静态pod的manifest文件，这些静态pod组成了kubenetes的控制面板，apiserver，controller，scheduler，生成这个文件后，kubelet会自动依据此文件描述的信息拉起镜像</li><li>etcd 生成etcd的manifest</li><li>upload-config 上传kubeadm和kubelet的配置文件到configmap中</li><li>upload-certs 上传配置证书文件</li><li>mark-control-plane mark一个node作为控制台</li><li>bootstrap-token 生成bootstrap tokens用于把node节点加入到集群。</li><li>kubelet-finalize 更新kubelet的设置</li><li>addon 安装其他的相关组件。主要是网络组件dns和kube-proxy</li></ul><p>所有node执行：</p><p>注：<code>kubectl</code> 在 <code>$HOME/.kube</code> 目录中查找一个名为 <code>config</code> 的配置文件。 你可以通过设置 KUBECONFIG 环境变量或设置 <a href="https://kubernetes.io/zh/docs/concepts/configuration/organize-cluster-access-kubeconfig/"><code>--kubeconfig</code></a> 参数来指定其它 <a href="https://kubernetes.io/zh/docs/concepts/configuration/organize-cluster-access-kubeconfig/">kubeconfig</a> 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br>$ kubectl get nodes<br></code></pre></td></tr></table></figure><p>如果出现错误通过一下命令重置</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">kubeadm reset</span><br></code></pre></td></tr></table></figure><h1 id="5-加入Kubernetes-Node"><a href="#5-加入Kubernetes-Node" class="headerlink" title="5 加入Kubernetes Node"></a>5 加入Kubernetes Node</h1><p>执行上面kubeadm init后显示的信息提示，加入kubernates</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">kubeadm <span class="hljs-keyword">join </span><span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">66</span>.<span class="hljs-number">11</span>:<span class="hljs-number">6443</span> --token ii3pse.<span class="hljs-keyword">bfxj9fqc9tvz6yrr </span>\<br>        --<span class="hljs-keyword">discovery-token-ca-cert-hash </span><span class="hljs-keyword">sha256:643b48706d97589356e2a4be7294a898ac9a909baa56fecca277b7b4e5634e0e</span><br></code></pre></td></tr></table></figure><p>默认token有效期为24小时，当过期之后，该token就不可用了。这时就需要重新创建token，操作如下：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">kubeadm <span class="hljs-built_in">token</span> <span class="hljs-keyword">create</span> --<span class="hljs-keyword">print</span>-join-command<br></code></pre></td></tr></table></figure><h1 id="6-部署CNI网络插件"><a href="#6-部署CNI网络插件" class="headerlink" title="6 部署CNI网络插件"></a>6 部署CNI网络插件</h1><img src="/2021/08/04/k8s/%E9%9B%86%E7%BE%A4/kubeadm%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2kubernetes%E9%9B%86%E7%BE%A4/image-25.png" class="" title="img"><p>这里可能需要代理下载，可以先下载下来</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/coreos/</span>flannel<span class="hljs-regexp">/master/</span>Documentation/kube-flannel.yml<br>$ kubectl get pods -n kube-system<br>NAME                          READY   STATUS    RESTARTS   AGE<br>kube-flannel-ds-amd64-<span class="hljs-number">2</span>pc95   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">72</span>s<br></code></pre></td></tr></table></figure><img src="/2021/08/04/k8s/%E9%9B%86%E7%BE%A4/kubeadm%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2kubernetes%E9%9B%86%E7%BE%A4/image-26.png" class="" title="img"><p><strong>Flannel工作原理</strong></p><p>k8s网络通讯方式：<a href="http://jishu.youhang.site/25.html">k8s网络通讯方式 – 青叶水间 (youhang.site)</a></p><p>每个主机配置一个ip段和子网个数。 例如，可以配置一个覆盖网络使用 10.244.0.0/16段，每个主机/24个子网。因此主机a可以接受10.244.1.0/24，主机B可以接受10.244.2.0/24的包。flannel使用etcd来维护分配的子网到实际的ip地址之间的映射。</p><p>master IP信息：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs pf">[root@k8s-master01 ~]<span class="hljs-comment"># ip addr</span><br><span class="hljs-number">1</span>: lo: <span class="hljs-variable">&lt;LOOPBACK,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">65536</span> qdisc noqueue <span class="hljs-keyword">state</span> UNKNOWN <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/loopback <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> brd <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/<span class="hljs-number">8</span> scope host lo<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> ::<span class="hljs-number">1</span>/<span class="hljs-number">128</span> scope host <br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">2</span>: eno16777736: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1500</span> qdisc pfifo_fast <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">6</span>b:de:b6 brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">66.11</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span> scope <span class="hljs-keyword">global</span> noprefixroute eno16777736<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> fd56:a9ae:cb0f::a49/<span class="hljs-number">128</span> scope <span class="hljs-keyword">global</span> noprefixroute dynamic <br>       valid_lft <span class="hljs-number">29570</span>sec preferred_lft <span class="hljs-number">29570</span>sec<br>    <span class="hljs-keyword">inet6</span> fd56:a9ae:cb0f:<span class="hljs-number">0</span>:<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe6b:deb6/<span class="hljs-number">64</span> scope <span class="hljs-keyword">global</span> noprefixroute <br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> fe80::<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe6b:deb6/<span class="hljs-number">64</span> scope link noprefixroute <br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">3</span>: docker0: <span class="hljs-variable">&lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt;</span> mtu <span class="hljs-number">1500</span> qdisc noqueue <span class="hljs-keyword">state</span> DOWN <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> <br>    link/ether <span class="hljs-number">02</span>:<span class="hljs-number">42</span>:f0:df:d5:af brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">172.17</span>.<span class="hljs-number">0.1</span>/<span class="hljs-number">16</span> brd <span class="hljs-number">172.17</span>.<span class="hljs-number">255.255</span> scope <span class="hljs-keyword">global</span> docker0<br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">4</span>: flannel.<span class="hljs-number">1</span>: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1450</span> qdisc noqueue <span class="hljs-keyword">state</span> UNKNOWN <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> <br>    link/ether <span class="hljs-number">8</span>e:<span class="hljs-number">53</span>:a8:<span class="hljs-number">6</span>d:<span class="hljs-number">99</span>:<span class="hljs-number">1</span>e brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.244</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">32</span> scope <span class="hljs-keyword">global</span> flannel.<span class="hljs-number">1</span><br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> fe80::<span class="hljs-number">8</span>c53:a8ff:fe6d:<span class="hljs-number">991</span>e/<span class="hljs-number">64</span> scope link <br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">5</span>: cni0: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1450</span> qdisc noqueue <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/ether <span class="hljs-number">7</span>a:<span class="hljs-number">33</span>:a2:<span class="hljs-number">1</span>a:<span class="hljs-number">15</span>:<span class="hljs-number">65</span> brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.244</span>.<span class="hljs-number">0.1</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.244</span>.<span class="hljs-number">0.255</span> scope <span class="hljs-keyword">global</span> cni0<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> fe80::<span class="hljs-number">7833</span>:a2ff:fe1a:<span class="hljs-number">1565</span>/<span class="hljs-number">64</span> scope link <br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">6</span>: vethefc85590@if3: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1450</span> qdisc noqueue master cni0 <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> <br>    link/ether <span class="hljs-number">5</span>a:<span class="hljs-number">3</span>e:<span class="hljs-number">58</span>:<span class="hljs-number">6</span>a:<span class="hljs-number">8</span>c:d2 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="hljs-number">0</span><br>    <span class="hljs-keyword">inet6</span> fe80::<span class="hljs-number">583</span>e:<span class="hljs-number">58</span>ff:fe6a:<span class="hljs-number">8</span>cd2/<span class="hljs-number">64</span> scope link <br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">7</span>: veth991a2bde@if3: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1450</span> qdisc noqueue master cni0 <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> <br>    link/ether fe:<span class="hljs-number">6</span>f:eb:<span class="hljs-number">91</span>:<span class="hljs-number">71</span>:<span class="hljs-number">71</span> brd ff:ff:ff:ff:ff:ff link-netnsid <span class="hljs-number">1</span><br>    <span class="hljs-keyword">inet6</span> fe80::fc6f:ebff:fe91:<span class="hljs-number">7171</span>/<span class="hljs-number">64</span> scope link <br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><p><strong>lo</strong></p><p>本地环回接口</p><p><strong>eno16777736</strong></p><p>真实网卡</p><p><strong>docker0</strong></p><p>docker ip信息，默认IP 172.17.0.1/16</p><p>可修改 /etc/docker/daemon.json, 指定ip地址，例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>docker/daemon.json<br>&#123;<br> <span class="hljs-string">&quot;bip&quot;</span>: <span class="hljs-string">&quot;172.18.0.1/24&quot;</span>,<br>&#125;<br>service docker restart<br></code></pre></td></tr></table></figure><p><strong>flannel.1</strong></p><p>docker集群跨主机通讯的覆盖网络 10.244.0.0/32</p><p><strong>cni0</strong></p><p>pod分配 网络 10.244.0.1/24</p><p>node1 IP信息：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="hljs-number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/loopback <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> brd <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">127.0.0.1</span>/<span class="hljs-number">8</span> scope host lo<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> ::<span class="hljs-number">1</span>/<span class="hljs-number">128</span> scope host <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">2</span>: eno16777736: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">1</span>a:<span class="hljs-number">1</span>c:d4 brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.0.0.21</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.0.0.255</span> scope global noprefixroute eno16777736<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fd56:a9ae:cb0f::<span class="hljs-number">7</span>a1/<span class="hljs-number">128</span> scope global noprefixroute dynamic <br>       <span class="hljs-attribute">valid_lft</span> <span class="hljs-number">29510</span>sec preferred_lft <span class="hljs-number">29510</span>sec<br>    <span class="hljs-attribute">inet6</span> fd56:a9ae:cb0f:<span class="hljs-number">0</span>:<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe1a:<span class="hljs-number">1</span>cd4/<span class="hljs-number">64</span> scope global noprefixroute <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fe80::<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe1a:<span class="hljs-number">1</span>cd4/<span class="hljs-number">64</span> scope link noprefixroute <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">3</span>: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu <span class="hljs-number">1500</span> qdisc noqueue state DOWN group default <br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">02</span>:<span class="hljs-number">42</span>:b8:ae:c9:<span class="hljs-number">24</span> brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">172.17.0.1</span>/<span class="hljs-number">16</span> brd <span class="hljs-number">172.17.255.255</span> scope global docker0<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">4</span>: flannel.<span class="hljs-number">1</span>: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">1450</span> qdisc noqueue state UNKNOWN group default <br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">1</span>e:<span class="hljs-number">6</span>d:<span class="hljs-number">47</span>:<span class="hljs-number">69</span>:f7:<span class="hljs-number">6</span>a brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.244.1.0</span>/<span class="hljs-number">32</span> scope global flannel.<span class="hljs-number">1</span><br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fe80::<span class="hljs-number">1</span>c6d:<span class="hljs-number">47</span>ff:fe69:f76a/<span class="hljs-number">64</span> scope link <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br></code></pre></td></tr></table></figure><p>node2 IP信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="hljs-number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/loopback <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> brd <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">127.0.0.1</span>/<span class="hljs-number">8</span> scope host lo<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> ::<span class="hljs-number">1</span>/<span class="hljs-number">128</span> scope host <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">2</span>: eno16777736: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">67</span>:c3:<span class="hljs-number">4</span>a brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.0.0.22</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.0.0.255</span> scope global noprefixroute eno16777736<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fd56:a9ae:cb0f::<span class="hljs-number">853</span>/<span class="hljs-number">128</span> scope global noprefixroute dynamic <br>       <span class="hljs-attribute">valid_lft</span> <span class="hljs-number">29262</span>sec preferred_lft <span class="hljs-number">29262</span>sec<br>    <span class="hljs-attribute">inet6</span> fd56:a9ae:cb0f:<span class="hljs-number">0</span>:<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe67:c34a/<span class="hljs-number">64</span> scope global noprefixroute <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fe80::<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe67:c34a/<span class="hljs-number">64</span> scope link noprefixroute <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">3</span>: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu <span class="hljs-number">1500</span> qdisc noqueue state DOWN group default <br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">02</span>:<span class="hljs-number">42</span>:b2:<span class="hljs-number">7</span>e:<span class="hljs-number">58</span>:<span class="hljs-number">1</span>f brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">172.17.0.1</span>/<span class="hljs-number">16</span> brd <span class="hljs-number">172.17.255.255</span> scope global docker0<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br><span class="hljs-attribute">4</span>: flannel.<span class="hljs-number">1</span>: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">1450</span> qdisc noqueue state UNKNOWN group default <br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">66</span>:<span class="hljs-number">5</span>b:e2:<span class="hljs-number">87</span>:<span class="hljs-number">5</span>c:<span class="hljs-number">22</span> brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.244.2.0</span>/<span class="hljs-number">32</span> scope global flannel.<span class="hljs-number">1</span><br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fe80::<span class="hljs-number">645</span>b:e2ff:fe87:<span class="hljs-number">5</span>c22/<span class="hljs-number">64</span> scope link <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br></code></pre></td></tr></table></figure><p>7 测试kubernetes集群</p><p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@k8s-master01 ~]<span class="hljs-comment"># kubectl create deployment nginx --image=nginx</span><br>deployment.apps/nginx created<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl expose deployment nginx --port=80 --type=NodePort</span><br>service/nginx exposed<br>[root@k8s-master01 ~]<span class="hljs-comment"># kubectl get pod,svc</span><br>NAME                         READY   STATUS              RESTARTS   AGE<br>pod<span class="hljs-regexp">/nginx-6799fc88d8-zzsw7   0/</span><span class="hljs-number">1</span>     ContainerCreating   <span class="hljs-number">0</span>          <span class="hljs-number">31</span>s<br><br>NAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE<br>service<span class="hljs-regexp">/kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/</span>TCP        <span class="hljs-number">24</span>h<br>service<span class="hljs-regexp">/nginx        NodePort    10.103.32.138   &lt;none&gt;        80:30029/</span>TCP   <span class="hljs-number">13</span>s<br></code></pre></td></tr></table></figure><p>访问地址：<a href="http://nodeip:Port/">http://NodeIP:Port</a></p><p>可以通过 <a href="http://10.0.0.21:31263/">http://10.0.0.21:31263</a> 和 <a href="http://10.0.0.22:31263/">http://10.0.0.22:31263</a> 访问</p><h1 id="8-错误排查"><a href="#8-错误排查" class="headerlink" title="8 错误排查"></a>8 <strong>错误排查</strong></h1><p>启动日志获取</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#查看启动日志</span><br><span class="hljs-keyword">journalctl </span>-f -u kubelet.service<br></code></pre></td></tr></table></figure><p>配置加载与重启服务</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload &amp;&amp; <span class="hljs-params">system</span>ctl restart kubelet<br></code></pre></td></tr></table></figure><h1 id="9-ipvs修改"><a href="#9-ipvs修改" class="headerlink" title="9 ipvs修改"></a>9 ipvs修改</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">kubectl <span class="hljs-keyword">edit</span> configmap kube-proxy -n kube-<span class="hljs-built_in">system</span><br>...<br><span class="hljs-number">43</span>   <span class="hljs-keyword">mode</span>: <span class="hljs-string">&quot;ipvs&quot;</span><br>   ...<br></code></pre></td></tr></table></figure><p><strong>删除pod,会自动拉起</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">kubectl <span class="hljs-keyword">delete</span> pod kube-proxy-btz4p -n kube-<span class="hljs-keyword">system</span>  <br></code></pre></td></tr></table></figure><p><strong>查看是否启用ipvs</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">kubectl logs kube-proxy-wwqbh -n kube-<span class="hljs-keyword">system</span>        <br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1、 kube-proxy配置文件以configmap方式存储<br>2、 如果让所有节点生效，需要重建所有节点kube-proxy pod<br></code></pre></td></tr></table></figure><h1 id="10-问题及解决"><a href="#10-问题及解决" class="headerlink" title="10 问题及解决"></a>10 <strong>问题及解决</strong></h1><p>1 failed to find subsystem mount for required subsystem: pids failed to find subsystem mount for required subsystem: pids</p><p>解决方法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system<span class="hljs-regexp">/kubelet.service.d/</span><span class="hljs-number">10</span>-kubeadm.conf<br><span class="hljs-comment">#发现ExecStart=后面添加参数</span><br>ExecStart=<span class="hljs-string">&quot;--feature-gates SupportPodPidsLimit=false --feature-gates SupportNodePidsLimit=false&quot;</span><br><span class="hljs-comment">#或者更改引用变量$KUBELET_EXTRA_ARGS</span><br>vi <span class="hljs-regexp">/etc/</span>sysconfig/kubelet<br>KUBELET_EXTRA_ARGS=--feature-gates SupportPodPidsLimit=false --feature-gates SupportNodePidsLimit=false<br></code></pre></td></tr></table></figure><p>2 kubelet cgroup driver: \“systemd\“ is different from docker cgroup driver: \“cgroupfs\“</p><p>docker的驱动查看是否有systemd</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> <span class="hljs-literal">info</span> |grep Cgroup<br></code></pre></td></tr></table></figure><p>解决方案步骤如下：</p><p>(1)、先修改docker的Cgroup Driver，修改/etc/docker/daemon.json文件</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>重启docker</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload<br><span class="hljs-params">system</span>ctl restart docker<br></code></pre></td></tr></table></figure><p>(2)、然后修改kubelet的Cgroup Driver<br>修改 “/usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf ” 文件，增加（或修改成）“–cgroup-driver=systemd” (官方推荐用systemd)</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">Environment</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --cgroup-driver=systemd&quot;</span><br></code></pre></td></tr></table></figure><p>修改 “/var/lib/kubelet/kubeadm-flags.env ”文件，增加（或修改成）“-–cgroup-driver=systemd”</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">KUBELET_KUBEADM_ARGS=&quot;</span><span class="hljs-literal">--</span><span class="hljs-comment">cgroup</span><span class="hljs-literal">-</span><span class="hljs-comment">driver=systemd</span> <span class="hljs-literal">--</span><span class="hljs-comment">network</span><span class="hljs-literal">-</span><span class="hljs-comment">plugin=cni</span> <span class="hljs-literal">--</span><span class="hljs-comment">pod</span><span class="hljs-literal">-</span><span class="hljs-comment">infra</span><span class="hljs-literal">-</span><span class="hljs-comment">container</span><span class="hljs-literal">-</span><span class="hljs-comment">image=registry</span><span class="hljs-string">.</span><span class="hljs-comment">aliyuncs</span><span class="hljs-string">.</span><span class="hljs-comment">com/google_containers/pause:3</span><span class="hljs-string">.</span><span class="hljs-comment">2&quot;</span><br></code></pre></td></tr></table></figure><p>重启：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload<br><span class="hljs-params">system</span>ctl restart kubelet<br></code></pre></td></tr></table></figure><p>3 missing required cgroups: cpu</p><p>修改<code>/etc/default/grub</code></p><p>添加一行<code>GRUB_CMDLINE_LINUX=&quot;cgroup_enable=cpu&quot;</code></p><p>运行 <code>update-grub2</code></p><p>重启机器 <code>reboot</code></p><p>4  Failed to start CRI Interface for Docker Application Container Engine Defined-By: systemd</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">7</span>月 <span class="hljs-number">29</span> <span class="hljs-number">20</span>:<span class="hljs-number">35</span>:<span class="hljs-number">14</span> k8s-master02 systemd[<span class="hljs-number">1</span>]: cri-docker.service: main <span class="hljs-built_in">process</span> exited, code=exited, status=<span class="hljs-number">203</span>/EXEC<br><span class="hljs-number">7</span>月 <span class="hljs-number">29</span> <span class="hljs-number">20</span>:<span class="hljs-number">35</span>:<span class="hljs-number">14</span> k8s-master02 systemd[<span class="hljs-number">1</span>]: Failed <span class="hljs-built_in">to</span> <span class="hljs-built_in">start</span> CRI Interface <span class="hljs-keyword">for</span> Docker Application Container Engine.<br><span class="hljs-comment">-- Subject: Unit cri-docker.service has failed</span><br><span class="hljs-comment">-- Defined-By: systemd</span><br><span class="hljs-comment">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="hljs-comment">-- </span><br><span class="hljs-comment">-- Unit cri-docker.service has failed.</span><br><span class="hljs-comment">-- </span><br><span class="hljs-comment">-- The result is failed.</span><br><span class="hljs-number">7</span>月 <span class="hljs-number">29</span> <span class="hljs-number">20</span>:<span class="hljs-number">35</span>:<span class="hljs-number">14</span> k8s-master02 systemd[<span class="hljs-number">1</span>]: Unit cri-docker.service entered failed state.<br><span class="hljs-number">7</span>月 <span class="hljs-number">29</span> <span class="hljs-number">20</span>:<span class="hljs-number">35</span>:<span class="hljs-number">14</span> k8s-master02 systemd[<span class="hljs-number">1</span>]: cri-docker.service failed.<br></code></pre></td></tr></table></figure><p>修改 docker 控制组</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>docker/daemon.json <br>&#123;<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: [<span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>从重启服务</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload<br><span class="hljs-params">system</span>ctl restart docker<br><span class="hljs-params">system</span>ctl restart cri-docker<br></code></pre></td></tr></table></figure><p>5  error execution phase preflight: couldn’t validate the identity of the API Server: Get “<a href="https://10.0.0.150:16443/api/v1/namespaces/kube-public/configmaps/cluster-info?timeout=10s&quot;">https://10.0.0.150:16443/api/v1/namespaces/kube-public/configmaps/cluster-info?timeout=10s&quot;</a>: x509: certificate has expired or is not yet valid: current time 2022-07-30T16:12:40+08:00 is before 2022-07-30T13:31:36Z</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yum <span class="hljs-keyword">install </span>ntpdate -y<br>ntpdate time.windows.com<br><span class="hljs-comment"># 强制把系统时间写入CMOS</span><br><span class="hljs-keyword">clock </span>-w<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>集群部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s集群开启firewalld防火墙</title>
    <link href="/2021/08/02/k8s/basic/k8s%E9%9B%86%E7%BE%A4%E5%BC%80%E5%90%AFfirewalld%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <url>/2021/08/02/k8s/basic/k8s%E9%9B%86%E7%BE%A4%E5%BC%80%E5%90%AFfirewalld%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    
    <content type="html"><![CDATA[<h1 id="一、基础设置"><a href="#一、基础设置" class="headerlink" title="一、基础设置"></a>一、基础设置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 关闭selinux</span><br>sed -i <span class="hljs-string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config  <span class="hljs-comment"># 永久</span><br>setenforce 0  <span class="hljs-comment"># 临时</span><br><br><span class="hljs-comment"># 关闭swap</span><br>swapoff -a  <span class="hljs-comment"># 临时</span><br>sed -ri <span class="hljs-string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab    <span class="hljs-comment"># 永久</span><br><br><span class="hljs-comment">#将桥接的IPv4流量传递到iptables的链</span><br><span class="hljs-built_in">cat</span> &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br>sysctl --system  <span class="hljs-comment"># 生效</span><br></code></pre></td></tr></table></figure><h1 id="二、假设k8s部署情况如下："><a href="#二、假设k8s部署情况如下：" class="headerlink" title="二、假设k8s部署情况如下："></a>二、假设k8s部署情况如下：</h1><table><thead><tr><th>主机名</th><th>主机IP</th></tr></thead><tbody><tr><td>k8s-master01</td><td>10.0.0.10</td></tr><tr><td>k8s-node01</td><td>10.0.0.11</td></tr><tr><td>k8s-node02</td><td>10.0.0.21</td></tr><tr><td>k8s-node03</td><td>10.0.0.22</td></tr></tbody></table><h1 id="三、所有机器上执行如下命令："><a href="#三、所有机器上执行如下命令：" class="headerlink" title="三、所有机器上执行如下命令："></a>三、所有机器上执行如下命令：</h1><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 确保开启防火墙服务</span><br>systemctl restart firewalld<br><br><span class="hljs-comment"># 将集群内所有的节点IP配置到防火墙可信区中</span><br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--zone=trusted</span> <span class="hljs-params">--add-source=10</span>.0.0.10<br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--zone=trusted</span> <span class="hljs-params">--add-source=10</span>.0.0.11<br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--zone=trusted</span> <span class="hljs-params">--add-source=10</span>.0.0.21<br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--zone=trusted</span> <span class="hljs-params">--add-source=10</span>.0.0.22<br><br><span class="hljs-comment"># 增加防火墙规则</span><br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--direct</span> <span class="hljs-params">--add-rule</span> ipv4 filter INPUT 1 -j ACCEPT -m comment <span class="hljs-params">--comment</span> <span class="hljs-string">&quot;kube-proxy redirects&quot;</span><br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--direct</span> <span class="hljs-params">--add-rule</span> ipv4 filter FORWARD 1  -j ACCEPT -m comment <span class="hljs-params">--comment</span> <span class="hljs-string">&quot;docker subnet&quot;</span><br><br><span class="hljs-comment"># 设置防火墙伪装ip, 打开NAT，默认是关闭状态</span><br>firewall-cmd <span class="hljs-params">--add-masquerade</span> <span class="hljs-params">--permanent</span><br><br><span class="hljs-comment"># 所有k8s的NodePort端口添加到例外</span><br>firewall-cmd <span class="hljs-params">--permanent</span> <span class="hljs-params">--zone=public</span> <span class="hljs-params">--add-port=30000-32767/tcp</span><br><br><span class="hljs-comment"># 重新加载配置</span><br>firewall-cmd <span class="hljs-params">--reload</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>防火墙</tag>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>firewalld</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes调度器scheduler</title>
    <link href="/2021/08/02/k8s/basic/kubernetes%E8%B0%83%E5%BA%A6%E5%99%A8scheduler/"/>
    <url>/2021/08/02/k8s/basic/kubernetes%E8%B0%83%E5%BA%A6%E5%99%A8scheduler/</url>
    
    <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>Scheduler 是kubernetes 的调度器,主要的任务是把定义的pod分配到集群的节点上。听起来非常简单,但有很多要考虑的问题:</p><ul><li>公平：如何保证每个节点都能被分配资源</li><li>资源高效利用：集群所有资源最大化被使用</li><li>效率：调度的性能要好,能够尽快地对大批量的pod完成调度工作</li><li>灵活：允许用户根据自己的需求控制调度的逻辑</li></ul><p>Sheduler 是作为单独的程序运行的，启动之后会一直坚挺API Server，获取PodSpec.NodeName为空的 pod,对每个pod都会创建一个binding,表明该pod应该放到哪个节点上</p><h1 id="二、调度过程"><a href="#二、调度过程" class="headerlink" title="二、调度过程"></a>二、调度过程</h1><p>调度分为几个部分：首先是过滤掉不满足条件的节点，这个过程称为predicate；然后对通过的节点按照优先级排序,这个是priority;最后从中选择优先级最高的节点。如果中间任何一步骤有错误,就直接返回错误。</p><p>Predicate 有一系列的算法可以使用:</p><p>Predicate 有一系列的算法可以使用:</p><ul><li>PodFitsResources：节点上剩余的资源是否大于 pod请求的资源</li><li>PodFitsHost：如果pod指定了NodeName,检查节点名称是否和NodeName匹配</li><li>PodFitsHostPorts：节点上已经使用的port 是否和 pod申请的port冲突</li><li>PodSelectorMatches：过滤掉和pod指定的label 不匹配的节点</li><li>NoDiskConflict：已经mount 的volume 和 pod指定的volume 不冲突,除非它们都是只读</li></ul><p>如果在predicate过程中没有合适的节点，pod会一直在pending状态，不断重试调度，直到有节点满足条件。<br>经过这个步骤，如果有多个节点满足条件，就继续priorities过程:按照优先级大小对节点排序</p><p>优先级由一系列键值对组成,键是该优先级项的名称,值是它的权重(该项的重要性)。这些优先级选项包括:</p><ul><li>LeastRequestedPriority :通过计算 CPU 和Memory 的使用率来决定权重,使用率越低权重越高。换句话说,这个优先级指标倾向于资源使用比例更低的节点</li><li>BalancedResourceAllocation :节点上CPU 和Memory 使用率越接近,权重越高。这个应该和上面的一起使用,不应该单独使用</li><li>ImageLocalityPriority :倾向于已经有要使用镜像的节点,镜像总大小值越大,权重越高</li></ul><p>通过算法对所有的优先级项目和权重进行计算,得出最终的结果。</p><h1 id="三、自定义调度器"><a href="#三、自定义调度器" class="headerlink" title="三、自定义调度器"></a>三、自定义调度器</h1><p>除了kubernetes 自带的调度器,也可以编写自己的调度器。通过spec:schedulername参数指定调度器的名字,可以为pod选择某个调度器进行调度。比如下面的pod选择my-scheduler进行调度,而不是默认的default-scheduler。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">annotation-second-scheduler</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">multischeduler-example</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">schedulerName:</span> <span class="hljs-string">my-schedulen</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">pod-with-second-annotation-container</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">gcr.io/google_containers/pause:2.0</span><br></code></pre></td></tr></table></figure><h1 id="四、节点亲和性"><a href="#四、节点亲和性" class="headerlink" title="四、节点亲和性"></a>四、节点亲和性</h1><p>pod.spec.nodeAffinity</p><ul><li>preferredDuringSchedulinglgnoredDuringExecution：软策略</li><li>requiredDuringSchedulinglgnoredDuringExecution：硬策略</li></ul><p>requiredDuringSchedulinglgnoredDuringExecution</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">affinity</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">node-affinity-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">with-node-affinity</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br>  <span class="hljs-attr">affinity:</span><br>    <span class="hljs-attr">nodeAffinity:</span><br>      <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>        <span class="hljs-attr">nodeSelectorTerms:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">matchExpressions:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>            <span class="hljs-attr">operator:</span> <span class="hljs-string">NotIn</span><br>            <span class="hljs-attr">values:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">k8s-node02</span><br></code></pre></td></tr></table></figure><p>requiredDuringSchedulinglgnoredDuringExecution</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">affinity</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">node-affinity-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">with-node-affinity</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br>  <span class="hljs-attr">affinity:</span><br>    <span class="hljs-attr">nodeAffinity:</span><br>      <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">weight:</span> <span class="hljs-number">1</span><br>        <span class="hljs-attr">preference:</span><br>          <span class="hljs-attr">matchExpressions:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>            <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>            <span class="hljs-attr">values:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">k8s-node02222</span><br></code></pre></td></tr></table></figure><p>综合</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">affinity</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">node-affinity-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">with-node-affinity</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br>  <span class="hljs-attr">affinity:</span><br>    <span class="hljs-attr">nodeAffinity:</span><br>      <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>        <span class="hljs-attr">nodeSelectorTerms:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">matchExpressions:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>            <span class="hljs-attr">operator:</span> <span class="hljs-string">NotIn</span><br>            <span class="hljs-attr">values:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">k8s-node02</span><br>      <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">weight:</span> <span class="hljs-number">1</span><br>        <span class="hljs-attr">preference:</span><br>          <span class="hljs-attr">matchExpressions:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">source</span><br>            <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>            <span class="hljs-attr">values:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">qikqiak</span><br></code></pre></td></tr></table></figure><h2 id="4-1-键值运算关系"><a href="#4-1-键值运算关系" class="headerlink" title="4.1 键值运算关系"></a>4.1 键值运算关系</h2><ul><li>In: label的值在某个列表中</li><li>Notln: label的值不在某个列表中</li><li>Gt: label的值大于某个值</li><li>Lt: label的值小于某个值</li><li>Exists:某个label 存在</li><li>DoesNotExist:某 label 不存在</li></ul><h1 id="五、Pod亲和性"><a href="#五、Pod亲和性" class="headerlink" title="五、Pod亲和性"></a>五、Pod亲和性</h1><p>pod.spec.affinity.podAffinity/podAntiAffinity</p><ul><li>preferredDuringSchedulinglgnoredDuringExecution: 软策略</li><li>requiredDuringSchedulinglgnoredDuringExecution:硬策略</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-pod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">affinity:</span><br>    <span class="hljs-attr">podAffinity:</span> <span class="hljs-comment">#亲和力</span><br>      <span class="hljs-attr">requiredDuringSchedulingIgnoredDuringExecution:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">labelSelector:</span><br>          <span class="hljs-attr">matchLabels:</span><br>            <span class="hljs-attr">service.cpaas.io/name:</span> <span class="hljs-string">deployment-nginx</span><br>        <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">kubernetes.io/hostname</span> <span class="hljs-comment"># pod同node</span><br>    <span class="hljs-attr">podAntiAffinity:</span> <span class="hljs-comment">#反亲和力</span><br>      <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">weight:</span> <span class="hljs-number">100</span><br>        <span class="hljs-attr">podAffinityTerm:</span><br>          <span class="hljs-attr">labelSelector:</span><br>            <span class="hljs-attr">matchExpressions:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">a</span><br>              <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>              <span class="hljs-attr">values:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">b</span><br>          <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>  <span class="hljs-attr">containers:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-pod</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.18</span><br></code></pre></td></tr></table></figure><h1 id="六、亲和性-反亲和性调度策略比较如下"><a href="#六、亲和性-反亲和性调度策略比较如下" class="headerlink" title="六、亲和性/反亲和性调度策略比较如下:"></a>六、亲和性/反亲和性调度策略比较如下:</h1><table><thead><tr><th>调度策略</th><th>匹配标签</th><th>操作符</th><th>拓扑域支持</th><th>调度目标</th></tr></thead><tbody><tr><td>nodeAffinity</td><td>主机</td><td>In, Notln, Exists,DoesNotExist, Gt, Lt <br /></td><td>否</td><td>指定主机</td></tr><tr><td>podAffinity</td><td>POD</td><td>In, Notln, Exists,DoesNotExist</td><td>是</td><td>POD与指定POD同一拓扑域 （同一个node上）</td></tr><tr><td>podAnitAffinity</td><td>POD</td><td>In, Notln, Exists,DoesNotExist</td><td>是</td><td>POD与指定POD不在同一拓扑域</td></tr></tbody></table><h1 id="七、污点-Taint-和容忍-Toleration"><a href="#七、污点-Taint-和容忍-Toleration" class="headerlink" title="七、污点(Taint) 和容忍(Toleration)"></a>七、污点(Taint) 和容忍(Toleration)</h1><p>节点亲和性，是pod的一种属性(偏好或硬性要求),它使pod被吸引到一类特定的节点。Taint则相反,它使节点能够排斥一类特定的pod。Taint 和toleration 相互配合,可以用来避免 pod 被分配到不合适的节点上。每个节点上都可以应用一个或多个taint,这表示对于那些不能容忍这些taint的pod,是不会被该节点接受的。如果将toleration应用于pod上,则表示这些pod可以(但不要求)被调度到具有匹配taint的节点上</p><h2 id="7-1-污点-Taint"><a href="#7-1-污点-Taint" class="headerlink" title="7.1 污点(Taint)"></a>7.1 污点(Taint)</h2><p>1、污点(Taint)的组成<br>使用kubectl taint命令可以给某个Node节点设置污点, Node被设置上污点之后就和Pod之间存在了一种相斥的关系,可以让Node拒绝Pod的调度执行,甚至将Node已经存在的Pod驱逐出去。</p><p>每个污点的组成如下:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">key</span>=value:effect<br></code></pre></td></tr></table></figure><p>每个污点有一个key和value作为污点的标签,其中value 可以为空, effect描述污点的作用。</p><p>当前taint effect 支持如下三个选项:</p><ul><li>NoSchedule ：表示k8s将不会将Pod调度到具有该污点的Node上</li><li>PreferNoSchedule：表示k8s将尽量避免将Pod调度到具有该污点的Node上</li><li>NoExecute ：表示k8s将不会将Pod调度到具有该污点的Node上,同时会将Node 上已经存在的Pod驱逐出去</li></ul><p>1、污点的设置、查看和去除</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#设置污点</span><br>kubectl taint nodes node1 <span class="hljs-attr">key1=</span>value1: NoSchedule<br><span class="hljs-comment">#节点说明中,查找Taints字段</span><br>kubectl describe pod pod - name<br><span class="hljs-comment">#去除污点</span><br>kubectl taint nodes node1 key1: NoSchedule-<br><span class="hljs-comment"># master 节点的添加Taint</span><br>kubectl taint nodes k8s-master01 <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span>:NoSchedule<br><span class="hljs-comment"># master去除污点</span><br>kubectl taint nodes k8s-master01 <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span>:NoSchedule-<br></code></pre></td></tr></table></figure><p>2 例如：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@k8s-master01 scheduler]<span class="hljs-comment"># kubectl get pod -o wide</span><br>NAME    READY   STATUS    RESTARTS   AGE     IP             <span class="hljs-keyword">NODE</span>         <span class="hljs-title">NOMINATED</span> <span class="hljs-keyword">NODE</span>   <span class="hljs-title">READINESS</span> GATES<br>pod-<span class="hljs-number">1</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">8m</span>28s   <span class="hljs-number">10.244</span>.<span class="hljs-number">2.205</span>   k8s-node02   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>pod-<span class="hljs-number">3</span>   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">7m</span>27s   <span class="hljs-number">10.244</span>.<span class="hljs-number">2.207</span>   k8s-node02   <span class="hljs-tag">&lt;none&gt;</span>           <span class="hljs-tag">&lt;none&gt;</span><br>[root@k8s-master01 scheduler]<span class="hljs-comment"># kubectl taint node  k8s-node02 checkstatus=k8s:NoExecute</span><br><span class="hljs-keyword">node</span><span class="hljs-title">/k8s-node02</span> tainted<br>[root@k8s-master01 scheduler]<span class="hljs-comment"># kubectl get pod -o wide</span><br>No resources found <span class="hljs-keyword">in</span> default namespace.<br></code></pre></td></tr></table></figure><p>将k8s-node02设置污点NoExecute ，pod将从k8s-node02移除。</p><h2 id="7-2-容忍-Tolerations"><a href="#7-2-容忍-Tolerations" class="headerlink" title="7.2 容忍(Tolerations)"></a>7.2 容忍(Tolerations)</h2><p>设置了污点的Node将根据taint 的 effect: NoSchedule, PreferNoSchedule, NoExecute 和Pod 之间产生互斥的关系, Pod将在一定程度上不会被调度到Node上。但我们可以在Pod上设置容忍(Toleration),意思是设置了容忍的Pod将可以容忍污点的存在,可以被调度到存在污点的Node上。</p><p>pod.spec.tolerations</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tolerations:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;key1&quot;</span><br>  <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Equal&quot;</span><br>  <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;value1&quot;</span><br>  <span class="hljs-attr">effect:</span> <span class="hljs-string">&quot;NoExecute&quot;</span><br>  <span class="hljs-attr">tolerationSeconds:</span> <span class="hljs-number">3600</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;key1&quot;</span><br>  <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Equal&quot;</span><br>  <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;value1&quot;</span><br>  <span class="hljs-attr">effect:</span> <span class="hljs-string">&quot;NoExecute&quot;</span><br>  <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;key2&quot;</span><br>  <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br>  <span class="hljs-attr">effect:</span> <span class="hljs-string">&quot;NoSchedule&quot;</span><br></code></pre></td></tr></table></figure><p>完整yaml：</p><p>将在60s过后才会被node移除pod</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pod-1</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">pod-1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">with-node-affinity</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br>  <span class="hljs-attr">tolerations:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;checkstatus&quot;</span><br>    <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Equal&quot;</span><br>    <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;k8s&quot;</span><br>    <span class="hljs-attr">effect:</span> <span class="hljs-string">&quot;NoExecute&quot;</span><br>    <span class="hljs-attr">tolerationSeconds:</span> <span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><p>其中key, vaule, effect 要与Node上设置的taint保持一致<br>operator 的值为Exists 将会忽略value值<br>tolerationSeconds 用于描述当Pod需要被驱逐时可以在Pod上继续保留运行的时间.。</p><p>1 当不指定key值时,表示容忍所有的污点key</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tolerations:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br></code></pre></td></tr></table></figure><p>2 当不指定effect值时,表示容忍所有的污点作用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tolerations:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;key&quot;</span><br>  <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br></code></pre></td></tr></table></figure><p>3 有多个Master存在时,防止资源浪费,可以如下设置</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">kubectl taint nodes <span class="hljs-keyword">Node</span><span class="hljs-title">-Name</span> <span class="hljs-keyword">node</span><span class="hljs-title">-role</span>.kubernetes.io/<span class="hljs-attr">master=</span>:PreferNoSchedule<br></code></pre></td></tr></table></figure><h1 id="八、指定调度节点"><a href="#八、指定调度节点" class="headerlink" title="八、指定调度节点"></a>八、指定调度节点</h1><p>1 Pod.spec.nodeName 将 Pod 直接调度到指定的Node 节点上,会跳过Scheduler的调度策略,该匹配规则是强制匹配</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/vlbeta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">7</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">myweb</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">nodeName:</span> <span class="hljs-string">k8s-node01</span> <span class="hljs-comment">#将pod调度到k8s-node01</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">hub.atguigu.com/library/myapp:v1</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>2 Pod.spec.nodeSelector:通过 kubernetes 的label-selector 机制选择节点,由调度器调度策略匹配label,而后调度Pod到目标节点,该匹配规则属于强制约束</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/vlbeta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">template:</span><br>  <span class="hljs-attr">metadata:</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">myweb</span><br>  <span class="hljs-attr">spec:</span><br>    <span class="hljs-attr">nodeSelector:</span> <span class="hljs-comment"># 未来Kubernetes会将nodeSelector废除</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">backEndNode1</span> <span class="hljs-comment">#自定义节点调度器</span><br>    <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myweb</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">harbor/tomcat:8.5-jre8</span><br>      <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes 入门学习 dashboard</title>
    <link href="/2021/08/02/k8s/%E9%9B%86%E7%BE%A4/k8s%20dashboard/"/>
    <url>/2021/08/02/k8s/%E9%9B%86%E7%BE%A4/k8s%20dashboard/</url>
    
    <content type="html"><![CDATA[<h1 id="1-dashboard安装"><a href="#1-dashboard安装" class="headerlink" title="1 dashboard安装"></a>1 dashboard安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">namespace/kubernetes-dashboard created  # 命名空间kubernetes-dashboard<br>serviceaccount/kubernetes-dashboard created # 服务账号kubernetes-dashboard<br>service/kubernetes-dashboard created # 服务kubernetes-dashboard<br>secret/kubernetes-dashboard-certs created #  secret创建<br>secret/kubernetes-dashboard-csrf created<br>secret/kubernetes-dashboard-key-holder created <br>configmap/kubernetes-dashboard-settings created # 配置<br>role.rbac.authorization.k8s.io/kubernetes-dashboard created # 角色和角色绑定<br>clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard configured<br>rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created<br>clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard unchanged<br>deployment.apps/kubernetes-dashboard created<br>service/dashboard-metrics-scraper created<br>deployment.apps/dashboard-metrics-scraper created<br></code></pre></td></tr></table></figure><p>查看校验资源的安装情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get deployments -n kubernetes-dashboard</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get services -n kubernetes-dashboard</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get pods -n kubernetes-dashboard</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get secrets -n kubernetes-dashboard</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl get configMap -n kubernetes-dashboard</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl  get services -n kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><h1 id="2-开放外部访问端口"><a href="#2-开放外部访问端口" class="headerlink" title="2 开放外部访问端口"></a>2 开放外部访问端口</h1><p>kubernetes-dashbaord安装完毕后，kubernetes-dashboard默认service的类型为ClusterIP，为了从外部访问控制面板，开放为NodePort类型</p><p>过程：编辑之前——编辑——编辑之后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8smaster influxdb]# kubectl get svc -n kubernetes-dashboard<br>NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE<br>dashboard-metrics-scraper   ClusterIP   10.104.64.108   &lt;none&gt;        8000/TCP   2m33s<br>kubernetes-dashboard        ClusterIP   10.102.42.206   &lt;none&gt;        443/TCP    2m33s<br>[root@k8smaster influxdb]# kubectl edit svc/kubernetes-dashboard -n kubernetes-dashboard<br>service/kubernetes-dashboard edited<br>[root@k8smaster influxdb]# kubectl get svc -n kubernetes-dashboard<br>NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE<br>dashboard-metrics-scraper   ClusterIP   10.104.64.108   &lt;none&gt;        8000/TCP        10m<br>kubernetes-dashboard        NodePort    10.102.42.206   &lt;none&gt;        443:30367/TCP   10m<br></code></pre></td></tr></table></figure><h1 id="3-授权用户访问集群"><a href="#3-授权用户访问集群" class="headerlink" title="3 授权用户访问集群"></a>3 授权用户访问集群</h1><p>dashboard-rbac.yaml定义</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">happycloudlab</span> <br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">happycloudlab</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">happycloudlab</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><p>操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8smaster influxdb]# vi dashboard-rbac.yaml<br>[root@k8smaster influxdb]# kubectl create -f dashboard-rbac.yaml <br>serviceaccount/happycloudlab created<br>clusterrolebinding.rbac.authorization.k8s.io/happycloudlab created<br></code></pre></td></tr></table></figure><h1 id="4-获取token"><a href="#4-获取token" class="headerlink" title="4 获取token"></a>4 获取token</h1><p>通过token字段来登陆，token通过base64加密,这里的happycloudlab-token-*须通过命令查看，具体是哪一个。</p><h2 id="4-1-获取具体secret并且提取yaml信息"><a href="#4-1-获取具体secret并且提取yaml信息" class="headerlink" title="4.1 获取具体secret并且提取yaml信息"></a>4.1 获取具体secret并且提取yaml信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8smaster influxdb]# kubectl get secret -n kubernetes-dashboard<br>NAME                               TYPE                                  DATA   AGE<br>default-token-vzxqv                kubernetes.io/service-account-token   3      14m<br>happycloudlab-token-5dxhd          kubernetes.io/service-account-token   3      44s<br>kubernetes-dashboard-certs         Opaque                                0      14m<br>kubernetes-dashboard-csrf          Opaque                                1      14m<br>kubernetes-dashboard-key-holder    Opaque                                2      14m<br>kubernetes-dashboard-token-fqtcx   kubernetes.io/service-account-token   3      14m<br>[root@k8smaster influxdb]# kubectl get secrets -n kubernetes-dashboard happycloudlab-token-5dxhd -o yaml<br></code></pre></td></tr></table></figure><p>![1630834989795](.\k8s dashboard\1630834989795.png)</p><h2 id="4-2-通过echo获取base64编码token"><a href="#4-2-通过echo获取base64编码token" class="headerlink" title="4.2 通过echo获取base64编码token"></a>4.2 通过echo获取base64编码token</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@k8smaster influxdb]# echo &#x27;ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklrWmtSVE5UYVhOT2RrUlFWRU5vV2xOeE5FSkJjMGQxTURkM2JETkJOa2Q2TFZaNVdWbzFhV3hOV0ZFaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUpyZFdKbGNtNWxkR1Z6TFdSaGMyaGliMkZ5WkNJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZqY21WMExtNWhiV1VpT2lKb1lYQndlV05zYjNWa2JHRmlMWFJ2YTJWdUxUVmtlR2hrSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXpaWEoyYVdObExXRmpZMjkxYm5RdWJtRnRaU0k2SW1oaGNIQjVZMnh2ZFdSc1lXSWlMQ0pyZFdKbGNtNWxkR1Z6TG1sdkwzTmxjblpwWTJWaFkyTnZkVzUwTDNObGNuWnBZMlV0WVdOamIzVnVkQzUxYVdRaU9pSm1NemM1TkdOak5TMHhNMk5pTFRRMVpEQXRPRFJpWWkxaU5UVmtNRFF3TkdVMU9Ea2lMQ0p6ZFdJaU9pSnplWE4wWlcwNmMyVnlkbWxqWldGalkyOTFiblE2YTNWaVpYSnVaWFJsY3kxa1lYTm9ZbTloY21RNmFHRndjSGxqYkc5MVpHeGhZaUo5LkpBZVFBRS1CT1RGZDhXOGp3cEFpa0lTQlF4N2N6bmhySmZneDFxLXA5OTRLSUI5aXRfeFZ3bUlEaEI4bVlZQTJQLXRBNWp4d2d6NDZHamdSZTlfc1dYdFRrTHYwT3dpYmtNeDU3Q0RFVzkxV09CNzkyeTZiOWNWX1BhV3hPVkRyZFFvSVo3S3A0OVFITFNkN1lhREl1eE15UDlzX3pQaTI3dmc0YUZwLUFLS1ZWV0NqcDFvaURFM213Y3FJd2xha3JySW5ZUmg0THNKTFc5TTBVc3BCRklZUFhGNEh5QWxvX2NGX29qNVlHMUFJWUJGTGtlQUZyaEYwalFzQmhseHVYVVRubC01TmN2WjlDRXJJbGJ4VEpfMWtLcVc2UjBwOXFsZ1dpZzFPamhFNzg4NWs0dnVzeDM5S004d2U1ZHBJbjV6WDdIMzBFSjgwOGRpOGVyTFFQUQ==&#x27; | base64 -d<br></code></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">eyJhbGciOiJSUzI1NiIsImtpZCI6IkZkRTNTaXNOdkRQVENoWlNxNEJBc0d1MDd3bDNBNkd6LVZ5WVo1aWxNWFEifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJoYXBweWNsb3VkbGFiLXRva2VuLTVkeGhkIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImhhcHB5Y2xvdWRsYWIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJmMzc5NGNjNS0xM2NiLTQ1ZDAtODRiYi1iNTVkMDQwNGU1ODkiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6aGFwcHljbG91ZGxhYiJ9.JAeQAE-BOTFd8W8jwpAikISBQx7cznhrJfgx1q-p994KIB9it_xVwmIDhB8mYYA2P-tA5jxwgz46GjgRe9_sWXtTkLv0OwibkMx57CDEW91WOB792y6b9cV_PaWxOVDrdQoIZ7Kp49QHLSd7YaDIuxMyP9s_zPi27vg4aFp-AKKVVWCjp1oiDE3mwcqIwlakrrInYRh4LsJLW9M0UspBFIYPXF4HyAlo_cF_oj5YG1AIYBFLkeAFrhF0jQsBhlxuXUTnl-5NcvZ9CErIlbxTJ_1kKqW6R0p9qlgWig1OjhE7885k4vusx39KM8we5dpIn5zX7H30EJ808di8erLQPQ<br></code></pre></td></tr></table></figure><h1 id="5-登录dashboard"><a href="#5-登录dashboard" class="headerlink" title="5 登录dashboard"></a>5 登录dashboard</h1><p>获取外网访问端口</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@k8smaster influxdb]# kubectl <span class="hljs-keyword">get</span> svc -n kubernetes-dashboard<br><span class="hljs-type">NAME</span>                        <span class="hljs-keyword">TYPE</span>        <span class="hljs-keyword">CLUSTER</span>-IP      <span class="hljs-keyword">EXTERNAL</span>-IP   PORT(S)         AGE<br>dashboard-metrics-scraper   ClusterIP   <span class="hljs-number">10.104</span><span class="hljs-number">.64</span><span class="hljs-number">.108</span>   &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">8000</span>/TCP        <span class="hljs-number">10</span>m<br>kubernetes-dashboard        NodePort    <span class="hljs-number">10.102</span><span class="hljs-number">.42</span><span class="hljs-number">.206</span>   &lt;<span class="hljs-keyword">none</span>&gt;        <span class="hljs-number">443</span>:<span class="hljs-number">30367</span>/TCP   <span class="hljs-number">10</span>m<br></code></pre></td></tr></table></figure><p>填写token并登录</p><p>![1630835361904](.\k8s dashboard\1630835361904.png)</p><p><img src=".%5C1630835709026.png" alt="1630835709026"></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>dashboard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s常用控制器及特点</title>
    <link href="/2021/08/01/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/k8s%E5%B8%B8%E7%94%A8%E6%8E%A7%E5%88%B6%E5%99%A8%E5%8F%8A%E7%89%B9%E7%82%B9/"/>
    <url>/2021/08/01/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/k8s%E5%B8%B8%E7%94%A8%E6%8E%A7%E5%88%B6%E5%99%A8%E5%8F%8A%E7%89%B9%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是控制器"><a href="#什么是控制器" class="headerlink" title="什么是控制器"></a>什么是控制器</h1><p>Kubernetes 中内建了很多controller (控制器),这些相当于一个状态机,用来控制Pod的具体状态和行为</p><h1 id="控制器类型"><a href="#控制器类型" class="headerlink" title="控制器类型"></a>控制器类型</h1><ul><li>ReplicationController 和 ReplicaSet</li><li>Deployment</li><li>DaemonSet</li><li>StateFulSet</li><li>Job/CronJob</li><li>Horizontal Pod Autoscaling</li></ul><h2 id="ReplicationController-和-ReplicaSet"><a href="#ReplicationController-和-ReplicaSet" class="headerlink" title="ReplicationController 和 ReplicaSet"></a>ReplicationController 和 ReplicaSet</h2><p>ReplicationController (RC)用来确保容器应用的副本数始终保持在用户定义的副本数,即如果有容器异常退出,会自动创建新的Pod来替代;而如果异常多出来的容器也会自动回收;</p><p>在新版本的Kubernetes 中建议使用ReplicaSet 来取代ReplicationController. ReplicaSet 跟ReplicationController 没有本质的不同,只是名字不一样,并且ReplicaSet支持集合式的selector;</p><p>虽然ReplicaSet 可以独立使用，但一般还是建议使用Deployment来自动管理ReplicaSet ，这样就无需担心跟其他机制的不兼容问题(比如ReplicaSet不支持rolling-update，但Deployment 支持)</p><h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><p>Deployment为Pod和ReplicaSet提供了一个声明式定义(declarative)方法,用来替代以前的ReplicationController来方便的管理应用。</p><p>Deployment 是Kubenetes v1.2 引入的新概念，引入的目的是为了更好的解决Pod 的编排问题，Deployment 内部使用了Replica Set 来实现。</p><p>典型的应用场景包括;</p><ul><li>定义Deployment 来创建Pod和ReplicaSet</li><li>滚动升级和回滚应用</li><li>扩容和缩容</li><li>暂停和继续Deployment</li></ul><h2 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h2><p>DaemonSet确保全部(或者一些) Node上运行一个Pod的副本。当有Node加入集群时,也会为他们新增一个Pod.当有Node从集群移除时,这些Pod也会被回收。删除DaemonSet将会删除它创建的所有Pod</p><p>使用DaemonSet的一些典型用法:</p><ul><li>运行集群存储daemon,例如在每个Node上运行 glusterd,ceph</li><li>在每个Node上运行日志收集daemon,例如fluentd, logstash</li><li>在每个Node上运行监控daemon,例如Prometheus Node Exporter, collectd, Datadog 代理、New Relic 代理,或 Ganglia gmond</li></ul><h2 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h2><p>Job负责批处理任务,即仅执行一次的任务,它保证批处理任务的一个或多个Pod成功结束</p><h2 id="CronJob"><a href="#CronJob" class="headerlink" title="CronJob"></a>CronJob</h2><p>CronJob管理基于时间的Job,即:</p><ul><li>在给定时间点只运行一次</li><li>周期性地在给定时间点运行</li></ul><p>使用前提条件:林当前使用的Kubernetes集群,版本&gt;=1.8 (对Cronjob).对于先前版本的集群,版本&lt;1.8,启动API Server时,通过传递选项-runtime-config=batch/v2alphal=true可以开启batch/v2alpha API**</p><p>典型的用法如下所示:</p><ul><li>在给定的时间点调度Job运行</li><li>创建周期性运行的Job,例如:数据库备份、发送邮件</li></ul><h2 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h2><p>StatefulSet 作为Controller 为Pod提供唯一的标识。它可以保证部署和scale的顺序。</p><p>StatefulSet是为了解决有状态服务的问题(对应Deployments和ReplicaSets是为无状态服务而设计),其应用场景包括:</p><ul><li>稳定的持久化存储,即Pod重新调度后还是能访问到相同的持久化数据,基于PVC来实现</li><li>稳定的网络标志,即Pod重新调度后其PodName和HostName不变,基于Headless Service (即没有Cluster IP的Service)来实现</li><li>有序部署,有序扩展,即Pod是有顺序的,在部署或者扩展的时候要依据定义的顺序依次依次进行(即从0到N-1, 在下一个Pod运行之前所有之前的Pod必须都是Running和Ready状态),基于init containers来实现</li><li>有序收缩,有序删除(即从N-1到0)</li></ul><h2 id="Horizontal-Pod-Autoscaling"><a href="#Horizontal-Pod-Autoscaling" class="headerlink" title="Horizontal Pod Autoscaling"></a>Horizontal Pod Autoscaling</h2><p>应用的资源使用率通常都有高峰和低谷的时候,如何削峰填谷,提高集群的整体资源利用率,让service中的Pod个数自动调整呢?这就有赖于Horizontal Pod Autoscaling了,顾名思义,使Pod水平自动缩放.</p><p>Horizontal Pod Autoscaling 仅适用于Deployment和ReplicaSet ,在V1版本中仅支持根据Pod的CPU利用率扩所容,在vlalpha版本中,支持根据内存和用户自定义的metric扩缩容。</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>控制器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s网络通讯方式</title>
    <link href="/2021/07/30/k8s/basic/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/"/>
    <url>/2021/07/30/k8s/basic/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="k8s组网要求"><a href="#k8s组网要求" class="headerlink" title="k8s组网要求"></a><strong>k8s组网要求</strong></h1><ul><li>所有的Pods之间可以在不使用NAT网络地址转换的情况下相互通信。</li><li>所有的Nodes之间可以在不使用NAT网络地址转换的情况下相互通信。</li><li>每个Pod自己看到的自己的ip和其他Pod看到的一致。即所有Pod对象都处于同一平面网络中，而且可以使用Pod自身的地址直接通信。</li></ul><h1 id="k8s网络模型设计基础原则"><a href="#k8s网络模型设计基础原则" class="headerlink" title="k8s网络模型设计基础原则"></a><strong>k8s网络模型设计基础原则</strong></h1><ul><li>每个Pod都拥有一个独立的IP地址，假定所有 Pod 都在一个可以直接连通的、扁平的网络空间中 。</li><li>不管Pod是否运行在同一个 Node中，都要求它们可以直接通过对方的 IP 进行访问。</li><li>用户不需要额外考虑如何建立 Pod 之间的连接，也不需要考虑将容器端口映射到主机端口等问题。</li></ul><p>k8s使用的网络插件必须能为Pod提供满足以上要求的网络，它需要为每个Pod配置至少一个特定的地址，即Pod IP。Pod IP地址实际存在于某个网卡（可以是虚拟设备）上，而service的地址却是一个虚拟IP地址，没有任何网络接口配置此地址，它由kube-proxy借助iptables规则或者IPVS规则重新定向到本地端口，在将其调度至后端Pod对象。Service的IP地址是集群提供服务的接口，也称为ClusterIP。</p><p>Pod网络及其IP由k8s的网络插件负责配置和管理，具体使用的网络地址可在管理配置网络插件时指定，如10.244.0.0/16网络。而Cluster网络和IP则是由k8s集群负责管理和配置，如10.96.0.0/12网络。</p><h1 id="k8s集群网络"><a href="#k8s集群网络" class="headerlink" title="k8s集群网络"></a>k8s集群网络</h1><ul><li>主机之间通信(如master和node)，不归k8s管，管理员自行构建。</li><li>pod资源对象之间通信，是一个虚拟网络。用于为各Pod对象设定IP地址等网络参数，其地址配置于Pod中容器的网络接口上，Pod网络需要借助k8s插件或者CNI插件实现，该插件可独立不属于k8s集群，亦可托管于k8s之上，他需要在构建k8s集群时由管理员定义，而后创建Pod对象时由其自动完成网络参数的动态配置。</li><li>Service资源的对象的网络，也是一个虚拟网络，用于k8s集群之中的Service配置IP地址，但此地址并不配置于任何主机或容器的网络接口之上，而是通过Node之上的kube-proxy配置为iptables或ipvs规则，从而将发往此地址的所有流量调度至其后端的各个Pod对象之上。Service网络在k8s集群创建时予以指定，而各Service的地址则在用户创建Service时予以动态配置。</li></ul><img src="/2021/07/30/k8s/basic/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/image-4.png" class="" title="img">k8s网络环境<p><strong>容器和容器之间的网络</strong></p><ul><li>在k8s中每个Pod中管理着一组Docker容器，这些Docker容器共享同一个网络命名空间。</li><li>Pod中的每个Docker容器拥有与Pod相同的IP和port地址空间，并且由于他们在同一个网络命名空间，他们之间可以通过localhost相互访问。</li></ul><p>container模式指定新创建的Docker容器和已经存在的一个容器共享一个网络命名空间，而不是和宿主机共享。新创建的Docker容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等</p><p>每个Pod容器有有一个pause容器其有独立的网络命名空间，在Pod内启动Docker容器时候使用 –net=container就可以让当前Docker容器加入到Pod容器拥有的网络命名空间（pause容器），同一个Pod内的多个docker容器相互通信机制。</p><img src="/2021/07/30/k8s/basic/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/image-5.png" class="" title="img"><p><strong>Pod与Pod之间的网络</strong></p><img src="/2021/07/30/k8s/basic/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/image-6.png" class="" title="img">pod和pod通信<ul><li>k8s中，每个Pod拥有一个ip地址，不同的Pod之间可以直接使用ip通讯</li><li>在同一个Node上，从Pod的视角看，它存在于自己的网络命名空间中，并且需要与该Node上的其他网络命名空间上的Pod进行通信。</li></ul><p>原理：</p><p>使用linux虚拟以太网设备或者说是由两个虚拟接口组成的veth对使不同的网络命名空间链接起来，这些虚拟接口分布在多个网络命名空间上（这里是指多个Pod上）</p><p>为了让多个Pod的网络命名空间链接起来，可以让veth对的一端链接到root网络命名空间（宿主机的），另一端链接到Pod的网络命名空间。这里需要用到一个Linux以太网桥，它是一个虚拟的二层网络设备，目的就是把多个以太网段连接起来，它维护一个转发表，通过查看每个设备mac地址决定转发，还是丢弃数据。</p><p>同一台node节点上pod1和pod2通信：</p><p>pod1通过自身eth0网卡发送数据，eth0连接着veth0，网桥把veth0和veth1组成了一个以太网，然后数据到达veth0之后，网桥通过转发表，发送给veth1，veth1直接把数据传给pod2的eth0。</p><p>每对Veth就像一根接插电缆，连接两侧并允许流量在它们之间流动；这种veth对可以推广到同一个Node上任意多的Pod上，如上图这里展示使用veth对链接每个Pod到虚拟机的root网络命名空间。不同node节点上pod和pod通信：<strong>CIDR</strong>CIDR（无类域间路由选择）它消除了传统的A类、B类和C类地址以及划分子网的概念，因而可以更加有效地分配IPv4的地址空间。它可以将好几个IP网络结合在一起，使用一种无类别的域际路由选择算法，使它们合并成一条路由从而较少路由表中的路由条目减轻Internet路由器的负担。k8s集群中，每个node节点都会被分配一个CIDR块，（把网络前缀都相同的连续地址组成的地址组称为CIDR地址块）用来给node上的pod分配IP地址，另外还需要把pod的ip和所在nodeip进行关联.比如node1上pod1和node2上的pod4进行通信首先pod1上网卡eth0将数据发送给已经管理到root命名空间的veth0上，被虚拟网桥收到，查看自己转发表之后，并没有pod4的mac地址。就会把包转发到默认路由，（root命名空间的eth0上，也就是已经到了node节点的网卡上）通过eth0，发送到网络中。寻址转发后包来到了node2，首先被root命名空间的eth0设备接受，查看目标地址是发往pod4的，交给虚拟网桥路由到veth1，最终传给pod4的eth0上。</p><img src="/2021/07/30/k8s/basic/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/1411165-20210604153215333-1022736403-990x1024.png" class="" title="img">不同node节点上<p>pod和pod通信<strong>pod与service之间的网络</strong>pod的ip地址是不持久的，当集群中pod的规模缩减或者pod故障或者node故障重启后，新的pod的ip就可能与之前的不一样的。所以k8s中衍生出来Service来解决这个问题。Service管理了多个Pods，每个Service有一个虚拟的ip,要访问service管理的Pod上的服务只需要访问你这个虚拟ip就可以了，这个虚拟ip是固定的，当service下的pod规模改变、故障重启、node重启时候，对使用service的用户来说是无感知的，因为他们使用的service的ip没有变。当数据包到达Service虚拟ip后，数据包会被通过k8s给该servcie自动创建的负载均衡器路由到背后的pod容器。在k8s里，iptables规则是由kube-proxy配置，kube-proxy监视APIserver的更改，因为集群中所有service（iptables）更改都会发送到APIServer上，所以每台kubelet-proxy监视APIServer，当对service或pod虚拟IP进行修改时，kube-proxy就会在本地更新，以便正确发送给后端pod.<img src="/2021/07/30/k8s/basic/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/1411165-20210604153302687-2143265992.png" class="" title="img"></p><p>数据包从pod1的eth0离开，通过veth0传给网桥cbr0，网桥找不到service的ip对应的mac，交给了默认路由，到达了root命名空间的eth0root命名空间的eth0接受数据包之前会经过iptables进行过滤，iptables接受数据包后使用kube-proxy在node上配置的规则响应service，然后数据包的目的ip重写为service后端指定的pod的ip了。service到pod包的流转：收到包的pod会回应数据包到源pod，源ip是发送方ip，目标IP是接收方，数据包进行回复时经过iptables，iptables使用内核机制conntrack记住它之前做的选择，又将数据包源ip重新为service的ip，目标ip不变，然后原路返回至pod1的eth0<strong>Internet与service之间的网络</strong>node到internet包的流转</p><img src="/2021/07/30/k8s/basic/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/1411165-20210604153732180-730315756.png" class="" title="img"><p>数据包源自pod1网络命名空间，通过veth对连接到root网络命名空间，紧接着，转发表里没有IP对应的mac，会发送到默认路由，到达root网络命名空间的eth0那么在到达root网络明明空间之前，iptables会修改数据包，现在数据包源ip是pod1的，继续传输会被Internet网关拒绝掉，因为网关NAT仅转发node的ip，解决方案：使iptables执行源NAT更改数据包源ip，让数据包看起来是来自于node而不是podiptables修改完源ip之后，数据包离开node，根据转发规则发给Internet网关，Internet网关执行另一个NAT，内网ip转为公网ip，在Internet上传输。数据包回应时，也是按照：Internet网关需要将公网IP转换为私有ip，到达目标node节点，再通过iptables修改目标ip并且最终传送到pod的eth0虚拟网桥。Internet到k8s的流量：让Internet流量进入k8s集群，这特定于配置的网络，可以在网络堆栈的不同层来实现：（1） NodePort（2）Service LoadBalancer（3）Ingress控制器。<strong>Flannel</strong>Flannel是CoreOS团队针对Kubernetes设计的一个网络规划服务,简单来说,它的功能是让集群中的不同节点主机创建的Docker容器都具有全集群唯一的虚拟IP地址。而且它还能在这些IP地址之间建立一个覆盖网络(Overlay Network),通过这个覆盖网络,将数据包原封不动地传递到目标容器内</p><img src="/2021/07/30/k8s/basic/k8s%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/image-2.png" class="" title="img">ETCD 之Flannel提供说明:<p>存储管理Flannel可分配的IP地址段资源 监控ETCD中每个Pod的实际地址,并在内存中建立维护Pod节点路由表同一个Pod内部通讯:同一个Pod共享同一个网络命名空间,共享同一个Linux协议栈 <strong>Pod1至Pod2</strong>Pod1与Pod2不在同一台主机,Pod的地址是与docker0在同一个网段的,但docker0网段与宿主机网卡是两个完全不同的IP网段，并且不同Node之间的通信只能通过宿主机的物理网卡进行。将Pod的IP和所在Node的IP关联起来,通过这个关联让Pod可以互相访问Pod1与Pod2在同一台机器,由Docker0网桥直接转发请求至Pod2,不需要经过Flannel<strong>Pod至Service的网络</strong>目前基于性能考虑,全部为iptables维护和转发<strong>Pod到外网</strong>Pod向外网发送请求,查找路由表,转发数据包到宿主机的网卡,宿主网卡完成路由选择后，iptables执行Masquerade，把源IP 更改为宿主网卡的IP,然后向外网服务器发送请求。外网访问PodService</p><p>参考文章： </p><p><a href="https://blog.csdn.net/iqifenxia/article/details/121226087">https://blog.csdn.net/iqifenxia/article/details/121226087</a></p><p><a href="http://t.zoukankan.com/fat-girl-spring-p-14849880.html">http://t.zoukankan.com/fat-girl-spring-p-14849880.html</a></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>网络通讯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s资源清单及常用字段</title>
    <link href="/2021/07/29/k8s/basic/kubernetes%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/07/29/k8s/basic/kubernetes%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="kubernetes组件"><a href="#kubernetes组件" class="headerlink" title="kubernetes组件"></a>kubernetes组件</h1><p>一个 Kubernetes 集群是由一组被称作节点（node）的机器组成， 这些节点上会运行由 Kubernetes 所管理的容器化应用。 且每个集群至少有一个工作节点。</p><p>工作节点会托管所谓的 Pods，而 Pod 就是作为应用负载的组件。 控制平面管理集群中的工作节点和 Pods。 为集群提供故障转移和高可用性， 这些控制平面一般跨多主机运行，而集群也会跨多个节点运行。</p><img src="/2021/07/29/k8s/basic/kubernetes%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/image-1-1024x478.png" class="" title="img">Kubernetes 集群的组件<p><strong>控制平面组件（Control Plane Components）</strong></p><p>控制平面组件会为集群做出全局决策，比如资源的调度。 以及检测和响应集群事件，例如当不满足部署的 <code>replicas</code> 字段时， 要启动新的 pod）。</p><p><strong>kube-apiserver</strong></p><p>API 服务器是 Kubernetes 控制平面的组件， 该组件负责公开了 Kubernetes API，负责处理接受请求的工作。 API 服务器是 Kubernetes 控制平面的前端。集群统一入口,以restful方式,交给etcd存储.</p><p><strong>etcd</strong></p><p><code>etcd</code> 是兼顾一致性与高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。存储系统,用于保存集群相关的数据。<br>etcd的官方将它定位成一个可信赖的分布式键值存储服务,它能够为整个分布式集群存储一些关键数据,协助分布式集群的正常运转。<a href="http://t.zoukankan.com/liujunjun-p-12186354.html">etcd运行原理</a></p><p><strong>kube-scheduler</strong></p><p><code>kube-scheduler</code> 是控制平面的组件， 负责监视新创建的、未指定运行节点（node）的 Pods， 并选择节点来让 Pod 在上面运行。负责介绍任务，选择合适的节点进行分配任务。</p><p>调度决策考虑的因素包括单个 Pod 及 Pods 集合的资源需求、软硬件及策略约束、 亲和性及反亲和性规范、数据位置、工作负载间的干扰及最后时限。</p><p>节点调度,选择node节点应用部署。</p><p><strong>kube-controller-manager</strong></p><p>kube-controller-manager 是控制平面的组件， 负责运行控制器进程。</p><p>为了降低复杂性，控制器都被编译到同一个可执行文件，并在同一个进程中运行。</p><p>控制器：</p><ul><li>节点控制器（Node Controller）：负责在节点出现故障时进行通知和响应</li><li>任务控制器（Job Controller）：监测代表一次性任务的 Job 对象，然后创建 Pods 来运行这些任务直至完成</li><li>端点控制器（Endpoints Controller）：填充端点（Endpoints）对象（即加入 Service 与 Pod）</li><li>服务帐户和令牌控制器（Service Account &amp; Token Controllers）：为新的命名空间创建默认帐户和 API 访问令牌</li><li>副本管理器（ReplicationController）：确保特定数量的 Pod 副本处于运⾏状态且总是可用。</li><li>Deployment管理器（DeploymentController）：可以拥有 ReplicaSet 并使⽤声明式⽅式在服务器端完成对 Pods 滚动更新的对象。</li><li>状态管理器（StatefulSetController）：管理有状态应⽤的⼯作负载 API 对象。</li><li>DaemonSetController：确保全部（或者某些）节点上运⾏⼀个 Pod 的副本。 当有节点加⼊集群时， 也会为他们新增⼀个 Pod 。 当有节点从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。</li><li>JobController：创建一个或者多个Pods,并将继续重试Pods的执行,直到指定数量的Pods成功终止。</li><li>CronJobController：创建基于时隔重复调度的 Jobs。</li><li>TTLController</li><li>EndpointController</li><li>PodGCController</li><li>ResourceQuotaController</li><li>NamespaceController</li><li>ServiceAccountController</li><li>GarbageCollectorController</li><li>HPAController</li><li>DisruptionController</li><li>CSRSigningController</li><li>CSRApprovingController</li><li>TokenController</li><li>NodeController</li><li>ServiceController</li><li>RouteController</li><li>PVBinderController</li><li>AttachDetachController</li><li>BootstrapSignerController</li><li>TokenCleanerController</li></ul><p><strong>cloud-controller-manager</strong></p><p><code>cloud-controller-manager</code> 是指嵌入特定云的控制逻辑之 控制平面组件。 <code>cloud-controller-manager</code> 允许你将你的集群连接到云提供商的 API 之上， 并将与该云平台交互的组件同与你的集群交互的组件分离开来。</p><p>下面的控制器都包含对云平台驱动的依赖：</p><ul><li>节点控制器（Node Controller）：用于在节点终止响应后检查云提供商以确定节点是否已被删除</li><li>路由控制器（Route Controller）：用于在底层云基础架构中设置路由</li><li>服务控制器（Service Controller）：用于创建、更新和删除云提供商负载均衡器</li></ul><p><strong>Node 组件</strong></p><p><strong>kubelet</strong></p><p>直接跟容器引擎交互实现容器的生命周期管理。</p><p>master排到node节点代表,管理本机容器。</p><p>kubelet 会在集群中每个节点（node）上运行。 它保证容器（containers）都运行在 Pod 中。<br>kubelet 接收一组通过各类机制提供给它的 PodSpecs， 确保这些 PodSpecs 中描述的容器处于运行状态且健康。 kubelet 不会管理不是由 Kubernetes 创建的容器。</p><p><strong>kube-proxy</strong></p><p>负责写入规则至 IPTABLES、IPVS 实现服务映射访问的。</p><p>kube-proxy 是集群中每个节点（node）所上运行的网络代理， 实现 Kubernetes 服务（Service） 概念的一部分。<br>kube-proxy 维护节点上的一些网络规则， 这些网络规则会允许从集群内部或外部的网络会话与 Pod 进行网络通信。<br>如果操作系统提供了可用的数据包过滤层，则 kube-proxy 会通过它来实现网络规则。 否则，kube-proxy 仅做流量转发。</p><p><strong>k8s核心概念</strong></p><p>Pod</p><ul><li>最小部署单元</li><li>一组容器的集合</li><li>共享网络</li><li>生命周期是短暂的</li></ul><p>controller</p><ul><li>确保预期的pod副本数量</li><li>无状态应用部署</li><li>有状态应用部署</li><li>确保所有的node运行同一个pod一次性任务和定时任务</li></ul><p>Service</p><ul><li>定义一组pod的访问规则</li></ul>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s资源清单及常用字段</title>
    <link href="/2021/07/27/k8s/basic/k8s%E8%B5%84%E6%BA%90%E6%B8%85%E5%8D%95%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%AD%97%E6%AE%B5/"/>
    <url>/2021/07/27/k8s/basic/k8s%E8%B5%84%E6%BA%90%E6%B8%85%E5%8D%95%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%AD%97%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<p>K8s中所有的内容都抽象为资源,资源实例化之后,叫做对象。</p><h1 id="名称空间级别"><a href="#名称空间级别" class="headerlink" title="名称空间级别"></a>名称空间级别</h1><p>工作负载型资源(workload ): Pod、 ReplicaSet, Deployment、 StatefulSet、DaemonSet、Job、CronJob (ReplicationController 在vl.11 版本被废弃)</p><p>服务发现及负载均衡型资源( ServiceDiscovery LoadBalance )： Service, Ingress. …</p><p>配置与存储型资源： Volume(存储卷)、CSI(容器存储接口,可以扩展各种各样的第三方存储卷)</p><p>特殊类型的存储卷：ConfigMap(当配置中心来使用的资源类型)、Secret(保存敏感数据)、DownwardAPI (把外部环境中的信息输出给容器)</p><p>集群级资源: Namespace、 Node、 Role、 ClusterRole, RoleBinding、 ClusterRoleBinding</p><p>元数据型资源: HPA、 PodTemplate、 LimitRange</p><h1 id="资源清单常用字段"><a href="#资源清单常用字段" class="headerlink" title="资源清单常用字段"></a>资源清单常用字段</h1><p>k8s 集群中对资源管理和资源对象编排部署都可以通过声明样式（YAML）文件来解决，通过kubectl 命令直接使用资源清单文件就可以实现对大量的资源对象进行编排部署了。这样的yaml文件我们一般称为资源清单。</p><h2 id="必须存在的属性"><a href="#必须存在的属性" class="headerlink" title="必须存在的属性"></a>必须存在的属性</h2><table><thead><tr><th>参数名</th><th>字段类型</th><th>说明</th></tr></thead><tbody><tr><td>version</td><td>string</td><td>K8S API的版本，可以通过kubectl api-version查询</td></tr><tr><td>kind</td><td>string</td><td>资源类型和角色</td></tr><tr><td>metadata</td><td>object</td><td>元数据对象</td></tr><tr><td>metadata.name</td><td>string</td><td>元数据对象的名称，比如pod的名字</td></tr><tr><td>metadata.namespace</td><td>string</td><td>元数据对象的命名控件</td></tr><tr><td>spec</td><td>object</td><td>详细定义对象</td></tr><tr><td>spec.container[]</td><td>list</td><td>容器列表</td></tr><tr><td>spec.container[].name</td><td>string</td><td>定义容器名称</td></tr><tr><td>spec.container[].image</td><td>string</td><td>定义用到镜像名称</td></tr></tbody></table><h2 id="spec-主要对象"><a href="#spec-主要对象" class="headerlink" title="spec 主要对象"></a>spec 主要对象</h2><table><thead><tr><th>参数名</th><th>字段类型</th><th>说明</th></tr></thead><tbody><tr><td>version</td><td>string</td><td>K8S API的版本，可以通过kubectl api-version查询</td></tr><tr><td>kind</td><td>string</td><td>资源类型和角色</td></tr><tr><td>metadata</td><td>object</td><td>元数据对象</td></tr><tr><td>metadata.name</td><td>string</td><td>元数据对象的名称，比如pod的名字</td></tr><tr><td>metadata.namespace</td><td>string</td><td>元数据对象的命名控件</td></tr><tr><td>metadata.labels</td><td>list</td><td>自定义标签列表</td></tr><tr><td>metadata.annotations</td><td>list</td><td>自定义注解列表</td></tr><tr><td>spec</td><td>object</td><td>详细定义对象</td></tr><tr><td>spec.container[]</td><td>list</td><td>容器列表</td></tr><tr><td>spec.container[].name</td><td>string</td><td>定义容器名称</td></tr><tr><td>spec.container[].image</td><td>string</td><td>定义用到镜像名称</td></tr><tr><td>spec.container[].imagePullPolicy</td><td>string</td><td>镜像拉取策略,    Always：不管镜像是否存在都会进行一次拉取。  Never：不管镜像是否存在都不会进行拉取  IfNotPresent：只有镜像不存在时，才会进行镜像拉取。</td></tr><tr><td>spec.container[].command[]</td><td>list</td><td>指定容器启动命令</td></tr><tr><td>spec.container[].args[]</td><td>list</td><td>命令参数</td></tr><tr><td>spec.container[].workingDir</td><td>string</td><td>指定容器的工作目录</td></tr><tr><td>spec.container[].volumeMounts[]</td><td>list</td><td>指定容器内部的存储卷配置</td></tr><tr><td>spec.container[].volumeMounts[].name</td><td>string</td><td>指定挂载存储卷的名称</td></tr><tr><td>spec.container[].volumeMounts[].mountPath</td><td>string</td><td>指定挂载存储卷的路径</td></tr><tr><td>spec.container[].volumeMounts[].readyOnly</td><td>string</td><td>true或false，读写模式</td></tr><tr><td>spec.container[].ports[]</td><td>list</td><td>指定容器需要用到的端口列表</td></tr><tr><td>spec.container[].ports[].name</td><td>string</td><td>端口名称</td></tr><tr><td>spec.container[].ports[].containerPort</td><td>string</td><td>指定容器要监听的端口号</td></tr><tr><td>spec.container[].ports[].hostPort</td><td>string</td><td>指定容器所在主机需要监听的端口号，默认跟containerPort相同，如果设置了hostPort同一台主机无法启动该容器的相同副本(因为主机的端口号不能相同，这样会冲突)</td></tr><tr><td>spec.container[].ports[].protocol</td><td>string</td><td>指定端口协议，支持TCP和UDP，默认值TCP</td></tr><tr><td>spec.container[].env[]</td><td>list</td><td>指定容器运行需要的环境</td></tr><tr><td>spec.container[].env[].name</td><td>string</td><td>环境变量名称</td></tr><tr><td>spec.container[].env[].value</td><td>string</td><td>环境变量值</td></tr><tr><td>spec.container[].resources</td><td>object</td><td>指定资源限制和资源请求的值</td></tr><tr><td>spec.container[].resources.limits</td><td>object</td><td>指定设置容器运行时资源的运行上限</td></tr><tr><td>spec.container[].resources.limits.cpu</td><td>string</td><td>指定cpu的限制，单位core数，将用于docker run –cpu-shares 参数</td></tr><tr><td>spec.container[].resources.limits.memory</td><td>string</td><td>指定MEM内存的限制，单位MIB ,GIB</td></tr><tr><td>spec.container[].resources.requests</td><td>object</td><td>指定容器启动和调度的限制设置</td></tr><tr><td>spec.container[].resources.requests.cpu</td><td>string</td><td>cpu请求，单位core数，容器启动时初始化可用数量</td></tr><tr><td>spec.container[].resources.requests.memory</td><td>string</td><td>内存请求，单位MIB,GIB 容器启动的初始化可用数量</td></tr><tr><td>spec.container[].livenessProbe</td><td>object</td><td>对Pod内各容器健康检查的设置，当探测无响应几次之后，系统将自动重启该容器。可以设置的方法包括：exec、httpGet和tcpSocket。对一个容器仅需设置一种健康检查方法</td></tr><tr><td>spec.container[].livenessProbe.exec</td><td>object</td><td>对Pod内各容器健康检查的设置</td></tr><tr><td>spec.container[].livenessProbe.exec.command[]</td><td>list</td><td>exec方式需要指定的命令或者脚本</td></tr><tr><td>spec.container[].livenessProbe.httpGet</td><td>object</td><td>对Pod内各容器健康检查的设置，httpget方式。需指定path、port</td></tr><tr><td>spec.container[].livenessProbe.httpGet.path</td><td>string</td><td></td></tr><tr><td>spec.container[].livenessProbe.httpGet.port</td><td>string</td><td></td></tr><tr><td>spec.container[].livenessProbe.httpGet.host</td><td>string</td><td></td></tr><tr><td>spec.container[].livenessProbe.httpGet.scheme</td><td>string</td><td></td></tr><tr><td>spec.container[].livenessProbe.httpGet .httpHeaders[]</td><td>list</td><td></td></tr><tr><td>spec.container[].livenessProbe.httpGet .httpHeaders[] .name</td><td>string</td><td></td></tr><tr><td>spec.container[].livenessProbe.httpGet .httpHeaders[] .value</td><td>string</td><td></td></tr><tr><td>spec.container[].livenessProbe.tcpSocket</td><td>object</td><td></td></tr><tr><td>spec.container[].livenessProbe.tcpSocket.port</td><td>string</td><td></td></tr><tr><td>spec.container[].livenessProbe.initialDelaySeconds</td><td>string</td><td>容器启动完成后首次探测的时间，单位为s</td></tr><tr><td>spec.container[].livenessProbe.timeoutSeconds</td><td>string</td><td>探测等待响应的超时时间，单位为s,默认1s</td></tr><tr><td>spec.container[].livenessProbe.periodSeconds</td><td>string</td><td>定期探测时间设置，单位s,默认10s探测一次</td></tr><tr><td>spec.container[].livenessProbe.successThreshold</td><td>string</td><td>失败后检查成功的最小连续成功次数。默认为1.活跃度必须为1。最小值为1。</td></tr><tr><td>spec.container[].livenessProbe.failureThreshold</td><td>string</td><td>当Pod成功启动且检查失败时，Kubernetes将在放弃之前尝试failureThreshold次。放弃生存检查意味着重新启动Pod。而放弃就绪检查，Pod将被标记为未就绪。默认为3.最小值为1。</td></tr><tr><td>spec.container[].livenessProbe.securityContext</td><td>object</td><td></td></tr><tr><td>spec.container[].livenessProbe.securityContext .privileged</td><td>string</td><td></td></tr><tr><td>spec.restartPolicy</td><td>string</td><td>定义pod重启策略，默认值Always                   Always：Pod一旦终止运行，则无论容器是如何终止的kubelet服务都将重启它                    OnFailure：只有Pod以非零退出码终止时，kubelet才会重启该容器，如果容器正常结束（退出码为0），则kubelet将不会重启它      Never：Pod终止后，kubelet将退出码报告给Master，不会重启该Pod</td></tr><tr><td>spec.nodeSelector</td><td>object</td><td>定义node的label过滤标签，以key：value格式指定</td></tr><tr><td>spec.imagePullSecrets</td><td>Object</td><td>定义pull镜像secret名称，以name:secretKey格式指定</td></tr><tr><td>spec.hostNetwork</td><td>Boolean</td><td>定义是否使用主机网络模式，默认值false，设置true表示使用宿主网路，不适用docker网桥，同时设置true将无法在同一台宿主机上启动第二个副本。</td></tr><tr><td>spec.volumes[]</td><td>list</td><td>在该pod上定义的共享存储卷列表</td></tr><tr><td>spec.volumes[].name</td><td>string</td><td>共享存储卷的名称，在一个pod中每个存储卷定义一个名称，容器定义部分的containers[].volumeMounts[].name将引用该共享存储卷的名称。可以定义多个volume，每个volume的name保持唯一。</td></tr><tr><td>spec.volumes[].emptyDir</td><td>string</td><td>类型为emptyDir的存储卷，表示与Pod同生命周期的一个临时目录，其值为一个空对象：emptyDir:{}</td></tr><tr><td>spec.volumes[].hostPath</td><td>object</td><td>类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录，通过volume[].hostPath.path指定</td></tr><tr><td>spec.volumes[].hostPath.path</td><td>string</td><td>Pod所在主机的目录，将被用于容器中mount的目录</td></tr><tr><td>spec.volumes[].secret</td><td>object</td><td>类型为secret的存储卷，表示挂载集群预定义的secret对象到容器内部</td></tr><tr><td>spec.volumes[].secret.secretName</td><td>string</td><td></td></tr><tr><td>spec.volumes[].secret.items[]</td><td>list</td><td></td></tr><tr><td>spec.volumes[].secret.items[].key</td><td>string</td><td></td></tr><tr><td>spec.volumes[].secret.items[].path</td><td>string</td><td></td></tr><tr><td>spec.volumes[].configMap</td><td>object</td><td>类型为configMap的存储卷，表示挂载集群预定义的configMap对象到容器内部</td></tr><tr><td>spec.volumes[].configMap.name</td><td>string</td><td></td></tr><tr><td>spec.volumes[].configMap.items[]</td><td>list</td><td></td></tr><tr><td>spec.volumes[].configMap.items[].key</td><td>string</td><td></td></tr><tr><td>spec.volumes[].configMap.items[].path</td><td>string</td><td></td></tr></tbody></table><h1 id="资源清单格式"><a href="#资源清单格式" class="headerlink" title="资源清单格式"></a>资源清单格式</h1><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">apiVersion:</span> group/apiversion <span class="hljs-meta">#如果没有给定group名称,那么默认为core,可以使用kubectl api-versions #获取当前k8s版本上所有的 apiVersion版本信息(每个版本可能不同)</span><br><span class="hljs-symbol">kind:</span><span class="hljs-meta">#资源类别</span><br><span class="hljs-symbol">metadata:</span><span class="hljs-meta">#资源元数据</span><br>  name<br>  namespace<br>  <span class="hljs-number">1</span>ables<br>  annotations <span class="hljs-meta">#主要目的是方便用户阅读查找</span><br><span class="hljs-symbol">spec:</span> <span class="hljs-meta">#期望的状态(disired state)</span><br><span class="hljs-symbol">status:</span> <span class="hljs-meta">#当前状态,本字段有Kubernetes 自身维护,用户不能去定义</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes  kubectl常用命令</title>
    <link href="/2021/07/25/k8s/basic/kubernetes%20kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/07/25/k8s/basic/kubernetes%20kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="1-kubectl-概述"><a href="#1-kubectl-概述" class="headerlink" title="1 kubectl 概述"></a>1 kubectl 概述</h1><p>kubectl 是Kubernetes 集群的命令行工具，通过kubectl 能够对集群本身进行管理，并能够在集群上进行容器化应用的安装部署。</p><p><a href="https://kubernetes.io/zh/docs/reference/kubectl/overview/">kubectl 概述 | Kubernetes</a> </p><h1 id="2-kubectl-命令的语法"><a href="#2-kubectl-命令的语法" class="headerlink" title="2 kubectl 命令的语法"></a>2 kubectl 命令的语法</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">kubectl <span class="hljs-selector-attr">[command]</span> <span class="hljs-selector-attr">[TYPE]</span> <span class="hljs-selector-attr">[NAME]</span> <span class="hljs-selector-attr">[flags]</span><br></code></pre></td></tr></table></figure><ul><li><code>command</code>：指定要对一个或多个资源执行的操作，例如 <code>create</code>、<code>get</code>、<code>describe</code>、<code>delete</code>。</li><li><code>TYPE</code>：指定<a href="https://kubernetes.io/zh/docs/reference/kubectl/overview/#%E8%B5%84%E6%BA%90%E7%B1%BB%E5%9E%8B">资源类型</a>。资源类型不区分大小写， 可以指定单数、复数或缩写形式。 </li><li><code>NAME</code>：指定资源的名称。名称区分大小写。 如果省略名称，则显示所有资源的详细信息 <code>kubectl get pods</code>。 </li><li><code>flags</code>: 指定可选的参数。例如，可以使用 <code>-s</code> 或 <code>-server</code> 参数指定 Kubernetes API 服务器的地址和端口。</li></ul><h1 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3 常用命令"></a>3 常用命令</h1><p><a href="https://kubernetes.io/zh/docs/reference/kubectl/kubectl/">kubectl | Kubernetes</a> </p><p><a href="http://docs.kubernetes.org.cn/475.html">常用命令</a></p><h2 id="3-1-基础命令"><a href="#3-1-基础命令" class="headerlink" title="3.1 基础命令"></a>3.1 基础命令</h2><table><thead><tr><th>create</th><th>从文件或 stdin 创建一个或多个资源。</th></tr></thead><tbody><tr><td>expose</td><td>将副本控制器、服务或 pod 作为新的 Kubernetes 服务暴露。</td></tr><tr><td>run</td><td>在集群上运行指定的镜像。</td></tr><tr><td>get</td><td>列出一个或多个资源。</td></tr><tr><td>delete</td><td>从文件、标准输入或指定标签选择器、名称、资源选择器或资源中删除资源。</td></tr><tr><td>set</td><td>为对象设置功能特性</td></tr><tr><td>explain</td><td>获取多种资源的文档。例如 pod, node, service 等。</td></tr><tr><td>edit</td><td>使用默认编辑器编辑和更新服务器上一个或多个资源的定义。</td></tr></tbody></table><h2 id="3-2-部署命令"><a href="#3-2-部署命令" class="headerlink" title="3.2 部署命令"></a>3.2 部署命令</h2><table><thead><tr><th>rollout</th><th>管理资源的部署。</th></tr></thead><tbody><tr><td>scale</td><td>更新指定副本控制器的大小。</td></tr><tr><td>autoscale</td><td>自动伸缩由副本控制器管理的一组 pod。</td></tr></tbody></table><h2 id="3-3-集群管理命令"><a href="#3-3-集群管理命令" class="headerlink" title="3.3 集群管理命令"></a>3.3 集群管理命令</h2><table><thead><tr><th>certificate</th><th>修改证书资源</th></tr></thead><tbody><tr><td>cluster-info</td><td>显示集群信息</td></tr><tr><td>top</td><td>显示资源（CPU/内存/存储）的使用情况。</td></tr><tr><td>cordon</td><td>将节点标记为不可调度。</td></tr><tr><td>uncordon</td><td>将节点标记为可调度。</td></tr><tr><td>drain</td><td>腾空节点以准备维护。</td></tr><tr><td>taint</td><td>更新一个或多个节点上的污点。</td></tr></tbody></table><h2 id="3-4-故障诊断命令"><a href="#3-4-故障诊断命令" class="headerlink" title="3.4 故障诊断命令"></a>3.4 故障诊断命令</h2><table><thead><tr><th>describe</th><th>显示一个或多个资源的详细状态</th></tr></thead><tbody><tr><td>logs</td><td>在 pod 中打印容器的日志。</td></tr><tr><td>attach</td><td>附加到正在运行的容器，查看输出流或与容器（stdin）交互</td></tr><tr><td>exec</td><td>执行命令到容器</td></tr><tr><td>port-forward</td><td>转发一个或多个本地端口到一个pod</td></tr><tr><td>proxy</td><td>运行 Kubernetes API 服务器的代理</td></tr><tr><td>cp</td><td>拷贝文件或目录到容器中</td></tr><tr><td>auth</td><td>检查授权</td></tr></tbody></table><h2 id="3-5-其它命令"><a href="#3-5-其它命令" class="headerlink" title="3.5 其它命令"></a>3.5 其它命令</h2><table><thead><tr><th>convert</th><th>在不同的 API 版本之间转换配置文件。配置文件可以是 YAML 或 JSON 格式。</th></tr></thead><tbody><tr><td>replace</td><td>从文件或标准输入中替换资源</td></tr><tr><td>apply</td><td>从文件或 stdin 对资源应用配置更改。</td></tr><tr><td>patch</td><td>使用策略合并 patch 程序更新资源的一个或多个字段。</td></tr><tr><td>label</td><td>添加或更新一个或多个资源的标签。</td></tr><tr><td>annotate</td><td>添加或更新一个或多个资源的注解。</td></tr><tr><td>completion</td><td>为指定的 shell （bash 或 zsh）输出 shell 补齐代码。</td></tr><tr><td>api-versions</td><td>列出可用的 API 版本。</td></tr><tr><td>config</td><td>修改 kubeconfig 文件。有关详细信息，请参阅各个子命令。</td></tr><tr><td>plugin</td><td>提供用于与插件交互的实用程序。</td></tr><tr><td>version</td><td>显示运行在客户端和服务器上的 Kubernetes 版本。</td></tr></tbody></table><h2 id="3-6-kubectl-create-与kubectl-apply区别"><a href="#3-6-kubectl-create-与kubectl-apply区别" class="headerlink" title="3.6 kubectl create 与kubectl apply区别"></a>3.6 kubectl create 与kubectl apply区别</h2><table><thead><tr><th><strong>kubectl create</strong></th><th><strong>kubectl apply</strong></th></tr></thead><tbody><tr><td>它首先删除资源，然后从提供的文件中创建资源</td><td>只更新文件中给出的属性</td></tr><tr><td>在create中使用的文件应该是完整的</td><td>apply中使用的文件可能是一个不完整的规范</td></tr><tr><td>Create工作于资源的每个属性</td><td>Apply仅对资源的某些属性有效</td></tr><tr><td>如果您将使用同一个文件的替换命令，该命令将失败，因为缺少信息</td><td>您可以应用只更改注释的文件，而不指定资源的任何其他属性</td></tr></tbody></table><h1 id="4-常用命令使用案例"><a href="#4-常用命令使用案例" class="headerlink" title="4 常用命令使用案例"></a>4 常用命令使用案例</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>获取所有可用的api 版本<br>kubectl api-versions<br><span class="hljs-regexp">//</span>给Node加上标签<br>kubectl label nodes &lt;your-node-name&gt; disktype=ssd<br></code></pre></td></tr></table></figure><p>快速创建pod及查看运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 创建deployment <br>kubectl create deployment nginx --image=nginx<br>// 将资源暴露为新的Kubernetes Service<br>kubectl expose deployment nginx --port=80 --type=NodePort<br>//查看pod<br>kubectl get pod/po &lt;Pod_name&gt;<br>kubectl get pod/po &lt;Pod_name&gt; -o wide<br>//显示所有pod<br>kubectl get pods<br>//删除pod<br>kubectl delete -f pod pod_name.yaml<br>kubectl delete pod --all/[pod_name]<br></code></pre></td></tr></table></figure><p>通过yaml创建deployment </p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f nginx-create.yaml<br></code></pre></td></tr></table></figure><p>获取所有的node</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> nodes<br></code></pre></td></tr></table></figure><p>获取指定node信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> nodes node_name<br></code></pre></td></tr></table></figure><p>帮助命令</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">kubectl <span class="hljs-comment">--help</span><span class="hljs-comment"></span><br><span class="hljs-comment">//查看某个操作</span><br>kubectl <span class="hljs-built_in">get</span> -help<br></code></pre></td></tr></table></figure><p>快速获取yaml</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create deployment nginx <span class="hljs-attribute">--image</span>=nginx -o yaml --dry-<span class="hljs-built_in">run</span> &gt; nginx-create.yaml<br><span class="hljs-comment"># 或者</span><br>kubectl <span class="hljs-built_in">get</span> deploy nginx -o yaml ---<span class="hljs-built_in">export</span> &gt; nginx-test.yaml<br></code></pre></td></tr></table></figure><h1 id="5-练习操作"><a href="#5-练习操作" class="headerlink" title="5 练习操作"></a>5 练习操作</h1><h2 id="5-1-删除操作"><a href="#5-1-删除操作" class="headerlink" title="5.1 删除操作"></a>5.1 删除操作</h2><p><strong>删除deplyment</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>删除myapp<br>kubectl <span class="hljs-keyword">delete</span> deployment myapp<br><span class="hljs-regexp">//</span>删除所有<br>kubectl <span class="hljs-keyword">delete</span> deployment --all<br></code></pre></td></tr></table></figure><p><strong>删除pod</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>删除myapp<br>kubectl <span class="hljs-keyword">delete</span> pod myapp<br><span class="hljs-regexp">//</span>删除所有<br>kubectl <span class="hljs-keyword">delete</span> pod --all<br></code></pre></td></tr></table></figure><p><strong>删除svc</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>删除nginx svc<br>kubectl <span class="hljs-keyword">delete</span> svc nginx<br></code></pre></td></tr></table></figure><h2 id="5-2-通过yaml创建资源"><a href="#5-2-通过yaml创建资源" class="headerlink" title="5.2 通过yaml创建资源"></a>5.2 通过yaml创建资源</h2><p>create和apply的区别在<strong>3.2 常用命令</strong>有说明</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">kubectl create -f  <span class="hljs-keyword">init</span>.yaml<br>或<br>kubectl apply -f  <span class="hljs-keyword">init</span>.yaml<br></code></pre></td></tr></table></figure><h2 id="5-3-查看k8s可用的apiVersion"><a href="#5-3-查看k8s可用的apiVersion" class="headerlink" title="5.3 查看k8s可用的apiVersion"></a>5.3 查看k8s可用的apiVersion</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">kubectl api-versions</span><br></code></pre></td></tr></table></figure><h2 id="5-4-查看所有api资源"><a href="#5-4-查看所有api资源" class="headerlink" title="5.4 查看所有api资源"></a>5.4 查看所有api资源</h2><p>通过配置清单创建资源时，会出现error: unable to recognize “init.yaml”: no matches for kind “Pod” in version “V1”，说明对应apiVersion 版本没有指定资源的定义，可以通过如下命令来查看对应资源的版本。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">kubectl api-resources</span><br></code></pre></td></tr></table></figure><h2 id="5-5-查看资源"><a href="#5-5-查看资源" class="headerlink" title="5.5 查看资源"></a>5.5 查看资源</h2><p>查看pod资源</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">get</span> <span class="hljs-string">pod</span><br></code></pre></td></tr></table></figure><h2 id="5-6-分析资源"><a href="#5-6-分析资源" class="headerlink" title="5.6 分析资源"></a>5.6 分析资源</h2><p>查看pod的描述</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">kubectl describe pod myapp-pod</span><br></code></pre></td></tr></table></figure><h2 id="5-7-资源日志查看"><a href="#5-7-资源日志查看" class="headerlink" title="5.7 资源日志查看"></a>5.7 资源日志查看</h2><p>查看pod的指定容器的日志</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">kubectl logs myapp-pod -c  <span class="hljs-keyword">init</span>-myservice<br></code></pre></td></tr></table></figure><h2 id="5-8-编辑资源清单"><a href="#5-8-编辑资源清单" class="headerlink" title="5.8 编辑资源清单"></a>5.8 编辑资源清单</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">edit</span> pod myapp-pod<br></code></pre></td></tr></table></figure><h2 id="5-9-获取资源的api版本"><a href="#5-9-获取资源的api版本" class="headerlink" title="5.9 获取资源的api版本"></a>5.9 获取资源的api版本</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">kubectl explain pod</span><br></code></pre></td></tr></table></figure><h2 id="5-10-获取已创建pod的yaml"><a href="#5-10-获取已创建pod的yaml" class="headerlink" title="5.10 获取已创建pod的yaml"></a>5.10 获取已创建pod的yaml</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">kubectl <span class="hljs-built_in">get</span> pod lifecycle-<span class="hljs-built_in">demo</span> -o yaml<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
      <tag>kubectl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s资源清单及常用字段</title>
    <link href="/2021/07/24/k8s/basic/kubernetes%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B8%8E%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/07/24/k8s/basic/kubernetes%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B8%8E%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="kubernetes发展史"><a href="#kubernetes发展史" class="headerlink" title="kubernetes发展史"></a><strong>kubernetes发展史</strong></h2><p>CNCF(云计算基金会) Borg google内部使用borg，后来发现dockerswarm使用广泛，所以让go开发工程师重写brog，成了k8s，1.0版本的时候捐给了CNCF。</p><blockquote><p>一开始docker和另外一家coreos公司，技术基本是共享的，docker火起来后，coreos也研发了一个类似docker的技术，最后coreos加入k8s生态构建，etcd就是coreos提供的捐赠给CNCF的</p></blockquote><h2 id="其它容器管理引擎："><a href="#其它容器管理引擎：" class="headerlink" title="其它容器管理引擎："></a>其它容器管理引擎：</h2><ul><li>podman 红帽RedHat开发的容器管理引擎</li><li>docker docker公司研发的docker，另外他还研发了container捐给CNCF</li><li>CNCF container，docker公司研发捐给CNCF的</li></ul><h2 id="docker和contaniner的关系："><a href="#docker和contaniner的关系：" class="headerlink" title="docker和contaniner的关系："></a><strong>docker和contaniner的关系：</strong></h2><ul><li>docker用到的运行接口是CRI，CRI是一种容器运行时的标准，可以把CRI想象成一个数据线接口，Python等调用docker是需要调用这个接口，遵循这个规范，这个规范就是CRI</li><li>container用到的接口是O-CRI，他是CRI做了些改动，O即OPEN</li></ul><blockquote><p>k8s加入CNCF后，kubectl用的是O-CRI接口，无法直接调用docker的CRI接口，CNCF是国际公司，不可能直接去迁就docker，所以在中间加了个垫片，类似于螺丝与螺母之间的垫片，后来k8s壮大超过docker后，不再迁就docker，在1.19版本中，移除了垫片。k8s调用docker的O-CRI接口，如果没有就不调了，docker忍气吞声发了声明，说支持O_CRI，反过来支持k8s。</p></blockquote><h2 id="k8s基本介绍"><a href="#k8s基本介绍" class="headerlink" title="k8s基本介绍"></a><strong>k8s基本介绍</strong></h2><p>kubernetes，简称K8s。k8s 这个缩写是因为 k 和 s 之间有八个字符的关系。 Google 在 2014 年开源了 Kubernetes 项目。</p><p>Kubernetes 建立在Google 大规模运行生产工作负载十几年经验的基础上， 结合了社区中最优秀的想法和实践。</p><p>是一个可移植的，可扩展的开源平台，用于管理云平台中多个主机上的容器化的应用，Kubernetes 的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes 提供了应用部署，规划，更新，维护的一种机制。</p><p>Kubernetes 是Google 开源的一个<strong>容器编排引擎</strong>，它支持<strong>自动化部署、大规模可伸缩、应用容器化管理</strong>。</p><p>在Kubernetes 中，可以创建多个容器，每个容器里面运行一个应用实例，然后通过内置的负载均衡策略，实现对这一组应用实例的管理、发现、访问，而这些细节都不需要人为的手工配置和处理。</p><h2 id="应用部署发展"><a href="#应用部署发展" class="headerlink" title="应用部署发展"></a><strong>应用部署发展</strong></h2><img src="/2021/07/24/k8s/basic/kubernetes%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B8%8E%E4%BB%8B%E7%BB%8D/image-1024x388.png" class="" title="img"><p><strong>传统部署</strong></p><p>各个组织机构在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资源边界，这会导致资源分配问题。</p><p><strong>虚拟化部署时代</strong></p><p>允许在单个物理服务器的 CPU 上运行多个虚拟机（VM）。 虚拟化允许应用程序在 VM 之间隔离，并提供一定程度的安全，因为一个应用程序的信息 不能被另一应用程序随意访问。</p><p><strong>容器部署时代</strong></p><p>轻量级，容器类似于 VM，但是它们具有被放宽的隔离属性，可以在应用程序之间共享操作系统（OS）。 与 VM 类似，具有自己的文件系统、CPU、内存、进程空间等。 由于与基础架构分离，因此可以跨云和 OS 发行版本进行移植。</p><p><em>好处：</em></p><ul><li>敏捷应用程序的创建和部署</li><li>持续开发、集成和部署</li><li>关注开发与运维的分离</li><li>可观察性</li><li>跨开发、测试和生产的环境一致性</li><li>跨云和操作系统发行版本的可移植性</li><li>以应用程序为中心的管理</li><li>松散耦合、分布式、弹性、解放的微服务</li><li>资源隔离</li><li>资源利用</li></ul><h2 id="k8s的优势"><a href="#k8s的优势" class="headerlink" title="k8s的优势"></a><strong>k8s的优势</strong></h2><ul><li>开源</li><li>轻量级</li><li>弹性伸缩</li><li>负载均衡</li></ul><h2 id="K8s-功能"><a href="#K8s-功能" class="headerlink" title="K8s 功能"></a><strong>K8s 功能</strong></h2><p><strong>自动装箱</strong></p><p>基于容器对应用运行环境的资源配置要求自动部署应用容器</p><p><strong>自我修复(自愈能力)</strong></p><p>当容器失败时，会对容器进行重启当所部署的Node 节点有问题时，会对容器进行重新部署和重新调度当容器未通过监控检查时，会关闭此容器直到容器正常运行时，才会对外提供服务</p><p><strong>水平扩展</strong></p><p>通过简单的命令、用户UI 界面或基于CPU 等资源使用情况，对应用容器进行规模扩大或规模剪裁</p><p><strong>服务发现和负载均衡</strong></p><p>Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果进入容器的流量很大， Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。</p><p><strong>滚动更新</strong></p><p>可以根据应用的变化，对应用容器运行的应用，进行一次性或批量式更新</p><p><strong>版本回退</strong></p><p>可以根据应用部署情况，对应用容器运行的应用，进行历史版本即时回退</p><p><strong>密钥和配置管理</strong></p><p>在不需要重新构建镜像的情况下，可以部署和更新密钥和应用配置，类似热部署。</p><p><strong>存储编排</strong></p><p>自动实现存储系统挂载及应用，特别对有状态应用实现数据持久化非常重要存储系统可以来自于本地目录、网络存储(NFS、Gluster、Ceph 等)、公共云存储服务</p><p><strong>批处理</strong></p><p>提供一次性任务，定时任务；满足批量数据处理和分析的场景</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes控制器Job与CronJob</title>
    <link href="/2021/07/17/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/kubernetes%E6%8E%A7%E5%88%B6%E5%99%A8Job%E4%B8%8ECronJob/"/>
    <url>/2021/07/17/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/kubernetes%E6%8E%A7%E5%88%B6%E5%99%A8Job%E4%B8%8ECronJob/</url>
    
    <content type="html"><![CDATA[<h1 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h1><p>Job负责批处理任务,即仅执行一次的任务,它保证批处理任务的一个或多个Pod成功结束</p><p>特殊说明</p><ul><li>spec.template格式同Pod</li><li>RestartPolicy仅支持NeverdOnFailure</li><li>单个Pod时,默认Pod成功运行后Job即结束</li><li>.spec. completions 标志Job结束需要成功运行的Pod个数,默认为1</li><li>.spec. parallelism 标志并行运行的Pod的个数,默认为1</li><li>spec.activeDeadlineSeconds标志失败Pod的重试最大时间,超过这个时间不会继续重试</li></ul><p>例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Job</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">pi</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">pi</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">pi</span><br>        <span class="hljs-attr">image: harborcloud.com/library/perl:</span><br>        <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;perl&quot;</span>,<span class="hljs-string">&quot;-Mbignum=bpi&quot;</span>,<span class="hljs-string">&quot;-wle&quot;</span>,<span class="hljs-string">&quot;print bpi(2000)&quot;</span>]<br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Never</span><br></code></pre></td></tr></table></figure><h2 id="Spec"><a href="#Spec" class="headerlink" title="Spec"></a>Spec</h2><ul><li>spec.template格式同Pod</li><li>RestartPolicy仅支持Never或OnFailure</li><li>单个Pod时,默认Pod成功运行后Job即结束</li><li>spec. completions 标志Job结束需要成功运行的Pod个数,默认为1</li><li>spec. parallelism标志并行运行的Pod的个数,默认为1</li><li>spec.activeDeadlineSeconds标志失败Pod的重试最大时间,超过这个时间不会继续重试</li></ul><h1 id="CronJob"><a href="#CronJob" class="headerlink" title="CronJob"></a>CronJob</h1><p>CronJob管理基于时间的Job,即:</p><ul><li>在给定时间点只运行一次</li><li>周期性地在给定时间点运行</li></ul><p>使用条件:当前使用的Kubernetes 集群,版本&gt;=1.8 (对Cronjob)</p><p>典型的用法如下所示:<br>在给定的时间点调度Job运行<br>创建周期性运行的Job,例如:数据库备份、发送邮件</p><h2 id="CronJob-Spec"><a href="#CronJob-Spec" class="headerlink" title="CronJob Spec"></a>CronJob Spec</h2><ul><li>spec. schedule:调度,必需字段,指定任务运行周期,格式同Cron</li><li>spec. jobTemplate: Job模板,必需字段,指定需要运行的任务,格式同Job</li><li>spec. startingDeadlineSeconds:启动 Job 的期限(秒级别) ,该字段是可选的。如果因为任何原因而错过了被调度的时间,那么错过执行时间的Job将被认为是失败的。如果没有指定,则没有期限</li><li>spec. concurrencyPolicy：并发策略,该字段也是可选的。它指定了如何处理被CronJob创建的Job的并发执行。只允许指定下面策略中的一种:Allow (默认) :允许并发运行 Job；Forbid ：禁止并发运行,如果前一个还没有完成,则直接跳过下一个；Replace：取消当前正在运行的Job,用一个新的来替换。<br>注意：当前策略只能应用于同一个Cron Job 创建的Job。如果存在多个Cron Job,它们创建的Job之间总是允许并发运行。</li><li>spec. suspend：挂起,该字段也是可选的。如果设置为true,后续所有执行都会被挂起。它对已经开始执行的Job不起作用。默认值为false。</li><li>spec. successfullobsHistoryLimit.spec.failedJobsHistoryLimit ：历史限制,是可选的字段。它们指定了可以保留多少完成和失败的Job。默认情况下,它们分别设置为3和1，设置限制的值为e,相关类型的Job完成后将不会被保留。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">batch/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">CronJob</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">hello</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">schedule:</span> <span class="hljs-string">&quot;*/1 * * * *&quot;</span><br>  <span class="hljs-attr">jobTemplate:</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">template:</span><br>        <span class="hljs-attr">spec:</span><br>          <span class="hljs-attr">containers:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">hello</span><br>            <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/busybox:v1.35</span><br>            <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">/bin/sh</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">date;</span> <span class="hljs-string">echo</span> <span class="hljs-string">Hello</span> <span class="hljs-string">from</span> <span class="hljs-string">the</span> <span class="hljs-string">Kubernetes</span> <span class="hljs-string">cluster</span><br>          <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">OnFailure</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RC与RS与Deployment关联</title>
    <link href="/2021/07/16/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/RC%E4%B8%8ERS%E4%B8%8EDeployment%E5%85%B3%E8%81%94/"/>
    <url>/2021/07/16/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/RC%E4%B8%8ERS%E4%B8%8EDeployment%E5%85%B3%E8%81%94/</url>
    
    <content type="html"><![CDATA[<h1 id="RC"><a href="#RC" class="headerlink" title="RC"></a>RC</h1><p>RC (ReplicationController )主要的作用就是用来确保容器应用的副本数始终保持在用户定义的副本数。即如果有容器异常退出,会自动创建新的Pod来替代:而如果异常多出来的容器也会自动回收</p><p>Kubernetes 官方建议使用RS (ReplicaSet)替代RC (ReplicationController)进行部署,RS跟RC没有本质的不同,只是名字不一样,并且RS支持集合式的selector</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ReplicaSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">frontend</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">tier:</span> <span class="hljs-string">frontend</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">php-redis</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">gcr.io/google_samples/gb-frontend:v3</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GET_HOSTS_FROM</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">dns</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">88</span><br></code></pre></td></tr></table></figure><p>操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 data5]# kubectl <span class="hljs-keyword">create</span> <span class="hljs-operator">-</span>f rs.yaml <br>[root<span class="hljs-variable">@k8s</span><span class="hljs-operator">-</span>master01 data5]# kubectl <span class="hljs-keyword">get</span> pod <span class="hljs-operator">-</span>o wide<br>NAME             READY   STATUS    RESTARTS   AGE   IP           NODE         NOMINATED NODE   READINESS GATES<br>frontend<span class="hljs-operator">-</span>dflfh   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>m   <span class="hljs-number">10.244</span><span class="hljs-number">.2</span><span class="hljs-number">.6</span>   k8s<span class="hljs-operator">-</span>node02   <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>frontend<span class="hljs-operator">-</span>vnjfd   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>m   <span class="hljs-number">10.244</span><span class="hljs-number">.1</span><span class="hljs-number">.9</span>   k8s<span class="hljs-operator">-</span>node01   <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br>frontend<span class="hljs-operator">-</span>x9kfr   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">11</span>m   <span class="hljs-number">10.244</span><span class="hljs-number">.1</span><span class="hljs-number">.8</span>   k8s<span class="hljs-operator">-</span>node01   <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span>           <span class="hljs-operator">&lt;</span><span class="hljs-keyword">none</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>修改label过程</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master01 data5]# kubectl <span class="hljs-built_in">get</span> pod --show-labels<br>NAME             READY   STATUS              RESTARTS   AGE    LABELS<br>frontend-dflfh   0/1     ContainerCreating   0          109s   <span class="hljs-attribute">tier</span>=frontend<br>frontend-vnjfd   0/1     ContainerCreating   0          109s   <span class="hljs-attribute">tier</span>=frontend<br>frontend-x9kfr   0/1     ContainerCreating   0          109s   <span class="hljs-attribute">tier</span>=frontend<br>[root@k8s-master01 data5]# kubectl label pod frontend-vnjfd <span class="hljs-attribute">tier</span>=frontend1 --overwrite<br>pod/frontend-vnjfd labeled<br>[root@k8s-master01 data5]# kubectl <span class="hljs-built_in">get</span> pod --show-labels<br>NAME             READY   STATUS    RESTARTS   AGE   LABELS<br>frontend-dflfh   1/1     Running   0          15m   <span class="hljs-attribute">tier</span>=frontend<br>frontend-vnjfd   1/1     Running   0          15m   <span class="hljs-attribute">tier</span>=frontend1<br>frontend-x9kfr   1/1     Running   0          15m   <span class="hljs-attribute">tier</span>=frontend<br>frontend-zqxxj   1/1     Running   0          40s   <span class="hljs-attribute">tier</span>=frontend<br></code></pre></td></tr></table></figure><p>结论：当label修改为frontend1后，rs将会创建一个新的pod，因为rs通过label控制pod，当其中一个pod的label修改了，rs就会自动创建一个</p><p>将pod的label修改回frontend：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master01 data5]# kubectl label pod frontend-vnjfd <span class="hljs-attribute">tier</span>=frontend --overwrite <br>pod/frontend-vnjfd labeled<br>[root@k8s-master01 data5]# kubectl <span class="hljs-built_in">get</span> pod --show-labels                             <br>NAME             READY   STATUS    RESTARTS   AGE   LABELS<br>frontend-dflfh   1/1     Running   0          17m   <span class="hljs-attribute">tier</span>=frontend<br>frontend-vnjfd   1/1     Running   0          17m   <span class="hljs-attribute">tier</span>=frontend<br>frontend-x9kfr   1/1     Running   0          17m   <span class="hljs-attribute">tier</span>=frontend<br></code></pre></td></tr></table></figure><p>结论：rs会自动的缩减pod，将上面新增的pod去掉。</p><h1 id="RS-与Deployment-的关联"><a href="#RS-与Deployment-的关联" class="headerlink" title="RS 与Deployment 的关联"></a>RS 与Deployment 的关联</h1><img src="/2021/07/16/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/RC%E4%B8%8ERS%E4%B8%8EDeployment%E5%85%B3%E8%81%94/1657973507960.png" class="" width="1657973507960"><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><p>Deployment为Pod和ReplicaSet提供了一个声明式定义(declarative)方法,用来替代以前的ReplicationController 来方便的管理应用。典型的应用场景包括:</p><ul><li>定义Deployment来创建Pod和ReplicaSet</li><li>滚动升级和回滚应用</li><li>扩容和缩容</li><li>暂停和继续Deployment</li></ul><h2 id="1、部署一个简单的Nginx应用"><a href="#1、部署一个简单的Nginx应用" class="headerlink" title="1、部署一个简单的Nginx应用"></a>1、部署一个简单的Nginx应用</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">nginx-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.7.9</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">88</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">create</span> <span class="hljs-string">-f</span> <span class="hljs-string">nginx-deployment.yaml</span> <span class="hljs-string">-record</span><br><span class="hljs-comment"># --record参数可以记录命令,我们可以很方便的查看每次revision的变化</span><br></code></pre></td></tr></table></figure><h2 id="2、扩容"><a href="#2、扩容" class="headerlink" title="2、扩容"></a>2、扩容</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@k8s-master01</span> data5]<span class="hljs-comment"># kubectl scale deployment nginx-deployment --replicas 10</span><br>[root<span class="hljs-meta">@k8s-master01</span> data5]<span class="hljs-comment"># kubectl get pod -o wide</span><br>NAME                                READY   STATUS    RESTARTS   AGE     IP            NODE         NOMINATED NODE   READINESS GATES<br>nginx-deployment-56bd657787-4qvb6   1/1     Running   0          17m     10.244.1.11   k8s-node01   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-777rm   1/1     Running   0          17m     10.244.1.10   k8s-node01   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-78hq6   1/1     Running   0          2m36s   10.244.2.13   k8s-node02   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-86wzj   1/1     Running   0          2m36s   10.244.2.11   k8s-node02   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-98tn6   1/1     Running   0          2m36s   10.244.1.12   k8s-node01   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-9wnvc   1/1     Running   0          2m36s   10.244.1.13   k8s-node01   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-n5b9r   1/1     Running   0          2m36s   10.244.2.14   k8s-node02   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-phd6z   1/1     Running   0          2m36s   10.244.1.14   k8s-node01   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-rdzst   1/1     Running   0          2m36s   10.244.2.12   k8s-node02   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br>nginx-deployment-56bd657787-xbfqr   1/1     Running   0          9m4s    10.244.2.10   k8s-node02   <span class="hljs-variable">&lt;none&gt;</span>           <span class="hljs-variable">&lt;none&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、如果集群支持horizontal-pod-autoscaling-的话-还可以为Deployment设置自动扩展"><a href="#3、如果集群支持horizontal-pod-autoscaling-的话-还可以为Deployment设置自动扩展" class="headerlink" title="3、如果集群支持horizontal pod autoscaling 的话,还可以为Deployment设置自动扩展"></a>3、如果集群支持horizontal pod autoscaling 的话,还可以为Deployment设置自动扩展</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl autoscale deployment nginx-deployment <span class="hljs-attribute">--min</span>=10 <span class="hljs-attribute">--max</span>=15 <span class="hljs-attribute">--cpu-percent</span>=80<br></code></pre></td></tr></table></figure><h2 id="4、更新镜像也比较简单"><a href="#4、更新镜像也比较简单" class="headerlink" title="4、更新镜像也比较简单"></a>4、更新镜像也比较简单</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">set</span> image deployment/nginx-deployment <span class="hljs-attribute">nginx</span>=harborcloud.com/library/nginx:1.9.1<br></code></pre></td></tr></table></figure><h2 id="5、回滚"><a href="#5、回滚" class="headerlink" title="5、回滚"></a>5、回滚</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">[root@k8s-master01 data5]<span class="hljs-comment"># kubectl rollout undo deployment/nginx-deployment</span><br>deployment.apps/nginx-deployment rolled <span class="hljs-keyword">back</span><br></code></pre></td></tr></table></figure><h2 id="6、删除deployment"><a href="#6、删除deployment" class="headerlink" title="6、删除deployment"></a>6、删除deployment</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">kubectl <span class="hljs-keyword">delete</span> -f nginx-deployment.yaml <br></code></pre></td></tr></table></figure><h1 id="更新Deployment"><a href="#更新Deployment" class="headerlink" title="更新Deployment"></a>更新Deployment</h1><p>假如我们现在想要让nginx pod使用nginx:1.9.1的镜像来代替原来的nginx:1.7.9的镜像</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-built_in">set</span> image deployment/nginx-deployment <span class="hljs-attribute">nginx</span>=harborcloud.com/library/nginx:1.9.1<br></code></pre></td></tr></table></figure><p>可以使用 edit 命令来编辑Deployment</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-built_in">edit</span> deployment/nginx-deployment<br></code></pre></td></tr></table></figure><p>查看更新记录</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@k8s-master01</span> data5]<span class="hljs-comment"># kubectl rollout history deployment nginx-deployment</span><br>deployment.apps/nginx-deployment <br>REVISION  CHANGE-CAUSE<br>1         <span class="hljs-variable">&lt;none&gt;</span><br>2         <span class="hljs-variable">&lt;none&gt;</span><br></code></pre></td></tr></table></figure><p>查看rollout的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl rollout status deployment/nginx-deployment</span><br></code></pre></td></tr></table></figure><p>查看历史RS</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ kubectl <span class="hljs-built_in">get</span> rs<br></code></pre></td></tr></table></figure><p>回滚到指定版本 </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl rollout undo deployment nginx-deployment <span class="hljs-attribute">--to-revision</span>=2<br></code></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@k8s-master01</span> data5]<span class="hljs-comment"># kubectl rollout history deployment nginx-deployment</span><br>deployment.apps/nginx-deployment <br>REVISION  CHANGE-CAUSE<br>2         <span class="hljs-variable">&lt;none&gt;</span><br>3         <span class="hljs-variable">&lt;none&gt;</span><br><br>[root<span class="hljs-meta">@k8s-master01</span> data5]<span class="hljs-comment"># kubectl rollout undo deployment nginx-deployment --to-revision=2</span><br>deployment.apps/nginx-deployment rolled back<br>[root<span class="hljs-meta">@k8s-master01</span> data5]<span class="hljs-comment"># kubectl rollout history deployment nginx-deployment             </span><br>deployment.apps/nginx-deployment <br>REVISION  CHANGE-CAUSE<br>3         <span class="hljs-variable">&lt;none&gt;</span><br>4         <span class="hljs-variable">&lt;none&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Deployment-更新策略"><a href="#Deployment-更新策略" class="headerlink" title="Deployment 更新策略"></a>Deployment 更新策略</h1><p>Deployment 可以保证在升级时只有一定数量的Pod 是 down的。默认的,它会确保至少有比期望的Pod数量少一个是up状态(最多一个不可用)</p><p>Deployment同时也可以确保只创建出超过期望数量的一定数量的Pod。默认的,它会确保最多比期望的Pod数量多一个的Pod是up的(最多1个surge)<br>未来的Kuberentes版本中,将从1-1变成25%-25%</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>kubectl describe deployments<br></code></pre></td></tr></table></figure><h1 id="Rollover-多个rollout并行"><a href="#Rollover-多个rollout并行" class="headerlink" title="Rollover (多个rollout并行)"></a>Rollover (多个rollout并行)</h1><p>假如您创建了一个有5个niginx:1.7.9 replica的Deployment,但是当还只有3个nginx:1.7.9的replica创建出来的时候您就开始更新含有5个 nginx:1.9.1 replica的Deployment.在这种情况下, Deployment会立即杀掉已创建的3个nginx:1.7.9的Pod,并开始创建nginx:1.9.1的Pod。它不会等到所有的5个nginx:1.7.9的<br>Pod都创建完成后才开始改变航道</p><h1 id="回退Deployment"><a href="#回退Deployment" class="headerlink" title="回退Deployment"></a>回退Deployment</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl <span class="hljs-built_in">set</span> image deployment/nginx-deployment nginx=harborcloud.com/library/nginx:1.91<br>kubectl rollout status deployments nginx-deployment <span class="hljs-comment">## 回退状态</span><br>kubectl get pods<br>kubectl rollout <span class="hljs-built_in">history</span> deployment/nginx-deployment <span class="hljs-comment">## 历史 版本 </span><br>kubectl rollout undo deployment/nginx-deployment <span class="hljs-comment">##回退版本</span><br>kubectl rollout undo deployment/nginx-deployment --to-revision=2 <span class="hljs-comment">## 可以使用--revision参数指定某个历史版本</span><br>kubectl rollout pause deployment/nginx-deployment<span class="hljs-comment">## 暂停deployment更新</span><br></code></pre></td></tr></table></figure><p>您可以用 kubectl rollout status Deployment 是否完成。如果 rollout 成完成, kubectl rollout status将返回一个0值的Exit Code</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">kubectl rollout status deploy/nginx</span><br></code></pre></td></tr></table></figure><h1 id="清理Policy"><a href="#清理Policy" class="headerlink" title="清理Policy"></a>清理Policy</h1><p>您可以通过设置.spec. revisonHistoryLimit项来指定deployment 最多保留多少 revision历史记录。默认的会保留所有的revision;如果将该项设置为0, Deployment就不允许回退了</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes控制器DaemonSet</title>
    <link href="/2021/07/13/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/kubernetes%E6%8E%A7%E5%88%B6%E5%99%A8DaemonSet/"/>
    <url>/2021/07/13/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/kubernetes%E6%8E%A7%E5%88%B6%E5%99%A8DaemonSet/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是DaemonSet？"><a href="#什么是DaemonSet？" class="headerlink" title="什么是DaemonSet？"></a>什么是DaemonSet？</h1><p>DaemonSet 确保全部(或者一些) Node上运行一个Pod的副本。当有Node加入集群时,也会为他们新增一个Pod.当有Node从集群移除时,这些Pod也会被回收。删除DaemonSet将会删除它创建的所有Pod。</p><p>DaemonSet 的一些典型用法：</p><ul><li>在每个节点上运行集群守护进程，集群存储daemon,例如在每个Node上运行glusterd,ceph。</li><li>在每个节点上运行日志收集守护进程，例如fluentd,logstash。</li><li>在每个节点上运行监控守护进程，例如Prometheus Node Exporter, collectd, Datadog 代理、New Relic 代理,或 Ganglia gmond</li></ul><p>一种简单的用法是为每种类型的守护进程在所有的节点上都启动一个 DaemonSet。 一个稍微复杂的用法是为同一种守护进程部署多个 DaemonSet；每个具有不同的标志， 并且对不同硬件类型具有不同的内存、CPU 要求。 </p><h1 id="编写-DaemonSet-Spec"><a href="#编写-DaemonSet-Spec" class="headerlink" title="编写 DaemonSet Spec"></a>编写 DaemonSet Spec</h1><p>简单DaemonSet资源配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">deamonset-example</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">daemonset</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">deamonset-example</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">deamonset-example</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">daemonset-example</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">harborcloud.com/library/nginx:1.9.1</span><br></code></pre></td></tr></table></figure><p>详细 DaemonSet 资源配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-elasticsearch</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">fluentd-logging</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-elasticsearch</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-elasticsearch</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">tolerations:</span><br>      <span class="hljs-comment"># 这些容忍度设置是为了让该守护进程集在控制平面节点上运行</span><br>      <span class="hljs-comment"># 如果你不希望自己的控制平面节点运行 Pod，可以删除它们</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">node-role.kubernetes.io/control-plane</span><br>        <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>        <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">node-role.kubernetes.io/master</span><br>        <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>        <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">fluentd-elasticsearch</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">quay.io/fluentd_elasticsearch/fluentd:v2.5.2</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlog</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/log</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlibdockercontainers</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/docker/containers</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlog</span><br>        <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/var/log</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlibdockercontainers</span><br>        <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/docker/containers</span><br></code></pre></td></tr></table></figure><h2 id="仅在某些节点上运行-Pod"><a href="#仅在某些节点上运行-Pod" class="headerlink" title="仅在某些节点上运行 Pod"></a>仅在某些节点上运行 Pod</h2><p>如果指定了 .spec.template.spec.nodeSelector，DaemonSet 控制器将在能够与 Node 选择算符 匹配的节点上创建 Pod。 类似这种情况，可以指定 .spec.template.spec.affinity，之后 DaemonSet 控制器 将在能够与节点亲和性 匹配的节点上创建 Pod。 如果根本就没有指定，则 DaemonSet Controller 将在所有节点上创建 Pod</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubernetes基础控制器</title>
    <link href="/2021/06/30/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/kubernetes%E5%9F%BA%E7%A1%80%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    <url>/2021/06/30/k8s/k8s%E6%8E%A7%E5%88%B6%E5%99%A8/kubernetes%E5%9F%BA%E7%A1%80%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p><strong>ReplicationController</strong></p><p>ReplicationController 用来确保容器应用的副本数始终保持在用户定义的副本数,即如果有容器异常退出，会自动创建新的Pod来替代；而如果异常多出来的容器也会自动回收。<br>在新版本的Kubernetes 中建议使用ReplicaSet取代ReplicationController。</p><p><strong>ReplicaSet</strong></p><p>ReplicaSet 和ReplicationController 没有本质的不同,只是名字不一样,并且ReplicaSet支持集合式的selector<br>虽然ReplicaSet 可以独立使用，但一般还是建议使用Deployment来自动管理ReplicaSet ，这样就无需担心跟其他机制的不兼容问题(比如ReplicaSet不支持rolling-update，但Deployment 支持)</p><p><strong>Deployment</strong></p><p>Deployment Pod和ReplicaSet提供了一个声明式定义(declarative)方法,用来替代以前的ReplicationController来方便的管理应用。</p><p>Deployment 是Kubenetes v1.2 引入的新概念，引入的目的是为了更好的解决Pod 的编排问题，Deployment 内部使用了Replica Set 来实现。</p><p>典型的应用场景包括：</p><ul><li>定义Deployment 来创建Pod和ReplicaSet</li><li>滚动升级和回滚应用</li><li>扩容和缩容</li><li>暂停和继续Deployment</li></ul><p><strong>Horizontal Pod Autoscaling</strong></p><p>Horizontal Pod Autoscaling 仅适用于Deployment和ReplicaSet ,在V1版本中仅支持根据Pod的CPU利用率扩所容,在vlalpha版本中,支持根据内存和用户自定义的metric扩缩容。</p><p><strong>StatefulSet</strong></p><p>StatefulSet是为了解决有状态服务的问题(对应Deployments和ReplicaSets是为无状态服务而设计) ,其应用场景包括:</p><ul><li>稳定的持久化存储,即Pod重新调度后还是能访问到相同的持久化数据,基于PVC来实现</li><li>稳定的网络标志,即Pod重新调度后其PodName和HostNameT变,基于Headless Service(即没有Cluster IP的Service)来实现</li><li>有序部署,有序扩展,即Pod是有顺序的,在部署或者扩展的时候要依据定义的顺序依次依次进行(即从0到N-1,在下一个Pod运行之前所有之前的Pod必须都是Running和Ready状态)基于init containers来实现</li><li>有序收缩,有序删除(即从N-1到0)</li></ul><p><strong>DaemonSet</strong></p><p>DaemonSet确保全部(或者一些)Node上运行一个Pod的副本。当有Node加入集群时,也会为他们新增一个Pod。当有Node从集群移除时,这些Pod也会被回收。删除DaemonSet将会删除它创建的所有Pod<br>使用DaemonSet的一些典型用法:</p><ul><li>运行集群存储daemon,例如在每个Node上运行 glusterd,ceph.</li><li>在每个Node上运行日志收集daemon,例如fluentd、 logstash</li><li>在 Node上运行监控 daemon,例如Prometheus Node Exporter</li></ul><p><strong>Job</strong></p><p>Job负责批处理任务,即仅执行一次的任务,它保证批处理任务的一个或多个Pod成功结束</p><p>**Cron Job **</p><p>管理基于时间的Job,即:</p><ul><li>在给定时间点只运行一次</li><li>周期性地在给定时间点运行</li></ul>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos查看IPVS和安装IPVS</title>
    <link href="/2021/06/03/centos/IPVS%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%8E%9F%E7%90%86%E5%8F%8A%E5%B8%B8%E7%94%A8%E8%B0%83%E5%BA%A6%E6%96%B9%E5%BC%8F/"/>
    <url>/2021/06/03/centos/IPVS%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%8E%9F%E7%90%86%E5%8F%8A%E5%B8%B8%E7%94%A8%E8%B0%83%E5%BA%A6%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="IPVS的介绍与原理及常用调度方式"><a href="#IPVS的介绍与原理及常用调度方式" class="headerlink" title="IPVS的介绍与原理及常用调度方式"></a>IPVS的介绍与原理及常用调度方式</h1><h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p> IPVS (IP Virtual Server)是在 Netfilter 上层构建的，并作为 Linux 内核的一部分，实现传输层负载均衡。IPVS是LVS（Linux Virtual Server）项目重要组成部分，目前包含于官方Linux Kernel，IPVS也是一个开源软件。</p><p>IPVS的主要用途是为web服务器提供一个“前端”，处理入向连接请求。然后这些请求会发给各个http服务器来处理相应。IPVS本身就是填在linux内核中的应用，所以开销很小，性能也很好。</p><h1 id="二、工作原理"><a href="#二、工作原理" class="headerlink" title="二、工作原理"></a>二、工作原理</h1><p> IPVS通过建立一个或多个虚拟服务器来工作，它会将工作服务器都分配给该服务器，并为该服务器创建一个linux前端。这个linux前端将入向请求先聚集到该服务器，再将每个请求的负载分发给虚拟服务一部分。然后由这些服务器处理这些请求；加入到这个虚拟服务的工作服务器越来越多，每台服务器要处理的前端分配过来的请求就越少。</p><p>IPVS 集成在 LVS（Linux Virtual Server，Linux 虚拟服务器）中，它在主机上运行，并在物理服务器集群前作为负载均衡器。IPVS 可以将基于 TCP 和 UDP 服务的请求定向到真实服务器，并使真实服务器的服务在单个IP地址上显示为虚拟服务。</p><h1 id="三、IPVS常用的调度方式"><a href="#三、IPVS常用的调度方式" class="headerlink" title="三、IPVS常用的调度方式"></a>三、IPVS常用的调度方式</h1><p>1 基于轮询的调度方法</p><p> 这些调度方法将会以轮转的方式在服务器间分发连接。</p><p><strong>轮询调度rr</strong></p><p>工作机制：默认的调度算法，它会创建一个服务器序列，然后按序分配连接<br>优点：简单易懂，效率高。<br>缺点：未考虑服务器负载，所以可能一台服务器会因大量请求造成过载，而另一台高容量服务器处于空闲状态<br>适用情形：当你确信请求的复杂度相同时，这样，没有请求会给服务器带来很大的负载</p><p><strong>加权轮询调度wrr</strong></p><p>工作机制：所有工作服务器都会被预分配一个权值，权重越高服务器被认为处理更大负载。调度器会继续用轮询的方法，</p><p>按序向权值较高的服务器分配更多的负载<br>优点：采用同样的简单的轮询方法，但支持系统特定服务器分配更多负载。<br>缺点：需要用户驱动的加权，从而需要人工干预；没有考虑到不同的连接可能会带来不同的负载<br>适用情形：当你确信请求的复杂程度相同，并熟知每台服务器处理请求的能力时，这样，可以有效地分配权值，并高效地分发服务器负载.</p><p>2 基于最小连接的调度方法</p><p>调度方法会将连接分发给活动连接最小的工作服务器.</p><p><strong>最小连接调度lc</strong></p><p>工作机制：由连接数最小的服务器来处理下一个连接请求。<br>优点：平衡基于服务器上的实际连接数；减小了对有多个较长活动连接的单台服务器的依赖性。<br>缺点：未考虑每台服务器的处理能力，并熟知每天服务器处理请求的能力时，这样可以有效地分配权值，并高效地分发服务器负载。</p><p><strong>加权最小连接调度wlc</strong></p><p>工作机制：连接数最小、权重比最高的服务器处理下一个请求。它给出的算法是连接数除以权值<br>优点：平衡基于服务器上的实际连接数；减小了对有多个较长活动连接的单台服务器的依赖性；支持给服务器分配权重，又提供了一个一层可配置性。<br>缺点：需要人工干预权值;同时，在计算下个连接请求分给哪台服务器时开销也很大。<br>适用情形：当你确信请求的复杂相同，并熟知每天服务器处理请求的能力时。这样可以有效地分给权值，并高效分发服务器负载。</p><p>3 基于局部性的调度方法</p><p> 这种方法的基本原则是最小化服务器之间的共享缓存，从而避免增加服务器的负载。</p><p> <strong>基于局部性的最小连接调度lblc</strong></p><p> 工作机制：只要服务器没有过载并处于可用状态，便可将针对同一个终端用户的连接任务分配同一台服务器。否则，将它分配    给任务最少服务器。<br>优点：支持来自同一源ip地址的用户连到同一台主机上，从而避免加剧服务器端的负载；即这些用户使用的缓存数据不必复制到多台web服务器上。<br>缺点：由于nat技术的存在，单个ip地址背后可能有大量用户，可能会对单台服务器造成过载。<br>适用情形：当来自共享数据的同一ip的多个连接请求会给服务器带来大量的负载，比如出现庞大cookie或当量会话数据的情况。</p><h1 id="四、三种代理模式"><a href="#四、三种代理模式" class="headerlink" title="四、三种代理模式"></a>四、三种代理模式</h1><ul><li>VIP:virtual IP，LVS服务器上接收外网数据包的网卡IP地址。</li><li>DIP:director IP，LVS服务器上转发数据包到realserver的网卡IP地址。</li><li>RIP:realserver(常简称为RS)上接收Director转发数据包的IP，即提供服务的服务器IP。</li><li>CIP:客户端的IP。</li></ul><p>1 NAT</p><p>就是传统的NAT，进出流量都需要经过调度器，调度器会选择一个目的服务器，将进入流量的目标IP改写为负载均衡到的目标服务器，同时源IP地址也会改为调度器IP地址。</p><p>保留IP地址（10.0.0.0/255.0.0.0、172.16.0.0/255.128.0.0和192.168.0.0/255.255.0.0）[64, 65, 66]，这些地址不在Internet上使用，而是专门为内部网络预留的。当内部网络中的主机要访问Internet或被Internet访问时，就需要采用网络地址转换（Network Address Translation, 以下简称NAT），将内部地址转化为Internets上可用的外部地址。</p><p>NAT的工作原理是报文头（目标地址、源地址和端口等）被正确改写后，客户相信它们连接一个IP地址，而不同IP地址的服务器组也认为它们是与客户直接相连的。由此，可以用NAT方法将不同IP地址的并行网络服务变成在一个IP地址上的一个虚拟服务。</p><p>VS/NAT的体系结构如下图所示。在一组服务器前有一个调度器，它们是通过Switch/HUB相连接的（意思就是说真实服务器可以和IPVS负载均衡器不处于同一个子网）。这些服务器提供相同的网络服务、相同的内容，即不管请求被发送到哪一台服务器，执行结果是一样的。服务的内容可以复制到每台服务器的本地硬盘上，可以通过网络文件系统（如NFS）共享，也可以通过一个分布式文件系统来提供。</p><img src="/2021/06/03/centos/IPVS%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%8E%9F%E7%90%86%E5%8F%8A%E5%B8%B8%E7%94%A8%E8%B0%83%E5%BA%A6%E6%96%B9%E5%BC%8F/vs-nat.jpg" class="" title="img">nat<p>2 VS/TUN模式</p><p>采用NAT技术时，由于请求和响应报文都必须经过调度器地址重写，当客户请求越来越多时，调度器的处理能力将成为瓶颈。为了解决这个问题，调度器把请求报文通过IP隧道转发至真实服务器，而真实服务器将响应直接返回给客户，所以调度器只处理请求报文。由于一般网络服务响应报文比请求报文大许多，采用VS/TUN技术后，调度器得到极大的解放。</p><img src="/2021/06/03/centos/IPVS%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%8E%9F%E7%90%86%E5%8F%8A%E5%B8%B8%E7%94%A8%E8%B0%83%E5%BA%A6%E6%96%B9%E5%BC%8F/image-23.png" class="" title="img"><p>3 VS/TUN</p><p>VS/TUN模式下，调度器对数据包的处理是使用IP隧道技术进行二次封装。VS/DR模式和VS/TUN模式很类似，只不过调度器对数据包的处理是改写数据帧的目标MAC地址，通过链路层来负载均衡。</p><img src="/2021/06/03/centos/IPVS%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%8E%9F%E7%90%86%E5%8F%8A%E5%B8%B8%E7%94%A8%E8%B0%83%E5%BA%A6%E6%96%B9%E5%BC%8F/image-24.png" class="" title="img"><h1 id="五、ipvs模式和iptables模式的区别"><a href="#五、ipvs模式和iptables模式的区别" class="headerlink" title="五、ipvs模式和iptables模式的区别"></a>五、ipvs模式和iptables模式的区别</h1><p>1  ipvs模式的扩展性和性能更好</p><p>以ipvs依赖iptables的场景来说明，ipvs使用ipset来存储流量的源或目标地址，而ipset使用哈希表作为基础数据结构，这样可以确保iptables规则的数量是恒定的。iptables模式下针对不同ip需要一条一条地添加规则，但对于ipset只需要将对应的ip加入到ipset集合中即可，因此iptables规则可以保持不变，数量也很少。</p><p> IPVS 专门用于负载均衡，并使用更高效的数据结构（哈希表），允许几乎无限的规模扩张。</p><p>2 ipvs模式支持更多调度算法</p><p>如上面 ”三、IPVS常用的调度方式“</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos</tag>
      
      <tag>ipvs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos查看IPVS和安装IPVS</title>
    <link href="/2021/06/03/centos/Centos%E6%9F%A5%E7%9C%8BIPVS%E5%92%8C%E5%AE%89%E8%A3%85IPVS/"/>
    <url>/2021/06/03/centos/Centos%E6%9F%A5%E7%9C%8BIPVS%E5%92%8C%E5%AE%89%E8%A3%85IPVS/</url>
    
    <content type="html"><![CDATA[<h1 id="一、查看IPVS"><a href="#一、查看IPVS" class="headerlink" title="一、查看IPVS"></a>一、查看IPVS</h1><p>检查IPVS是否正确安装</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">lsmod | <span class="hljs-keyword">grep</span> ip_vs 或 <span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> ip_vs<br></code></pre></td></tr></table></figure><p>查看内核有哪些模块</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">insmod / modprobe 加载驱动<br>rmmod 卸载驱动<br>lsmod 查看系统中所有已经被加载了的所有的模块以及模块 间的依赖关系<br>modinfo 获得模块的信息 查看已经加载的驱动模块的信息： lsmod 能够显示驱动的大小以及被谁使用<br><br>cat <span class="hljs-regexp">/proc/m</span>odules 能够显示驱动模块大小、在内核空间中的地址<br>cat <span class="hljs-regexp">/proc/</span>devices 只显示驱动的主设备号，且是分类显示<br><span class="hljs-regexp">/sys/m</span>odules 下面存在对应的驱动的目录，目录下包含驱动的分段信息等等。<br></code></pre></td></tr></table></figure><h1 id="二、安装IPVS"><a href="#二、安装IPVS" class="headerlink" title="二、安装IPVS"></a>二、安装IPVS</h1><p>Centos7已经自带了LVS，因此只需要安装LVS管理程序 ipvsadm(理解为ipvs admin)并配置即可。</p><p>安装前查看</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-node01 ~]<span class="hljs-comment"># lsmod | grep ip_</span><br>ip_set                <span class="hljs-number"> 45799 </span><span class="hljs-number"> 0 </span><br>ip_tables             <span class="hljs-number"> 27126 </span><span class="hljs-number"> 5 </span>iptable_security,iptable_filter,iptable_mangle,iptable_nat,iptable_raw<br></code></pre></td></tr></table></figure><p>开始安装</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gradle">yum install ipset ipvsadm -y <br>ipvsadm -l -n<br><br>cat &gt;&gt; <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/modules/i</span>pvs.modules &lt;&lt; EOF<br>#!<span class="hljs-regexp">/bin/</span>bash<br>modprobe -- ip_vs<br>modprobe -- ip_vs_sh<br>modprobe -- ip_vs_rr<br>modprobe -- ip_vs_wrr<br>modprobe -- nf_conntrack_ipv4<br>EOF<br><br>chmod +x <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/modules/i</span>pvs.modules<br>sh <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/modules/i</span>pvs.modules<br></code></pre></td></tr></table></figure><p>安装后查看</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-node02 ~]<span class="hljs-comment"># lsmod | grep ip_</span><br>ip_set                <span class="hljs-number"> 45799 </span><span class="hljs-number"> 0 </span><br>ip_vs_wrr             <span class="hljs-number"> 12697 </span><span class="hljs-number"> 0 </span><br>ip_vs_rr              <span class="hljs-number"> 12600 </span><span class="hljs-number"> 0 </span><br>ip_vs_sh              <span class="hljs-number"> 12688 </span><span class="hljs-number"> 0 </span><br>ip_vs                <span class="hljs-number"> 145458 </span><span class="hljs-number"> 6 </span>ip_vs_rr,ip_vs_sh,ip_vs_wrr<br>nf_conntrack         <span class="hljs-number"> 139264 </span><span class="hljs-number"> 7 </span>ip_vs,nf_nat,nf_nat_ipv4,nf_nat_ipv6,xt_conntrack,nf_conntrack_ipv4,nf_conntrack_ipv6<br>ip_tables             <span class="hljs-number"> 27126 </span><span class="hljs-number"> 5 </span>iptable_security,iptable_filter,iptable_mangle,iptable_nat,iptable_raw<br>libcrc32c             <span class="hljs-number"> 12644 </span><span class="hljs-number"> 4 </span>xfs,ip_vs,nf_nat,nf_conntrack<br></code></pre></td></tr></table></figure><h1 id="三、ipvsadm-命令详解"><a href="#三、ipvsadm-命令详解" class="headerlink" title="三、ipvsadm 命令详解"></a>三、ipvsadm 命令详解</h1><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-C 清除表中所有的记录</span><br><span class="hljs-deletion">-A --add-service在服务器列表中新添加一条新的虚拟服务器记录</span><br><span class="hljs-deletion">-t 表示为tcp服务</span><br><span class="hljs-deletion">-u 表示为udp服务</span><br><span class="hljs-deletion">-s --scheduler 使用的调度算法， rr | wrr | lc | wlc | lblb | lblcr | dh | sh | sed | nq 默认调度算法是 wlc</span><br>ipvsadm -a -t 192.168.3.187:80 -r 192.168.200.10:80 -m -w 1<br><span class="hljs-deletion">-a --add-server 在服务器表中添加一条新的真实主机记录</span><br><span class="hljs-deletion">-t --tcp-service 说明虚拟服务器提供tcp服务</span><br><span class="hljs-deletion">-u --udp-service 说明虚拟服务器提供udp服务</span><br><span class="hljs-deletion">-r --real-server 真实服务器地址</span><br><span class="hljs-deletion">-m --masquerading 指定LVS工作模式为NAT模式</span><br><span class="hljs-deletion">-w --weight 真实服务器的权值</span><br><span class="hljs-deletion">-g --gatewaying 指定LVS工作模式为直接路由器模式（也是LVS默认的模式）</span><br><span class="hljs-deletion">-i --ipip 指定LVS的工作模式为隧道模式</span><br><span class="hljs-deletion">-p 会话保持时间，定义流量呗转到同一个realserver的会话存留时间</span><br></code></pre></td></tr></table></figure><h1 id="四、查看ipvs的路由转发"><a href="#四、查看ipvs的路由转发" class="headerlink" title="四、查看ipvs的路由转发"></a>四、查看ipvs的路由转发</h1><p>iptables查看</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">iptables -t nat -nvL</span><br></code></pre></td></tr></table></figure><p>ipvsadm -Ln</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@k8s-master01 data5]<span class="hljs-comment"># ipvsadm -Ln</span><br>IP Virtual Server version 1.2.1 (size=4096)<br>Prot LocalAddress:Port Scheduler Flags<br>  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn<br>TCP  10.96.0.1:443 rr<br>  -&gt; 10.0.0.10:6443               Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 3 </span>        <span class="hljs-number"> 0 </span>        <br>TCP  10.96.0.10:53 rr<br>  -&gt; 10.244.0.12:53               Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>        <span class="hljs-number"> 0 </span>        <br>  -&gt; 10.244.0.13:53               Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>        <span class="hljs-number"> 0 </span>        <br>TCP  10.96.0.10:9153 rr<br>  -&gt; 10.244.0.12:9153             Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>        <span class="hljs-number"> 0 </span>        <br>  -&gt; 10.244.0.13:9153             Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>        <span class="hljs-number"> 0 </span>        <br>UDP  10.96.0.10:53 rr<br>  -&gt; 10.244.0.12:53               Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>        <span class="hljs-number"> 0 </span>        <br>  -&gt; 10.244.0.13:53               Masq   <span class="hljs-number"> 1 </span>    <span class="hljs-number"> 0 </span>        <span class="hljs-number"> 0 </span> <br></code></pre></td></tr></table></figure><p><strong>ipvsadm -Ln  –rate</strong> </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master01 ~]# ipvsadm -Ln --rate<span class="hljs-built_in"></span><br><span class="hljs-built_in">IP </span>Virtual<span class="hljs-built_in"> Server </span>version 1.2.1 (<span class="hljs-attribute">size</span>=4096)<br>Prot LocalAddress:Port                 CPS    InPPS   OutPPS    InBPS   OutBPS<br>  -&gt; RemoteAddress:Port<br></code></pre></td></tr></table></figure><p>–rate选项是显示速率信息</p><ul><li>CPS （current connection rate） 每秒连接数</li><li>InPPS （current in packet rate） 每秒的入包个数</li><li>OutPPS （current out packet rate） 每秒的出包个数</li><li>InBPS （current in byte rate） 每秒入流量（字节）</li><li>OutBPS （current out byte rate） 每秒入流量（字节）</li></ul><p><strong>ipvsadm -L –stats</strong> </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@k8s-master01 ~]# ipvsadm -L --stats<span class="hljs-built_in"></span><br><span class="hljs-built_in">IP </span>Virtual<span class="hljs-built_in"> Server </span>version 1.2.1 (<span class="hljs-attribute">size</span>=4096)<br>Prot LocalAddress:Port               Conns   InPkts  OutPkts  InBytes OutBytes<br>  -&gt; RemoteAddress:Port<br></code></pre></td></tr></table></figure><p>–stats 选项是统计自该条转发规则生效以来的</p><ul><li>Conns （connections scheduled） 已经转发过的连接数</li><li>InPkts （incoming packets） 入包个数</li><li>OutPkts （outgoing packets） 出包个数</li><li>InBytes （incoming bytes） 入流量（字节）</li><li>OutBytes （outgoing bytes） 出流量（字节）</li></ul>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos</tag>
      
      <tag>ipvs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>keepalived+haproxy高可用负载均衡</title>
    <link href="/2021/05/06/centos/keepalived+haproxy/keepalived+haproxy%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <url>/2021/05/06/centos/keepalived+haproxy/keepalived+haproxy%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="一、keepalived简介"><a href="#一、keepalived简介" class="headerlink" title="一、keepalived简介"></a>一、keepalived简介</h1><p>Keepalived是基于vrrp协议的一款高可用软件。Keepailived有一台主服务器和多台备份服务器，在主服务器和备份服务器上面部署相同的服务配置，使用一个虚拟IP地址对外提供服务，当主服务器出现故障时，虚拟IP地址会自动漂移到备份服务器。</p><h1 id="二、keepalived工作原理"><a href="#二、keepalived工作原理" class="headerlink" title="二、keepalived工作原理"></a>二、keepalived工作原理</h1><p>keepalived是以VRRP协议为实现基础的。</p><p>VRRP（Virtual Router Redundancy Protocol，虚拟路由器冗余协议），VRRP是为了解决静态路由的高可用。VRRP的基本架构虚拟路由器由多个路由器组成，每个路由器都有各自的IP和共同的VRID(0-255)，其中一个VRRP路由器通过竞选成为MASTER，占有VIP，对外提供路由服务，其他成为BACKUP，MASTER以IP组播（组播地址：224.0.0.18）形式发送VRRP协议包，与BACKUP保持心跳连接，若MASTER不可用（或BACKUP接收不到VRRP协议包），则BACKUP通过竞选产生新的MASTER并继续对外提供路由服务，从而实现高可用。</p><p>keepalived主要有三个模块，分别是core、check和vrrp。core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。check负责健康检查，包括常见的各种检查方式。vrrp模块是来实现VRRP协议的。 </p><h1 id="三、HAProxy简介"><a href="#三、HAProxy简介" class="headerlink" title="三、HAProxy简介"></a>三、HAProxy简介</h1><p>HAProxy是一个免费的负载均衡软件，可以运行于大部分主流的Linux操作系统上。</p><p>HAProxy提供了L4(TCP)和L7(HTTP)两种负载均衡能力，具备丰富的功能。HAProxy的社区非常活跃，版本更新快速。最关键的是，HAProxy具备媲美商用负载均衡器的性能和稳定性。</p><p>HAProxy如今已成为免费负载均衡软件的首选 ，特别是keepalived+haproxy这套组合已经成为高可用的推荐方案了。</p><h1 id="四、HAProxy的核心功能"><a href="#四、HAProxy的核心功能" class="headerlink" title="四、HAProxy的核心功能"></a>四、HAProxy的核心功能</h1><ul><li>负载均衡：L4和L7两种模式，支持RR/静态RR/LC/IP Hash/URI Hash/URL_PARAM Hash/HTTP_HEADER Hash等丰富的负载均衡算法</li><li>健康检查：支持TCP和HTTP两种健康检查模式</li><li>会话保持：对于未实现会话共享的应用集群，可通过Insert Cookie/Rewrite Cookie/Prefix Cookie，以及上述的多种Hash方式实现会话保持</li><li>SSL：HAProxy可以解析HTTPS协议，并能够将请求解密为HTTP后向后端传输</li><li>HTTP请求重写与重定向</li><li>监控与统计：HAProxy提供了基于Web的统计信息页面，展现健康状态和流量数据。基于此功能，使用者可以开发监控程序来监控HAProxy的状态</li></ul><h1 id="五、HAProxy的关键特性"><a href="#五、HAProxy的关键特性" class="headerlink" title="五、HAProxy的关键特性"></a>五、HAProxy的关键特性</h1><ul><li>采用单线程、事件驱动、非阻塞模型，减少上下文切换的消耗，能在1ms内处理数百个请求。并且每个会话只占用数KB的内存。</li><li>大量精细的性能优化，如O(1)复杂度的事件检查器、延迟更新技术、Single-buffereing、Zero-copy forwarding等等，这些技术使得HAProxy在中等负载下只占用极低的CPU资源。</li><li>HAProxy大量利用操作系统本身的功能特性，使得其在处理请求时能发挥极高的性能，通常情况下，HAProxy自身只占用15%的处理时间，剩余的85%都是在系统内核层完成的。</li><li>HAProxy作者在8年前（2009）年使用1.4版本进行了一次测试，单个HAProxy进程的处理能力突破了10万请求/秒，并轻松占满了10Gbps的网络带宽。</li></ul><h1 id="六-、keepalived与HAProxy安装"><a href="#六-、keepalived与HAProxy安装" class="headerlink" title="六 、keepalived与HAProxy安装"></a>六 、keepalived与HAProxy安装</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y keepalived<br>yum <span class="hljs-keyword">install</span> -y haproxy<br></code></pre></td></tr></table></figure><h1 id="七、keepalived配置文件"><a href="#七、keepalived配置文件" class="headerlink" title="七、keepalived配置文件"></a>七、keepalived配置文件</h1><p>/etc/keepalived/keepalived.conf  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs awk">! Configuration File <span class="hljs-keyword">for</span> keepalived<br><br>global_defs &#123;<span class="hljs-comment">#global_defs区域，主要是配置故障发生时的通知对象以及机器标识</span><br>   notification_email &#123; <span class="hljs-comment">#notification_email 故障发生时给谁发邮件通知。</span><br>     acassen@firewall.loc<br>     failover@firewall.loc<br>     sysadmin@firewall.loc<br>   &#125;<br>   notification_email_from Alexandre.Cassen@firewall.loc <span class="hljs-comment">#notification_email_from 通知邮件从哪个地址发出。</span><br>   smtp_server <span class="hljs-number">192.168</span>.<span class="hljs-number">200.1</span> <span class="hljs-comment">#smpt_server 通知邮件的smtp地址。</span><br>   smtp_connect_timeout <span class="hljs-number">30</span> <span class="hljs-comment">#smtp_connect_timeout 连接smtp服务器的超时时间。</span><br>   router_id LVS_DEVEL <span class="hljs-comment">#router_id 标识本节点的字条串，通常为hostname，但不一定非得是hostname。故障发生时，邮件通知会用到。</span><br>   vrrp_skip_check_adv_addr <br>   vrrp_strict<br>   vrrp_garp_interval <span class="hljs-number">0</span><br>   vrrp_gna_interval <span class="hljs-number">0</span><br>&#125;<br><br>vrrp_instance VI_1 &#123;<span class="hljs-comment">#vrrp_instance用来定义对外提供服务的VIP区域及其相关属性。</span><br>    state MASTER <span class="hljs-comment">#可以是MASTER或BACKUP，不过当其他节点keepalived启动时会将priority比较大的节点选举为MASTER，因此该项其实没有实质用途。</span><br>    interface eth0 <span class="hljs-comment">#节点固有IP（非VIP）的网卡，用来发VRRP包。</span><br>    virtual_router_id <span class="hljs-number">51</span> <span class="hljs-comment">#virtual_router_id 取值在0-255之间，用来区分多个instance的VRRP组播。</span><br>    priority <span class="hljs-number">100</span>  <span class="hljs-comment">#用来选举master的，要成为master，那么这个选项的值最好高于其他机器50个点，该项取值范围是1-255（在此范围之外会被识别成默认值100）。</span><br>    advert_int <span class="hljs-number">1</span> <span class="hljs-comment">#advert_int 发VRRP包的时间间隔，即多久进行一次master选举（可以认为是健康查检时间间隔）。</span><br>    authentication &#123;<span class="hljs-comment">#authentication 认证区域，认证类型有PASS和HA（IPSEC），推荐使用PASS（密码只识别前8位）</span><br>        auth_type PASS<br>        auth_pass <span class="hljs-number">1111</span><br>    &#125;<br>    virtual_ipaddress &#123; <span class="hljs-comment">#vip,虚拟IP地址池，可以有多个IP，每个IP占一行，不需要指定子网掩码。注意：这个IP必须与我们的设定的vip保持一致。</span><br>        <span class="hljs-number">192.168</span>.<span class="hljs-number">200.16</span><br>        <span class="hljs-number">192.168</span>.<span class="hljs-number">200.17</span><br>        <span class="hljs-number">192.168</span>.<span class="hljs-number">200.18</span><br>    &#125;<br>&#125;<br><br>virtual_server <span class="hljs-number">192.168</span>.<span class="hljs-number">200.100</span> <span class="hljs-number">443</span> &#123;  <span class="hljs-regexp">//</span>VIP地址，要和vrrp_instance模块中的                virtual_ipaddress地址一致<br>    delay_loop <span class="hljs-number">6</span> <span class="hljs-comment"># 健康检查时间间隔 延迟轮询时间（单位秒）</span><br>    lb_algo rr <span class="hljs-comment">#lvs调度算法rr|wrr|lc|wlc|lblc|sh|dh </span><br>    lb_kind NAT <span class="hljs-comment">#负载均衡转发规则NAT|DR|RUN </span><br>    persistence_timeout <span class="hljs-number">50</span><span class="hljs-comment">#会话保持时间 </span><br>    protocol TCP<span class="hljs-comment">#使用的协议 </span><br><br>    real_server <span class="hljs-number">192.168</span>.<span class="hljs-number">201.100</span> <span class="hljs-number">443</span> &#123;<span class="hljs-comment">#真正提供服务的服务器。</span><br>        weight <span class="hljs-number">1</span> <span class="hljs-comment">#权重</span><br>        SSL_GET &#123;<br>            url &#123;<br>              path / <span class="hljs-comment">#path 请求real serserver上的路径。</span><br>              digest ff20ad2481f97b1754ef3e12ecd3a9cc <span class="hljs-comment">#digest/status_code 分别表示用genhash算出的结果和http状态码。genhash -s 10.0.0.102 -p 80 -u /hello</span><br>            &#125;<br>            url &#123;<br>              path <span class="hljs-regexp">/mrtg/</span><br>              digest <span class="hljs-number">9</span>b3a0c85a887a256d6939da88aabd8cd<br>            &#125;<br>            connect_timeout <span class="hljs-number">3</span><br>            nb_get_retry <span class="hljs-number">3</span><br>            delay_before_retry <span class="hljs-number">3</span><br>        &#125;<br>    &#125;<br>&#125;<br>virtual_server <span class="hljs-number">10.10</span>.<span class="hljs-number">10.2</span> <span class="hljs-number">1358</span> &#123;  <span class="hljs-regexp">//</span>VIP地址，要和vrrp_instance模块中的                virtual_ipaddress地址一致<br>    delay_loop <span class="hljs-number">6</span><br>    lb_algo rr<br>    lb_kind NAT<br>    persistence_timeout <span class="hljs-number">50</span><br>    protocol TCP<br><br>    sorry_server <span class="hljs-number">192.168</span>.<span class="hljs-number">200.200</span> <span class="hljs-number">1358</span> <span class="hljs-comment">#当所有real server宕掉时，sorry server顶替。</span><br><br>    real_server <span class="hljs-number">192.168</span>.<span class="hljs-number">200.2</span> <span class="hljs-number">1358</span> &#123;<br>        weight <span class="hljs-number">1</span><br>        HTTP_GET &#123;<br>            url &#123;<br>              path <span class="hljs-regexp">/testurl/</span>test.jsp<br>              digest <span class="hljs-number">640205</span>b7b0fc66c1ea91c463fac6334d<br>            &#125;<br>            url &#123;<br>              path <span class="hljs-regexp">/testurl2/</span>test.jsp<br>              digest <span class="hljs-number">640205</span>b7b0fc66c1ea91c463fac6334d<br>            &#125;<br>            url &#123;<br>              path <span class="hljs-regexp">/testurl3/</span>test.jsp<br>              digest <span class="hljs-number">640205</span>b7b0fc66c1ea91c463fac6334d<br>            &#125;<br>            connect_timeout <span class="hljs-number">3</span><br>            nb_get_retry <span class="hljs-number">3</span><br>            delay_before_retry <span class="hljs-number">3</span><br>        &#125;<br>    &#125;<br><br>    real_server <span class="hljs-number">192.168</span>.<span class="hljs-number">200.3</span> <span class="hljs-number">1358</span> &#123;<br>        weight <span class="hljs-number">1</span><br>        HTTP_GET &#123;<br>            url &#123;<br>              path <span class="hljs-regexp">/testurl/</span>test.jsp<br>              digest <span class="hljs-number">640205</span>b7b0fc66c1ea91c463fac6334c<br>            &#125;<br>            url &#123;<br>              path <span class="hljs-regexp">/testurl2/</span>test.jsp<br>              digest <span class="hljs-number">640205</span>b7b0fc66c1ea91c463fac6334c<br>            &#125;<br>            connect_timeout <span class="hljs-number">3</span><br>            nb_get_retry <span class="hljs-number">3</span><br>            delay_before_retry <span class="hljs-number">3</span><br>        &#125;<br>    &#125;<br>&#125;<br>virtual_server <span class="hljs-number">10.10</span>.<span class="hljs-number">10.3</span> <span class="hljs-number">1358</span> &#123;<br>    delay_loop <span class="hljs-number">3</span><br>    lb_algo rr<br>    lb_kind NAT<br>    persistence_timeout <span class="hljs-number">50</span><br>    protocol TCP<br><br>    real_server <span class="hljs-number">192.168</span>.<span class="hljs-number">200.4</span> <span class="hljs-number">1358</span> &#123;<br>        weight <span class="hljs-number">1</span><br>        HTTP_GET &#123;<br>            url &#123;<br>              path <span class="hljs-regexp">/testurl/</span>test.jsp<br>              digest <span class="hljs-number">640205</span>b7b0fc66c1ea91c463fac6334d<br>            &#125;<br>            url &#123;<br>              path <span class="hljs-regexp">/testurl2/</span>test.jsp<br>              digest <span class="hljs-number">640205</span>b7b0fc66c1ea91c463fac6334d<br>            &#125;<br>            url &#123;<br>              path <span class="hljs-regexp">/testurl3/</span>test.jsp<br>              digest <span class="hljs-number">640205</span>b7b0fc66c1ea91c463fac6334d<br>            &#125;<br>            connect_timeout <span class="hljs-number">3</span><br>            nb_get_retry <span class="hljs-number">3</span><br>            delay_before_retry <span class="hljs-number">3</span><br>        &#125;<br>    &#125;<br><br>    real_server <span class="hljs-number">192.168</span>.<span class="hljs-number">200.5</span> <span class="hljs-number">1358</span> &#123;<br>        weight <span class="hljs-number">1</span><br>        HTTP_GET &#123;<br>            url &#123;<br>              path <span class="hljs-regexp">/testurl/</span>test.jsp<br>              digest <span class="hljs-number">640205</span>b7b0fc66c1ea91c463fac6334d<br>            &#125;<br>            url &#123;<br>              path <span class="hljs-regexp">/testurl2/</span>test.jsp<br>              digest <span class="hljs-number">640205</span>b7b0fc66c1ea91c463fac6334d<br>            &#125;<br>            url &#123;<br>              path <span class="hljs-regexp">/testurl3/</span>test.jsp<br>              digest <span class="hljs-number">640205</span>b7b0fc66c1ea91c463fac6334d<br>            &#125;<br>            connect_timeout <span class="hljs-number">3</span><br>            nb_get_retry <span class="hljs-number">3</span><br>            delay_before_retry <span class="hljs-number">3</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="static-ipaddress和static-routes区域"><a href="#static-ipaddress和static-routes区域" class="headerlink" title="static_ipaddress和static_routes区域"></a>static_ipaddress和static_routes区域</h3><p>static_ipaddress和static_routes区域配置的是是本节点的IP和路由信息。如果你的机器上已经配置了IP和路由，那么这两个区域可以不用配置。</p><h3 id="virtual-server-group和virtual-server区域"><a href="#virtual-server-group和virtual-server区域" class="headerlink" title="virtual_server_group和virtual_server区域"></a>virtual_server_group和virtual_server区域</h3><p>virtual_server_group一般在超大型的LVS中用到</p><ul><li> virtualhost 用来给HTTP_GET和SSL_GET配置请求header的。 </li><li>notify_up/down 当real server宕掉或启动时执行的脚本。 </li><li>健康检查的方式，N多种方式。 </li><li>connect_port 健康检查，如果端口通则认为服务器正常。 </li><li>connect_timeout,nb_get_retry,delay_before_retry分别表示超时时长、重试次数，下次重试的时间延迟。 </li></ul><h3 id="vrrp-script区域"><a href="#vrrp-script区域" class="headerlink" title="vrrp_script区域"></a>vrrp_script区域</h3><p>用来做健康检查的，当时检查失败时会将<code>vrrp_instance</code>的<code>priority</code>减少相应的值。 </p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">vrrp_script</span> chk_http_<span class="hljs-keyword">port</span> &#123;<br>    script <span class="hljs-string">&quot;&lt;/dev/tcp/127.0.0.1/80&quot;</span><br>    interval <span class="hljs-number">1</span><br>    weight <span class="hljs-number">-10</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="配置文件ip作用"><a href="#配置文件ip作用" class="headerlink" title="配置文件ip作用"></a>配置文件ip作用</h2><p>服务启动前</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>: eno16777736: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">53</span>:<span class="hljs-number">83</span>:ed brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.0.0.101</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.0.0.255</span> scope global noprefixroute eno16777736<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fd56:a9ae:cb0f::c0f/<span class="hljs-number">128</span> scope global noprefixroute dynamic <br>       <span class="hljs-attribute">valid_lft</span> <span class="hljs-number">39757</span>sec preferred_lft <span class="hljs-number">39757</span>sec<br>    <span class="hljs-attribute">inet6</span> fd56:a9ae:cb0f:<span class="hljs-number">0</span>:<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe53:<span class="hljs-number">83</span>ed/<span class="hljs-number">64</span> scope global noprefixroute <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fe80::<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe53:<span class="hljs-number">83</span>ed/<span class="hljs-number">64</span> scope link noprefixroute <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br></code></pre></td></tr></table></figure><p>服务启动后</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>: eno16777736: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="hljs-number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="hljs-number">1000</span><br>    <span class="hljs-attribute">link</span>/ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">53</span>:<span class="hljs-number">83</span>:ed brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">10.0.0.101</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.0.0.255</span> scope global noprefixroute eno16777736<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">192.168.200.16</span>/<span class="hljs-number">32</span> scope global eno16777736<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">192.168.200.17</span>/<span class="hljs-number">32</span> scope global eno16777736<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet</span> <span class="hljs-number">192.168.200.18</span>/<span class="hljs-number">32</span> scope global eno16777736<br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fd56:a9ae:cb0f::c0f/<span class="hljs-number">128</span> scope global noprefixroute dynamic <br>       <span class="hljs-attribute">valid_lft</span> <span class="hljs-number">39636</span>sec preferred_lft <span class="hljs-number">39636</span>sec<br>    <span class="hljs-attribute">inet6</span> fd56:a9ae:cb0f:<span class="hljs-number">0</span>:<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe53:<span class="hljs-number">83</span>ed/<span class="hljs-number">64</span> scope global noprefixroute <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br>    <span class="hljs-attribute">inet6</span> fe80::<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe53:<span class="hljs-number">83</span>ed/<span class="hljs-number">64</span> scope link noprefixroute <br>       <span class="hljs-attribute">valid_lft</span> forever preferred_lft forever<br></code></pre></td></tr></table></figure><h1 id="八、haproxy配置文件"><a href="#八、haproxy配置文件" class="headerlink" title="八、haproxy配置文件"></a>八、haproxy配置文件</h1><p><strong>/etc/haproxy/haproxy.cfg</strong> </p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment">#全局配置</span><br>global<br>    log         127.0.0.1 local2 <br><br>    chroot      /var/lib/haproxy<br>    pidfile     /var/run/haproxy.pid<br>    maxconn     4000 <br>    user        haproxy<br>    group       haproxy<br>    daemon<br><br>    <span class="hljs-comment"># turn on stats unix socket</span><br>    stats socket /var/lib/haproxy/stats<br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># common defaults that all the &#x27;listen&#x27; and &#x27;backend&#x27; sections will</span><br><span class="hljs-comment"># use if not designated in their block</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br>defaults<br>    mode                    http <span class="hljs-comment">#模式为http</span><br>    log                     global <span class="hljs-comment">#日志记录为全局的设置</span><br>    option                  httplog <span class="hljs-comment">#记录访问日志</span><br>    option                  dontlognull<br>    option http-server-close<br>    option forwardfor       except 127.0.0.0/8<br>    option                  redispatch<br>    retries                 3<br>    timeout http-request    10s  <span class="hljs-comment">#从连接创建开始到从客户端读取完整HTTP请求的超时时间，用于避免类DoS攻击</span><br>    timeout queue           1m<br>    timeout connect         10s<br>    timeout client          1m<br>    timeout server          1m<br>    timeout http-keep-alive 10s <br>    timeout<span class="hljs-built_in"> check </span>          10s<br>    maxconn                 3000 <span class="hljs-comment">#最大的连接数为3000</span><br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># main frontend which proxys to the backends</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br>frontend  main *:5000<br>    acl url_static       path_beg       -i /static /images /javascript /stylesheets<br>    acl url_static       path_end       -i .jpg .gif .png .css .js<br><br>    use_backend<span class="hljs-keyword"> static</span>         <span class="hljs-built_in"> if </span>url_static<br>    default_backend             app<br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># static backend for serving up images, stylesheets and such</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br>backend<span class="hljs-keyword"> static</span> <br>    balance     roundrobin <span class="hljs-comment">#负载均衡模式为轮询</span><br>    server     <span class="hljs-keyword"> static</span> 127.0.0.1:4331<span class="hljs-built_in"> check </span><br><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># round robin balancing between the various backends</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br>backend app<br>    balance     roundrobin<br>    server  app1 127.0.0.1:5001<span class="hljs-built_in"> check</span><br><span class="hljs-built_in"></span>    server  app2 127.0.0.1:5002<span class="hljs-built_in"> check</span><br><span class="hljs-built_in"></span>    server  app3 127.0.0.1:5003<span class="hljs-built_in"> check</span><br><span class="hljs-built_in"></span>    server  app4 127.0.0.1:5004<span class="hljs-built_in"> check</span><br><span class="hljs-built_in"></span><br></code></pre></td></tr></table></figure><h1 id="九、使用Keepalived实现HAProxy高可用"><a href="#九、使用Keepalived实现HAProxy高可用" class="headerlink" title="九、使用Keepalived实现HAProxy高可用"></a>九、使用Keepalived实现HAProxy高可用</h1><p>尽管HAProxy非常稳定，但仍然无法规避操作系统故障、主机硬件故障、网络故障甚至断电带来的风险。所以必须对HAProxy实施高可用方案。 </p><p>所以需要利用Keepalived实现的HAProxy热备方案 。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在两台HAProxy的主机上分别运行着一个Keepalived实例，这两个Keepalived争抢同一个虚IP地址，两个HAProxy也尝试去绑定这同一个虚IP地址上的端口。 显然，同时只能有一个Keepalived抢到这个虚IP，抢到了这个虚IP的Keepalived主机上的HAProxy便是当前的MASTER。 Keepalived内部维护一个权重值，权重值最高的Keepalived实例能够抢到虚IP。同时Keepalived会定期check本主机上的HAProxy状态，状态OK时权重值增加。</p><h3 id="keepalived配置文件"><a href="#keepalived配置文件" class="headerlink" title="keepalived配置文件"></a>keepalived配置文件</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pf">global_defs &#123;<br>    router_id LVS_DEVEL  <span class="hljs-comment">#虚拟路由名称</span><br>&#125;<br><span class="hljs-comment">#HAProxy健康检查配置</span><br>vrrp_script chk_haproxy &#123;<br>    script <span class="hljs-string">&quot;killall -0 haproxy&quot;</span>  <span class="hljs-comment">#使用killall -0检查haproxy实例是否存在，性能高于ps命令</span><br>    interval <span class="hljs-number">2</span>   <span class="hljs-comment">#脚本运行周期</span><br>    weight <span class="hljs-number">2</span>   <span class="hljs-comment">#每次检查的加权权重值</span><br>&#125;<br><span class="hljs-comment">#虚拟路由配置</span><br>vrrp_instance VI_1 &#123;<br>    <span class="hljs-keyword">state</span> MASTER           <span class="hljs-comment">#本机实例状态，MASTER/BACKUP，备机配置文件中请写BACKUP</span><br>    interface enp0s25      <span class="hljs-comment">#本机网卡名称，使用ifconfig命令查看</span><br>    virtual_router_id <span class="hljs-number">51</span>   <span class="hljs-comment">#虚拟路由编号，主备机保持一致</span><br>    priority <span class="hljs-number">101</span>           <span class="hljs-comment">#本机初始权重，备机请填写小于主机的值（例如100）</span><br>    advert_int <span class="hljs-number">1</span>           <span class="hljs-comment">#争抢虚地址的周期，秒</span><br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">192.168</span>.<span class="hljs-number">8.201</span>      <span class="hljs-comment">#虚地址IP，主备机保持一致</span><br>    &#125;<br>    track_script &#123;<br>        chk_haproxy        <span class="hljs-comment">#对应的健康检查配置</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>killall </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y psmisc<br></code></pre></td></tr></table></figure><h1 id="十、CentOS7下配置防火墙放过Keepalived"><a href="#十、CentOS7下配置防火墙放过Keepalived" class="headerlink" title="十、CentOS7下配置防火墙放过Keepalived"></a>十、CentOS7下配置防火墙放过Keepalived</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">firewall-cmd <span class="hljs-attr">--direct</span> <span class="hljs-attr">--permanent</span> <span class="hljs-attr">--add-rule</span> ipv4 <span class="hljs-attribute">filter</span> <span class="hljs-selector-tag">INPUT</span> <span class="hljs-attr">--destination</span> <span class="hljs-number">224.0</span>.<span class="hljs-number">0.18</span> <span class="hljs-attr">--protocol</span> vrrp -j ACCEPT firewall-cmd <span class="hljs-attr">--di</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>高可用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>keepalived</tag>
      
      <tag>haproxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>keepalived+haproxy+nginx高可用负载均衡实战</title>
    <link href="/2021/05/06/centos/keepalived+haproxy/keepalived+haproxy+nginx%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/"/>
    <url>/2021/05/06/centos/keepalived+haproxy/keepalived+haproxy+nginx%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<img src="/2021/05/06/centos/keepalived+haproxy/keepalived+haproxy+nginx%E9%AB%98%E5%8F%AF%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E6%88%98/1658848376253.png" class="" width="1658848376253"><h1 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h1><p>ip配置(vip最好与A，B同一网段，外网才好访问)</p><table><thead><tr><th>服务器</th><th>Ip</th></tr></thead><tbody><tr><td>A</td><td>10.0.0.101</td></tr><tr><td>B</td><td>10.0.0.102</td></tr><tr><td>VIP（虚拟ip存在与A或者B）</td><td>10.0.0.150</td></tr></tbody></table><p>服务器软件</p><table><thead><tr><th>服务器</th><th>软件</th></tr></thead><tbody><tr><td>A</td><td>keepalived、haproxy、nginx</td></tr><tr><td>B</td><td>keepalived、haproxy、nginx</td></tr></tbody></table><p>端口配置</p><table><thead><tr><th>软件</th><th>端口</th></tr></thead><tbody><tr><td>haproxy</td><td>80</td></tr><tr><td>nginx</td><td>8080</td></tr></tbody></table><h1 id="二、高可用配置"><a href="#二、高可用配置" class="headerlink" title="二、高可用配置"></a>二、高可用配置</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y keepalived haproxy<br></code></pre></td></tr></table></figure><h2 id="服务器A配置"><a href="#服务器A配置" class="headerlink" title="服务器A配置"></a>服务器A配置</h2><p>/etc/keepalived/keepalived.conf</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">! Configuration File <span class="hljs-keyword">for</span> keepalived<br><br>global_defs &#123;<br>   ...<br>   smtp_server <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.150</span><br>&#125;<br>vrrp_script chk_haproxy &#123;<br>    script <span class="hljs-string">&quot;killall -0 haproxy&quot;</span><br>    <span class="hljs-built_in">int</span>erval <span class="hljs-number">2</span><br>    weight <span class="hljs-number">2</span><br>&#125;<br>vrrp_instance VI_1 &#123;<br>    state MASTER<br>    <span class="hljs-keyword">interface</span> <span class="hljs-symbol">eno16777736</span><br>    <span class="hljs-symbol">virtual_router_id</span> <span class="hljs-symbol">51</span><br>    <span class="hljs-symbol">priority</span> <span class="hljs-symbol">100</span><br>    <span class="hljs-symbol">advert_int</span> <span class="hljs-symbol">1</span><br>    <span class="hljs-symbol">authentication</span> &#123;<br>        auth_type PASS<br>        auth_pass <span class="hljs-number">1111</span><br>    &#125;<br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.150</span><br>    &#125;<br>    track_script &#123;<br>        chk_haproxy<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>/etc/haproxy/haproxy.cfg</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs smali">frontend  main *:80<br>    acl url_static       path_beg       -i /static /images /javascript /stylesheets<br>    acl url_static       path_end       -i .jpg .gif .png .css .js<br><br><span class="hljs-comment">#    use_backend static          if url_static</span><br>    default_backend             app<br>backend app<br>    balance     roundrobin<br>    server  app1 10.0.0.101:8080<span class="hljs-built_in"> check</span><br><span class="hljs-built_in"></span>    server  app2 10.0.0.102:8080 check<br></code></pre></td></tr></table></figure><h2 id="服务器B配置"><a href="#服务器B配置" class="headerlink" title="服务器B配置"></a>服务器B配置</h2><p>/etc/keepalived/keepalived.conf</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">! Configuration File <span class="hljs-keyword">for</span> keepalived<br><br>global_defs &#123;<br>   ...<br>   smtp_server <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.150</span><br>&#125;<br>vrrp_script chk_haproxy &#123;<br>    script <span class="hljs-string">&quot;killall -0 haproxy&quot;</span><br>    <span class="hljs-built_in">int</span>erval <span class="hljs-number">2</span><br>    weight <span class="hljs-number">2</span><br>&#125;<br>vrrp_instance VI_1 &#123;<br>    state BACKUP<br>    <span class="hljs-keyword">interface</span> <span class="hljs-symbol">eno16777736</span><br>    <span class="hljs-symbol">virtual_router_id</span> <span class="hljs-symbol">51</span><br>    <span class="hljs-symbol">priority</span> <span class="hljs-symbol">100</span><br>    <span class="hljs-symbol">advert_int</span> <span class="hljs-symbol">1</span><br>    <span class="hljs-symbol">authentication</span> &#123;<br>        auth_type PASS<br>        auth_pass <span class="hljs-number">1111</span><br>    &#125;<br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.150</span><br>    &#125;<br>    track_script &#123;<br>        chk_haproxy<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>haproxy和nginx配置与服务器A保持此不变</p><h1 id="三、高可用测试"><a href="#三、高可用测试" class="headerlink" title="三、高可用测试"></a>三、高可用测试</h1><p>根据上面配置可以看出VIP当前在服务器A上面。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pf">[root@k8s-master01 nginx]<span class="hljs-comment"># ip addr</span><br><span class="hljs-number">2</span>: eno16777736: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1500</span> qdisc pfifo_fast <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">53</span>:<span class="hljs-number">83</span>:ed brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">0.101</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span> scope <span class="hljs-keyword">global</span> noprefixroute eno16777736<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">0.150</span>/<span class="hljs-number">32</span> scope <span class="hljs-keyword">global</span> eno16777736<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> fd56:a9ae:cb0f::c0f/<span class="hljs-number">128</span> scope <span class="hljs-keyword">global</span> noprefixroute dynamic <br>       valid_lft <span class="hljs-number">24195</span>sec preferred_lft <span class="hljs-number">24195</span>sec<br>    <span class="hljs-keyword">inet6</span> fd56:a9ae:cb0f:<span class="hljs-number">0</span>:<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe53:<span class="hljs-number">83</span>ed/<span class="hljs-number">64</span> scope <span class="hljs-keyword">global</span> noprefixroute <br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> fe80::<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe53:<span class="hljs-number">83</span>ed/<span class="hljs-number">64</span> scope link noprefixroute <br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><p>此时服务器的网卡eno16777736拥有10.0.0.101/24和10.0.0.150/32 两个ip地址。</p><p>当在服务器A 关闭keepalived时：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pf">[root@k8s-master01 nginx]<span class="hljs-comment"># systemctl stop keepalived</span><br>[root@k8s-master01 nginx]<span class="hljs-comment"># ip addr</span><br><span class="hljs-number">2</span>: eno16777736: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1500</span> qdisc pfifo_fast <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">53</span>:<span class="hljs-number">83</span>:ed brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">0.101</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span> scope <span class="hljs-keyword">global</span> noprefixroute eno16777736<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> fd56:a9ae:cb0f::c0f/<span class="hljs-number">128</span> scope <span class="hljs-keyword">global</span> noprefixroute dynamic <br>       valid_lft <span class="hljs-number">24036</span>sec preferred_lft <span class="hljs-number">24036</span>sec<br>    <span class="hljs-keyword">inet6</span> fd56:a9ae:cb0f:<span class="hljs-number">0</span>:<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe53:<span class="hljs-number">83</span>ed/<span class="hljs-number">64</span> scope <span class="hljs-keyword">global</span> noprefixroute <br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> fe80::<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe53:<span class="hljs-number">83</span>ed/<span class="hljs-number">64</span> scope link noprefixroute <br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><p>这个时候服务器A网卡eno16777736只剩下一个ip地址10.0.0.101/24</p><p>然后查看服务器B的网卡信息：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pf">[root@k8s-master02 nginx]<span class="hljs-comment"># ip addr</span><br><span class="hljs-number">2</span>: eno16777736: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1500</span> qdisc pfifo_fast <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">14</span>:<span class="hljs-number">71</span>:<span class="hljs-number">94</span> brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">0.102</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.0</span>.<span class="hljs-number">0.255</span> scope <span class="hljs-keyword">global</span> eno16777736<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">0.150</span>/<span class="hljs-number">32</span> scope <span class="hljs-keyword">global</span> eno16777736<br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> fd56:a9ae:cb0f::d62/<span class="hljs-number">128</span> scope <span class="hljs-keyword">global</span> dynamic <br>       valid_lft <span class="hljs-number">23012</span>sec preferred_lft <span class="hljs-number">23012</span>sec<br>    <span class="hljs-keyword">inet6</span> fd56:a9ae:cb0f:<span class="hljs-number">0</span>:<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe14:<span class="hljs-number">7194</span>/<span class="hljs-number">64</span> scope <span class="hljs-keyword">global</span> noprefixroute <br>       valid_lft forever preferred_lft forever<br>    <span class="hljs-keyword">inet6</span> fe80::<span class="hljs-number">20</span>c:<span class="hljs-number">29</span>ff:fe14:<span class="hljs-number">7194</span>/<span class="hljs-number">64</span> scope link <br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><p>10.0.0.150/32被设置到服务器B 的eno16777736上了</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>高可用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>keepalived</tag>
      
      <tag>haproxy</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>keepalived配置文件</title>
    <link href="/2021/05/05/centos/keepalived+haproxy/keepalived%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2021/05/05/centos/keepalived+haproxy/keepalived%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、配置文件说明"><a href="#一、配置文件说明" class="headerlink" title="一、配置文件说明"></a>一、配置文件说明</h1><h2 id="第一部分：全局定义块"><a href="#第一部分：全局定义块" class="headerlink" title="第一部分：全局定义块"></a><strong>第一部分：全局定义块</strong></h2><p>1、email通知。作用：有故障，发邮件报警。<br>2、Lvs负载均衡器标识（lvs_id）。在一个网络内，它应该是唯一的。<br>3、花括号“{}”。用来分隔定义块，因此必须成对出现。如果写漏了，keepalived运行时，不会得到预期的结果。由于定义块内存在嵌套关系，因此很容易遗漏结尾处的花括号，这点要特别注意。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs autoit">global_defs &#123;<span class="hljs-meta">#global_defs区域，主要是配置故障发生时的通知对象以及机器标识</span><br>   notification_email &#123; <span class="hljs-meta"># 故障发生时给谁发邮件通知。</span><br>     acassen<span class="hljs-symbol">@firewall</span>.loc<br>     failover<span class="hljs-symbol">@firewall</span>.loc<br>     sysadmin<span class="hljs-symbol">@firewall</span>.loc<br>   &#125;<br>   notification_email_from Alexandre.Cassen<span class="hljs-symbol">@firewall</span>.loc <span class="hljs-meta"># 指定发件人</span><br>   smtp_server <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.1</span> <span class="hljs-meta">#通知邮件的smtp地址。</span><br>   smtp_connect_timeout <span class="hljs-number">30</span> <span class="hljs-meta">#连接smtp服务器的超时时间。</span><br>   router_id LVS_DEVEL <span class="hljs-meta">#运行keepalived机器的一个标识</span><br>   vrrp_skip_check_adv_addr <br> <span class="hljs-meta">#  vrrp_strict #意为严格遵循 vrrp 协议，我们平时使用需要将其注释。</span><br>   vrrp_garp_interval <span class="hljs-number">0</span><br>   vrrp_gna_interval <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>vrrp_strict如果不注释需要开启防火墙</p><h2 id="第二部分：vrrp-sync-group"><a href="#第二部分：vrrp-sync-group" class="headerlink" title="第二部分：vrrp_sync_group"></a><strong>第二部分：vrrp_sync_group</strong></h2><p>确定失败切换（FailOver）包含的路由实例个数。即在有2个负载均衡器的场景，一旦某个负载均衡器失效，需要自动切换到另外一个负载均衡器的实例是哪些？ 实例组group{}至少包含一个vrrp实例</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">vrrp_sync_group VG_1&#123; <span class="hljs-comment">#监控多个网段的实例</span><br>    group &#123;<br>　　　　VI_1 <span class="hljs-comment">#实例名</span><br>　　　　VI_2<br>　　　　......<br>    &#125;<br>    notify_master <span class="hljs-regexp">/path/</span>xx.sh <span class="hljs-comment">#指定当切换到master时，执行的脚本</span><br>    netify_backup <span class="hljs-regexp">/path/</span>xx.sh <span class="hljs-comment">#指定当切换到backup时，执行的脚本</span><br>    notify_fault <span class="hljs-string">&quot;path/xx.sh VG_1&quot;</span> <span class="hljs-comment">#故障时执行的脚本</span><br>    notify <span class="hljs-regexp">/path/</span>xx.sh <br>    smtp_alert <span class="hljs-comment">#使用global_defs中提供的邮件地址和smtp服务器发送邮件通知</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第三部分：vrrp-instance"><a href="#第三部分：vrrp-instance" class="headerlink" title="第三部分：vrrp_instance"></a>第三部分：vrrp_instance</h2><p>虚拟路由实例配置</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs pf">vrrp_instance VI_1 &#123;<br>    <span class="hljs-keyword">state</span> BACKUP <span class="hljs-comment">#指定那个为master，那个为backup，如果设置了nopreempt这个值不起作用，主备考priority决定</span><br>    interface eth0 <span class="hljs-comment">#设置实例绑定的网卡</span><br>    dont_track_primary <span class="hljs-comment">#忽略vrrp的interface错误（默认不设置）</span><br>    track_interface&#123; <span class="hljs-comment">#设置额外的监控，里面那个网卡出现问题都会切换</span><br>        eth0<br>        eth1<br>    &#125;<br>    mcast_src_ip <span class="hljs-comment">#发送多播包的地址，如果不设置默认使用绑定网卡的primary ip</span><br>    garp_master_delay <span class="hljs-comment">#在切换到master状态后，延迟进行gratuitous ARP请求</span><br>    virtual_router_id <span class="hljs-number">50</span> <span class="hljs-comment">#VPID标记</span><br>    priority <span class="hljs-number">99</span> <span class="hljs-comment">#优先级，高优先级竞选为master</span><br>    advert_int <span class="hljs-number">1</span> <span class="hljs-comment">#检查间隔，默认1秒</span><br>    nopreempt <span class="hljs-comment">#设置为不抢占 注：这个配置只能设置在backup主机上，而且这个主机优先级要比另外一台高</span><br>    preempt_delay <span class="hljs-comment">#抢占延时，默认5分钟</span><br>    <span class="hljs-keyword">debug</span> <span class="hljs-comment">#debug级别</span><br>    authentication &#123; <span class="hljs-comment">#设置认证</span><br>        auth_type PASS <span class="hljs-comment">#认证方式</span><br>        auth_pass <span class="hljs-number">111111</span> <span class="hljs-comment">#认证密码</span><br>    &#125;<br>    virtual_ipaddress &#123; <span class="hljs-comment">#设置vip</span><br>        <span class="hljs-number">192.168</span>.<span class="hljs-number">202.200</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第四部分：virtual-server"><a href="#第四部分：virtual-server" class="headerlink" title="第四部分：virtual_server"></a>第四部分：virtual_server</h2><p>虚拟服务器virtual_server定义块 ，虚拟服务器定义是keepalived框架最重要的项目了，是keepalived.conf必不可少的部分。 该部分是用来管理LVS的，是实现keepalive和LVS相结合的模块。ipvsadm命令可以实现的管理在这里都可以通过参数配置实现，注意：real_server是被包含在viyual_server模块中的，是子模块。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs pf">virtual_server <span class="hljs-number">192.168</span>.<span class="hljs-number">202.200</span> <span class="hljs-number">23</span> &#123;        //VIP地址，要和vrrp_instance模块中的                virtual_ipaddress地址一致<br>　　　　delay_loop <span class="hljs-number">6</span> <span class="hljs-comment">#健康检查时间间隔 </span><br>　　　　lb_algo rr <span class="hljs-comment">#lvs调度算法rr|wrr|lc|wlc|lblc|sh|dh </span><br>　　　　lb_kind DR <span class="hljs-comment">#负载均衡转发规则NAT|DR|RUN </span><br>　　　　persistence_timeout <span class="hljs-number">5</span> <span class="hljs-comment">#会话保持时间 </span><br>　　　　protocol TCP <span class="hljs-comment">#使用的协议 </span><br>　　　　persistence_granularity <span class="hljs-variable">&lt;NETMASK&gt;</span> <span class="hljs-comment">#lvs会话保持粒度 </span><br>　　　　virtualhost <span class="hljs-variable">&lt;string&gt;</span> <span class="hljs-comment">#检查的web服务器的虚拟主机（host：头） </span><br>　　　　sorry_server<span class="hljs-variable">&lt;IPADDR&gt;</span> <span class="hljs-variable">&lt;port&gt;</span> <span class="hljs-comment">#备用机，所有realserver失效后启用</span><br><br><br>    real_server <span class="hljs-number">192.168</span>.<span class="hljs-number">200.5</span> <span class="hljs-number">23</span> &#123;             //RS的真实IP地址<br>            weight <span class="hljs-number">1</span> <span class="hljs-comment">#默认为1,0为失效</span><br>            inhibit_on_failure <span class="hljs-comment">#在服务器健康检查失效时，将其设为0，而不是直接从ipvs中删除 </span><br>            notify_up <span class="hljs-variable">&lt;string&gt;</span> | <span class="hljs-variable">&lt;quoted-string&gt;</span> <span class="hljs-comment">#在检测到server up后执行脚本</span><br>            notify_down <span class="hljs-variable">&lt;string&gt;</span> | <span class="hljs-variable">&lt;quoted-string&gt;</span> <span class="hljs-comment">#在检测到server down后执行脚本</span><br>            <br>        TCP_CHECK &#123;                    //常用<br>            connect_timeout <span class="hljs-number">3</span> <span class="hljs-comment">#连接超时时间</span><br>            nb_get_retry <span class="hljs-number">3</span> <span class="hljs-comment">#重连次数</span><br>            delay_before_retry <span class="hljs-number">3</span> <span class="hljs-comment">#重连间隔时间</span><br>            connect_port <span class="hljs-number">23</span>  健康检查的端口的端口<br>            bindto <span class="hljs-variable">&lt;ip&gt;</span>   <br>          &#125;<br><br>        HTTP_GET | SSL_GET&#123;          //不常用<br>            url&#123; <span class="hljs-comment">#检查url，可以指定多个</span><br>                 path /<br>                 digest <span class="hljs-variable">&lt;string&gt;</span> <span class="hljs-comment">#检查后的摘要信息 genhash -s 10.0.0.102 -p 80 -u /hello</span><br>                 status_code <span class="hljs-number">200</span> <span class="hljs-comment">#检查的返回状态码</span><br>            &#125;<br>            connect_port <span class="hljs-variable">&lt;port&gt;</span> <br>            bindto <span class="hljs-variable">&lt;IPADD&gt;</span><br>            connect_timeout <span class="hljs-number">5</span><br>            nb_get_retry <span class="hljs-number">3</span><br>            delay_before_retry <span class="hljs-number">2</span><br>        &#125;<br><br>        SMTP_CHECK&#123;                 //不常用<br>            host&#123;<br>                connect_ip <span class="hljs-variable">&lt;IP ADDRESS&gt;</span><br>                connect_port <span class="hljs-variable">&lt;port&gt;</span> <span class="hljs-comment">#默认检查25端口</span><br>                bindto <span class="hljs-variable">&lt;IP ADDRESS&gt;</span><br>            &#125;<br>            connect_timeout <span class="hljs-number">5</span><br>            retry <span class="hljs-number">3</span><br>            delay_before_retry <span class="hljs-number">2</span><br>            helo_name <span class="hljs-variable">&lt;string&gt;</span> | <span class="hljs-variable">&lt;quoted-string&gt;</span> <span class="hljs-comment">#smtp helo请求命令参数，可选</span><br>        &#125;<br> <br>        MISC_CHECK&#123;                 //不常用<br>            misc_path <span class="hljs-variable">&lt;string&gt;</span> | <span class="hljs-variable">&lt;quoted-string&gt;</span> <span class="hljs-comment">#外部脚本路径</span><br>            misc_timeout <span class="hljs-comment">#脚本执行超时时间</span><br>            misc_dynamic <span class="hljs-comment">#如设置该项，则退出状态码会用来动态调整服务器的权重，返回0 正常，不修改；返回1，</span><br><br>检查失败，权重改为<span class="hljs-number">0</span>；返回<span class="hljs-number">2</span>-<span class="hljs-number">255</span>，正常，权重设置为：返回状态码-<span class="hljs-number">2</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第五部分：vrrp-script"><a href="#第五部分：vrrp-script" class="headerlink" title="第五部分：vrrp_script"></a>第五部分：vrrp_script</h2><p>服务监控脚本。keepalived只能做到对网络故障和keepalived本身的监控，即当出现网络故障或者keepalived本身出现问题时，进行切换。但是这些还不够，我们还需要监控keepalived所在服务器上的<strong>其他业务进程，</strong>比如说nginx，keepalived+nginx实现nginx的负载均衡高可用。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">vrrp_script</span> check_haproxy&#123;<br><br>    <span class="hljs-attribute">script</span> <span class="hljs-string">&quot;/home/check.sh&quot;</span> <span class="hljs-comment">#监控脚本</span><br>    interval <span class="hljs-number">3</span>              <span class="hljs-comment">#定时执行脚本间隔</span><br>    weight -<span class="hljs-number">20</span>              <span class="hljs-comment">#脚本权重</span><br>    <span class="hljs-comment">#keepalived会定时执行脚本并对脚本执行的结果进行分析，动态调整vrrp_instance的优先级。</span><br>    <span class="hljs-comment">#如果脚本执行结果为0，并且weight配置的值大于0，则优先级相应的增加</span><br>    <span class="hljs-comment">#如果脚本执行结果非0，并且weight配置的值小于0，则优先级相应的减少</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="生产环境配置文件实例"><a href="#生产环境配置文件实例" class="headerlink" title="生产环境配置文件实例"></a>生产环境配置文件实例</h1><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"># cat /etc/keepalived/keepalived.conf <br>! Configuration File <span class="hljs-keyword">for</span> keepalived<br><br>global_defs &#123;<br>        notification_email &#123;<br>                <span class="hljs-symbol">49000448@</span>qq.com<br>        &#125;<br>        notification_email_from Alexandre.<span class="hljs-symbol">Cassen@</span>firewall.loc<br>                smtp_server <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>                smtp_connect_timeout <span class="hljs-number">30</span><br>                router_id LVS_2<br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>        state BACKUP<br>        <span class="hljs-keyword">interface</span> <span class="hljs-symbol">eth0</span><br>        <span class="hljs-symbol">virtual_router_id</span> <span class="hljs-symbol">55</span><br>        <span class="hljs-symbol">priority</span> <span class="hljs-symbol">100</span><br>        <span class="hljs-symbol">advert_int</span> <span class="hljs-symbol">1</span><br>        <span class="hljs-symbol">authentication</span> &#123;<br>             auth_type PASS<br>             auth_pass <span class="hljs-number">1111</span><br>        &#125;<br>        virtual_ipaddress &#123;<br>             <span class="hljs-number">192.168</span><span class="hljs-number">.220</span><span class="hljs-number">.110</span>/<span class="hljs-number">24</span><br>        &#125;<br><br># 这东西还没发现实用，有时有效，有时就连不上了<br>virtual_server <span class="hljs-number">192.168</span><span class="hljs-number">.220</span><span class="hljs-number">.110</span> <span class="hljs-number">80</span> &#123;<br>        delay_loop <span class="hljs-number">6</span><br>        lb_algo wrr<br>        lb_kind DR<br>        nat_mask <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span><br>        persistence_timeout <span class="hljs-number">300</span><br>        protocol TCP<br><br><br>        real_server <span class="hljs-number">192.168</span><span class="hljs-number">.220</span><span class="hljs-number">.129</span> <span class="hljs-number">80</span> &#123;<br>            weight <span class="hljs-number">1</span><br>            TCP_CHECK &#123;<br>                        connect_timeout <span class="hljs-number">8</span><br>                        nb_get_retry <span class="hljs-number">3</span><br>                        delay_before_retry <span class="hljs-number">3</span><br>                        connect_port <span class="hljs-number">80</span><br>            &#125;<br>        &#125;<br><br><br>        real_server <span class="hljs-number">192.168</span><span class="hljs-number">.220</span><span class="hljs-number">.138</span> <span class="hljs-number">80</span> &#123;<br>            weight <span class="hljs-number">1</span><br>            TCP_CHECK &#123;<br>                        connect_timeout <span class="hljs-number">8</span><br>                        nb_get_retry <span class="hljs-number">3</span><br>                        delay_before_retry <span class="hljs-number">3</span><br>                        connect_port <span class="hljs-number">80</span><br>            &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>高可用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>keepalived</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aqs之Java8 Unsafe类解析</title>
    <link href="/2020/10/18/%E5%90%8E%E7%AB%AF/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2020-10-18-aqs%E4%B9%8BJava8-Unsafe%E7%B1%BB%E8%A7%A3%E6%9E%90/"/>
    <url>/2020/10/18/%E5%90%8E%E7%AB%AF/java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/2020-10-18-aqs%E4%B9%8BJava8-Unsafe%E7%B1%BB%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>Unsafe是位于sun.misc包下的一个类，主要提供一些用于执行低级别、不安全操作的方法，比如</p><ul><li>直接访问系统内存资源</li><li>自主管理内存资源等</li></ul><p>可以使用Unsafe的native方法间接访问底层方法，增强Java语言底层资源操作能力方面起到了很大的作用。通过native使Unsafe有操作内存空间的能力，这也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用Unsafe类会使得程序出错的概率变大，使得Java这种安全的语言变得不再“安全”，因此对Unsafe的使用一定要慎重。 </p><h1 id="二、Unsafe怎么才能使用"><a href="#二、Unsafe怎么才能使用" class="headerlink" title="二、Unsafe怎么才能使用"></a>二、Unsafe怎么才能使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Unsafe</span> &#123;<br>  <span class="hljs-comment">// 单例对象</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Unsafe theUnsafe;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">Unsafe</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br>  <span class="hljs-meta">@CallerSensitive</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Unsafe <span class="hljs-title function_">getUnsafe</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">var0</span> <span class="hljs-operator">=</span> Reflection.getCallerClass();<br>    <span class="hljs-comment">// 仅在引导类加载器`BootstrapClassLoader`加载时才合法</span><br>    <span class="hljs-keyword">if</span>(!VM.isSystemDomainLoader(var0.getClassLoader())) &#123;    <br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityException</span>(<span class="hljs-string">&quot;Unsafe&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> theUnsafe;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过Java命令行命令<code>-Xbootclasspath/a</code>把调用Unsafe相关方法 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -Xbootclasspath/a: <span class="hljs-variable">$&#123;path&#125;</span>   // 其中path为调用Unsafe相关方法的类所在jar包路径 <br></code></pre></td></tr></table></figure><p>通过反射获取单例对象theUnsafe </p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs monkey"><span class="hljs-keyword">private</span> static Unsafe reflectGetUnsafe() &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">Field</span> <span class="hljs-keyword">field</span> = Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>      <span class="hljs-keyword">field</span>.setAccessible(<span class="hljs-literal">true</span>);<br>      <span class="hljs-keyword">return</span> (Unsafe) <span class="hljs-keyword">field</span>.get(<span class="hljs-literal">null</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-built_in">log</span>.<span class="hljs-built_in">error</span>(e.getMessage(), e);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、功能介绍"><a href="#三、功能介绍" class="headerlink" title="三、功能介绍"></a>三、功能介绍</h1><p>相关文章：</p><p><a href="https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html">https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html</a></p><p><a href="https://www.cnblogs.com/zmhjay1999/p/15183390.html">https://www.cnblogs.com/zmhjay1999/p/15183390.html</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aqs之Java8 CyclicBarrier源码分析</title>
    <link href="/2020/10/14/%E5%90%8E%E7%AB%AF/java/aqs/2020-10-14-aqs%E4%B9%8BJava8-CyclicBarrier%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2020/10/14/%E5%90%8E%E7%AB%AF/java/aqs/2020-10-14-aqs%E4%B9%8BJava8-CyclicBarrier%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> CyclicBarrier c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(); <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    c.await();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>                &#125;<br>                System.out.println(<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            c.await();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>        &#125;<br>        System.out.println(<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CyclicBarrier</span> &#123;<br><span class="hljs-comment">/** 锁，锁:用于守卫入口的锁 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-comment">/**等待直到触发的条件 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">trip</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dowait</span><span class="hljs-params">(<span class="hljs-type">boolean</span> timed, <span class="hljs-type">long</span> nanos)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException, BrokenBarrierException,<br>               TimeoutException &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Generation</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> generation;<br><br>            <span class="hljs-keyword">if</span> (g.broken)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrokenBarrierException</span>();<br><span class="hljs-comment">//如果当前线程打断过</span><br>            <span class="hljs-keyword">if</span> (Thread.interrupted()) &#123;<br>                <span class="hljs-comment">//这里会唤醒所有等待线程，并且抛出异常</span><br>                breakBarrier();<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            &#125;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> --count;<br>            <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// tripped</span><br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">ranAction</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">Runnable</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> barrierCommand;<br>                    <span class="hljs-keyword">if</span> (command != <span class="hljs-literal">null</span>)<br>                        command.run();<br>                    ranAction = <span class="hljs-literal">true</span>;<br>                    nextGeneration();<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-keyword">if</span> (!ranAction)<br>                        breakBarrier();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// loop until tripped, broken, interrupted, or timed out</span><br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (!timed)<br>                        trip.await();<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nanos &gt; <span class="hljs-number">0L</span>)<br>                        nanos = trip.awaitNanos(nanos);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException ie) &#123;<br>                    <span class="hljs-keyword">if</span> (g == generation &amp;&amp; ! g.broken) &#123;<br>                        breakBarrier();<br>                        <span class="hljs-keyword">throw</span> ie;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// We&#x27;re about to finish waiting even if we had not</span><br>                        <span class="hljs-comment">// been interrupted, so this interrupt is deemed to</span><br>                        <span class="hljs-comment">// &quot;belong&quot; to subsequent execution.</span><br>                        Thread.currentThread().interrupt();<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (g.broken)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrokenBarrierException</span>();<br><br>                <span class="hljs-keyword">if</span> (g != generation)<br>                    <span class="hljs-keyword">return</span> index;<br><br>                <span class="hljs-keyword">if</span> (timed &amp;&amp; nanos &lt;= <span class="hljs-number">0L</span>) &#123;<br>                    breakBarrier();<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeoutException</span>();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException, BrokenBarrierException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> dowait(<span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (TimeoutException toe) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(toe); <span class="hljs-comment">// cannot happen</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置当前屏障生成被打破并唤醒所有人。只在持有锁时调用。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">breakBarrier</span><span class="hljs-params">()</span> &#123;<br>        generation.broken = <span class="hljs-literal">true</span>;<br>        count = parties;<br>        trip.signalAll();<br>    &#125;<br>    <span class="hljs-comment">//这个方法就是为什么CyclicBarrier可以重置数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nextGeneration</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// signal completion of last generation</span><br>        trip.signalAll();<br>        <span class="hljs-comment">// set up next generation</span><br>        count = parties;<br>        generation = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generation</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从代码中可以看出CyclicBarrier和CountDownLatch的区别：</p><ul><li>CountDownLatch是通过共享锁机制实现的计数阻塞</li><li>CyclicBarrier使用的是Condition实现的计数阻塞，CyclicBarrier是自己维护了一个count，当count=0时，唤醒所有的条件队列中的节点，然后重置count的数量。</li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aqs</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aqs之Java8 CountDownLatch源码分析</title>
    <link href="/2020/10/13/%E5%90%8E%E7%AB%AF/java/aqs/2020-10-13-aqs%E4%B9%8BJava8-CountDownLatch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2020/10/13/%E5%90%8E%E7%AB%AF/java/aqs/2020-10-13-aqs%E4%B9%8BJava8-CountDownLatch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>一种同步辅助，允许一个或多个线程等待其他线程中执行的一组操作完成。 </p><p>CountDownLatch使用给定的计数初始化。由于调用了countDown方法，await方法一直阻塞到当前计数为零，在此之后，所有等待线程被释放，await的任何后续调用立即返回。这是一种一次性现象——计数无法重置。如果您需要一个可以重置计数的版本，请考虑使用CyclicBarrier。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                c.countDown();<br>                System.out.println(<span class="hljs-string">&quot;线程1执行完成&quot;</span>);<br>            &#125;<br>        &#125;).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        c.countDown();<br>        System.out.println(<span class="hljs-string">&quot;线程2执行完成&quot;</span>);<br>        &#125;<br>        &#125;).start();<br><br>        c.await();<br>        System.out.println(<span class="hljs-string">&quot;退出&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">线程<span class="hljs-number">1</span>执行完成<br>线程<span class="hljs-number">2</span>执行完成<br>退出<br></code></pre></td></tr></table></figure><p>CountDownLatch的构造函数接收一个,其中构造参数n表示等待n个完成，即执行countDown n次。</p><h2 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CountDownLatch</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 同步控制器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">4982264981922014374L</span>;<br><br>        Sync(<span class="hljs-type">int</span> count) &#123;<br>            setState(count);<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> getState();<br>        &#125;<br><span class="hljs-comment">//重这里可以看出申请共享节点资源的时候没有修改state，只是通过判断，当state变为0的时候</span><br>        <span class="hljs-comment">//同步控制器就没用了，await也起不了作用</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">return</span> (getState() == <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>            <span class="hljs-comment">// Decrement count; signal when transition to zero</span><br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c-<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (compareAndSetState(c, nextc))<br>                    <span class="hljs-keyword">return</span> nextc == <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CountDownLatch</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-keyword">if</span> (count &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;count &lt; 0&quot;</span>);<br>        <span class="hljs-built_in">this</span>.sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sync</span>(count);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * await，这里的await就是 可中断的acquireShared</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        sync.acquireSharedInterruptibly(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 等待时间await</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">await</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">return</span> sync.tryAcquireSharedNanos(<span class="hljs-number">1</span>, unit.toNanos(timeout));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 减少闩锁的计数，如果计数为零则释放所有等待线程。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">countDown</span><span class="hljs-params">()</span> &#123;<br>        sync.releaseShared(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回当前计数。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getCount();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取共享锁。会调用tryAcquireShared方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">if</span> (tryAcquireShared(arg) &lt; <span class="hljs-number">0</span>)<br>            doAcquireShared(arg);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放共享锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">releaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">if</span> (tryReleaseShared(arg)) &#123;<br>            doReleaseShared();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么CountDownLatch只能起一次作用而不能重置？</p><p>通过上面的源码分析可以看出tryReleaseShared将会把state释放到0，tryAcquireShared则返回-1，acquireShared则不会再进入阻塞</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aqs</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aqs之Java8 ReentrantLock源码分析</title>
    <link href="/2020/10/11/%E5%90%8E%E7%AB%AF/java/aqs/2020-10-11-aqs%E4%B9%8BJava8-ReentrantLock%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2020/10/11/%E5%90%8E%E7%AB%AF/java/aqs/2020-10-11-aqs%E4%B9%8BJava8-ReentrantLock%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>一个可重入互斥锁，其基本行为和语义与使用同步方法和语句访问的隐式监视锁相同，但具有扩展功能。 </p><p>ReentrantLock由上次成功锁定但尚未解锁的线程拥有。当锁不属于另一个线程时，调用锁的线程返回成功则获得锁。如果当前线程已经拥有锁，该方法将立即返回。 </p><p>公平锁：</p><p>在争用状态下，锁倾向于将访问权授予等待时间最长的线程。使用公平锁被多个线程访问的程序可能显示较低的总体吞吐量</p><p>非公平锁：</p><p>此锁不能保证任何特定的访问顺序。</p><p>锁的公平性并不能保证线程调度的公平性。因此，使用公平锁的多个线程中的一个可以连续多次获得它，而其他活动线程没有进展，当前也没有持有该锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">X</span> &#123;    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();    <br>    <span class="hljs-comment">// ...      </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span> &#123;      <br>        lock.lock();  <br>        <span class="hljs-comment">// block until condition holds      </span><br>        <span class="hljs-keyword">try</span> &#123;        <br>            <span class="hljs-comment">// ... method body      </span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;        <br>            lock.unlock()      <br>        &#125;    <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h2><p>此锁的同步控制基础。下面分为公平版本和不公平版本。使用aqs状态表示锁上的持有次数。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">5179523762034025860L</span>;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Performs &#123;<span class="hljs-doctag">@link</span> Lock#lock&#125;. The main reason for subclassing</span><br><span class="hljs-comment">         * is to allow fast path for nonfair version.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span>;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 非公平</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">nonfairTryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>                    setExclusiveOwnerThread(current);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//可重入锁逻辑，如果当前申请执行权的线程就是当前线程，则只是增加当前state的大小</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;<br>                <span class="hljs-comment">//因为nextc是int，所以最大为Integer.MAX_VALUE,当再加1就会抛出error异常</span><br>                <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                setState(nextc);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState() - releases;<br>            <span class="hljs-comment">//ReentratLock是线程分配限制为1，这里报错的原因：如果没有lock，直接unlock</span><br>            <span class="hljs-keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//当资源释放完了，这个时候需要设置当前拥有线程为null</span><br>                free = <span class="hljs-literal">true</span>;<br>                setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>            &#125;<br>            <span class="hljs-comment">//这句代码非常重要，因为ReentratLock设计的是同一时刻只会有一个线程的量，即从lock的compareAndSetState(0, 1)开始到</span><br>            <span class="hljs-comment">//setState(0),这中间的逻辑都是线程安全的，不用过多考虑，因为它就是同一时刻的单线程操作</span><br>            setState(c);<br>            <span class="hljs-keyword">return</span> free;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 是否当前线程拥有者</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldExclusively</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// 检查当前线程是否是所有者</span><br>            <span class="hljs-keyword">return</span> getExclusiveOwnerThread() == Thread.currentThread();<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> ConditionObject <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionObject</span>();<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 拥有者线程</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">final</span> Thread <span class="hljs-title function_">getOwner</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> getState() == <span class="hljs-number">0</span> ? <span class="hljs-literal">null</span> : getExclusiveOwnerThread();<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHoldCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> isHeldExclusively() ? getState() : <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLocked</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> getState() != <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-非公平锁"><a href="#2-1-非公平锁" class="headerlink" title="2.1 非公平锁"></a>2.1 非公平锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7316153563782823691L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 执行锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//这句代码就是公平锁和非公平锁最大的区别，如果获取到资源就会获取执行权，而不用考虑阻塞队列中是否有node</span><br>        <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br>            setExclusiveOwnerThread(Thread.currentThread());<br>        <span class="hljs-keyword">else</span><br>            acquire(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>        <span class="hljs-keyword">return</span> nonfairTryAcquire(acquires);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-公平锁"><a href="#2-2-公平锁" class="headerlink" title="2.2 公平锁"></a>2.2 公平锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3000897897090466540L</span>;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>            acquire(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 试图申请资源</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//对公平锁，不同于非公平锁，主要还是hasQueuedPredecessors()查看阻塞队列中是否有非当前线程的阻塞node</span><br>                <span class="hljs-keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;<br>                    compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>                    setExclusiveOwnerThread(current);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;<br>                <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                setState(nextc);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否有线程等待获取锁的时间比当前线程长</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasQueuedPredecessors</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail; <br>        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;<br>        Node s;<br>        <span class="hljs-comment">//判断阻塞队列中是否有节点:</span><br>        <span class="hljs-comment">//(1)头节点不等于尾节点</span><br>        <span class="hljs-comment">//(2)如果头节点的下一个节点为空，因为在添加节点的时候先设置prev，再设置next，所以这个时候阻塞队列中肯定有下一个节点，</span><br>        <span class="hljs-comment">//只是还没来得及设置，则表明当前操作和节点处于不同线程</span><br>        <span class="hljs-comment">//（3）如果下一个节点的线程和当前线程不一样</span><br>        <span class="hljs-keyword">return</span> h != t &amp;&amp;<br>                ((s = h.next) == <span class="hljs-literal">null</span> || s.thread != Thread.currentThread());<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aqs</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aqs之Java8 Semaphore源码分析</title>
    <link href="/2020/10/11/%E5%90%8E%E7%AB%AF/java/aqs/2020-10-11-aqs%E4%B9%8BJava8-Semaphore%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2020/10/11/%E5%90%8E%E7%AB%AF/java/aqs/2020-10-11-aqs%E4%B9%8BJava8-Semaphore%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>Semaphore（信号量）是用来控制同时访问特定资源的线程数量，它通过协调各个线程，以保证合理的使用公共资源。</p><p>Semaphore的构造方法Semaphore（int permits）接受一个整型的数字，表示可用的许可证数量。Semaphore（10）表示允许10个线程获取许可证，也就是最大并发数是10。</p><p>Semaphore的acquire()方法获取一个许可证，使用完之后调用release()方法归还许可证。还可以用tryAcquire()方法尝试获取许可证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pool</span> &#123;    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_AVAILABLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Semaphore</span> <span class="hljs-variable">available</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(MAX_AVAILABLE, <span class="hljs-literal">true</span>);      <br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getItem</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;      <br>        available.acquire();      <br>        <span class="hljs-keyword">return</span> getNextAvailableItem();    <br>    &#125;      <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putItem</span><span class="hljs-params">(Object x)</span> &#123;      <br>        <span class="hljs-keyword">if</span> (markAsUnused(x))        <br>            available.release();    <br>    &#125;      <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、源码解析"><a href="#二、源码解析" class="headerlink" title="二、源码解析"></a>二、源码解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1192457210091910933L</span>;<br><br>        Sync(<span class="hljs-type">int</span> permits) &#123;<span class="hljs-comment">//执行许可量</span><br>            setState(permits);<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPermits</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> getState();<br>        &#125;<br><span class="hljs-comment">//非公平锁的共享节点的申请</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nonfairTryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">available</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-comment">//许可量剩余</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">remaining</span> <span class="hljs-operator">=</span> available - acquires;<br>                <span class="hljs-comment">//如果许可量小于0将会进入阻塞队列，cas设置状态量设置成功也会返回</span><br>                <span class="hljs-keyword">if</span> (remaining &lt; <span class="hljs-number">0</span> ||<br>                    compareAndSetState(available, remaining))<br>                    <span class="hljs-keyword">return</span> remaining;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//共享锁释放</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> current + releases;<br>                <span class="hljs-keyword">if</span> (next &lt; current) <span class="hljs-comment">// overflow</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum permit count exceeded&quot;</span>);<br>                <span class="hljs-keyword">if</span> (compareAndSetState(current, next))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//减少信号量</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reducePermits</span><span class="hljs-params">(<span class="hljs-type">int</span> reductions)</span> &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> current - reductions;<br>                <span class="hljs-keyword">if</span> (next &gt; current) <span class="hljs-comment">// underflow</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Permit count underflow&quot;</span>);<br>                <span class="hljs-keyword">if</span> (compareAndSetState(current, next))<br>                    <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">drainPermits</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-keyword">if</span> (current == <span class="hljs-number">0</span> || compareAndSetState(current, <span class="hljs-number">0</span>))<br>                    <span class="hljs-keyword">return</span> current;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 非公平锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2694183684443567898L</span>;<br><br>        NonfairSync(<span class="hljs-type">int</span> permits) &#123;<br>            <span class="hljs-built_in">super</span>(permits);<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">return</span> nonfairTryAcquireShared(acquires);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Fair version</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">2014338818796000944L</span>;<br><br>        FairSync(<span class="hljs-type">int</span> permits) &#123;<br>            <span class="hljs-built_in">super</span>(permits);<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-comment">//公平锁，如果阻塞队列中有组赛节点，则返回&lt;0,将当前节点添加到tail</span><br>                <span class="hljs-keyword">if</span> (hasQueuedPredecessors())<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">available</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">remaining</span> <span class="hljs-operator">=</span> available - acquires;<br>                <span class="hljs-keyword">if</span> (remaining &lt; <span class="hljs-number">0</span> ||<br>                    compareAndSetState(available, remaining))<br>                    <span class="hljs-keyword">return</span> remaining;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aqs</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aqs之Java8 ReadWriteLock源码分析</title>
    <link href="/2020/10/11/%E5%90%8E%E7%AB%AF/java/aqs/2020-10-12-aqs%E4%B9%8BJava8-ReadWriteLock%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2020/10/11/%E5%90%8E%E7%AB%AF/java/aqs/2020-10-12-aqs%E4%B9%8BJava8-ReadWriteLock%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>ReentrantReadWriteLock 可重入的读写锁。读写锁的特点读读之间不互斥，读写或写写之间是互斥的。</p><p><em>ReentrantReadWriteLock</em> 中的读取锁是共享锁，写入锁是独占锁。写锁只有一个线程能获取到，而读锁可以多个线程同时获取</p><p><em>ReentrantReadWriteLock</em> 利用一个低16位表示排他（写）锁定计数，高16位表示共享（读）锁计数的锁状态，来控制锁的读写顺序</p><p>当读锁全部释放时，写锁才能获取；当写锁释放，读锁才能获取。</p><p>官方案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CachedData</span> &#123;    <br>Object data;    <br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> cacheValid;    <br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">rwl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();      <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">processCachedData</span><span class="hljs-params">()</span> &#123;      <br>        rwl.readLock().lock();      <br>        <span class="hljs-keyword">if</span> (!cacheValid) &#123;        <span class="hljs-comment">// Must release read lock before acquiring write lock        </span><br>            rwl.readLock().unlock();        <br>            rwl.writeLock().lock();        <br>            <span class="hljs-keyword">try</span> &#123;          <br>                <span class="hljs-comment">//重新检查状态，因为另一个线程可能在我们之前获得写锁并更改了状态。</span><br>                <span class="hljs-keyword">if</span> (!cacheValid) &#123;            <br>                    data = ...            <br>                        cacheValid = <span class="hljs-literal">true</span>;          <br>                &#125;          <br>                <span class="hljs-comment">//通过在释放写锁之前获取读锁来降级</span><br>                rwl.readLock().lock();        <br>            &#125; <span class="hljs-keyword">finally</span> &#123;          <br>                rwl.writeLock().unlock(); <br>                <span class="hljs-comment">// Unlock write, still hold read        </span><br>            &#125;      <br>        &#125;        <br>        <span class="hljs-keyword">try</span> &#123;        <br>            use(data);      <br>        &#125; <span class="hljs-keyword">finally</span> &#123;        <br>            rwl.readLock().unlock();      <br>        &#125;    <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>官方案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RWDictionary</span> &#123;    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Data&gt; m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;String, Data&gt;();    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">rwl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> rwl.readLock();    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> rwl.writeLock();      <br>    <span class="hljs-keyword">public</span> Data <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span> &#123;      <br>        r.lock();      <br>        <span class="hljs-keyword">try</span> &#123; <br>            <span class="hljs-keyword">return</span> m.get(key); <br>        &#125;<span class="hljs-keyword">finally</span> &#123; <br>            r.unlock(); <br>        &#125;    <br>    &#125;    <br>    <span class="hljs-keyword">public</span> String[] allKeys() &#123;      <br>        r.lock();      <br>        <span class="hljs-keyword">try</span> &#123; <br>            <span class="hljs-keyword">return</span> m.keySet().toArray(); <br>        &#125;<span class="hljs-keyword">finally</span> &#123; <br>            r.unlock(); <br>        &#125;    <br>    &#125;    <br>    <span class="hljs-keyword">public</span> Data <span class="hljs-title function_">put</span><span class="hljs-params">(String key, Data value)</span> &#123;      <br>        w.lock();      <br>        <span class="hljs-keyword">try</span> &#123; <br>            <span class="hljs-keyword">return</span> m.put(key, value); <br>        &#125;<span class="hljs-keyword">finally</span> &#123; <br>            w.unlock(); <br>        &#125;    <br>    &#125;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;      <br>        w.lock();      <br>        <span class="hljs-keyword">try</span> &#123; <br>            m.clear(); <br>        &#125;<span class="hljs-keyword">finally</span> &#123; <br>            w.unlock(); <br>        &#125;    <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><img src="/2020/10/11/%E5%90%8E%E7%AB%AF/java/aqs/2020-10-12-aqs%E4%B9%8BJava8-ReadWriteLock%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1664725631447.png" class="" width="1664725631447"><h2 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>        <br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHARED_SHIFT</span>   <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHARED_UNIT</span>    <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT);<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_COUNT</span>      <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">EXCLUSIVE_MASK</span> <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">/** 返回count中表示的共享持有数  */</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sharedCount</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>    &#123; <span class="hljs-keyword">return</span> c &gt;&gt;&gt; SHARED_SHIFT; &#125;<br>        <span class="hljs-comment">/** 返回count中表示的独占持有数 */</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">exclusiveCount</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span> &#123; <span class="hljs-keyword">return</span> c &amp; EXCLUSIVE_MASK; &#125;<br>           <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 试图释放资源</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>            <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> getState() - releases;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> exclusiveCount(nextc) == <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (free)<br>                setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>            setState(nextc);<br>            <span class="hljs-keyword">return</span> free;<br>        &#125;<br><br> <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    逻辑：</span><br><span class="hljs-comment">        1.如果读锁计数器不为0 或者 写锁计数器不为0 并且 当前线程不是持有锁的线程，则失败返回；</span><br><span class="hljs-comment">        2.如果计数器达到最大值则失败；</span><br><span class="hljs-comment">        3.第1和第2都不满足时，此时线程可以开始尝试获取锁并更新锁状态；</span><br><span class="hljs-comment">     */</span><br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-comment">//当前独占锁数量</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> exclusiveCount(c);<br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//（1）如果c!=0，独占锁数量w为0，则表示有共享节点，那么需要加入阻塞队列</span><br>                <span class="hljs-comment">//（2）如果当前线程不是拥有线程则加入阻塞队列</span><br>                <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span> || current != getExclusiveOwnerThread())<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-comment">//要执行下面的流程需要的条件：独占锁数量&gt;0并且当前线程不是拥有线程</span><br>                <span class="hljs-comment">//独占锁数量不能超过超过最大值，15位二进制</span><br>                <span class="hljs-keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                <span class="hljs-comment">// 可重入申请</span><br>                setState(c + acquires);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (writerShouldBlock() ||<br>                !compareAndSetState(c, c + acquires))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            setExclusiveOwnerThread(current);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>       <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> unused)</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-comment">// 首个读线程直接更新特有的计数器即可</span><br>            <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                <span class="hljs-comment">// assert firstReaderHoldCount &gt; 0;</span><br>                <span class="hljs-keyword">if</span> (firstReaderHoldCount == <span class="hljs-number">1</span>)<br>                    firstReader = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">else</span><br>                    firstReaderHoldCount--;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 非首读线程则需要更新它的重入次数减1</span><br>                <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> cachedHoldCounter;<br>                <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> || rh.tid != getThreadId(current))<br>                    rh = readHolds.get();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> rh.count;<br>                <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">1</span>) &#123;<br>                    readHolds.remove();<br>                    <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">throw</span> unmatchedUnlockException();<br>                &#125;<br>                --rh.count;<br>            &#125;<br>            <span class="hljs-comment">// CAS方式更新锁状态</span><br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c - SHARED_UNIT;<br>                <span class="hljs-keyword">if</span> (compareAndSetState(c, nextc))<br>                    <span class="hljs-comment">// Releasing the read lock has no effect on readers,</span><br>                    <span class="hljs-comment">// but it may allow waiting writers to proceed if</span><br>                    <span class="hljs-comment">// both read and write locks are now free.</span><br>                    <span class="hljs-keyword">return</span> nextc == <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> unused)</span> &#123;<br>            <span class="hljs-comment">// 获取当前线程</span><br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-comment">// 获取锁状态</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-comment">// 如果独占锁数量不为0 并且 持有独占锁的线程不是当前线程，则直接失败返回</span><br>            <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span> &amp;&amp;<br>                getExclusiveOwnerThread() != current)<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 获取共享锁的数量</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> sharedCount(c);<br>            <span class="hljs-comment">// 检查是否需要因为队列策略而阻塞，若不需要则检查共享锁数量是否达到最大值，都没有则CAS更新锁状态</span><br>            <span class="hljs-keyword">if</span> (!readerShouldBlock() &amp;&amp;<br>                r &lt; MAX_COUNT &amp;&amp;<br>                compareAndSetState(c, c + SHARED_UNIT)) &#123;<br>                <span class="hljs-comment">// 共享锁数量为0表示当前线程是第一个获取读锁的线程</span><br>                <span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// 更新第一个读线程变量和数量</span><br>                    firstReader = current;<br>                    firstReaderHoldCount = <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                    <span class="hljs-comment">// 如果首个获取读锁的线程重复获取读锁时，直接重入并将计数器累加</span><br>                    firstReaderHoldCount++;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 获取当前线程的计数器</span><br>                    <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> cachedHoldCounter;<br>                    <span class="hljs-comment">// 如果计数器为空 或者 当前线程还没有创建计数器，则创建计数器并存放到readHolds中，即存放到ThreadLocal中</span><br>                    <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> || rh.tid != getThreadId(current))<br>                        <span class="hljs-comment">// 在ThreadLocal中创建</span><br>                        cachedHoldCounter = rh = readHolds.get();<br>                    <span class="hljs-comment">// 如果当前线程的计数器已存在，且计数值为0，则将该计数器放到readHolds中</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                        readHolds.set(rh);<br>                    <span class="hljs-comment">// 锁重入次数累加</span><br>                    rh.count++;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-comment">// 之前因为队列策略或更新锁失败后再通过下面方法进行完整地尝试获取锁</span><br>            <span class="hljs-keyword">return</span> fullTryAcquireShared(current);<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 完整地获取共享锁方法</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fullTryAcquireShared</span><span class="hljs-params">(Thread current)</span> &#123;<br>            <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">// 循环获取读锁</span><br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-comment">// 当前存在独占锁</span><br>                <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// 并且非当前线程持有该独占锁，则直接返回-1</span><br>                    <span class="hljs-keyword">if</span> (getExclusiveOwnerThread() != current)<br>                        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                    <span class="hljs-comment">// else we hold the exclusive lock; blocking here</span><br>                    <span class="hljs-comment">// would cause deadlock.</span><br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (readerShouldBlock()) &#123;<br>                    <span class="hljs-comment">// 确保没有重新获取读锁定</span><br>                    <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                        <span class="hljs-comment">// assert firstReaderHoldCount &gt; 0;</span><br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span>) &#123;<br>                            rh = cachedHoldCounter;<br>                            <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> || rh.tid != getThreadId(current)) &#123;<br>                                rh = readHolds.get();<br>                                <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                                    readHolds.remove();<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 共享数量超过最大时抛出异常</span><br>                <span class="hljs-keyword">if</span> (sharedCount(c) == MAX_COUNT)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                <span class="hljs-comment">// CAS更新锁状态，以下逻辑与tryAcquireShared类似</span><br>                <span class="hljs-keyword">if</span> (compareAndSetState(c, c + SHARED_UNIT)) &#123;<br>                    <span class="hljs-keyword">if</span> (sharedCount(c) == <span class="hljs-number">0</span>) &#123;<br>                        firstReader = current;<br>                        firstReaderHoldCount = <span class="hljs-number">1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                        firstReaderHoldCount++;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span>)<br>                            rh = cachedHoldCounter;<br>                        <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> || rh.tid != getThreadId(current))<br>                            rh = readHolds.get();<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                            readHolds.set(rh);<br>                        rh.count++;<br>                        cachedHoldCounter = rh; <span class="hljs-comment">// cache for release</span><br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 执行写锁</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryWriteLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> exclusiveCount(c);<br>                <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span> || current != getExclusiveOwnerThread())<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">if</span> (w == MAX_COUNT)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!compareAndSetState(c, c + <span class="hljs-number">1</span>))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            setExclusiveOwnerThread(current);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 执行读锁</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReadLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span> &amp;&amp;<br>                    getExclusiveOwnerThread() != current)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> sharedCount(c);<br>                <span class="hljs-keyword">if</span> (r == MAX_COUNT)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                <span class="hljs-keyword">if</span> (compareAndSetState(c, c + SHARED_UNIT)) &#123;<br>                    <span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span>) &#123;<br>                        firstReader = current;<br>                        firstReaderHoldCount = <span class="hljs-number">1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                        firstReaderHoldCount++;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> cachedHoldCounter;<br>                        <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> || rh.tid != getThreadId(current))<br>                            cachedHoldCounter = rh = readHolds.get();<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                            readHolds.set(rh);<br>                        rh.count++;<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aqs</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aqs之Java8 Condition源码分析</title>
    <link href="/2020/09/30/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-27-aqs%E4%B9%8BJava8-Condition%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2020/09/30/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-27-aqs%E4%B9%8BJava8-Condition%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>Object的监视器方法</p><p>在使用synchronized获取到锁的前提下，通过Object的wait、notify、notifyAll可以在多线程场景下做到并发控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWaitNotify</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">object1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//这里之所以会停留500ms，方便等thread2进入wait</span><br>                        Thread.sleep(<span class="hljs-number">500</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                    &#125;<br>                    <span class="hljs-keyword">synchronized</span> (object1) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;线程1打印信息&quot;</span>);<br>                        object1.notify();<br>                    &#125;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">synchronized</span> (object1)&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        object1.wait();<br>                        System.out.println(<span class="hljs-string">&quot;线程2打印信息&quot;</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>        thread1.start();<br>        thread2.start();<br>    &#125;<br></code></pre></td></tr></table></figure><p>Condition的使用</p><p>相对于Object的监视器方法，在Lock获取到锁的前提下，可以用await、signal、signalAll可以替代Object的那套监视器方法，并且更加灵活更加好控制。</p><p>因为方法到共享状态信息发生在不同的线程中，需要对其进行保护，所以需要锁来进行保护。</p><p>基本使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAwaitSignal</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        ReentrantLock reentrantLock=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>        Condition condition= reentrantLock.newCondition();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1500</span>); <br>                    reentrantLock.lock();<br>                    System.out.println(<span class="hljs-string">&quot;线程1打印信息&quot;</span>);<br>                    condition.signal();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<span class="hljs-keyword">finally</span> &#123;<br>                    reentrantLock.unlock();<br>                &#125;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    reentrantLock.lock();<br>                    condition.await();<span class="hljs-comment">//在调用signal()前必须先获得锁</span><br>                    System.out.println(<span class="hljs-string">&quot;线程2打印信息&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<span class="hljs-keyword">finally</span> &#123;<br>                    condition.signal();<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>        thread1.start();<br>        thread2.start();<br>    &#125;<br></code></pre></td></tr></table></figure><p>ConditionObject数据结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span>, java.io.Serializable &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Node firstWaiter;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 最后一个等待节点</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Node lastWaiter;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、await源码"><a href="#二、await源码" class="headerlink" title="二、await源码"></a>二、await源码</h2><p>简图：部分逻辑（不包含打断之类的判断）</p><img src="/2020/09/30/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-27-aqs%E4%B9%8BJava8-Condition%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1664696675666.png" class="" width="1664696675666"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">if</span> (Thread.interrupted())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> addConditionWaiter();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> fullyRelease(node);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">interruptMode</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!isOnSyncQueue(node)) &#123;<br>        LockSupport.park(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)<br>        interruptMode = REINTERRUPT;<br>    <span class="hljs-keyword">if</span> (node.nextWaiter != <span class="hljs-literal">null</span>) <span class="hljs-comment">// clean up if cancelled</span><br>        unlinkCancelledWaiters();<br>    <span class="hljs-keyword">if</span> (interruptMode != <span class="hljs-number">0</span>)<br>        reportInterruptAfterWait(interruptMode);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 向等待队列中添加一个新的node。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">addConditionWaiter</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> lastWaiter;<br>    <span class="hljs-comment">// If lastWaiter is cancelled, clean out.</span><br>    <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span> &amp;&amp; t.waitStatus != Node.CONDITION) &#123;<br>        unlinkCancelledWaiters();<br>        t = lastWaiter;<br>    &#125;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(Thread.currentThread(), Node.CONDITION);<br>    <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>)<br>        firstWaiter = node;<br>    <span class="hljs-keyword">else</span><br>        t.nextWaiter = node;<br>    lastWaiter = node;<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从条件队列中取消链接已取消的侍者节点。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlinkCancelledWaiters</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> firstWaiter;<br>    <span class="hljs-comment">//状态condition的第一个节点</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">trail</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (t != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> t.nextWaiter;<br>        <span class="hljs-keyword">if</span> (t.waitStatus != Node.CONDITION) &#123;<br>            <span class="hljs-comment">//已经加入队列的节点做gc处理</span><br>            t.nextWaiter = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">if</span> (trail == <span class="hljs-literal">null</span>)<br>                firstWaiter = next;<br>            <span class="hljs-keyword">else</span><br>                trail.nextWaiter = next;<br>            <span class="hljs-keyword">if</span> (next == <span class="hljs-literal">null</span>)<br>                <span class="hljs-comment">//signal执行后，lastWaiter到最后可能为空</span><br>                lastWaiter = trail;<br>        &#125; <span class="hljs-keyword">else</span><br>            trail = t;<br>        t = next;<br>    &#125;<br>&#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 调用带有当前状态值的release;返回保存的状态。</span><br><span class="hljs-comment">     * 取消节点并在失败时抛出异常。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node the condition node for this wait</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> previous sync state</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fullyRelease</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-keyword">if</span> (release(savedState)) &#123;<br>                failed = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">return</span> savedState;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (failed)<br>                node.waitStatus = Node.CANCELLED;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否在同步队列中</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node the node</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true if is reacquiring</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOnSyncQueue</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">//判断节点的状态，如果状态是CONDITION，说明节点肯定不在同步队列中，同时哪怕同步队列是刚刚初始化的，也会有一个冗余的头节点存在，所以节点的前驱节点如果为null，那么节点也肯定不在同步队列中，返回fasle</span><br>    <span class="hljs-keyword">if</span> (node.waitStatus == Node.CONDITION || node.prev == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//节点的后继节点不为null，说明节点肯定在队列中，返回true，这里很重要的一点要明白，prev和next都是针对同步队列的节点</span><br>    <span class="hljs-keyword">if</span> (node.next != <span class="hljs-literal">null</span>) <span class="hljs-comment">// If has successor, it must be on queue</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> findNodeFromTail(node);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">checkInterruptWhileWaiting</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-keyword">return</span> Thread.interrupted() ?<br>        (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) :<br>    <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过tail节点反向查找node是否在同步队列中</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">findNodeFromTail</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">//取得同步队列的队尾元素</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail;<br>    <span class="hljs-comment">//无限循环，从队尾元素一直往前找，找到相等的节点就说明节点在队列中，node为null了，说明前面已经没有节点可以找了，那就返回false</span><br>    <span class="hljs-keyword">for</span> (; ; ) &#123;<br>        <span class="hljs-keyword">if</span> (t == node)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        t = t.prev;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 如果需要，在取消等待后将节点转移到同步队列。</span><br><span class="hljs-comment">     * 如果线程在发出信号前被取消，则返回true。</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">transferAfterCancelledWait</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">//将node的状态设置为0，即准备加入阻塞队列的准备状态</span><br>    <span class="hljs-keyword">if</span> (compareAndSetWaitStatus(node, Node.CONDITION, <span class="hljs-number">0</span>)) &#123;<br>        enq(node);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 自旋保证node在同步队列</span><br><span class="hljs-comment">         * 为什么会要加入自旋？</span><br><span class="hljs-comment">         * signal会调用transferForSignal，而transferForSignal的逻辑是先即将node的状态由Node.CONDITION改为0，</span><br><span class="hljs-comment">         * 再enqnode加入等待队列</span><br><span class="hljs-comment">         */</span><br>    <span class="hljs-keyword">while</span> (!isOnSyncQueue(node))<br>        Thread.yield();<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在队列中的节点通过此方法获取锁，对中断不敏感。</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-type">int</span> arg)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                 * 检测当前节点前驱是否head，这是试获取锁的资格。</span><br><span class="hljs-comment">                 * 如果是的话，则调用tryAcquire尝试获取锁,</span><br><span class="hljs-comment">                 * 成功，则将head置为当前节点。</span><br><span class="hljs-comment">                 */</span><br>            <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;<br>                setHead(node);<br>                p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span><br>                failed = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">return</span> interrupted;<br>            &#125;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                 * 如果未成功获取锁则根据前驱节点判断是否要阻塞。</span><br><span class="hljs-comment">                 * 如果阻塞过程中被中断，则置interrupted标志位为true。</span><br><span class="hljs-comment">                 * shouldParkAfterFailedAcquire方法在前驱状态不为SIGNAL的情况下都会循环重试获取锁。</span><br><span class="hljs-comment">                 */</span><br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;<br>                parkAndCheckInterrupt())<br>                interrupted = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、signal"><a href="#三、signal" class="headerlink" title="三、signal"></a>三、signal</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 通知await</span><br><span class="hljs-comment">         */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signal</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> firstWaiter;<br>    <span class="hljs-keyword">if</span> (first != <span class="hljs-literal">null</span>)<br>        doSignal(first);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 删除并传输节点，直到命中未取消的一个或空。</span><br><span class="hljs-comment">         */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSignal</span><span class="hljs-params">(Node first)</span> &#123;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">if</span> ((firstWaiter = first.nextWaiter) == <span class="hljs-literal">null</span>)<br>            lastWaiter = <span class="hljs-literal">null</span>;<br>        first.nextWaiter = <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">while</span> (!transferForSignal(first) &amp;&amp;<br>             (first = firstWaiter) != <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将节点从条件队列转移到同步队列。</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">transferForSignal</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">//如果不能更改waitStatus，则表示该节点已被取消。</span><br>    <span class="hljs-keyword">if</span> (!compareAndSetWaitStatus(node, Node.CONDITION, <span class="hljs-number">0</span>))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//加入阻塞队列</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> enq(node);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> p.waitStatus;<br>    <span class="hljs-comment">//设置节点的状态为SIGNAL，通知后续节点</span><br>    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span> || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))<br>        <span class="hljs-comment">//唤醒</span><br>        LockSupport.unpark(node.thread);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、signalAll"><a href="#四、signalAll" class="headerlink" title="四、signalAll"></a>四、signalAll</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通知所有</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signalAll</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> firstWaiter;<br>    <span class="hljs-keyword">if</span> (first != <span class="hljs-literal">null</span>)<br>        doSignalAll(first);<br>&#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 移除所有条件节点</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> first (non-null) the first node on condition queue</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSignalAll</span><span class="hljs-params">(Node first)</span> &#123;<br>    lastWaiter = firstWaiter = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> first.nextWaiter;<br>        first.nextWaiter = <span class="hljs-literal">null</span>;<br>        transferForSignal(first);<br>        first = next;<br>    &#125; <span class="hljs-keyword">while</span> (first != <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aqs</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aqs之Java8共享锁源码分析</title>
    <link href="/2020/09/29/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-29-aqs%E4%B9%8BJava8%E5%85%B1%E4%BA%AB%E9%94%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2020/09/29/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-29-aqs%E4%B9%8BJava8%E5%85%B1%E4%BA%AB%E9%94%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="一、获取共享锁"><a href="#一、获取共享锁" class="headerlink" title="一、获取共享锁"></a>一、获取共享锁</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 获取共享锁。会调用tryAcquireShared方法</span><br><span class="hljs-comment">  */</span><br> public final void acquire<span class="hljs-constructor">Shared(<span class="hljs-params">int</span> <span class="hljs-params">arg</span>)</span> &#123;<br>     <span class="hljs-keyword">if</span> (<span class="hljs-keyword">try</span><span class="hljs-constructor">AcquireShared(<span class="hljs-params">arg</span>)</span> &lt; <span class="hljs-number">0</span>)<br>         <span class="hljs-keyword">do</span><span class="hljs-constructor">AcquireShared(<span class="hljs-params">arg</span>)</span>;<br> &#125;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 共享锁获取</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">private</span> void <span class="hljs-keyword">do</span><span class="hljs-constructor">AcquireShared(<span class="hljs-params">int</span> <span class="hljs-params">arg</span>)</span> &#123;<br>     final Node node = add<span class="hljs-constructor">Waiter(Node.SHARED)</span>;<br>     boolean failed = <span class="hljs-literal">true</span>;<br>     <span class="hljs-keyword">try</span> &#123;<br>         boolean interrupted = <span class="hljs-literal">false</span>;<br>         <span class="hljs-keyword">for</span> (; ; ) &#123;<br>             final Node p = node.predecessor<span class="hljs-literal">()</span>;<br>             <span class="hljs-keyword">if</span> (p<span class="hljs-operator"> == </span>head) &#123;<br>                 <span class="hljs-built_in">int</span> r = <span class="hljs-keyword">try</span><span class="hljs-constructor">AcquireShared(<span class="hljs-params">arg</span>)</span>;<br>                 <span class="hljs-comment">// 一旦共享获取成功，设置新的头结点，并且唤醒后继线程</span><br>                 <span class="hljs-keyword">if</span> (r &gt;= <span class="hljs-number">0</span>) &#123;<br>                     set<span class="hljs-constructor">HeadAndPropagate(<span class="hljs-params">node</span>, <span class="hljs-params">r</span>)</span>;<br>                     p.next = null; <span class="hljs-comment">// help GC</span><br>                     <span class="hljs-keyword">if</span> (interrupted)<br>                         self<span class="hljs-constructor">Interrupt()</span>;<br>                     failed = <span class="hljs-literal">false</span>;<br>                     return;<br>                 &#125;<br>             &#125;<br>             <span class="hljs-keyword">if</span> (should<span class="hljs-constructor">ParkAfterFailedAcquire(<span class="hljs-params">p</span>, <span class="hljs-params">node</span>)</span><span class="hljs-operator"> &amp;&amp;</span><br><span class="hljs-operator">                     </span>park<span class="hljs-constructor">AndCheckInterrupt()</span>)<br>                 interrupted = <span class="hljs-literal">true</span>;<br>         &#125;<br>     &#125; finally &#123;<br>         <span class="hljs-keyword">if</span> (failed)<br>             cancel<span class="hljs-constructor">Acquire(<span class="hljs-params">node</span>)</span>;<br>     &#125;<br> &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 这个函数做的事情有两件:</span><br><span class="hljs-comment">  * 1. 在获取共享锁成功后，设置head节点</span><br><span class="hljs-comment">  * 2. 根据调用tryAcquireShared返回的状态以及节点本身的等待状态来判断是否要需要唤醒后继线程。</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">private</span> void set<span class="hljs-constructor">HeadAndPropagate(Node <span class="hljs-params">node</span>, <span class="hljs-params">int</span> <span class="hljs-params">propagate</span>)</span> &#123;<br>     Node h = head;  <span class="hljs-comment">// 把当前的head封闭在方法栈上，用以下面的条件检查。</span><br>     set<span class="hljs-constructor">Head(<span class="hljs-params">node</span>)</span>;<br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">      * propagate是tryAcquireShared的返回值，这是决定是否传播唤醒的依据之一。</span><br><span class="hljs-comment">      * h.waitStatus为SIGNAL或者PROPAGATE时也根据node的下一个节点共享来决定是否传播唤醒，</span><br><span class="hljs-comment">      * 这里为什么不能只用propagate &gt; 0来决定是否可以传播在本文下面的思考问题中有相关讲述。</span><br><span class="hljs-comment">      */</span><br>     <span class="hljs-keyword">if</span> (propagate &gt; <span class="hljs-number">0</span><span class="hljs-operator"> || </span>h<span class="hljs-operator"> == </span>null<span class="hljs-operator"> || </span>h.waitStatus &lt; <span class="hljs-number">0</span><span class="hljs-operator"> ||</span><br><span class="hljs-operator">             </span>(h = head)<span class="hljs-operator"> == </span>null<span class="hljs-operator"> || </span>h.waitStatus &lt; <span class="hljs-number">0</span>) &#123;<br>         Node s = node.next;<br>         <span class="hljs-keyword">if</span> (s<span class="hljs-operator"> == </span>null<span class="hljs-operator"> || </span>s.is<span class="hljs-constructor">Shared()</span>)<br>             <span class="hljs-keyword">do</span><span class="hljs-constructor">ReleaseShared()</span>;<br>     &#125;<br> &#125;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 设置头node</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">private</span> void set<span class="hljs-constructor">Head(Node <span class="hljs-params">node</span>)</span> &#123;<br>     head = node;<br>     node.thread = null;<br>     node.prev = null;<br> &#125;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 根据前驱节点中的waitStatus来判断是否需要阻塞当前线程。</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">private</span> static boolean should<span class="hljs-constructor">ParkAfterFailedAcquire(Node <span class="hljs-params">pred</span>, Node <span class="hljs-params">node</span>)</span> &#123;<br>     <span class="hljs-built_in">int</span> ws = pred.waitStatus;<br>     <span class="hljs-keyword">if</span> (ws<span class="hljs-operator"> == </span>Node.SIGNAL)<br>         <span class="hljs-comment">//前驱节点设置为SIGNAL状态，在释放锁的时候会唤醒后继节点,所以后继节点（也就是当前节点）现在可以阻塞自己。</span><br>         return <span class="hljs-literal">true</span>;<br>     <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-comment">//前驱节点状态为取消,向前遍历，更新当前节点的前驱为往前第一个非取消节点。 当前线程会之后会再次回到循环并尝试获取锁。</span><br>         <span class="hljs-keyword">do</span> &#123;<br>             node.prev = pred = pred.prev;<br>         &#125; <span class="hljs-keyword">while</span> (pred.waitStatus &gt; <span class="hljs-number">0</span>);<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>         pred.next = node;<br>         <span class="hljs-comment">//等待状态为0或者PROPAGATE(-3)，设置前驱的等待状态为SIGNAL, 并且之后会回到循环再次重试获取锁。</span><br>         compare<span class="hljs-constructor">AndSetWaitStatus(<span class="hljs-params">pred</span>, <span class="hljs-params">ws</span>, Node.SIGNAL)</span>;<br>     &#125;<br>     return <span class="hljs-literal">false</span>;<br> &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 在队列中新增一个节点。 @param mode Node.EXCLUSIVE 独占锁, Node.SHARED 共享锁</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">private</span> Node add<span class="hljs-constructor">Waiter(Node <span class="hljs-params">mode</span>)</span> &#123;<br>     Node node = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Node(Thread.<span class="hljs-params">currentThread</span>()</span>, mode);<br>     Node pred = tail;<br>     <span class="hljs-keyword">if</span> (pred != null) &#123;<br>         node.prev = pred;<br>         <span class="hljs-comment">//通过CAS在队尾插入当前节点</span><br>         <span class="hljs-keyword">if</span> (compare<span class="hljs-constructor">AndSetTail(<span class="hljs-params">pred</span>, <span class="hljs-params">node</span>)</span>) &#123;<br>             pred.next = node;<br>             return node;<br>         &#125;<br>     &#125;<br>     <span class="hljs-comment">//初始情况或者在快速尝试失败后插入节点</span><br>     enq(node);<br>     return node;<br> &#125;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 通过循环+CAS在队列中成功插入一个节点后返回。</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">private</span> Node enq(final Node node) &#123;<br>     <span class="hljs-keyword">for</span> (; ; ) &#123;<br>         Node t = tail;<br>         <span class="hljs-keyword">if</span> (t<span class="hljs-operator"> == </span>null) &#123; <span class="hljs-comment">// 初始化head和tail</span><br>             <span class="hljs-keyword">if</span> (compare<span class="hljs-constructor">AndSetHead(<span class="hljs-params">new</span> Node()</span>))<br>                 tail = head;<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>             <span class="hljs-comment">/*</span><br><span class="hljs-comment">              * AQS的精妙就是体现在很多细节的代码，比如需要用CAS往队尾里增加一个元素</span><br><span class="hljs-comment">              * 此处的else分支是先在CAS的if前设置node.prev = t，而不是在CAS成功之后再设置。</span><br><span class="hljs-comment">              * 一方面是基于CAS的双向链表插入目前没有完美的解决方案，另一方面这样子做的好处是：</span><br><span class="hljs-comment">              * 保证每时每刻tail.prev都不会是一个null值，否则如果node.prev = t</span><br><span class="hljs-comment">              * 放在下面if的里面，会导致一个瞬间tail.prev = null，这样会使得队列不完整。</span><br><span class="hljs-comment">              */</span><br>             node.prev = t;<br>             <span class="hljs-comment">// CAS设置tail为node，成功后把老的tail也就是t连接到node。</span><br>             <span class="hljs-keyword">if</span> (compare<span class="hljs-constructor">AndSetTail(<span class="hljs-params">t</span>, <span class="hljs-params">node</span>)</span>) &#123;<br>                 t.next = node;<br>                 return t;<br>             &#125;<br>         &#125;<br>     &#125;<br> &#125;<br><br></code></pre></td></tr></table></figure><h2 id="二、释放共享锁"><a href="#二、释放共享锁" class="headerlink" title="二、释放共享锁"></a>二、释放共享锁</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 释放共享锁</span><br><span class="hljs-comment">    */</span><br>   public final boolean release<span class="hljs-constructor">Shared(<span class="hljs-params">int</span> <span class="hljs-params">arg</span>)</span> &#123;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-keyword">try</span><span class="hljs-constructor">ReleaseShared(<span class="hljs-params">arg</span>)</span>) &#123;<br>           <span class="hljs-keyword">do</span><span class="hljs-constructor">ReleaseShared()</span>;<br>           return <span class="hljs-literal">true</span>;<br>       &#125;<br>       return <span class="hljs-literal">false</span>;<br>   &#125;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 这是共享锁中的核心唤醒函数，主要做的事情就是唤醒下一个线程或者设置传播状态。</span><br><span class="hljs-comment">    * 后继线程被唤醒后，会尝试获取共享锁，如果成功之后，则又会调用setHeadAndPropagate,将唤醒传播下去。</span><br><span class="hljs-comment">    * 这个函数的作用是保障在acquire和release存在竞争的情况下，保证队列中处于等待状态的节点能够有办法被唤醒。</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> void <span class="hljs-keyword">do</span><span class="hljs-constructor">ReleaseShared()</span> &#123;<br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 以下的循环做的事情就是，在队列存在后继线程的情况下，唤醒后继线程；</span><br><span class="hljs-comment">        * 或者由于多线程同时释放共享锁由于处在中间过程，读到head节点等待状态为0的情况下，</span><br><span class="hljs-comment">        * 虽然不能unparkSuccessor，但为了保证唤醒能够正确稳固传递下去，设置节点状态为PROPAGATE。</span><br><span class="hljs-comment">        * 这样的话获取锁的线程在执行setHeadAndPropagate时可以读到PROPAGATE，从而由获取锁的线程去释放后继等待线程。</span><br><span class="hljs-comment">        */</span><br>       <span class="hljs-keyword">for</span> (; ; ) &#123;<br>           Node h = head;<br>           <span class="hljs-comment">// 如果队列中存在后继线程。</span><br>           <span class="hljs-keyword">if</span> (h != null<span class="hljs-operator"> &amp;&amp; </span>h != tail) &#123;<br>               <span class="hljs-built_in">int</span> ws = h.waitStatus;<br>               <span class="hljs-keyword">if</span> (ws<span class="hljs-operator"> == </span>Node.SIGNAL) &#123;<br>                   <span class="hljs-keyword">if</span> (!compare<span class="hljs-constructor">AndSetWaitStatus(<span class="hljs-params">h</span>, Node.SIGNAL, 0)</span>)<br>                       continue;            <span class="hljs-comment">// loop to recheck cases</span><br>                   unpark<span class="hljs-constructor">Successor(<span class="hljs-params">h</span>)</span>;<br>               &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ws<span class="hljs-operator"> == </span><span class="hljs-number">0</span> &amp;&amp;<span class="hljs-comment">// 如果h节点的状态为0，需要设置为PROPAGATE用以保证唤醒的传播。</span><br>                       !compare<span class="hljs-constructor">AndSetWaitStatus(<span class="hljs-params">h</span>, 0, Node.PROPAGATE)</span>)<br>                   continue;                <span class="hljs-comment">// loop on failed CAS</span><br>           &#125;<br>           <span class="hljs-comment">// 检查h是否仍然是head，如果不是的话需要再进行循环。</span><br>           <span class="hljs-keyword">if</span> (h<span class="hljs-operator"> == </span>head)                   <span class="hljs-comment">// loop if head changed</span><br>               break;<br>       &#125;<br>   &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 唤醒后继线程</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> void unpark<span class="hljs-constructor">Successor(Node <span class="hljs-params">node</span>)</span> &#123;<br>       <span class="hljs-comment">//尝试将node的等待状态置为0,这样的话,后继争用线程可以有机会再尝试获取一次锁。</span><br>       <span class="hljs-built_in">int</span> ws = node.waitStatus;<br>       <span class="hljs-keyword">if</span> (ws &lt; <span class="hljs-number">0</span>)<br>           compare<span class="hljs-constructor">AndSetWaitStatus(<span class="hljs-params">node</span>, <span class="hljs-params">ws</span>, 0)</span>;<br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 这里的逻辑就是如果node.next存在并且状态不为取消，则直接唤醒s即可</span><br><span class="hljs-comment">        * 否则需要从tail开始向前找到node之后最近的非取消节点。</span><br><span class="hljs-comment">        *</span><br><span class="hljs-comment">        * 这里为什么要从tail开始向前查找也是值得琢磨的:</span><br><span class="hljs-comment">        * 如果读到s == null，不代表node就为tail，参考addWaiter以及enq函数中的我的注释。</span><br><span class="hljs-comment">        * 不妨考虑到如下场景：</span><br><span class="hljs-comment">        * 1. node某时刻为tail</span><br><span class="hljs-comment">        * 2. 有新线程通过addWaiter中的if分支或者enq方法添加自己</span><br><span class="hljs-comment">        * 3. compareAndSetTail成功</span><br><span class="hljs-comment">        * 4. 此时这里的Node s = node.next读出来s == null，但事实上node已经不是tail，它有后继了!</span><br><span class="hljs-comment">        */</span><br>       Node s = node.next;<br>       <span class="hljs-keyword">if</span> (s<span class="hljs-operator"> == </span>null<span class="hljs-operator"> || </span>s.waitStatus &gt; <span class="hljs-number">0</span>) &#123;<br>           s = null;<br>           <span class="hljs-keyword">for</span> (Node t = tail; t != null<span class="hljs-operator"> &amp;&amp; </span>t != node; t = t.prev)<br>               <span class="hljs-keyword">if</span> (t.waitStatus &lt;= <span class="hljs-number">0</span>)<br>                   s = t;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (s != null)<br>           <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LockSupport</span>.</span></span>unpark(s.thread);<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="三、aqs共享锁问题"><a href="#三、aqs共享锁问题" class="headerlink" title="三、aqs共享锁问题"></a>三、aqs共享锁问题</h2><p>这里Node.PROPAGATE的作用：</p><p>（1）网友解说</p><p>为了避免线程无法会唤醒的窘境。,因为共享锁会有很多线程获取到锁或者释放锁，所以有些方法是并发执行的，就会产生很多中间状态，而PROPAGATE就是为了让这些中间状态不影响程序的正常运行。</p><p>（2）个人解说</p><img src="/2020/09/29/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-29-aqs%E4%B9%8BJava8%E5%85%B1%E4%BA%AB%E9%94%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1664630708925.png" class="" width="1664630708925"><p>上面时官方的注释：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">尝试唤醒下一个排队节点，如果:<br>   传播由调用者指示，也可能是上一个操作。<br>   下一个节点是<span class="hljs-keyword">shared</span>模式<br>上面的h.waitStatus&lt;<span class="hljs-number">0</span>这些条件是避免没有必要的唤醒下一个节点<br><br>这两种检查中的保守性可能会导致不必要的唤醒，但只有在有多个线程获得/释放的情况下，所以大多数现在或很快就需要信号。<br></code></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">if (<span class="hljs-name">propagate</span> &gt; <span class="hljs-number">0</span> || h == null || h.waitStatus &lt; <span class="hljs-number">0</span> ||<br>            (<span class="hljs-name">h</span> = head) == null || h.waitStatus &lt; <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>个人理解：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xquery">（<span class="hljs-number">1</span>）propagate&gt;<span class="hljs-number">0</span>,表示还有资源可以申请，在多线程抢夺资源的情况下，会唤醒下一个共享节点，下一个节点可能会获得执行权<br>（<span class="hljs-number">2</span>）两<span class="hljs-built_in">个head</span>==null，就不明白了，看了整个aqs的源码，除了在第一次添加<span class="hljs-type">node</span>的之前会出<span class="hljs-built_in">现head</span><span class="hljs-built_in">和tail</span>为空，其它时候不会出现为空的情况<br>（<span class="hljs-number">3</span>）这里有两次判<span class="hljs-built_in">断head</span>.waitStatus&lt;<span class="hljs-number">0</span>,这里作用是尽量避免没有必要的唤醒下一个共享<span class="hljs-type">node</span>执行<br>（<span class="hljs-number">4</span>）为什么<span class="hljs-built_in">不head</span>.waitStatus&lt;=<span class="hljs-number">0</span>，<br>情况一：当执行addWaiter但未进入doAcquireShared里的<span class="hljs-keyword">for</span>循环的逻辑或者还没有执行完，不为<span class="hljs-number">0</span>，可以避免不必要的唤醒。（比如信号量，有可以设置资源量，同时多个线程申请，当超过这个量是就会加入阻塞队列，当其它线程执行releaseshared时可能会出现这种情况）<br>情况二：doReleaseShared()会把Node.SIGNAL变为<span class="hljs-number">0</span>，唤醒阻塞队列<span class="hljs-type">node</span>获取执行权，如果<span class="hljs-type">node</span>未tryAcquireShared到资源，则又会把状态从<span class="hljs-number">0</span>转变SIGNAL，这么做可以避免在多线程情况下多次释放相<span class="hljs-built_in">同head</span>的资源<br></code></pre></td></tr></table></figure><p>下面看看release核心代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doReleaseShared</span>()</span> &#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        Node h = head;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h != tail) &#123;<br>            <span class="hljs-built_in">int</span> ws = h.waitStatus;<br>            <span class="hljs-keyword">if</span> (ws == Node.SIGNAL) &#123;<br>                <span class="hljs-keyword">if</span> (!h.compareAndSetWaitStatus(Node.SIGNAL, <span class="hljs-number">0</span>))<br>                    <span class="hljs-keyword">continue</span>;            <span class="hljs-comment">// loop to recheck cases</span><br>                unparkSuccessor(h);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ws == <span class="hljs-number">0</span> &amp;&amp;<br>                     !h.compareAndSetWaitStatus(<span class="hljs-number">0</span>, Node.PROPAGATE))<br>                <span class="hljs-keyword">continue</span>;                <span class="hljs-comment">// loop on failed CAS</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (h == head)                   <span class="hljs-comment">// 如果head改变，再执行一次for循环</span><br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码解析：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery">（<span class="hljs-number">1</span>）这里的<span class="hljs-keyword">for</span>循环是避免在多线程情况下，并且多个线程可以同时获取到资源的情况下<span class="hljs-built_in">，head</span>发生改变<br>（<span class="hljs-number">2</span>）如<span class="hljs-built_in">果head</span>是尾节点则没有必要唤醒了，因为<span class="hljs-keyword">next</span>为空，没有必要<br></code></pre></td></tr></table></figure><p>为什么需要Node.PROPAGATE的图解？</p><p>这个问题必须要用多线程的思维去理解，不然很难理解到，如果可申请资源只有1，那么怎么也不会出现这个PROPAGATE这个情况。</p><p>从图中可以看出在共享锁的情况下，多线程可能会图中情况，因为在多线程情况下，下面情况是可能出现的，因为虽然waitStatus的修改具备原子性，但是下面一连串的操作不具备。</p><p>如果把SIGNAL-&gt;0，虽然可以避免没有必要的唤醒，但是可能出现下面图中的情况；并且如果出现申请资源失败的情况，就算后面调用releaseShared也不能释放共享锁了，所以PROPAGATE是必须的，这是一个保障。</p><img src="/2020/09/29/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-29-aqs%E4%B9%8BJava8%E5%85%B1%E4%BA%AB%E9%94%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1664648726002.png" class="" width="1664648726002"><p>从上面图可以看出，如果没有把head的waitStatus状态</p><p>这里又有问题了，既然已经是head，为啥会出现tryAcquireShared申请资源失败呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>...    <br>    <span class="hljs-keyword">try</span> &#123;<br>...<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>...<br>            <span class="hljs-keyword">if</span> (p == head) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> tryAcquireShared(arg);<br>                <span class="hljs-comment">//...</span><br>                <span class="hljs-keyword">if</span> (r &gt;= <span class="hljs-number">0</span>) &#123;<br>                    setHeadAndPropagate(node, r);<br>                    ...<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;<br>                parkAndCheckInterrupt())<br>                interrupted = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>...<br>    &#125;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeadAndPropagate</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> propagate)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;  <span class="hljs-comment">// 把当前的head封闭在方法栈上，用以下面的条件检查。</span><br>    setHead(node);<br>    <span class="hljs-keyword">if</span> (propagate &gt; <span class="hljs-number">0</span> || h == <span class="hljs-literal">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span> ||<br>        (h = head) == <span class="hljs-literal">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.next;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.isShared())<br>            doReleaseShared();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看了上面的代码可以发现，虽然setHeadAndPropagate可以在共享锁模式下唤醒传播后续节点的执行，但是并没有释放资源，也就是说当我们锁定一段代码执行的时候，我们可以并行执行，但是执行过程中是占用资源的，releaseShared才会释放资源，才会调用tryReleaseShared方法。</p><p>共享锁的理念：</p><p>可以理解为只读锁类型的锁，表示可以同一时间多个线程都可以进入。虽然共享锁允许多个线程进入，但是它也占用资源，所以需要我们手动调用代码释放资源。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aqs</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aqs之Java8独占锁源码分析</title>
    <link href="/2020/09/27/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-27-aqs%E4%B9%8BJava8%E7%8B%AC%E5%8D%A0%E9%94%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2020/09/27/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-27-aqs%E4%B9%8BJava8%E7%8B%AC%E5%8D%A0%E9%94%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>提供实现依赖先进先出(FIFO)等待队列的阻塞锁和相关同步器(信号量、事件等)的框架。AbstractQueuedSynchronizer被设计为大多数类型的同步器的使用基础。aqs是实现 ReentrantLock、CountDownLatch、Semaphore、FutureTask 等类的基础。对于互联网运用高并发的童鞋来说，redisson分布式锁应该都用过，这里面也用aqs来做分布式的一个线程同步处理，只是这里的通知已经不是通过LockSupport.unpack()，而是采用的redis的订阅/通知来做的。</p><p>aqs的源码虽然多，但是综合下来主要分为独占锁、共享锁、以及通知等待，后面我将一一做源码分析。</p><p>aqs主要内容：</p><ul><li>独占锁（公平锁、非公平锁）</li><li>共享锁</li><li>通知等待</li></ul><h1 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h1><h2 id="aqs节点结构"><a href="#aqs节点结构" class="headerlink" title="aqs节点结构"></a>aqs节点结构</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">static final class <span class="hljs-keyword">Node</span> <span class="hljs-title">&#123;</span><br><span class="hljs-title">        /**</span><br><span class="hljs-title">         * 等待状态</span><br><span class="hljs-title">         * SIGNAL</span>:     &#123;@link <span class="hljs-keyword">Node</span><span class="hljs-title">#SIGNAL</span>&#125;<br>         * CANCELLED:  &#123;@link <span class="hljs-keyword">Node</span><span class="hljs-title">#CANCELLED</span>&#125;<br>         * CONDITION:  &#123;@link <span class="hljs-keyword">Node</span><span class="hljs-title">#CONDITION</span>&#125;<br>         * PROPAGATE:  &#123;@link <span class="hljs-keyword">Node</span><span class="hljs-title">#PROPAGATE</span>&#125;<br>         * <span class="hljs-number">0</span>:          初始状态，在队列中等待<br>         */<br>        volatile int waitStatus;<br><br>        /**<br>         * 指向前一个<span class="hljs-keyword">node</span><br>         <span class="hljs-title">*/</span><br><span class="hljs-title">        volatile</span> <span class="hljs-keyword">Node</span> <span class="hljs-title">prev</span>;<br><br>        /**<br>         * 指向后一个<span class="hljs-keyword">node</span><br>         <span class="hljs-title">*/</span><br><span class="hljs-title">        volatile</span> <span class="hljs-keyword">Node</span> <span class="hljs-title">next</span>;<br><br>        /**<br>         * 当前<span class="hljs-keyword">node</span><span class="hljs-title">所处的线程</span><br><span class="hljs-title">         */</span><br><span class="hljs-title">        volatile</span> Thread thread;<br><br>        /**<br>         * 连接到下一个节点等待条件<br>         */<br>        <span class="hljs-keyword">Node</span> <span class="hljs-title">nextWaiter</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>组赛节点不包括head节点，因为head节点是当前正在执行的节点或者空姐点。</p><img src="/2020/09/27/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-27-aqs%E4%B9%8BJava8%E7%8B%AC%E5%8D%A0%E9%94%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1664379148485.png" class="" width="1664379148485"><h2 id="申请独占锁"><a href="#申请独占锁" class="headerlink" title="申请独占锁"></a>申请独占锁</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取独占锁，对中断不敏感。</span><br><span class="hljs-comment"> * 首先尝试获取一次锁，如果成功，则返回；</span><br><span class="hljs-comment"> * 否则会把当前线程包装成Node插入到队列中，在队列中会检测是否为head的直接后继，并尝试获取锁,</span><br><span class="hljs-comment"> * 如果获取失败，则会通过LockSupport阻塞当前线程，直至被释放锁的线程唤醒或者被中断，随后再次尝试获取锁，如此反复。</span><br><span class="hljs-comment"> */</span><br>public final void acquire(<span class="hljs-built_in">int</span> arg) &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * tryAcquire(arg):申请arg个单位资源</span><br><span class="hljs-comment">    * acquireQueued(addWaiter(Node.EXCLUSIVE), arg)：如果申请资源失败，将会通过addWaiter添加一个独占类型的节点加入acquireQueued执行队列         * 中</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">try</span><span class="hljs-constructor">Acquire(<span class="hljs-params">arg</span>)</span><span class="hljs-operator"> &amp;&amp;</span><br><span class="hljs-operator">            </span>acquire<span class="hljs-constructor">Queued(<span class="hljs-params">addWaiter</span>(Node.EXCLUSIVE)</span>, arg))<br>        self<span class="hljs-constructor">Interrupt()</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 执行当前线程的interrupt中断</span><br><span class="hljs-comment"> */</span><br>static void self<span class="hljs-constructor">Interrupt()</span> &#123;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.interrupt<span class="hljs-literal">()</span>;<br>&#125;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 在队列中新增一个节点。 @param mode Node.EXCLUSIVE 独占锁, Node.SHARED 共享锁</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> Node add<span class="hljs-constructor">Waiter(Node <span class="hljs-params">mode</span>)</span> &#123;<br>    <span class="hljs-comment">//创建节点，并且指定当前节点的当前线程和节点类型</span><br>    Node node = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Node(Thread.<span class="hljs-params">currentThread</span>()</span>, mode);<br>    Node pred = tail;<br>    <span class="hljs-keyword">if</span> (pred != null) &#123;<br>        node.prev = pred;<br>        <span class="hljs-comment">//通过CAS在队尾插入当前节点</span><br>        <span class="hljs-keyword">if</span> (compare<span class="hljs-constructor">AndSetTail(<span class="hljs-params">pred</span>, <span class="hljs-params">node</span>)</span>) &#123;<br>            pred.next = node;<br>            return node;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//初始情况或者在快速尝试失败后插入节点</span><br>    enq(node);<br>    return node;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 设置尾节点</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> final boolean compare<span class="hljs-constructor">AndSetTail(Node <span class="hljs-params">expect</span>, Node <span class="hljs-params">update</span>)</span> &#123;<br>    return unsafe.compare<span class="hljs-constructor">AndSwapObject(<span class="hljs-params">this</span>, <span class="hljs-params">tailOffset</span>, <span class="hljs-params">expect</span>, <span class="hljs-params">update</span>)</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过循环+CAS在队列中成功插入一个节点后返回。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> Node enq(final Node node) &#123;<br>    <span class="hljs-keyword">for</span> (; ; ) &#123;<br>        Node t = tail;<br>        <span class="hljs-keyword">if</span> (t<span class="hljs-operator"> == </span>null) &#123; <span class="hljs-comment">// 初始化head和tail</span><br>            <span class="hljs-comment">//这里也是cas操作，当头节点为空时，设置一个没有内容的Node节点</span><br>            <span class="hljs-keyword">if</span> (compare<span class="hljs-constructor">AndSetHead(<span class="hljs-params">new</span> Node()</span>))<br>                tail = head;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * AQS的精妙就是体现在很多细节的代码，比如需要用CAS往队尾里增加一个元素</span><br><span class="hljs-comment">             * 此处的else分支是先在CAS的if前设置node.prev = t，而不是在CAS成功之后再设置。</span><br><span class="hljs-comment">             * 一方面是基于CAS的双向链表插入目前没有完美的解决方案，另一方面这样子做的好处是：</span><br><span class="hljs-comment">             * 保证每时每刻tail.prev都不会是一个null值，否则如果node.prev = t</span><br><span class="hljs-comment">             * 放在下面if的里面，会导致一个瞬间tail.prev = null，这样会使得队列不完整。</span><br><span class="hljs-comment">             */</span><br>            node.prev = t;<br>            <span class="hljs-comment">// CAS设置tail为node，成功后把老的tail也就是t连接到node。</span><br>            <span class="hljs-keyword">if</span> (compare<span class="hljs-constructor">AndSetTail(<span class="hljs-params">t</span>, <span class="hljs-params">node</span>)</span>) &#123;<br>                t.next = node;<br>                return t;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 在队列中的节点通过此方法获取锁，对中断不敏感。</span><br><span class="hljs-comment"> */</span><br>final boolean acquire<span class="hljs-constructor">Queued(<span class="hljs-params">final</span> Node <span class="hljs-params">node</span>, <span class="hljs-params">int</span> <span class="hljs-params">arg</span>)</span> &#123;<br>    boolean failed = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        boolean interrupted = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-comment">// node的前置节点，即node.prev,如果prev为空则会报空指针，因为等待队列不可能prev节点为空，因为head不可能为空</span><br>            final Node p = node.predecessor<span class="hljs-literal">()</span>;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * 检测当前节点前驱是否head，这是试获取锁的资格。</span><br><span class="hljs-comment">             * 如果是的话，则调用tryAcquire尝试获取锁,</span><br><span class="hljs-comment">             * 成功，则将head置为当前节点。</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">if</span> (p<span class="hljs-operator"> == </span>head<span class="hljs-operator"> &amp;&amp; </span><span class="hljs-keyword">try</span><span class="hljs-constructor">Acquire(<span class="hljs-params">arg</span>)</span>) &#123;<br>                set<span class="hljs-constructor">Head(<span class="hljs-params">node</span>)</span>;<br>                p.next = null; <span class="hljs-comment">// help GC</span><br>                failed = <span class="hljs-literal">false</span>;<br>                return interrupted;<br>            &#125;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * 如果未成功获取锁则根据前驱节点判断是否要阻塞。</span><br><span class="hljs-comment">             * 如果阻塞过程中被中断，则置interrupted标志位为true。</span><br><span class="hljs-comment">             * shouldParkAfterFailedAcquire方法在前驱状态不为SIGNAL的情况下都会循环重试获取锁。</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">if</span> (should<span class="hljs-constructor">ParkAfterFailedAcquire(<span class="hljs-params">p</span>, <span class="hljs-params">node</span>)</span><span class="hljs-operator"> &amp;&amp;</span><br><span class="hljs-operator">                    </span>park<span class="hljs-constructor">AndCheckInterrupt()</span>)<br>                interrupted = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; finally &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancel<span class="hljs-constructor">Acquire(<span class="hljs-params">node</span>)</span>;<br>    &#125;<br>&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 阻塞当前线程，并且返回当前线程恢复是否是通过interrupt</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> final boolean park<span class="hljs-constructor">AndCheckInterrupt()</span> &#123;<br>    <span class="hljs-comment">//阻塞当前线程</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LockSupport</span>.</span></span>park(this);<br>    return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>interrupted<span class="hljs-literal">()</span>;<br>&#125;<br><span class="hljs-keyword">private</span> void set<span class="hljs-constructor">Head(Node <span class="hljs-params">node</span>)</span> &#123;<br>    head = node;<br>    node.thread = null;<br>    node.prev = null;<br>&#125;<br></code></pre></td></tr></table></figure><p>shouldParkAfterFailedAcquire代码中的一段：当前node的前置节点pred的状态为取消时，向前找到未取消的节点为前置节点</p><p>作用：</p><p>1、精简节点队列，设置node.prev=SIGNAL节点</p><p>设置node的状态为SIGNAL的前置节点，可以减少唤醒node线程需要查找的过程节点，因为unparkSuccessor唤醒后继线程是从tail开始查找的。</p><p>2、唤醒后继线程时，更新节点的前置节点为head.(特殊情况)</p><p>当执行队列节点状态出现问题时，节点状态是取消状态，cancelAcquire会执行一次unparkSuccessor(node)，而后执行shouldParkAfterFailedAcquire，通过node.prev = pred = pred.prev;可以清除之前的节点，如果head和node之间的都是取消状态节点，则node.prev=head</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据前驱节点中的waitStatus来判断是否需要阻塞当前线程。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldParkAfterFailedAcquire</span><span class="hljs-params">(Node pred, Node node)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> pred.waitStatus;<br>    <span class="hljs-keyword">if</span> (ws == Node.SIGNAL)<br>        <span class="hljs-comment">//前驱节点设置为SIGNAL状态，在释放锁的时候会唤醒后继节点,所以后继节点（也就是当前节点）现在可以阻塞自己。</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//前驱节点状态为取消,向前遍历，更新当前节点的前驱为往前第一个非取消节点。 当前线程会之后会再次回到循环并尝试获取锁。</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            node.prev = pred = pred.prev;<br>        &#125; <span class="hljs-keyword">while</span> (pred.waitStatus &gt; <span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        pred.next = node;<br>        <span class="hljs-comment">//等待状态为0或者PROPAGATE(-3)，设置前驱的等待状态为SIGNAL, 并且之后会回到循环再次重试获取锁。</span><br>        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样做的目的：取消的节点不会在获取锁得到线程执行权，也就不会再通知后置节点。</p><p>例如：当node3的前置节点pred(node2)状态为cancel时，向前查找未取消的节点，这里将会找到node1</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-keyword">do</span> &#123;<br>    node.prev = <span class="hljs-built_in">pred</span> = <span class="hljs-built_in">pred</span>.prev;<br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">pred</span>.waitStatus &gt; <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><img src="/2020/09/27/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-27-aqs%E4%B9%8BJava8%E7%8B%AC%E5%8D%A0%E9%94%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1664382354580.png" class="" width="1664382354580"><img src="/2020/09/27/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-27-aqs%E4%B9%8BJava8%E7%8B%AC%E5%8D%A0%E9%94%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1664382574765.png" class="" width="1664382574765"><p>问题1：这里有个问题，如果当前节点向前查找未取消的节点为prev前置节点时，万一node1找到的那个prev节点已经执行过了怎么办？</p><p>这个下面解锁源码分析会提到，这里先简单说一下，如果node1的LockSupport.unpack先于node3.prev=node1，这里node3还是会执行，因为当node1.next的状态为取消时，会从tail向前查找，不管node3.prev是node1还是node2，最终都会找到node1，都会得出一个结论，node3是离node1最近的一个非取消节点</p><p>问题2：pred会为空吗？</p><p>不会，因为当第一次加入节点队列时，会设置一个new Node()节点为head，此时状态为0；而后面head的节点也不会为取消，因为head时当前正在执行的节点或者最后一个执行的节点，当然这里说的是未申请到资源加入队列的，aqs独占锁并不是所有的执行都会创建Node加入队列中等待执行，只要申请资源成功也可以获取线程资源。这里可以看看enqnode和setheader的逻辑</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">pred.<span class="hljs-keyword">next</span> = node;<br><span class="hljs-regexp">//</span>等待状态为<span class="hljs-number">0</span>或者PROPAGATE(-<span class="hljs-number">3</span>)，设置前驱的等待状态为SIGNAL, 并且之后会回到循环再次重试获取锁。<br>compareAndSetWaitStatus(pred, ws, Node.SIGNAL);<br><br>为什么pred.<span class="hljs-keyword">next</span> = node;不放在<span class="hljs-keyword">if</span>里面？<br>如果在<span class="hljs-keyword">do</span>-<span class="hljs-keyword">while</span>中则会出现node3-node1之间的<span class="hljs-keyword">next</span>全部指向node3，如果在<span class="hljs-keyword">do</span>-<span class="hljs-keyword">while</span>后执行，暂时还没有发现什么问题，<span class="hljs-keyword">next</span>的用途很少<br></code></pre></td></tr></table></figure><p>分析：当最终找到pred节点waitStatus状态不为SIGNAL时，再次进入shouldParkAfterFailedAcquire方法执行else</p><img src="/2020/09/27/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-27-aqs%E4%B9%8BJava8%E7%8B%AC%E5%8D%A0%E9%94%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20220929111010101.png" class="" title="image-20220929111010101"><p><strong>取消获取锁</strong></p><p>在独占锁中，cancelAcquire到底会不会执行？</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">通过分析acquireQueued方法的代码可以得出唯一可能造成异常，导致failed=<span class="hljs-literal">true</span>的时候，只有当：node.predecessor<span class="hljs-literal">()</span>或者<span class="hljs-keyword">try</span><span class="hljs-constructor">Acquire(<span class="hljs-params">arg</span>)</span>报错<br>而node.predecessor<span class="hljs-literal">()</span>是不可能报错的，当队列中有执行节点时队列中至少两个节点：head节点和当前节点<br>而<span class="hljs-keyword">try</span><span class="hljs-constructor">Acquire(<span class="hljs-params">arg</span>)</span>到底会不会报错：<br>网友观点 <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">try</span><span class="hljs-constructor">Acquire(<span class="hljs-params">arg</span>)</span> &amp;&amp;acquire<span class="hljs-constructor">Queued(<span class="hljs-params">addWaiter</span>(Node.EXCLUSIVE)</span>, arg)) 这里如果报错就不会添加node<br>而我看了aqs的源码设计时通过tryAcquire的来实现各种不同的并发控制类，tryAcquire是否报错已经不是AbstractQueuedSynchronizer这个类能控制的了，而是扩展类逻辑处理，可能出现当第一次执行tryAcquire不报错，而其它线程申请了资源，当前线程再次申请资源报错了呢？<br>可以看出aqs作者还是做了aqs同步器的一个执行保障<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">/**<br>     * 该方法实现某个<span class="hljs-keyword">node</span><span class="hljs-title">取消获取锁。</span><br><span class="hljs-title">     */</span><br><span class="hljs-title">    private</span> void cancelAcquire(<span class="hljs-keyword">Node</span> <span class="hljs-title">node</span>) &#123;<br>        // Ignore if <span class="hljs-keyword">node</span> <span class="hljs-title">doesn</span>&#x27;t exist<br>        if (<span class="hljs-keyword">node</span> <span class="hljs-title">== null</span>)<br>            return;<br><br>        node.thread = null;<br><br>        //  遍历并更新节点前驱，把<span class="hljs-keyword">node</span><span class="hljs-title">的prev</span>指向前部第一个非取消节点。<br>        <span class="hljs-keyword">Node</span> <span class="hljs-title">pred</span> = node.prev;<br>        while (pred.waitStatus &gt; <span class="hljs-number">0</span>)<br>            node.prev = pred = pred.prev;<br><br>        // 记录pred节点的后继为predNext，后续CAS会用到。<br>        <span class="hljs-keyword">Node</span> <span class="hljs-title">predNext</span> = pred.next;<br><br>        // 直接把当前节点的等待状态置为取消,后继节点即便也在cancel可以跨越<span class="hljs-keyword">node</span><span class="hljs-title">节点。</span><br><span class="hljs-title">        node</span>.waitStatus = Node.CANCELLED;<br><br>        /*<br>         * 如果CAS将tail从<span class="hljs-keyword">node</span><span class="hljs-title">置为pred</span>节点了<br>         * 则剩下要做的事情就是尝试用CAS将pred节点的next更新为null以彻底切断pred和<span class="hljs-keyword">node</span><span class="hljs-title">的联系。</span><br><span class="hljs-title">         * 这样一来就断开了pred</span>与pred的所有后继节点，这些节点由于变得不可达，最终会被回收掉。<br>         * 由于<span class="hljs-keyword">node</span><span class="hljs-title">没有后继节点，所以这种情况到这里整个cancel</span>就算是处理完毕了。<br>         *<br>         * 这里的CAS更新pred的next即使失败了也没关系，说明有其它新入队线程或者其它取消线程更新掉了。<br>         */<br>        if (<span class="hljs-keyword">node</span> <span class="hljs-title">== tail</span> &amp;&amp; compareAndSetTail(<span class="hljs-keyword">node</span><span class="hljs-title">, pred</span>)) &#123;<br>            compareAndSetNext(pred, predNext, null);<br>        &#125; else &#123;<br>            // 如果<span class="hljs-keyword">node</span><span class="hljs-title">还有后继节点，这种情况要做的事情是把pred</span>和后继非取消节点拼起来。<br>            int ws;<br>            if (pred != head &amp;&amp;<br>                    ((ws = pred.waitStatus) == Node.SIGNAL ||<br>                            (ws <span class="hljs-tag">&lt;= 0 &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;</span><br><span class="hljs-tag">                    pred.thread != null) &#123;</span><br><span class="hljs-tag">                Node next = node.next;</span><br><span class="hljs-tag">                /*</span><br><span class="hljs-tag">                 * 如果node的后继节点next非取消状态的话，则用CAS尝试把pred的后继置为node的后继节点</span><br><span class="hljs-tag">                 * 这里if条件为false或者CAS失败都没关系，这说明可能有多个线程在取消，总归会有一个能成功的。</span><br><span class="hljs-tag">                 */</span><br><span class="hljs-tag">                if (next != null &amp;&amp; next.waitStatus &lt;= 0)</span><br><span class="hljs-tag">                    compareAndSetNext(pred, predNext, next);</span><br><span class="hljs-tag">            &#125; else &#123;</span><br><span class="hljs-tag">                /*</span><br><span class="hljs-tag">                 * 这时说明pred == head或者pred状态取消或者pred.thread == null</span><br><span class="hljs-tag">                 * 在这些情况下为了保证队列的活跃性，需要去唤醒一次后继线程。</span><br><span class="hljs-tag">                 * 举例来说pred == head完全有可能实际上目前已经没有线程持有锁了，</span><br><span class="hljs-tag">                 * 自然就不会有释放锁唤醒后继的动作。如果不唤醒后继，队列就挂掉了。</span><br><span class="hljs-tag">                 *</span><br><span class="hljs-tag">                 * 这种情况下看似由于没有更新pred的next的操作，队列中可能会留有一大把的取消节点。</span><br><span class="hljs-tag">                 * 实际上不要紧，因为后继线程唤醒之后会走一次试获取锁的过程，</span><br><span class="hljs-tag">                 * 失败的话会走到shouldParkAfterFailedAcquire的逻辑。</span><br><span class="hljs-tag">                 * 那里面的if中有处理前驱节点如果为取消则维护pred/next,踢掉这些取消节点的逻辑。</span><br><span class="hljs-tag">                 */</span><br><span class="hljs-tag">                unparkSuccessor(node);</span><br><span class="hljs-tag">            &#125;</span><br><span class="hljs-tag">            /*</span><br><span class="hljs-tag">             * 取消节点的next之所以设置为自己本身而不是null,</span><br><span class="hljs-tag">             * 是为了方便AQS中Condition部分的isOnSyncQueue方法,</span><br><span class="hljs-tag">             * 判断一个原先属于条件队列的节点是否转移到了同步队列。</span><br><span class="hljs-tag">             *</span><br><span class="hljs-tag">             * 因为同步队列中会用到节点的next域，取消节点的next也有值的话，</span><br><span class="hljs-tag">             * 可以断言next域有值的节点一定在同步队列上。</span><br><span class="hljs-tag">             *</span><br><span class="hljs-tag">             * 在GC层面，和设置为null具有相同的效果。</span><br><span class="hljs-tag">             */</span><br><span class="hljs-tag">            node.next = node; // help GC</span><br><span class="hljs-tag">        &#125;</span><br><span class="hljs-tag">    &#125;</span><br></code></pre></td></tr></table></figure><p>node节点向前查找waitStatus不是cancel的节点并且设置prev，这里的node就是node3</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-keyword">while</span> (<span class="hljs-built_in">pred</span>.waitStatus &gt; <span class="hljs-number">0</span>)<br>            node.prev = <span class="hljs-built_in">pred</span> = <span class="hljs-built_in">pred</span>.prev;<br></code></pre></td></tr></table></figure><img src="/2020/09/27/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-27-aqs%E4%B9%8BJava8%E7%8B%AC%E5%8D%A0%E9%94%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20220929113055451.png" class="" title="image-20220929113055451"><p>如果node是tail节点，设置pred节点为tail节点，并且设置pred的后置节点为null。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">if (<span class="hljs-keyword">node</span> <span class="hljs-title">== tail</span> &amp;&amp; compareAndSetTail(<span class="hljs-keyword">node</span><span class="hljs-title">, pred</span>)) &#123;<br>            compareAndSetNext(pred, predNext, null);<br>&#125;<br><br>过程分析：<br>（<span class="hljs-number">1</span>）当<span class="hljs-keyword">node</span><span class="hljs-title">时tail</span>时，cas比较<span class="hljs-keyword">node</span><span class="hljs-title">和tail</span>，替换成pred节点，这里可能tail节点发生变化，变成<span class="hljs-keyword">node</span><span class="hljs-title">的next</span>节点<br>（<span class="hljs-number">2</span>）如果（<span class="hljs-number">1</span>）成功，那么pred成为新的tail节点，当其它线程申请资源加入队列，则tail也会发生变化，所以pred.next被其它线程替换，则设置null也会失败<br></code></pre></td></tr></table></figure><p>例如：node3为node</p><img src="/2020/09/27/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-27-aqs%E4%B9%8BJava8%E7%8B%AC%E5%8D%A0%E9%94%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20220929124015820.png" class="" title="image-20220929124015820"><p>如果node不是tail节点，并且pred不是head，pred节点没有cancel（状态&lt;=0，置为SIGNAL，thread!=null）</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">if</span> (pred !=<span class="hljs-built_in"> head</span> &amp;&amp;<br>                    ((ws = pred.waitStatus) == Node.SIGNAL ||<br>                            (ws &lt;= <span class="hljs-number">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;<br>                    pred.thread != null) &#123;<br>                Node <span class="hljs-keyword">next</span> = <span class="hljs-type">node</span>.<span class="hljs-keyword">next</span>;<br>                /*<br>                 * 如果<span class="hljs-type">node</span>的后继节点<span class="hljs-keyword">next</span>非取消状态的话，则用CAS尝试把pred的后继置为<span class="hljs-type">node</span>的后继节点<br>                 * 这里<span class="hljs-keyword">if</span>条件<span class="hljs-built_in">为false</span>或者CAS失败都没关系，这说明可能有多个线程在取消，总归会有一个能成功的。<br>                 */<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">next</span> != null &amp;&amp; <span class="hljs-keyword">next</span>.waitStatus &lt;= <span class="hljs-number">0</span>)<br>                    compareAndSetNext(pred, predNext, <span class="hljs-keyword">next</span>);<br>            &#125;<br></code></pre></td></tr></table></figure><p>例如：node1为pred</p><img src="/2020/09/27/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-27-aqs%E4%B9%8BJava8%E7%8B%AC%E5%8D%A0%E9%94%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20220929131418666.png" class="" title="image-20220929131418666"><p>如果pred（node1）是head节点或者被另一个线程突然取消了，那么为了保证队列的活跃性，唤醒后继节点</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">unparkSuccessor(<span class="hljs-keyword">node</span><span class="hljs-title">);</span><br></code></pre></td></tr></table></figure><img src="/2020/09/27/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-27-aqs%E4%B9%8BJava8%E7%8B%AC%E5%8D%A0%E9%94%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/image-20220929123630272.png" class="" title="image-20220929123630272"><p>例子：</p><p>当node1、node2、node3都是取消节点，则最终的图可能会出现这样子</p><img src="/2020/09/27/%E5%90%8E%E7%AB%AF/java/aqs/2020-09-27-aqs%E4%B9%8BJava8%E7%8B%AC%E5%8D%A0%E9%94%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1664462015393.png" class="" width="1664461399757"><p>cancelAcquire为什么要这么设计？</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs q">首先要明确一点的是，这个方法除了做队列如果出现异常唤醒队列外，还有一个非常中的是做取消节点的内存处理即GC<br>（<span class="hljs-number">1</span>）设置所有取消节点的<span class="hljs-built_in">prev</span>指向前面最近的一个SIGNAL正常节点，<span class="hljs-built_in">prev</span>可能是head（如果是head则需要唤醒队列），如果是pred也是CANCELLED，则需要重新唤醒一次队列（这种可能出现的情况是，当线程<span class="hljs-number">1</span>执行cancelAcquire中途，pred突然执行因为异常执行cancelAcquire，那么选出来的pred就不正常，情况不明之下，唤醒队列很重要，这里是一个保障）<br>（<span class="hljs-number">2</span>）非常重要的一点时<span class="hljs-built_in">prev</span>设置成功，GC回收则成功了一半<br>所有的cancel节点<span class="hljs-built_in">prev</span>指向SIGNAL，并且cancel节点的<span class="hljs-built_in">next</span>=自己，这里这么设计主要考虑了Condition部分的isOnSyncQueue方法。<br>GC回收的另一半则是通过通过shouldParkAfterFailedAcquire执行找到一个非cancel的pred节点，当设置为head节点时，head.<span class="hljs-built_in">prev</span>.<span class="hljs-built_in">next</span>=<span class="hljs-built_in">null</span>,head.<span class="hljs-built_in">prev</span>=<span class="hljs-built_in">null</span><br></code></pre></td></tr></table></figure><p>伪代码：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">void acquire(int arg)&#123;//申请执行<br>    if(boolean tryAcquire(int arg))&#123;//尝试申请资源<br>return <span class="hljs-literal">true</span>;//申请成功，可以直接执行<br>    &#125;else&#123;<br>        <span class="hljs-keyword">Node</span> <span class="hljs-title">node</span>=addWaiter(Node.EXCLUSIVE)&#123;//添加独占锁节点<br>            <span class="hljs-keyword">Node</span> <span class="hljs-title">node</span>=new <span class="hljs-keyword">Node</span><br>            <span class="hljs-title">Node</span> pred = tail;<br>            if(pred!=null)&#123;//第一次向队列中添加<span class="hljs-keyword">node</span><br>                <span class="hljs-title">将当前node</span>加入队列尾部tail<br>            &#125;else&#123;<br>                enq(<span class="hljs-keyword">node</span><span class="hljs-title">)&#123;</span><br><span class="hljs-title">                    if</span>(<span class="hljs-attr">tail=</span>=null)&#123;<br>                        创建head节点，设置<span class="hljs-attr">tail=</span>head,进入循环将当前<span class="hljs-keyword">node</span><span class="hljs-title">加入队列尾部tail</span><br>                    &#125;else&#123;<br>                        将当前<span class="hljs-keyword">node</span><span class="hljs-title">加入队列尾部tail</span>  <br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        boolean <span class="hljs-attr">result=</span>acquireQueued(<span class="hljs-keyword">node</span><span class="hljs-title">, int</span> arg)&#123;<br>            <span class="hljs-keyword">Node</span> <span class="hljs-title">p</span> = node.predecessor();//p为<span class="hljs-keyword">node</span><span class="hljs-title">前置节点</span><br><span class="hljs-title">            if</span>(p==head)&#123;//如果<span class="hljs-keyword">node</span><span class="hljs-title">的前置节点为head</span><br>                if(tryAcquire(arg))&#123;//如果申请资源成功，则相当于lock获取到锁<br>                    setHead(<span class="hljs-keyword">node</span><span class="hljs-title">);//设置node</span>为head节点<br>                    return ;<br>                &#125;<br>            &#125;<br>            if (shouldParkAfterFailedAcquire(pred, <span class="hljs-keyword">node</span><span class="hljs-title">)&#123;</span><br><span class="hljs-title">                if</span> (pred.waitStatus == Node.SIGNAL)&#123;//前置节点是通知状态，表示正常，等pred执行完逻辑释放锁时，就会唤醒<span class="hljs-keyword">node</span><span class="hljs-title">线程</span><br><span class="hljs-title">                    return</span>;<br>                &#125;<br>                if(pred.waitStatus&gt;<span class="hljs-number">0</span>)&#123;<br>                    将<span class="hljs-keyword">node</span><span class="hljs-title">节点的prev</span>设置为未取消的节点<br>                &#125;else&#123;<br>                    设置前驱的等待状态为SIGNAL, 并且之后会回到循环再次重试获取锁。<br>                &#125;<br>                return<br>            &#125;)&#123;<br>                if(parkAndCheckInterrupt()&#123;<br>                    阻塞当前线程，并且返回当前线程恢复是否是通过interrupt<br>                &#125;)&#123;<br>                    <br>                &#125;  <br>            &#125;<br>        &#125;<br>        if(result)&#123;<br>            获取资源成功<br>        &#125;<br>    &#125;<br>&#125;    <br></code></pre></td></tr></table></figure><h2 id="释放独占锁"><a href="#释放独占锁" class="headerlink" title="释放独占锁"></a>释放独占锁</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs xquery">/**<br>     * 释放独占锁<br>     */<br>    public final<span class="hljs-built_in"> boolean</span> release(int arg) &#123;<br>        <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>            /*<br>             * 此时<span class="hljs-built_in">的head</span>节点可能有<span class="hljs-number">3</span>种情况:<br>             * <span class="hljs-number">1</span>. null (AQS<span class="hljs-built_in">的head</span>延迟初始化+无竞争的情况)<br>             * <span class="hljs-number">2</span>. 当前线程在获取锁时new出来的节点通过setHead设置的<br>             * <span class="hljs-number">3</span>. 由于通过tryRelease已经完全释放掉了独占锁，有新的节点在acquireQueued中获取到了独占锁，并设置<span class="hljs-built_in">了head</span><br><br>             * 第三种情况可以再分为两种情况：<br>             * （一）时刻<span class="hljs-number">1</span>:线程A通过acquireQueued，持锁成功，set<span class="hljs-built_in">了head</span><br>             *          时刻<span class="hljs-number">2</span>:线程B通过tryAcquire试图获取独占锁失败失败，进入acquiredQueued<br>             *          时刻<span class="hljs-number">3</span>:线程A通过tryRelease释放了独占锁<br>             *          时刻<span class="hljs-number">4</span>:线程B通过acquireQueued中的tryAcquire获取到了独占锁并调用setHead<br>             *          时刻<span class="hljs-number">5</span>:线程A读到了此时<span class="hljs-built_in">的head</span>实际上是线程B对应的<span class="hljs-type">node</span><br>             * （二）时刻<span class="hljs-number">1</span>:线程A通过tryAcquire直接持锁成功<span class="hljs-built_in">，head</span>为null<br>             *          时刻<span class="hljs-number">2</span>:线程B通过tryAcquire试图获取独占锁失败失败，入队过程中初始化<span class="hljs-built_in">了head</span>，进入acquiredQueued<br>             *          时刻<span class="hljs-number">3</span>:线程A通过tryRelease释放了独占锁，此时线程B还未开始tryAcquire<br>             *          时刻<span class="hljs-number">4</span>:线程A读到了此时<span class="hljs-built_in">的head</span>实际上是线程B初始化出来的傀<span class="hljs-built_in">儡head</span><br>             */<br>            Node h =<span class="hljs-built_in"> head</span>;<br>            //<span class="hljs-built_in"> head</span>节点状态不会是CANCELLED，所以这里h.waitStatus != <span class="hljs-number">0</span>相当于h.waitStatus &lt; <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> (h != null &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)<br>                // 唤醒后继线程<br>                unparkSuccessor(h);<br>            <span class="hljs-keyword">return</span><span class="hljs-built_in"> true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span><span class="hljs-built_in"> false</span>;<br>    &#125;<br>    /**<br>     * 唤醒后继线程<br>     */<br>    private void unparkSuccessor(Node <span class="hljs-type">node</span>) &#123;<br>        //尝试将<span class="hljs-type">node</span>的等待状态置为<span class="hljs-number">0</span>,这样的话,后继争用线程可以有机会再尝试获取一次锁。<br>        int ws = <span class="hljs-type">node</span>.waitStatus;<br>        <span class="hljs-keyword">if</span> (ws &lt; <span class="hljs-number">0</span>)<br>            compareAndSetWaitStatus(<span class="hljs-type">node</span>, ws, <span class="hljs-number">0</span>);<br>        /*<br>         * 这里的逻辑就是如果<span class="hljs-type">node</span>.<span class="hljs-keyword">next</span>存在并且状态不为取消，则直接唤醒s即可<br>         * 否则需要<span class="hljs-built_in">从tail</span>开始向前找到<span class="hljs-type">node</span>之后最近的非取消节点。<br>         *<br>         * 这里为什么要<span class="hljs-built_in">从tail</span>开始向前查找也是值得琢磨的:<br>         * 如果读到s == null，不代表<span class="hljs-type">node</span>就<span class="hljs-built_in">为tail</span>，参考addWaiter以及enq函数中的我的注释。<br>         * 不妨考虑到如下场景：<br>         * <span class="hljs-number">1</span>. <span class="hljs-type">node</span>某时刻<span class="hljs-built_in">为tail</span><br>         * <span class="hljs-number">2</span>. 有新线程通过addWaiter中的<span class="hljs-keyword">if</span>分支或者enq方法添加自己<br>         * <span class="hljs-number">3</span>. compareAndSetTail成功<br>         * <span class="hljs-number">4</span>. 此时这里的Node s = <span class="hljs-type">node</span>.<span class="hljs-keyword">next</span>读出来s == null，但事实上<span class="hljs-type">node</span>已经不<span class="hljs-built_in">是tail</span>，它有后继了!<br>         */<br>        Node s = <span class="hljs-type">node</span>.<span class="hljs-keyword">next</span>;<br>        <span class="hljs-keyword">if</span> (s == null || s.waitStatus &gt; <span class="hljs-number">0</span>) &#123;<br>            s = null;<br>            <span class="hljs-keyword">for</span> (Node t =<span class="hljs-built_in"> tail</span>; t != null &amp;&amp; t != <span class="hljs-type">node</span>; t = t.prev)<br>                <span class="hljs-keyword">if</span> (t.waitStatus &lt;= <span class="hljs-number">0</span>)<br>                    s = t;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s != null)<br>            LockSupport.unpark(s.thread);<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>aqs的逻辑看完了还是很容易理解，aqs设计的内容非常多，需要一个一个知识点解析，这一章节主要分析独占锁，而在我们设计的网站程序中，独占锁时相当重要的，所以这个是掌握aqs的种种之路。</p><p>对于aqs节点的gc内存回收，几个地方：</p><p>（1）sethead，设置head.prev.next=null,head.prev=null，则这里GC node，这里GC的是正常节点</p><p>（2）shouldParkAfterFailedAcquire 主要作用是调整node的prev到非取消节点</p><p>（3）cancelAcquire 看上图分析</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aqs</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dubbo教程</title>
    <link href="/2020/09/21/%E5%90%8E%E7%AB%AF/spring/dubbo/dubbo%E6%95%99%E7%A8%8B/"/>
    <url>/2020/09/21/%E5%90%8E%E7%AB%AF/spring/dubbo/dubbo%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1 基本介绍"></a>1 基本介绍</h2><p><a href="https://www.jianshu.com/p/ee700dc6fd9b">简书</a></p><p>用于提高业务复用及整合的**分布式服务框架(RPC)**是关键。</p><p>发展演变</p><img src="/2020/09/21/%E5%90%8E%E7%AB%AF/spring/dubbo/dubbo%E6%95%99%E7%A8%8B/1619918925779.png" class="" width="1619918925779"><img src="/2020/09/21/%E5%90%8E%E7%AB%AF/spring/dubbo/dubbo%E6%95%99%E7%A8%8B/1619918948326.png" class="" width="1619918948326"><h4 id="流动计算架构"><a href="#流动计算架构" class="headerlink" title="流动计算架构"></a><em>流动计算架构</em></h4><img src="/2020/09/21/%E5%90%8E%E7%AB%AF/spring/dubbo/dubbo%E6%95%99%E7%A8%8B/1619918968601.png" class="" width="1619918968601"><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>RPC【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p><h4 id="RPC基本原理"><a href="#RPC基本原理" class="headerlink" title="RPC基本原理"></a><em>RPC基本原理</em></h4><img src="/2020/09/21/%E5%90%8E%E7%AB%AF/spring/dubbo/dubbo%E6%95%99%E7%A8%8B/wps1.jpg" class="" title="img"> <img src="/2020/09/21/%E5%90%8E%E7%AB%AF/spring/dubbo/dubbo%E6%95%99%E7%A8%8B/1619919041413.png" class="" width="1619919041413"><h2 id="2、dubbo核心概念"><a href="#2、dubbo核心概念" class="headerlink" title="2、dubbo核心概念"></a>2、dubbo核心概念</h2><h3 id="2-1）、简介"><a href="#2-1）、简介" class="headerlink" title="2.1）、简介"></a>2.1）、简介</h3><p>Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><h2 id="2-2）基本概念"><a href="#2-2）基本概念" class="headerlink" title="2.2）基本概念"></a>2.2）基本概念</h2><img src="/2020/09/21/%E5%90%8E%E7%AB%AF/spring/dubbo/dubbo%E6%95%99%E7%A8%8B/1619919084318.png" class="" width="1619919084318"><p><strong>服务提供者（Provider）</strong>：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p><strong>服务消费者（Consumer）</strong>: 调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p><strong>注册中心（Registry）</strong>：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p><p><strong>监控中心（Monitor）</strong>：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p><h2 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h2><p><a href="https://github.com/apache/incubator-dubbo-ops">incubator-dubbo-ops</a>官网资源下载</p><p>dubbo-admin：用于查看服务信息及设置路由等等</p><p>dubbo-monitor-simple：监控中心</p><h1 id="Spring-Dubbo集成"><a href="#Spring-Dubbo集成" class="headerlink" title="Spring Dubbo集成"></a>Spring Dubbo集成</h1><h2 id="gmall-interface接口模块"><a href="#gmall-interface接口模块" class="headerlink" title="gmall-interface接口模块"></a>gmall-interface接口模块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 按照用户id返回所有的收货地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> List&lt;UserAddress&gt; <span class="hljs-title function_">getUserAddressList</span><span class="hljs-params">(String userId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="user-service-provider提供模块"><a href="#user-service-provider提供模块" class="headerlink" title="user-service-provider提供模块"></a>user-service-provider提供模块</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.gmall<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>user-service-provider<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.gmall<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gmall-interface<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/dubbo --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-framework --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-framework<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>provider.xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user-service-provider&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:parameter</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;mapping-type&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;metadata&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:application</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;registry1&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;zookeeper&quot;</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://192.168.10.103:2181&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 3、指定通信规则（通信协议？通信端口） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:protocol</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dubbo&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;20882&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:protocol</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 4、暴露服务   ref：指向服务的真正的实现对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.atguigu.gmall.service.UserService&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userServiceImpl01&quot;</span> <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;getUserAddressList&quot;</span> <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;1000&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:method</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:service</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--统一设置服务提供方的规则  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:provider</span> <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;1000&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:provider</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!-- 服务的实现 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServiceImpl01&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.gmall.service.impl.UserServiceImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.atguigu.gmall.service.UserService&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userServiceImpl02&quot;</span> <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.0.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;getUserAddressList&quot;</span> <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;1000&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:method</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:service</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userServiceImpl02&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.gmall.service.impl.UserServiceImpl2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 连接监控中心 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:monitor</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;registry&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:monitor</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br><span class="hljs-keyword">public</span> List&lt;UserAddress&gt; <span class="hljs-title function_">getUserAddressList</span><span class="hljs-params">(String userId)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;UserServiceImpl.....old...&quot;</span>);<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-type">UserAddress</span> <span class="hljs-variable">address1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserAddress</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;北京市昌平区宏福科技园综合楼3层&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;李老师&quot;</span>, <span class="hljs-string">&quot;010-56253825&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>);<br><span class="hljs-type">UserAddress</span> <span class="hljs-variable">address2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserAddress</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;深圳市宝安区西部硅谷大厦B座3层（深圳分校）&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;王老师&quot;</span>, <span class="hljs-string">&quot;010-56253825&quot;</span>, <span class="hljs-string">&quot;N&quot;</span>);<br><span class="hljs-comment">/*try &#123;</span><br><span class="hljs-comment">Thread.sleep(4000);</span><br><span class="hljs-comment">&#125; catch (InterruptedException e) &#123;</span><br><span class="hljs-comment">// TODO Auto-generated catch block</span><br><span class="hljs-comment">e.printStackTrace();</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-keyword">return</span> Arrays.asList(address1,address2);<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br><span class="hljs-keyword">public</span> List&lt;UserAddress&gt; <span class="hljs-title function_">getUserAddressList</span><span class="hljs-params">(String userId)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;UserServiceImpl.....new...&quot;</span>);<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-type">UserAddress</span> <span class="hljs-variable">address1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserAddress</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;北京市昌平区宏福科技园综合楼4层&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;李老师&quot;</span>, <span class="hljs-string">&quot;010-56253825&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>);<br><span class="hljs-type">UserAddress</span> <span class="hljs-variable">address2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserAddress</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;深圳市宝安区西部硅谷大厦B座4层（深圳分校）&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;王老师&quot;</span>, <span class="hljs-string">&quot;010-56253825&quot;</span>, <span class="hljs-string">&quot;N&quot;</span>);<br><br><span class="hljs-keyword">return</span> Arrays.asList(address1,address2);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="order-service-consumer服务提供"><a href="#order-service-consumer服务提供" class="headerlink" title="order-service-consumer服务提供"></a>order-service-consumer服务提供</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.gmall.service.impl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order-service-consumer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:application</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://192.168.10.103:2181&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:registry</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  配置本地存根--&gt;</span><br><br><span class="hljs-comment">&lt;!--声明需要调用的远程服务的接口；生成远程服务代理  --&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">1）、精确优先 (方法级优先，接口级次之，全局配置再次之)</span><br><span class="hljs-comment">2）、消费者设置优先(如果级别一样，则消费方优先，提供方次之)</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- timeout=&quot;0&quot; 默认是1000ms--&gt;</span><br><span class="hljs-comment">&lt;!-- retries=&quot;&quot;:重试次数，不包含第一次调用，0代表不重试--&gt;</span><br><span class="hljs-comment">&lt;!-- 幂等（设置重试次数）【查询、删除、修改】、非幂等（不能设置重试次数）【新增】 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.atguigu.gmall.service.UserService&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;5000&quot;</span> <span class="hljs-attr">retries</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;dubbo:method name=&quot;getUserAddressList&quot; timeout=&quot;1000&quot;&gt;&lt;/dubbo:method&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:reference</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置当前消费者的统一规则：所有的服务都不检查 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:consumer</span> <span class="hljs-attr">check</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;5000&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:consumer</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:monitor</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;registry&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dubbo:monitor</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;dubbo:monitor address=&quot;127.0.0.1:7070&quot;&gt;&lt;/dubbo:monitor&gt; --&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>服务调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br>UserService userService;<br><span class="hljs-keyword">public</span> List&lt;UserAddress&gt; <span class="hljs-title function_">initOrder</span><span class="hljs-params">(String userId)</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>System.out.println(<span class="hljs-string">&quot;用户id：&quot;</span>+userId);<br><span class="hljs-comment">//1、查询用户的收货地址</span><br>List&lt;UserAddress&gt; addressList = userService.getUserAddressList(userId);<br><span class="hljs-keyword">for</span> (UserAddress userAddress : addressList) &#123;<br>System.out.println(userAddress.getUserAddress());<br>&#125;<br><span class="hljs-keyword">return</span> addressList;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="http://localhost:8083/orderController/getOrder?username=admin">http://localhost:8083/orderController/getOrder?username=admin</a></p><p><a href="http://localhost:8084/userCenter/getUser?username=admin">http://localhost:8084/userCenter/getUser?username=admin</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
      <tag>dubbo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos7防火墙配置</title>
    <link href="/2020/03/06/centos/centos7%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/03/06/centos/centos7%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="一、防火墙服务"><a href="#一、防火墙服务" class="headerlink" title="一、防火墙服务"></a>一、<strong>防火墙服务</strong></h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum install firewalld <span class="hljs-regexp">//</span>防火墙安装<br>systemctl status firewalld  或者 firewall-cmd --state <span class="hljs-regexp">//</span>防火墙状态查看<br>systemctl disable firewalld <span class="hljs-regexp">//</span>停止<br>systemctl stop firewalld <span class="hljs-regexp">//</span>禁用<br>systemctl start firewalld <span class="hljs-regexp">//</span>启动<br>systemctl restart firewalld <span class="hljs-regexp">//</span>重启<br><br><span class="hljs-comment">#selinux平时没怎么用过，所以直接 关掉了</span><br>setennforce <span class="hljs-number">0</span> <span class="hljs-regexp">//</span>零时关掉<br>vi <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/selinux /</span><span class="hljs-regexp">/配置文件永久关掉 </span><br></code></pre></td></tr></table></figure><h1 id="二、防火墙基本命令"><a href="#二、防火墙基本命令" class="headerlink" title="二、防火墙基本命令"></a>二、防火墙基本命令</h1><p><strong>查看default zone和active zone</strong></p><p>还没做任何配置之前，default zone和active zone都应该是public</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">firewall-cmd --<span class="hljs-keyword">get</span>-<span class="hljs-keyword">default</span>-zone<br>firewall-cmd --<span class="hljs-keyword">get</span>-active-zones<br></code></pre></td></tr></table></figure><p><strong>查看当前开了哪些端口</strong></p><p>其实一个服务对应一个端口，每个服务对应/usr/lib/firewalld/services下面一个xml文件。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--list-services</span><br></code></pre></td></tr></table></figure><p><strong>查看还有哪些服务可以打开</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">firewall-cmd --<span class="hljs-keyword">get</span>-services<br></code></pre></td></tr></table></figure><p><strong>查看所有打开的端口</strong></p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">zone=public</span> <span class="hljs-literal">--</span><span class="hljs-comment">list</span><span class="hljs-literal">-</span><span class="hljs-comment">ports</span><br></code></pre></td></tr></table></figure><p><strong>更新防火墙规则</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--reload</span><br></code></pre></td></tr></table></figure><p><strong>添加一个服务到firewalld</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">firewall-cmd --add-service=http <span class="hljs-regexp">//</span>http换成想要开放的service<br></code></pre></td></tr></table></figure><p>要永久开发一个service，需要加上 –permanent</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> <span class="hljs-literal">--</span><span class="hljs-comment">permanent</span> <span class="hljs-literal">--</span><span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">service=http</span><br></code></pre></td></tr></table></figure><p><strong>添加端口</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=443/tcp --permanent<br></code></pre></td></tr></table></figure><p><strong>取消端口</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">firewall-cmd --permanent <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--remove-port</span>=443/tcp<br></code></pre></td></tr></table></figure><p><strong>防火墙配置重新加载</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--reload</span><br></code></pre></td></tr></table></figure><p><strong>查看所有zone</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--list-all-zones</span><br></code></pre></td></tr></table></figure><h1 id="三、查看zone"><a href="#三、查看zone" class="headerlink" title="三、查看zone"></a>三、查看zone</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">public</span><br>  <span class="hljs-attr">target:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">icmp-block-inversion:</span> <span class="hljs-literal">no</span><br>  <span class="hljs-attr">interfaces:</span> <br>  <span class="hljs-attr">sources:</span> <br>  <span class="hljs-attr">services:</span> <span class="hljs-string">dhcpv6-client</span> <span class="hljs-string">ssh</span><br>  <span class="hljs-attr">ports:</span>  <span class="hljs-number">22</span><span class="hljs-string">/tcp</span>      <span class="hljs-string">//端口配置</span><br>  <span class="hljs-attr">protocols:</span> <br>  <span class="hljs-attr">masquerade:</span> <span class="hljs-literal">no</span><br>  <span class="hljs-attr">forward-ports:</span> <br>  <span class="hljs-attr">source-ports:</span> <br>  <span class="hljs-attr">icmp-blocks:</span> <br>  <span class="hljs-attr">rich rules:</span><br><span class="hljs-string">target</span><br><span class="hljs-string">可用于接受（accept）、拒绝（reject）或丢弃（drop）与任何规则（rule）(端口（port）、服务（etc）等)不匹配的每个包。在可信区域中使用ACCEPT</span> <span class="hljs-string">target接收不匹配任何规则的每个包。在block</span> <span class="hljs-string">zone中使用%%REJECT%%目标来拒绝（使用默认的firewalld拒绝类型）不匹配任何规则的每个包。DROP</span> <span class="hljs-string">target用于drop</span> <span class="hljs-string">zone中删除不匹配任何规则的每个包。如果没有指定目标，则将拒绝不匹配任何规则的每个包。</span><br><span class="hljs-string">icmp-block-inversion</span><br><span class="hljs-string">是一个可选标记，在区域配置中只能使用一次。此标志反转icmp块处理。区域中只接受启用的ICMP类型，而拒绝所有其他类型。</span><br><span class="hljs-string">interfaces</span><br><span class="hljs-string">是一个可选的标记，可以多次使用。它可用于将接口绑定到zone。</span><br><span class="hljs-string">sources</span><br><span class="hljs-string">是一个可选的标记，可以多次使用。它可用于将源地址、地址范围、MAC地址或ipset绑定到一个区域。</span><br><span class="hljs-string">services</span><br><span class="hljs-string">是一个可选的标记，可以多次使用，以启用多个服务条目。服务条目格式如下:</span><br><span class="hljs-string">ports</span><br><span class="hljs-string">是一个可选标记，可多次用于具有多个端口条目。端口条目的所有属性都是强制性的:</span><br><span class="hljs-string">port=&quot;portid[-portid]&quot;</span>     <span class="hljs-comment">#定义端口或者端口范围</span><br><span class="hljs-string">protocol=&quot;tcp|udp|sctp|dccp&quot;</span>    <span class="hljs-comment">#定义协议类型</span><br></code></pre></td></tr></table></figure><h1 id="四、防火墙开启问题"><a href="#四、防火墙开启问题" class="headerlink" title="四、防火墙开启问题"></a>四、防火墙开启问题</h1><p>1 防火墙firewalld报错：ERROR: Exception DBusException: org.freedesktop.DBus.Error.AccessDenied:…</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis">重启dbus服务：<span class="hljs-params">system</span>ctl restart dbus<br>然后再：<span class="hljs-params">system</span>ctl start firewalld<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos</tag>
      
      <tag>防火墙</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NoSql入门和概述</title>
    <link href="/2020/03/06/nosql/NoSql%E5%85%A5%E9%97%A8%E5%92%8C%E6%A6%82%E8%BF%B0/"/>
    <url>/2020/03/06/nosql/NoSql%E5%85%A5%E9%97%A8%E5%92%8C%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>对于以前采用数据存储的业务数据大多数采用的是MySQL，而对于作伪数据多样性，及并发上，就出现性能瓶颈。</p><p>而互联网需要数据海量性、多样性、实时性，需求需要高性能、高可扩、高性能。</p><p>所以就出现了非关系数据库(NoSQL)，因为一些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h4 id="易扩展"><a href="#易扩展" class="headerlink" title="易扩展"></a>易扩展</h4><p>NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。<br>数据之间无关系，这样就非常容易扩展。也无形之间，在架构的层面上带来了可扩展的能力。</p><h4 id="大数据量高性能"><a href="#大数据量高性能" class="headerlink" title="大数据量高性能"></a>大数据量高性能</h4><p>NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，这得益于它的无关系性，数据库的结构简单。<br>一般MySQL使用Query Cache，每次表的更新Cache就失效，是一种大粒度的Cache，在针对web2.0的交互频繁的应用，Cache性能不高。而NoSQL的Cache是记录级的，是一种细粒度的Cache，所以NoSQL在这个层面上来说就要性能高很多了。</p><h4 id="多样灵活的数据模型"><a href="#多样灵活的数据模型" class="headerlink" title="多样灵活的数据模型"></a>多样灵活的数据模型</h4><p>NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式。</p><h2 id="RDBMS-vs-NoSQL"><a href="#RDBMS-vs-NoSQL" class="headerlink" title="RDBMS vs NoSQL"></a>RDBMS vs NoSQL</h2><h4 id="RDBMS"><a href="#RDBMS" class="headerlink" title="RDBMS"></a>RDBMS</h4><ul><li>高度组织化结构化数据</li><li>结构化查询语言（SQL）</li><li>数据和关系都存储在单独的表中。</li><li>数据操纵语言，数据定义语言</li><li>严格的一致性</li><li>基础事务</li></ul><h4 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h4><ul><li>代表着不仅仅是SQL</li><li>没有声明性查询语言</li><li>没有预定义的模式<br>-键 - 值对存储，列存储，文档存储，图形数据库</li><li>最终一致性，而非ACID属性</li><li>非结构化和不可预知的数据</li><li>CAP定理</li><li>高性能，高可用性和可伸缩性</li></ul><h2 id="NoSQL数据模型-聚合类型"><a href="#NoSQL数据模型-聚合类型" class="headerlink" title="NoSQL数据模型(聚合类型)"></a>NoSQL数据模型(聚合类型)</h2><h4 id="KV键值"><a href="#KV键值" class="headerlink" title="KV键值"></a>KV键值</h4><p>存储的是key和value对应的数据。</p><h4 id="BSON"><a href="#BSON" class="headerlink" title="BSON"></a>BSON</h4><p>一种类json的一种二进制形式的存储格式，简称 Binary JSON，和JSON一样支持内嵌的文档对象和数组。 </p><h4 id="列簇"><a href="#列簇" class="headerlink" title="列簇"></a>列簇</h4><p>顾名思义，是按列存储数据的。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的IO优势。    </p><h4 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h4><h2 id="数据库的四大分类"><a href="#数据库的四大分类" class="headerlink" title="数据库的四大分类"></a>数据库的四大分类</h2><h4 id="KV键值-1"><a href="#KV键值-1" class="headerlink" title="KV键值"></a>KV键值</h4><p>例如：</p><p>​    新浪：BerkeleyDB+redis</p><p>​    美团：redis+tair</p><p>​    阿里、百度：memcache+redis</p><h4 id="文档型数据库-bson格式比较多"><a href="#文档型数据库-bson格式比较多" class="headerlink" title="文档型数据库(bson格式比较多)"></a>文档型数据库(bson格式比较多)</h4><p>例如：</p><p>​    CouchDB，MongoDB</p><h4 id="列存储数据库"><a href="#列存储数据库" class="headerlink" title="列存储数据库"></a>列存储数据库</h4><p>例如：</p><p>​    Cassandra, HBase</p><p>​    分布式文件系统</p><h4 id="图关系数据库"><a href="#图关系数据库" class="headerlink" title="图关系数据库"></a>图关系数据库</h4><p>（1）它不是放图形的，放的是关系比如:朋友圈社交网络、广告推荐系统</p><p>（2）社交网络，推荐系统等。专注于构建关系图谱</p><p>例如：</p><p>​    Neo4J，InfoGrid</p><h2 id="CAP原理-CAP-BASE"><a href="#CAP原理-CAP-BASE" class="headerlink" title="CAP原理(CAP+BASE)"></a>CAP原理(CAP+BASE)</h2><h4 id="传统的ACID"><a href="#传统的ACID" class="headerlink" title="传统的ACID"></a>传统的ACID</h4><p>A（Atomicity）原子性</p><p>C（Consistency）一致性</p><p>I（Isolation）独立性</p><p>D（Durability）持久性</p><h4 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h4><p>C：Consistency（强一致性）</p><p>A：Availability（可用性）</p><p>P：Partition tolerance（分区容错性）</p><h4 id="CAP的3进2"><a href="#CAP的3进2" class="headerlink" title="CAP的3进2"></a>CAP的3进2</h4><p>一个分布式系统不可能同时很好地满足一致性，可用性和分区容错性，最多只能同时较好的满足两个。分区容错性是我们必须实现的，所以只能在一致性和可用性之间权衡。</p><p>例如：</p><p> CA： 传统Oracle数据库</p><p> AP： 大多数网站架构的选择</p><p> CP：Redis、Mongodb</p><p>分布式架构的时候必须做出取舍。一致性和可用性之间取一个平衡。多余大多数web应用，其实并不需要强一致性。因此牺牲C换取P，这是目前分布式数据库产品的方向。</p><p>CAP理论的核心是：</p><p>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个。</p><p>因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三 大类：<br>CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。<br>CP - 满足一致性，分区容忍必的系统，通常性能不是特别高。<br>AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。</p><h4 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h4><p>BASE就是为了解决关系数据库强一致性引起的问题而引起的可用性降低而提出的解决方案。</p><p>BASE其实是下面三个术语的缩写：<br>    基本可用（Basically Available）<br>    软状态（Soft state）<br>    最终一致（Eventually consistent）</p><p>它的思想是通过让系统放松对某一时刻数据一致性的要求来换取系统整体伸缩性和性能上改观。大型系统往往由于地域分布和极高性能的要求，不可能采用分布式事务来完成这些指标，要想获得这些指标，我们必须采用另外一种方式来完成，这里BASE就是解决这个问题的办法</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos</tag>
      
      <tag>nosql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos 网络配置</title>
    <link href="/2020/03/05/centos/Centos%20%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2020/03/05/centos/Centos%20%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="网络配置文件列表："><a href="#网络配置文件列表：" class="headerlink" title="网络配置文件列表："></a>网络配置文件列表：</h1><table><thead><tr><th>/etc/resolv.conf</th><th>域名解析器</th></tr></thead><tbody><tr><td>/etc/networks</td><td>网络名和网络地址之间的映射关系</td></tr><tr><td>/etc/hosts</td><td>存放的是域名与ip的对应关系，域名与主机名没有任何关系</td></tr><tr><td>/etc/hostname</td><td>存放的是主机名</td></tr><tr><td>/etc/sysconfig/network</td><td>该文件用来指定服务器上的网络配置信息</td></tr><tr><td>/etc/sysconfig/network-scripts/ifcfg-*</td><td>配置为互联网网卡</td></tr></tbody></table><h1 id="etc-resolv-conf"><a href="#etc-resolv-conf" class="headerlink" title="/etc/resolv.conf"></a>/etc/resolv.conf</h1><p>域名解析器</p><p>resolv.conf的关键字主要有四个，分别是：</p><ul><li>nameserver    //定义DNS服务器的IP地址</li><li>domain       //定义本地域名</li><li>search        //定义域名的搜索列表</li><li>sortlist        //对返回的域名进行排序</li></ul><p>例如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">domain  youhang<span class="hljs-selector-class">.com</span><br>search   www<span class="hljs-selector-class">.youhang</span><span class="hljs-selector-class">.site</span>   youhang<span class="hljs-selector-class">.site</span><br>nameserver <span class="hljs-number">202.102</span>.<span class="hljs-number">192.68</span><br>nameserver <span class="hljs-number">202.102</span>.<span class="hljs-number">192.69</span><br></code></pre></td></tr></table></figure><h1 id="etc-networks"><a href="#etc-networks" class="headerlink" title="/etc/networks"></a>/etc/networks</h1><p>网络名和网络地址之间的映射关系</p><p>/etc/networks文件定义了网络名和网络地址之间的映射关系，下面是/etc/networks文件内容的示例。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">default 0.0.0.0 <br>loopback 127.0.0.0 <br>link-local 169.254.0.0 <br><span class="hljs-keyword">test   </span>192.168.0.0<br></code></pre></td></tr></table></figure><h1 id="etc-hosts"><a href="#etc-hosts" class="headerlink" title="/etc/hosts"></a>/etc/hosts</h1><p>存放的是域名与ip的对应关系，域名与主机名没有任何关系</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">::<span class="hljs-number">1</span> localhost localhost.localdomain localhost6 localhost6.localdomain6<br><span class="hljs-number">127.0.0.1</span> localhost localhost.localdomain localhost4 localhost4.localdomain4<br><span class="hljs-number">172.21.175.115</span> iZ2zejf5uriy00xpdxwkw8Z iZ2zejf5uriy00xpdxwkw8Z<br></code></pre></td></tr></table></figure><p>/etc/hostname</p><p>存放的是主机名</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">localhost.<span class="hljs-built_in">domain</span><br></code></pre></td></tr></table></figure><h1 id="etc-sysconfig-network"><a href="#etc-sysconfig-network" class="headerlink" title="/etc/sysconfig/network"></a>/etc/sysconfig/network</h1><p>该文件用来指定服务器上的网络配置信息，下面是一个示例： </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">NETWORK</span>=<span class="hljs-literal">yes</span>/<span class="hljs-literal">no</span>　　　　 网络是否被配置；<br><span class="hljs-attr">FORWARD_IPV4</span>=<span class="hljs-literal">yes</span>/<span class="hljs-literal">no</span>　　　　是否开启IP转发功能<br><span class="hljs-attr">HOSTNAME</span>=hostname hostname表示服务器的主机名 <br><span class="hljs-attr">GAREWAY</span>=gw-ip　　　　 gw-ip表示网络网关的IP地址<br><span class="hljs-attr">GAREWAYDEV</span>=gw-dev　　 gw-dw表示网关的设备名，如：etho等 <br></code></pre></td></tr></table></figure><h1 id="etc-sysconfig-network-scripts-ifcfg"><a href="#etc-sysconfig-network-scripts-ifcfg" class="headerlink" title="/etc/sysconfig/network-scripts/ifcfg-*"></a>/etc/sysconfig/network-scripts/ifcfg-*</h1><p><strong>ip配置文件</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">TYPE</span>=Ethernet　　<span class="hljs-comment">#配置为互联网网卡</span><br><span class="hljs-attr">PROXY_METHOD</span>=none<br><span class="hljs-attr">BROWSER_ONLY</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">BOOTPROTO</span>=static <span class="hljs-comment">#设置获取IP地址方式，默认是DHCP，设置为静态时改为static</span><br><span class="hljs-attr">DEFROUTE</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPADDR</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">10.2</span>  <span class="hljs-comment">#设置的静态ip地址</span><br><span class="hljs-attr">NETMASK</span>=<span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span> <span class="hljs-comment"># 子网掩码</span><br><span class="hljs-attr">NETWORK</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">10.0</span>  <br><span class="hljs-attr">GATEWAY</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">10.254</span> <span class="hljs-comment"># 网关地址</span><br><span class="hljs-attr">DNS1</span>=<span class="hljs-number">114.114</span>.<span class="hljs-number">114.114</span>　　<span class="hljs-comment">#配置DNS解析</span><br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-literal">no</span>　　<span class="hljs-comment">#开启自动重启网卡</span><br><span class="hljs-attr">IPV4_FAILURE_FATAL</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">IPV6INIT</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV6_AUTOCONF</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV6_DEFROUTE</span>=<span class="hljs-literal">yes</span><br><span class="hljs-attr">IPV6_FAILURE_FATAL</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">IPV6_ADDR_GEN_MODE</span>=stable-privacy<br><span class="hljs-attr">NAME</span>=ens33　　　<span class="hljs-comment">#配置网卡名字</span><br><span class="hljs-attr">DEVICE</span>=ens33　　<span class="hljs-comment">#网卡硬件名字</span><br><span class="hljs-attr">UUID</span>=d24e50a3-<span class="hljs-number">27</span>c3-<span class="hljs-number">4410</span>-a2b2-<span class="hljs-number">1</span>d5a0c985435<br><span class="hljs-attr">IPV6_PRIVACY</span>=<span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><p><strong>路由配置文件</strong></p><p>/etc/sysconfig/network-scripts/route-IFACE</p><h1 id="关闭ipv6"><a href="#关闭ipv6" class="headerlink" title="关闭ipv6"></a>关闭ipv6</h1><p>1 编辑**/etc/sysctl.conf<strong>配置，增加</strong>net.ipv6.conf.all.disable_ipv6=1** </p><p>2 编辑/<strong>etc/sysconfig/network</strong>配置，增加 <strong>NETWORKING_IPV6=no</strong>，保存并退出 </p><p>3 编辑/<strong>etc/sysconfig/network-scripts/ifcfg-eno16777736</strong>，确保<strong>IPV6INIT=no</strong>，ifcfg-eno16777736是根据自己机器的 </p><p>4 关闭防火墙的开机自启动 </p><p><strong>systemctl disable ip6tables.service</strong> </p><p>5 执行<strong>sysctl -p或者reboot重启命令</strong> </p><h1 id="路由添加"><a href="#路由添加" class="headerlink" title="路由添加"></a>路由添加</h1><h2 id="1-使用route-命令添加"><a href="#1-使用route-命令添加" class="headerlink" title="1 使用route 命令添加"></a>1 <strong>使用route 命令添加</strong></h2><p>route(选项)(参数) </p><p>选项</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-A：设置地址类型；</span><br><span class="hljs-deletion">-C：打印将Linux核心的路由缓存；</span><br><span class="hljs-deletion">-v：详细信息模式；</span><br><span class="hljs-deletion">-n：不执行DNS反向查找，直接显示数字形式的IP地址；</span><br><span class="hljs-deletion">-e：netstat格式显示路由表；</span><br><span class="hljs-deletion">-net：到一个网络的路由表；</span><br><span class="hljs-deletion">-host：到一个主机的路由表。</span><br></code></pre></td></tr></table></figure><p>参数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Add</span>：增加指定的路由记录；<br>Del：删除指定的路由记录；<br>Target：目的网络或目的主机；<br>gw：设置默认网关；<br>mss：设置TCP的最大区块长度（MSS），单位MB；<br><span class="hljs-keyword">window</span>：指定通过路由表的TCP连接的TCP窗口大小；<br>dev：路由记录所表示的网络接口。<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>添加到主机的路由<br><span class="hljs-comment"># route add –host 192.168.8.11 dev eth0</span><br><span class="hljs-comment"># route add –host 192.168.8.12 gw 192.168.8.1</span><br> <br><span class="hljs-regexp">//</span>添加到网络的路由<br><span class="hljs-comment"># route add –net 192.168.8.11 netmask 255.255.255.0 dev eth0</span><br><span class="hljs-comment"># route add –net 192.168.8.11 netmask 255.255.255.0 gw 192.168.1.1</span><br><span class="hljs-comment"># route add –net 192.168.8.0/24 dev eth1</span><br><span class="hljs-comment"># route add 10.15.150.0/24 via 192.168.150.253 dev eth0</span><br> <br><span class="hljs-regexp">//</span>添加默认网关<br><span class="hljs-comment"># route add default gw 192.168.8.1</span><br> <br><span class="hljs-regexp">//</span>删除路由<br><span class="hljs-comment"># route del –host 192.168.8.11 dev eth0</span><br> <br><span class="hljs-regexp">//</span>屏蔽一条路由,增加一条屏蔽的路由，目的地址为<span class="hljs-number">224</span>.x.x.x将被拒绝。<br>route add -net <span class="hljs-number">224.0</span>.<span class="hljs-number">0.0</span> netmask <span class="hljs-number">240.0</span>.<span class="hljs-number">0.0</span> reject<br></code></pre></td></tr></table></figure><h2 id="2-使用ip命令来添加、删除路由"><a href="#2-使用ip命令来添加、删除路由" class="headerlink" title="2 使用ip命令来添加、删除路由"></a>2 使用ip命令来添加、删除路由</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ip<span class="hljs-built_in"> route </span><span class="hljs-built_in">add</span><span class="hljs-built_in"> default </span>via 172.16.10.2 dev eth0<span class="hljs-built_in"></span><br><span class="hljs-built_in">ip route </span><span class="hljs-built_in">add</span> 172.16.1.0/24 via 172.16.10.2 dev eth0<br></code></pre></td></tr></table></figure><h2 id="3-设置永久路由"><a href="#3-设置永久路由" class="headerlink" title="3 设置永久路由"></a>3 <strong>设置永久路由</strong></h2><p>1.在/etc/rc.local里添加</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">route</span> add -net <span class="hljs-number">192.168.60.0</span>/<span class="hljs-number">24</span> dev eth0<br><span class="hljs-attribute">route</span> add -net <span class="hljs-number">192.168.63.0</span>/<span class="hljs-number">24</span> gw <span class="hljs-number">192.168.63.254</span><br></code></pre></td></tr></table></figure><p>2.在/etc/sysconfig/network里添加到末尾</p> <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">GATEWAY</span><span class="hljs-operator">=</span>gw-ip<br>或<br><span class="hljs-attribute">GATEWAY</span><span class="hljs-operator">=</span>gw-dev<br></code></pre></td></tr></table></figure><p> 3./etc/sysconfig/static-routes :</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">any</span> net <span class="hljs-number">192.168.63.0</span>/<span class="hljs-number">24</span> gw <span class="hljs-number">192.168.63.254</span><br><br><span class="hljs-attribute">any</span> net <span class="hljs-number">10.250.228.128</span> netmask <span class="hljs-number">255.255.255.192</span> gw <span class="hljs-number">10.250.228.129</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos</tag>
      
      <tag>网络配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos – 查看、修改、更新系统时间</title>
    <link href="/2020/03/03/centos/Centos%20%E2%80%93%20%E6%9F%A5%E7%9C%8B%E3%80%81%E4%BF%AE%E6%94%B9%E3%80%81%E6%9B%B4%E6%96%B0%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4/"/>
    <url>/2020/03/03/centos/Centos%20%E2%80%93%20%E6%9F%A5%E7%9C%8B%E3%80%81%E4%BF%AE%E6%94%B9%E3%80%81%E6%9B%B4%E6%96%B0%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="一、查看系统时间"><a href="#一、查看系统时间" class="headerlink" title="一、查看系统时间"></a>一、查看系统时间</h1><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@k8s</span>-master01 ~]<span class="hljs-meta"># date</span><br><span class="hljs-number">2022</span>年 <span class="hljs-number">07</span>月 <span class="hljs-number">10</span>日 星期日 <span class="hljs-number">13</span>:<span class="hljs-number">10</span>:<span class="hljs-number">18</span> CST<br></code></pre></td></tr></table></figure><h1 id="二、手动修改系统时间"><a href="#二、手动修改系统时间" class="headerlink" title="二、手动修改系统时间"></a>二、手动修改系统时间</h1><p>（1）设置时间</p><p><code>date -s &quot;20190712 18:30:50&quot;</code></p><p>（2）保存设置<br><code>hwclock --systohc</code></p><h1 id="三、通过网络同步时间"><a href="#三、通过网络同步时间" class="headerlink" title="三、通过网络同步时间"></a>三、通过网络同步时间</h1><p>（1）安装 ntpdate 命令</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y ntpdate<br></code></pre></td></tr></table></figure><p>（2）开始同步</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">ntpdate <span class="hljs-number">0</span>.asia.pool.ntp.<span class="hljs-keyword">org</span><br><span class="hljs-keyword"></span><span class="hljs-comment"># 强制把系统时间写入CMOS</span><br><span class="hljs-keyword">clock </span>-w<br></code></pre></td></tr></table></figure><p>若上面的时间服务器不可用，也可以改用如下服务器进行同步：<br><code>time.nist.gov</code><br><code>time.nuri.net</code><br><code>0.asia.pool.ntp.org</code><br><code>1.asia.pool.ntp.org</code><br><code>2.asia.pool.ntp.org</code><br><code>3.asia.pool.ntp.org</code><br><code>ntp.aliyun.com</code></p><p>（3）将系统时间同步到硬件，防止系统重启后时间被还原。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ntpdate <span class="hljs-number">0</span><span class="hljs-selector-class">.asia</span><span class="hljs-selector-class">.pool</span><span class="hljs-selector-class">.ntp</span><span class="hljs-selector-class">.org</span><br>hwclock <span class="hljs-attr">--systohc</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux基础</title>
    <link href="/2020/02/09/centos/linux%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/02/09/centos/linux%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="一-系统文件夹介绍"><a href="#一-系统文件夹介绍" class="headerlink" title="一 系统文件夹介绍"></a>一 系统文件夹介绍</h1><ul><li><p>/    根目录分区</p></li><li><p>/boot启动Linux的核心文件</p></li><li><p>/bin：存放最常用命令； </p></li><li><p>/dev：设备文件；</p></li><li><p>/etc：存放各种配置文件；</p></li><li><p>/home：用户主目录；</p></li><li><p>/lib：系统最基本的动态链接共享库；</p></li><li><p>/mnt：一般是空的，用来临时挂载别的文件系统；</p></li><li><p>/proc：虚拟目录，是内存的映射；</p></li><li><p>/sbin：系统管理员命令存放目录；</p></li><li><p>/usr：最大的目录，存许应用程序和文件；</p></li><li><p>/usr/X11R6：X-Window目录；</p></li><li><p>/usr/src：Linux源代码；</p></li><li><p>/usr/include：系统头文件；</p></li><li><p>/usr/lib：存放常用动态链接共享库、静态档案库；</p></li><li><p>/usr/bin、/usr/sbin：这是对/bin、/sbin的一个补充；</p></li></ul><h1 id="二-常用命令"><a href="#二-常用命令" class="headerlink" title="二 常用命令"></a><strong>二 常用命令</strong></h1><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><p><strong>ls</strong></p><p>指定路径或者当前路径下，文件夹详细信息。</p><p>参数：-a 获取详细信息</p><p>​      -l  列表形似展示</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ls -l <span class="hljs-regexp">/usr/</span>local<br></code></pre></td></tr></table></figure><p><strong>su</strong></p><p>用户切换</p><p>su 用户名、su切换成root 、su -进入root</p><p><strong>whoami</strong></p><p>查看当前用户。</p><p><strong>exit</strong></p><p>退出当前用户登录</p><p><strong>which</strong></p><p>查看当前命令的路径</p><p>如which ls获取ls命令的文件路径</p><p><strong>du</strong></p><p>du -h 文件：大小查看</p><h2 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a><strong>文件操作命令</strong></h2><p><strong>mkdir</strong></p><p>单级文件夹创建，例如：mkdir test 创建test文件夹。</p><p>多级文件夹创建，例如：mkdir -p a/b/c 创建多级文件夹。</p><p><strong>mv</strong></p><p>文件/文件夹移动</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">mv <span class="hljs-built_in">file</span> <span class="hljs-built_in">folder</span><br></code></pre></td></tr></table></figure><p><strong>cp</strong></p><p>文件复制</p><p>文件复制：cp file dir</p><p>递归文件复制：cp -r dir1 dir2</p><p><strong>rm</strong></p><p>文件删除</p><p>参数：</p><p>-r 递归删除</p><p>-f 强制删除</p><p>rm dir</p><p>rm -r -f dir</p><p><strong>touch</strong></p><p>创建文件</p><p>touch file1</p><h2 id="文件查看命令"><a href="#文件查看命令" class="headerlink" title="文件查看命令"></a><strong>文件查看命令</strong></h2><p><strong>cat</strong></p><p>查看文件内容</p><p>如 cat a.txt</p><p><strong>more</strong></p><p>一页一页的查看</p><p><strong>less</strong></p><p>一页查看可以回滚</p><p><strong>head</strong></p><p>通过-n指定查看文件的开始部分内容</p><p>例如：head -100 file 查看文件的开头100行</p><p><strong>tail</strong></p><p>通过-n指定查看文件的末尾部分内容</p><p>例如：tail -100 file 查看文件的末尾100行.</p><h2 id="权限操作"><a href="#权限操作" class="headerlink" title="权限操作"></a><strong>权限操作</strong></h2><p><strong>chmod</strong></p><p>u:当前用户 g:当前组 o:其它用户</p><p>chmod u+rwx file 为当前用户添加读写执行权限。</p><p>chmod g-rx file 为同组用户删除读和执行权限</p><p>chmod 777 为所有用户(当前用户、同组用户、其它用户)添加读、写、执行权限</p><p>7的二进制对应 111，分别表示 读 写 执行，即：r=4，w=2，x=1 </p><p>递归设置需要加入参数 -R</p><p><strong>chown</strong></p><p>文文件设置用户、用户组。</p><p>chown 用户 file</p><p>chown 用户.组 file</p><p>chown  .组 file</p><p>递归设置：</p><p>chown -R 用户.组 dir</p><h2 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a><strong>系统命令</strong></h2><p><strong>grep</strong></p><p>将文本中指定的信息进行匹配</p><p>grep 关键字 路径名</p><p><strong>ps</strong> </p><p>查看系统进程</p><p>ps  -A  或者 ps -ef</p><p><strong>date</strong> </p><p>查看系统时间</p><p>date -s “2019-09-13 11：11：11”设置系统时间</p><p><strong>df</strong></p><p>查看系统分区情况</p><p>df -lh</p><p><strong>kill</strong></p><p>进程杀死</p><p>kill -9 pid</p><p><strong>find</strong></p><p>文件查找</p><p>-name 查找文件名</p><p>-maxdepth最大深度</p><p>-mindepth最小深度</p><p>-size 大小筛选，+/-数字</p><p>+表示大于指定范围</p><p>-表示小于指定范围</p><p>单位：</p><p>未指定：512字节</p><p>c:字节</p><p>K和M和文件系统一样</p><p><strong>ln</strong></p><p>链接创建</p><p>ln -s 文件 软连接文件</p><p>ln  [-d] 文件 硬链接文件</p><p>注：1 硬链接不需要使用绝对路径 2 普通文件才能创建硬链接，目录不可3硬链接与源文件在同一个硬盘同一个分区里。</p><p><strong>crontab</strong></p><p>查看调度信息crontab -l</p><p>编辑调度信息crontab -e</p><p>分钟    小时    日期    月份    星期    执行命令</p><p><strong>mount</strong></p><p>挂载：mount 硬件  挂载目录</p><p>卸载：unmount 硬件    </p><p><strong>eject</strong></p><p>弹出光盘</p><h1 id="三-vi操作"><a href="#三-vi操作" class="headerlink" title="三 vi操作"></a><strong>三 vi操作</strong></h1><p>进入文件，进行内容查看、编辑</p><p>vi test.txt</p><p><strong>进入编辑模式</strong></p><ul><li>a:光标向后移动一位</li><li>i:光标和所在字符不发生任何变化</li><li>o:给新起一行</li><li>s:删除光标所在字符</li></ul><p><strong>行号设置</strong></p><p>显示行号</p><p>:set number或者:set nu</p><p>取消行号显示</p><p>:set nonumber或者:set nonu</p><p><strong>内容查找</strong></p><p>查找指定内容，小写n下一个、大写N上一个。</p><p>:/内容/ 或者 :/内容</p><p>跳转到第n行</p><p>:n</p><p><strong>内容替换</strong></p><p>替换光标所在行的第一个content1</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:s/content1/content2/</span><br></code></pre></td></tr></table></figure><p>替换光标所在行的全部content1</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:s/content1/content2/g</span><br></code></pre></td></tr></table></figure><p>全局替换</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:%s/content1/content2/g</span><br></code></pre></td></tr></table></figure><p><strong>编辑操作</strong></p><p>dd：删除当前光标行</p><p>ndd：包含当前行在内，向后删除n行内容</p><p>x：删除光标所在字符。</p><p>c+w：从光标所在位置删除至单词结尾，并进入编辑模式</p><p> yy：复制光标当前行</p><p>nyy：包含当前行在内，向后复制n行内容</p><p>p：粘贴</p><p> u：撤销</p><p>J：合并上下行</p><p>r：当个字符替换</p><p>.：重复执行上次执行的命令。</p><h1 id="四、-管道"><a href="#四、-管道" class="headerlink" title="四、 管道"></a>四、 管道</h1><p>对于grep、head、tail、wc、ls等都可以当作管道符号使用。</p><p>ls -l|wc    //计算当前目录共有多少文件</p><p>grep sbin passwd | wc  //passwd文件出现sbin的行数统计</p><p>cat file|grep ssss   //内容查找过滤</p><h1 id="五、系统信息"><a href="#五、系统信息" class="headerlink" title="五、系统信息"></a>五、系统信息</h1><p><strong>查看版本当前操作系统内核信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a<br></code></pre></td></tr></table></figure><p><strong>查看当前操作系统版本信息</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/proc/</span>version<br></code></pre></td></tr></table></figure><p><strong>查看版本当前操作系统发行版信息</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/i</span>ssue  或cat <span class="hljs-regexp">/etc/</span>redhat-release<br></code></pre></td></tr></table></figure><p><strong>查看cpu相关信息，包括型号、主频、内核信息</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/proc/</span>cpuinfo<br></code></pre></td></tr></table></figure><p><strong>查看位数</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">getconf LONG_BIT</span><br></code></pre></td></tr></table></figure><p>vmstat</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-title">[</span><span class="hljs-comment">root@k8s</span><span class="hljs-literal">-</span><span class="hljs-comment">master01 redis</span><span class="hljs-title">]</span><span class="hljs-comment"># vmstat</span><br><span class="hljs-comment">procs</span> <span class="hljs-literal">-----------</span><span class="hljs-comment">memory</span><span class="hljs-literal">----------</span> <span class="hljs-literal">---</span><span class="hljs-comment">swap</span><span class="hljs-literal">--</span> <span class="hljs-literal">-----</span><span class="hljs-comment">io</span><span class="hljs-literal">----</span> <span class="hljs-literal">-</span><span class="hljs-comment">system</span><span class="hljs-literal">--</span> <span class="hljs-literal">------</span><span class="hljs-comment">cpu</span><span class="hljs-literal">-----</span><br> <span class="hljs-comment">r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br> <span class="hljs-comment">1  0      0 405900      0 1099844    0    0    17    20   47   66  4  3 93  0  0</span><br></code></pre></td></tr></table></figure><p>结果解释如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vim">procs<br>r 列表示运行和等待cpu时间片的进程数，如果长期大于<span class="hljs-number">1</span>，说明cpu不足，需要增加cpu。<br><span class="hljs-keyword">b</span> 列表示在等待资源的进程数，比如正在等待I/O、或者内存交换等。<br>cpu 表示cpu的使用状态<br>us 列显示了用户方式下所花费 CPU 时间的百分比。us的值比较高时，说明用户进程消耗的cpu时间多，但是如果长期大于<span class="hljs-number">50</span>%，需要考虑优化用户的程序。<br><span class="hljs-keyword">sy</span> 列显示了内核进程所花费的cpu时间的百分比。这里us + <span class="hljs-keyword">sy</span>的参考值为<span class="hljs-number">80</span>%，如果us+<span class="hljs-keyword">sy</span> 大于 <span class="hljs-number">80</span>%说明可能存在CPU不足。<br><span class="hljs-keyword">wa</span> 列显示了IO等待所占用的CPU时间的百分比。这里<span class="hljs-keyword">wa</span>的参考值为<span class="hljs-number">30</span>%，如果<span class="hljs-keyword">wa</span>超过<span class="hljs-number">30</span>%，说明IO等待严重，这可能是磁盘大量随机访问造成的，也可能磁盘或者磁盘访问控制器的带宽瓶颈造成的(主要是块操作)。 <br>id 列显示了cpu处在空闲状态的时间百分比 <br><span class="hljs-built_in">system</span> 显示采集间隔内发生的中断数<br>in 列表示在某一时间间隔中观测到的每秒设备中断数。<br><span class="hljs-keyword">cs</span>列表示每秒产生的上下文切换次数，如当 <span class="hljs-keyword">cs</span> 比磁盘 I/O 和网络信息包速率高得多，都应进行进一步调查。<br>memory<br>swpd 切换到内存交换区的内存数量(<span class="hljs-keyword">k</span>表示)。如果swpd的值不为<span class="hljs-number">0</span>，或者比较大，比如超过了<span class="hljs-number">100</span><span class="hljs-keyword">m</span>，只要si、<span class="hljs-keyword">so</span>的值长期为<span class="hljs-number">0</span>，系统性能还是正常 <br>free 当前的空闲页面列表中内存数量(<span class="hljs-keyword">k</span>表示) <br>buff 作为<span class="hljs-keyword">buffer</span> cache的内存数量，一般对块设备的读写才需要缓冲。 <br>cache: 作为page cache的内存数量，一般作为文件系统的cache，如果cache较大，说明用到cache的文件较多，如果此时IO中bi比较小，说明文件系统效率比较好。 <br>swap<br>si 由内存进入内存交换区数量。<br><span class="hljs-keyword">so</span>由内存交换区进入内存数量。 <br>IO<br>bi 从块设备读入数据的总量（读磁盘）（每秒kb）。<br><span class="hljs-keyword">bo</span> 块设备写入数据的总量（写磁盘）（每秒kb）<br></code></pre></td></tr></table></figure><h1 id="六、创建分区"><a href="#六、创建分区" class="headerlink" title="六、创建分区"></a>六、创建分区</h1><p>列出系统分区 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">fdisk -l</span><br></code></pre></td></tr></table></figure><p>给硬盘分区 </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">fdisk</span> 设备文件名<br></code></pre></td></tr></table></figure><p>重新加载 /etc/fstab</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">umount -<span class="hljs-selector-tag">a</span> &amp; mount -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><h1 id="七、将任务转到前后台执行"><a href="#七、将任务转到前后台执行" class="headerlink" title="七、将任务转到前后台执行"></a>七、将任务转到前后台执行</h1><p>前台执行按ctrl + z 可以放到后台并暂停，jobs 可以查看后台执行的任务，后台进程。 </p><p>bg 将一个在后台暂停的命令，变成继续执行 （在后台执行）</p><p> fg 放在前台</p><p>ctrl + c 即刻停止。 </p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis集群</title>
    <link href="/2020/01/22/nosql/redis/redis%E9%9B%86%E7%BE%A4/"/>
    <url>/2020/01/22/nosql/redis/redis%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="redis集群"><a href="#redis集群" class="headerlink" title="redis集群"></a>redis集群</h1><h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>Redis 集群使用数据分片（sharding）而非一致性哈希（consistency hashing）来实现： 一个 Redis 集群包含 16384 个哈希槽（hash slot）， 数据库中的每个键都属于这 16384 个哈希槽的其中一个， 集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。</p><p>集群中的每个节点负责处理一部分哈希槽。 举个例子， 一个集群可以有三个哈希槽， 其中：</p><ul><li>节点 A 负责处理 <code>0</code> 号至 <code>5500</code> 号哈希槽。</li><li>节点 B 负责处理 <code>5501</code> 号至 <code>11000</code> 号哈希槽。</li><li>节点 C 负责处理 <code>11001</code> 号至 <code>16384</code> 号哈希槽。</li></ul><h2 id="二、Redis-集群中的主从复制"><a href="#二、Redis-集群中的主从复制" class="headerlink" title="二、Redis 集群中的主从复制"></a>二、Redis 集群中的主从复制</h2><p>为了使得集群在一部分节点下线或者无法与集群的大多数（majority）节点进行通讯的情况下， 仍然可以正常运作， Redis 集群对节点使用了主从复制功能： 集群中的每个节点都有 <code>1</code> 个至 <code>N</code> 个复制品（replica）， 其中一个复制品为主节点（master）， 而其余的 <code>N-1</code> 个复制品为从节点（slave）。</p><p>在之前列举的节点 A 、B 、C 的例子中， 如果节点 B 下线了， 那么集群将无法正常运行， 因为集群找不到节点来处理 <code>5501</code> 号至 <code>11000</code> 号的哈希槽。</p><p>另一方面， 假如在创建集群的时候（或者至少在节点 B 下线之前）， 我们为主节点 B 添加了从节点 B1 ， 那么当主节点 B 下线的时候， 集群就会将 B1 设置为新的主节点， 并让它代替下线的主节点 B ， 继续处理 <code>5501</code> 号至 <code>11000</code> 号的哈希槽， 这样集群就不会因为主节点 B 的下线而无法正常运作了。</p><p>不过如果节点 B 和 B1 都下线的话， Redis 集群还是会停止运作。</p><h2 id="三、Redis-集群的一致性保证（guarantee）"><a href="#三、Redis-集群的一致性保证（guarantee）" class="headerlink" title="三、Redis 集群的一致性保证（guarantee）"></a>三、Redis 集群的一致性保证（guarantee）</h2><p>Redis 集群<strong>不保证数据的强一致性</strong>（strong consistency）： 在特定条件下， Redis 集群可能会丢失已经被执行过的写命令。</p><p>使用异步复制（asynchronous replication）是 Redis 集群可能会丢失写命令的其中一个原因。 考虑以下这个写命令的例子：</p><ul><li>客户端向主节点 B 发送一条写命令。</li><li>主节点 B 执行写命令，并向客户端返回命令回复。</li><li>主节点 B 将刚刚执行的写命令复制给它的从节点 B1 、 B2 和 B3 。</li></ul><p>如你所见， 主节点对命令的复制工作发生在返回命令回复之后， 因为如果每次处理命令请求都需要等待复制操作完成的话， 那么主节点处理命令请求的速度将极大地降低 —— 我们必须在性能和一致性之间做出权衡。</p><p>redis集群丢失命令的情况：</p><p>1 异步复制</p><p>2 集群出现网络分裂， 并且一个客户端与至少包括一个主节点在内的少数（minority）实例被孤立。</p><h1 id="四、集群创建"><a href="#四、集群创建" class="headerlink" title="四、集群创建"></a>四、集群创建</h1><p>哨兵模式：<a href="https://blog.csdn.net/m0_58292366/article/details/125706041">https://blog.csdn.net/m0_58292366/article/details/125706041</a></p><p>下载：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> -c http://download.redis.io/releases/redis-<span class="hljs-number">5</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.tar.gz<br><span class="hljs-attribute">tar</span> -zxf redis-<span class="hljs-number">5</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.tar.gz<br><span class="hljs-attribute">cd</span> redis-<span class="hljs-number">5</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">make</span> &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>最少选项的集群配置文件示例：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata">port 7000<br><span class="hljs-keyword">cluster</span>-enabled yes<br><span class="hljs-keyword">cluster</span>-config-<span class="hljs-keyword">file</span> nodes.<span class="hljs-keyword">conf</span><br><span class="hljs-keyword">cluster</span>-node-timeout 5000<br>appendonly yes<br></code></pre></td></tr></table></figure><p>文件中的 <code>cluster-enabled</code> 选项用于开实例的集群模式， 而 <code>cluster-conf-file</code> 选项则设定了保存节点配置文件的路径， 默认值为 <code>nodes.conf</code> 。</p><p><strong>要让集群正常运作至少需要三个主节点</strong>， 不过在刚开始试用集群功能时， 强烈建议使用六个节点： 其中三个为主节点， 而其余三个则是各个主节点的从节点。</p><h2 id="4-1-创建六个以端口号为名字的子目录"><a href="#4-1-创建六个以端口号为名字的子目录" class="headerlink" title="4.1 创建六个以端口号为名字的子目录"></a>4.1 创建六个以端口号为名字的子目录</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">mkdir</span> <span class="hljs-keyword">cluster</span>-<span class="hljs-keyword">test</span><br><span class="hljs-keyword">cd</span> <span class="hljs-keyword">cluster</span>-<span class="hljs-keyword">test</span><br><span class="hljs-keyword">mkdir</span> 7000 7001 7002 7003 7004 7005<br></code></pre></td></tr></table></figure><h2 id="4-2-启动"><a href="#4-2-启动" class="headerlink" title="4.2  启动"></a>4.2  启动</h2><p>分别在7000 7001 7002 7003 7004 7005</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stata">port=7000<br><span class="hljs-keyword">cd</span> /home/redis/<span class="hljs-keyword">cluster</span>-<span class="hljs-keyword">test</span>/<span class="hljs-variable">$port</span><br><span class="hljs-keyword">cat</span> &gt; redis.<span class="hljs-keyword">conf</span> &lt;&lt;END<br>port <span class="hljs-variable">$port</span><br><span class="hljs-keyword">cluster</span>-enabled yes<br><span class="hljs-keyword">cluster</span>-config-<span class="hljs-keyword">file</span> nodes.<span class="hljs-keyword">conf</span><br><span class="hljs-keyword">cluster</span>-node-timeout 5000<br>appendonly yes<br>masterauth 123456<br>requirepass 123456<br>END<br>redis-server ./redis.<span class="hljs-keyword">conf</span> &amp;<br></code></pre></td></tr></table></figure><h2 id="4-3-集群模式"><a href="#4-3-集群模式" class="headerlink" title="4.3 集群模式"></a>4.3 集群模式</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">redis</span>-cli --cluster create --cluster-replicas <span class="hljs-number">1</span> <span class="hljs-number">192.168.66.11:7000</span> <span class="hljs-number">192.168.66.11:7001</span> \<br><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">66</span>.<span class="hljs-number">11</span>:<span class="hljs-number">7002</span> <span class="hljs-number">192.168.66.11:7003</span> <span class="hljs-number">192.168.66.11:7004</span> <span class="hljs-number">192.168.66.11:7005</span> -a <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>–cluster create: 创建集群</p><p>–cluster-relicas: 集群副本数。 这里是1，是1主机1从机的模式，如果设置为2（即：2台从机）会失败。因为集群中至少要有3个主机，所以设置2台从机时，至少需要9个节点才可以。</p><p>最后的参数中列出全部的redis主机IP地址和端口号。</p><p>-a: 后边跟的是redis的密码</p><p>结果显示：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">13256</span>:S <span class="hljs-number">26</span> Aug <span class="hljs-number">2022</span> <span class="hljs-number">15</span>:<span class="hljs-number">05</span>:<span class="hljs-number">06</span>.<span class="hljs-number">448</span> * Residual parent diff successfully flushed to the rewritten AOF (<span class="hljs-number">0</span>.<span class="hljs-number">00</span> MB)<br><span class="hljs-attribute">13256</span>:S <span class="hljs-number">26</span> Aug <span class="hljs-number">2022</span> <span class="hljs-number">15</span>:<span class="hljs-number">05</span>:<span class="hljs-number">06</span>.<span class="hljs-number">448</span> * Background AOF rewrite finished successfull<br></code></pre></td></tr></table></figure><p>master-slave查看</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">7001</span>&gt; cluster nodes<br><span class="hljs-attribute">19a354f414924288a06c6b3ba24d0bf4affe8700</span> <span class="hljs-number">127.0.0.1:7000</span>@<span class="hljs-number">17000</span> master - <span class="hljs-number">0</span> <span class="hljs-number">1661497854077</span> <span class="hljs-number">1</span> connected <span class="hljs-number">0</span>-<span class="hljs-number">5460</span><br><span class="hljs-attribute">1401b5c43f29453542d2c8d1c6ade3f2a3c9e146</span> <span class="hljs-number">127.0.0.1:7002</span>@<span class="hljs-number">17002</span> master - <span class="hljs-number">0</span> <span class="hljs-number">1661497854780</span> <span class="hljs-number">3</span> connected <span class="hljs-number">10923</span>-<span class="hljs-number">16383</span><br><span class="hljs-attribute">d54c8707df777faab6cfa88a3b173bfd1c2e81bb</span> <span class="hljs-number">127.0.0.1:7004</span>@<span class="hljs-number">17004</span> slave <span class="hljs-number">19</span>a354f414924288a06c6b3ba24d0bf4affe8700 <span class="hljs-number">0</span> <span class="hljs-number">1661497854000</span> <span class="hljs-number">1</span> connected<br><span class="hljs-attribute">b4053809d6eedfbc72bb636b1439d1b32bb82fd3</span> <span class="hljs-number">127.0.0.1:7001</span>@<span class="hljs-number">17001</span> myself,master - <span class="hljs-number">0</span> <span class="hljs-number">1661497854000</span> <span class="hljs-number">2</span> connected <span class="hljs-number">5461</span>-<span class="hljs-number">10922</span><br><span class="hljs-attribute">638e0107053358064fa6577b8cd3d82f6499d7b8</span> <span class="hljs-number">127.0.0.1:7003</span>@<span class="hljs-number">17003</span> slave <span class="hljs-number">1401</span>b5c43f29453542d2c8d1c6ade3f2a3c9e146 <span class="hljs-number">0</span> <span class="hljs-number">1661497855284</span> <span class="hljs-number">4</span> connected<br><span class="hljs-attribute">d898bda1abd3582078680805445b98f6c2a44cc2</span> <span class="hljs-number">127.0.0.1:7005</span>@<span class="hljs-number">17005</span> slave b4053809d6eedfbc72bb636b1439d1b32bb82fd3 <span class="hljs-number">0</span> <span class="hljs-number">1661497855000</span> <span class="hljs-number">6</span> connected<br></code></pre></td></tr></table></figure><h2 id="4-4-客户端测试"><a href="#4-4-客户端测试" class="headerlink" title="4.4 客户端测试"></a>4.4 客户端测试</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">redis</span>-cli -c -p <span class="hljs-number">7000</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot快速集成redis</title>
    <link href="/2020/01/06/nosql/redis/springboot%E9%9B%86%E6%88%90redis/"/>
    <url>/2020/01/06/nosql/redis/springboot%E9%9B%86%E6%88%90redis/</url>
    
    <content type="html"><![CDATA[<h1 id="一、maven配置"><a href="#一、maven配置" class="headerlink" title="一、maven配置"></a>一、maven配置</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="二、redis配置"><a href="#二、redis配置" class="headerlink" title="二、redis配置"></a>二、redis配置</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring</span>:<span class="hljs-string"></span><br><span class="hljs-comment">  # redis 集群下</span><br>  <span class="hljs-attr">redis</span>:<span class="hljs-string"></span><br>    <span class="hljs-attr">database</span>: <span class="hljs-string">0</span><br>    <span class="hljs-attr">password</span>: <span class="hljs-string">123456</span><br>    <span class="hljs-attr">cluster</span>:<span class="hljs-string"></span><br>      <span class="hljs-attr">max-redirects</span>: <span class="hljs-string">3</span><br>      <span class="hljs-attr">nodes</span>:<span class="hljs-string"></span><br>        <span class="hljs-attr">-</span> <span class="hljs-string">192.168.66.11:7000</span><br>        <span class="hljs-attr">-</span> <span class="hljs-string">192.168.66.11:7001</span><br>        <span class="hljs-attr">-</span> <span class="hljs-string">192.168.66.11:7002</span><br>        <span class="hljs-attr">-</span> <span class="hljs-string">192.168.66.11:7003</span><br>        <span class="hljs-attr">-</span> <span class="hljs-string">192.168.66.11:7004</span><br>        <span class="hljs-attr">-</span> <span class="hljs-string">192.168.66.11:7005</span><br>    <span class="hljs-attr">lettuce</span>:<span class="hljs-string"></span><br>      <span class="hljs-attr">pool</span>:<span class="hljs-string"></span><br><span class="hljs-comment">        # 连接池最大连接数（使用负值表示没有限制） 默认 8</span><br>        <span class="hljs-attr">max-active</span>:  <span class="hljs-string">50</span><br><span class="hljs-comment">        # 连接池中的最大空闲连接 默认 8</span><br>        <span class="hljs-attr">max-idle</span>: <span class="hljs-string">20</span><br><span class="hljs-comment">        # 连接池中的最小空闲连接 默认 0</span><br>        <span class="hljs-attr">min-idle</span>: <span class="hljs-string">1</span><br><span class="hljs-comment">        # 连接池最大阻塞等待时间(使用负值表示没有限制) 默认 -1，这里配置10s</span><br>        <span class="hljs-attr">max-wait</span>: <span class="hljs-string">PT10S</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#  redis:</span><br><span class="hljs-comment">#    # Redis默认情况下有16个分片(库)，这里配置具体使用的分片，默认是0</span><br><span class="hljs-comment">#    database: 0</span><br><span class="hljs-comment">#    # redis服务器地址（填写自己的服务器地址）</span><br><span class="hljs-comment">#    host: 192.168.66.11</span><br><span class="hljs-comment">#    # redis端口（默认6379）</span><br><span class="hljs-comment">#    port: 6379</span><br><span class="hljs-comment">#    #redis连接超时等待,10秒</span><br><span class="hljs-comment">#    timeout: PT10S</span><br><span class="hljs-comment">#    # redis访问密码（默认为空）</span><br><span class="hljs-comment">#    password: xxxx</span><br><span class="hljs-comment">#    lettuce:</span><br><span class="hljs-comment">#      pool:</span><br><span class="hljs-comment">#        # 连接池最大连接数（使用负值表示没有限制） 默认 8</span><br><span class="hljs-comment">#        max-active:  50</span><br><span class="hljs-comment">#        # 连接池中的最大空闲连接 默认 8</span><br><span class="hljs-comment">#        max-idle: 20</span><br><span class="hljs-comment">#        # 连接池中的最小空闲连接 默认 0</span><br><span class="hljs-comment">#        min-idle: 1</span><br><span class="hljs-comment">#        # 连接池最大阻塞等待时间(使用负值表示没有限制) 默认 -1，这里配置10s</span><br><span class="hljs-comment">#        max-wait: PT10S</span><br><br><br><br><span class="hljs-attr">server</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">port</span>: <span class="hljs-string">8081</span><br></code></pre></td></tr></table></figure><p>RedisConfig:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;String, Object&gt;();<br>        template.setConnectionFactory(factory);<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br>        <span class="hljs-type">StringRedisSerializer</span> <span class="hljs-variable">stringRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br><br>        <span class="hljs-comment">// key采用String的序列化方式</span><br>        template.setKeySerializer(stringRedisSerializer);<br><br>        <span class="hljs-comment">// hash的key也采用String的序列化方式</span><br>        template.setHashKeySerializer(stringRedisSerializer);<br><br>        <span class="hljs-comment">// value序列化方式采用jackson</span><br>        template.setValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class="hljs-comment">// hash的value序列化方式采用jackson</span><br>        template.setHashValueSerializer(jackson2JsonRedisSerializer);<br><br>        template.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="三、redis工具类编写"><a href="#三、redis工具类编写" class="headerlink" title="三、redis工具类编写"></a>三、redis工具类编写</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.HashOperations;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.ListOperations;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.SetOperations;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.ValueOperations;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.ZSetOperations;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisUtils</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写入缓存</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, Object value)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();<br>            operations.set(key, value);<br>            result = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写入缓存设置时效时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, Object value, Long expireTime ,TimeUnit timeUnit)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();<br>            operations.set(key, value);<br>            redisTemplate.expire(key, expireTime, timeUnit);<br>            result = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量删除对应的value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keys</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String... keys)</span> &#123;<br>        <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>            remove(key);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量删除key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pattern</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removePattern</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String pattern)</span> &#123;<br>        Set&lt;Serializable&gt; keys = redisTemplate.keys(pattern);<br>        <span class="hljs-keyword">if</span> (keys.size() &gt; <span class="hljs-number">0</span>)&#123;<br>            redisTemplate.delete(keys);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除对应的value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (exists(key)) &#123;<br>            redisTemplate.delete(key);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断缓存中是否有对应的value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">exists</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.hasKey(key);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取缓存</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();<br>        result = operations.get(key);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 哈希 添加</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hashKey</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hmSet</span><span class="hljs-params">(String key, Object hashKey, Object value)</span>&#123;<br>        HashOperations&lt;String, Object, Object&gt; hash = redisTemplate.opsForHash();<br>        hash.put(key,hashKey,value);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 哈希获取数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hashKey</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">hmGet</span><span class="hljs-params">(String key, Object hashKey)</span>&#123;<br>        HashOperations&lt;String, Object, Object&gt;  hash = redisTemplate.opsForHash();<br>        <span class="hljs-keyword">return</span> hash.get(key,hashKey);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 列表添加</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> k</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> v</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lPush</span><span class="hljs-params">(String k,Object v)</span>&#123;<br>        ListOperations&lt;String, Object&gt; list = redisTemplate.opsForList();<br>        list.rightPush(k,v);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 列表获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> k</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> l</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> l1</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">lRange</span><span class="hljs-params">(String k, <span class="hljs-type">long</span> l, <span class="hljs-type">long</span> l1)</span>&#123;<br>        ListOperations&lt;String, Object&gt; list = redisTemplate.opsForList();<br>        <span class="hljs-keyword">return</span> list.range(k,l,l1);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 集合添加</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String key,Object value)</span>&#123;<br>        SetOperations&lt;String, Object&gt; set = redisTemplate.opsForSet();<br>        set.add(key,value);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 集合获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title function_">setMembers</span><span class="hljs-params">(String key)</span>&#123;<br>        SetOperations&lt;String, Object&gt; set = redisTemplate.opsForSet();<br>        <span class="hljs-keyword">return</span> set.members(key);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有序集合添加</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> scoure</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">zAdd</span><span class="hljs-params">(String key,Object value,<span class="hljs-type">double</span> scoure)</span>&#123;<br>        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();<br>        zset.add(key,value,scoure);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有序集合获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> scoure</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> scoure1</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title function_">rangeByScore</span><span class="hljs-params">(String key,<span class="hljs-type">double</span> scoure,<span class="hljs-type">double</span> scoure1)</span>&#123;<br>        ZSetOperations&lt;String, Object&gt; zset = redisTemplate.opsForZSet();<br>        <span class="hljs-keyword">return</span> zset.rangeByScore(key, scoure, scoure1);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h1 id="四、使用"><a href="#四、使用" class="headerlink" title="四、使用"></a>四、使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password)</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>.equals(username)&amp;&amp;password.equals(<span class="hljs-string">&quot;admin&quot;</span>))&#123;<br>            redisTemplate.opsForValue().set(username,username+<span class="hljs-string">&quot;@&quot;</span>+password);<br>            <span class="hljs-keyword">return</span> username+password;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUser</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-keyword">return</span> (String) redisUtil.get(username);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络七层协议</title>
    <link href="/2020/01/06/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE/"/>
    <url>/2020/01/06/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="七层协议图"><a href="#七层协议图" class="headerlink" title="七层协议图"></a>七层协议图</h1><img src="/2020/01/06/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE/1657990104981.png" class="" width="1657990104981"><p>七层协议走势图</p> <img src="/2020/01/06/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE/1657993303282.png" class="" width="1657993303282"><h1 id="七层协议定义"><a href="#七层协议定义" class="headerlink" title="七层协议定义"></a>七层协议定义</h1><table><thead><tr><th>应用层</th><th>网络服务与最终用户的一个接口(用户操作)人机交互窗口，把人的语言输入到计算机当中。</th></tr></thead><tbody><tr><td>表示层</td><td>编码，解码，加密，解密（二进制）</td></tr><tr><td>会话层</td><td>建立，维持，终止会话进程（QQ号码）</td></tr><tr><td>传输层</td><td>通过端口号区分不同的服务，数据分段（受MTU限制），确认、重传、流控、排序（TCP）</td></tr><tr><td>网络层</td><td>通过IP地址（IPV4、IPV6）进行逻辑寻址（ICMP，ARP协议）</td></tr><tr><td>数据链路层</td><td>建立逻辑连接、进行硬件地址寻址、差错校验等功能(交换机网卡)将上层数据加上源和目的方的物理(MAC)地址封装成数据帧，MAC地址是用来标识网卡的物理地址，建立数据链路:当发现数据错误时，可以重传数据帧。</td></tr><tr><td>物理层</td><td>建立、维护、断开物理连接(网卡，网线，光纤，集线器，中继器，调制解调器) 报文头部和上层数据信息都是由二进制数组成的，物理层将这些二进制数字组成的比特流转换成电信号在网络中传输。</td></tr></tbody></table><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>应用层（Application layer）是七层OSI模型的第七层。应用层直接和应用程序接口并提供常见的网络应用服务。应用层也向表示层发出请求。应用层是开放系统的最高层,是直接为应用进程提供服务的。其作用是在实现多个系统应用进程相互通信的同时,完成一系列业务处理所需的服务.其服务元素分为两类:公共应用服务元素CASE和特定应用服务元素SASE.</p><p>网络服务与最终用户的一个接口(用户操作)人机交互窗口，把人的语言输入到计算机当中。例如，在00的对话窗口输入字符。 </p><p>应用层直接和应用程式介面结合，并提供常见的网路应用服务。应用层也向第六层表示层发出请求。 </p><p>应用层协议例子 ：</p><p>AFP、APPC、BitTorrent、CFDP、DHCP、DNS、FTAM、FTP、Gopher、HTTP、IMAP、iTMS、IRC、LDAP、Modbus、NFS、NNTP、NTP、POP3、SIP、SMB、SMTP、SNMP、SNTP、SSH、Telnet、TFTP、TSP、Whois、X.400、X.500、XMPP、RPC</p><h2 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h2><p>表示层(Presentation)亦称表达层，为不同终端的上层用户提供数据和信息正确的语法表示变换方法。如文本文件的ASCII格式和UTF-8格式。</p><p>数据的表示、安全、压缩(人的语言翻译成计算机)将接收到的数据翻译成二进制数组成的计算机语言，并对数据进行压缩和解压、数据加密和解密等工作0101。 </p><p>表示层的主要功能：</p><p>数据语法转换<br>语法表示<br>连接管理<br>数据处理<br>    数据加密和解密<br>    数据压缩和解压<br>    数据编码和解码</p><p>具有表示层功能的协议 ：</p><p>HTTP/HTTPS<br>FTP/FTPS<br>SSH<br>Telnet<br>ASN.1</p><h2 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h2><p>主要为两个会话层实体进行会话（Session），而进行的对话连接的管理服务。</p><p>建立、管理、中止会话(通信软件建立会话，比如:QQ)管理是否允许不同机器上的用户之间建立会话连接关系。 </p><p>会话层为客户端的应用程序提供了开启、关闭和管理会话的机制，亦即半永久的对话。会话的实体包含了对其他程序作会话链接的要求及回应其他程序提出的会话链接要求。在应用程序的执行环境中，会话层是这些程序用来提出远程过程调用（remote procedure calls，RPC）的地方。</p><p>会话层标准为了使会话连接创建阶段能进行功能协商，也为了便于其它国际标准参考和引用，定义了12种功能单元。各个系统可根据自身情况和需要，以核心功能服务单元为基础，选配其他功能单元组成合理的会话服务子集。</p><p>会话层协议：</p><p>ADSP：AppleTalk的数据流协议<br>ASP：AppleTalk的动态会话协议<br>H.245, Call Control Protocol for Multimedia Communication<br>ISO-SP, OSI Session Layer Protocol（X.225, ISO 8327）<br>iSNS, Internet Storage Name Service<br>NetBIOS<br>PAP, 密码认证协议<br>PPTP, 点对点隧道协议<br>L2TP, 第二层隧道协议<br>RPC, 远程过程调用<br>RTCP, 实时传输控制协议<br>SMPP, Short Message Peer-to-Peer<br>ZIP, Zone Information Protocol<br>SDP, 套接字直接协议<br>SOCKS</p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>传输层（英语：Transport Layer）在计算机网络中是互联网协议包与开放系统互连（英语：Open Systems Interconnection）（OSI）网络堆栈中协议的分层结构中的方法的一个概念划分。该层的协议为应用进程提供端到端的通信服务。[1] 它提供面向连接的数据流支持、可靠性、流量控制、多路复用等服务。</p><p>定义传输数据的协议端口号，以及流控和差错校验(防火墙端到端) 将上层数据分片并加上端口号封装成数据段，或通过对报文头中的端口识别，实现网络中不同主机上的用户进程之间的数据。 </p><p>具有传输层功能的协议：<br>TCP<br>UDP<br>SPX</p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>网络层（Network Layer）是OSI模型中的第三层（TCP/IP模型中的网际层），提供路由和寻址的功能，使两终端系统能够互连且决定最佳路径，并具有一定的拥塞控制和流量控制的能力。相当于发送邮件时需要地址一般重要。由于TCP/IP协议体系中的网络层功能由IP协议规定和实现，故又称IP层。</p><p>进行逻辑地址寻址，实现”不同网络之间”的”路径选择”(路由器) 将上层数据加上源和目的方的逻辑(IP)地址封装成数据包，实现数据从源端到目的端的传输。 </p><p>网络层协议 ：</p><p>IP （V4、V6）<br>IPX<br>X.25<br>RARP<br>ICMP（V4、V6）<br>IGMP<br>IPsec<br>RIP<br>OSPF</p><h2 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h2><p>链路层是计算机网络中互联网协议包的最低一层。链路层是一组仅限于主机物理连接的线路的方法和通信协议。链路是用于网络中的主机或节点的物理和逻辑网络组件，链路协议是一套仅在网段的相邻网络节点之间运行的方法和标准。</p><p>建立逻辑连接、进行硬件地址寻址、差错校验等功能(交换机网卡)将上层数据加上源和目的方的物理(MAC)地址封装成数据帧，MAC地址是用来标识网卡的物理地址，建立数据链路:当发现数据错误时，可以重传数据帧。 </p><p>TCP/IP 模型中的链路层是网络协议的描述性领域，仅在主机所连接的本地网段（链路）上运行。此类协议数据包不会通到其他网络。链路层包括定义本地（on-link）网络节点之间通信的协议，这些协议实现了维护本地节点之间的链路状态的目的，例如本地网络拓扑，并且通常使用基于框架的协议。特定于链路类型的数据包。</p><p>互联网工程任务组（IETF） 在这一层指定的核心协议是地址解析协议（ARP）、反向地址解析协议（RARP） 和邻居发现协议（NDP），这是一种提供类似功能的设施作为IPv6的ARP。自IPv6出现以来，开放式最短路径优先协议（OSPF）也被认为在链路级别上运行，尽管该协议的IPv4版本被认为是在网络层上运行。</p><p>IS-IS（RFC 1142）是另一种链路状态路由协议，在考虑TCP/IP模型时适合该层，但是，它是在OSI模型规范堆栈中开发的，它是第2层协议。它不是互联网标准。</p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>物理层（Physical Layer）是计算机网络OSI模型中最低的一层，也是最基本的一层。简单的说，网络的物理层面确保原始的数据可在各种物理媒体上传输。</p><p>建立、维护、断开物理连接(网卡，网线，光纤，集线器，中继器，调制解调器) 报文头部和上层数据信息都是由二进制数组成的，物理层将这些二进制数字组成的比特流转换成电信号在网络中传输。 </p><p>物理层协议：</p><p>电话网络modems- V.92<br>IRDA物理层<br>USB物理层<br>EIA RS-232, EIA-422, EIA-423, RS-449, RS-485<br>Ethernet physical layer Including 10BASE-T, 10BASE2, 10BASE5, 100BASE-TX, 100BASE-FX, 100BASE-T, 1000BASE-T, 1000BASE-SX还有其他类型<br>Varieties of 802.11 Wi-Fi物理层<br>DSL<br>ISDN<br>T1 and other T-carrier links, and E1 and other E-carrier links<br>SONET/SDH<br>Optical Transport Network（OTN）<br>GSM Um air interface物理层<br>Bluetooth物理层<br>ITU Recommendations: see ITU-T<br>IEEE 1394 interface<br>TransferJet物理层<br>Etherloop<br>ARINC 818航空电子数字视频总线<br>G.hn/G.9960物理层<br>CAN bus（controller area network）物理层<br>资料编码技巧<br>编辑<br>RS-232-C编码<br>Zero-complemented差动式编码<br>曼彻斯特编码（Manchester Encoding）<br>差分曼彻斯特编码（Differential Manchester Encoding）</p><h1 id="数据封装与解封装"><a href="#数据封装与解封装" class="headerlink" title="数据封装与解封装"></a>数据封装与解封装</h1><img src="/2020/01/06/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE/1658028753477.png" class="" width="1658028753477">]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>centos</tag>
      
      <tag>七层协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis基础学习文档</title>
    <link href="/2020/01/06/nosql/redis/redis%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    <url>/2020/01/06/nosql/redis/redis%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>Redis:Remote DIctionary Server(远程字典服务器)，是完全开源免费的，用C语言编写的，遵守BSD协议，<br>是一个高性能的(key/value)分布式内存数据库，基于内存运行并支持持久化的NoSQL数据库，是当前最热门的NoSql数据库之一,也被人们称为数据结构服务器。</p><p>优点：</p><p>（1）Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用</p><p>（2）Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储</p><p>（3）Redis支持数据的备份，即master-slave模式的数据备份</p><p>相关应用：</p><p>（1）内存存储和持久化：redis支持异步将内存中的数据写到硬盘上，同时不影响继续服务</p><p>（2）取最新N个数据的操作，如：可以将最新的10条评论的ID放在Redis的List集合里面</p><p>（3）模拟类似于HttpSession这种需要设定过期时间的功能</p><p>（4）发布、订阅消息系统</p><p>（5）定时器、计数器</p><h1 id="二、Redis的安装"><a href="#二、Redis的安装" class="headerlink" title="二、Redis的安装"></a>二、Redis的安装</h1><p>下载安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -c http:<span class="hljs-regexp">//</span>download.redis.io<span class="hljs-regexp">/releases/</span>redis-<span class="hljs-number">5.0</span>.<span class="hljs-number">0</span>.tar.gz<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>安装目录查看</p><p>查看默认安装目录：usr/local/bin</p><p>redis-benchmark:性能测试工具</p><p>redis-check-aof：修复有问题的AOF文件</p><p>redis-check-dump：修复有问题的dump.rdb文件</p><p>redis-cli：客户端，操作入口</p><p>redis-sentinel：redis集群使用</p><p>redis-server：Redis服务器启动命令</p><p>启动服务</p><p>（1）修改redis.conf文件将里面的daemonize no 改成 yes，让服务在后台启动</p><p>（2）将默认的redis.conf拷贝到自己定义好的一个路径下，比如/myconf</p><p>（3）通过命令redis-server /myconf启动服务</p><p>（4）redis-cli 连接测试</p><p>服务关闭</p><p>单实例关闭：redis-cli shutdown</p><p>多实例关闭，指定端口关闭:redis-cli -p 6379 shutdown</p><h1 id="三、Redis服务"><a href="#三、Redis服务" class="headerlink" title="三、Redis服务"></a>三、Redis服务</h1><p><strong>服务核心</strong></p><p>单进程</p><p>单进程模型来处理客户端的请求。对读写等事件的响应是通过对epoll函数的包装来做到的。Redis的实际处理速度完全依靠主进程的执行效率。</p><p>epoll是Linux内核为处理大批量文件描述符而作了改进的epoll，是Linux下多路复用IO接口select/poll的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。</p><p><strong>服务端操作</strong></p><p>默认16个数据库，类似数组下表从零开始，初始默认使用零号库。</p><p>设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id  databases 16。</p><p>默认端口是6379</p><p><strong>数据库操作</strong></p><p>select命令切换数据库：select  [index]</p><p>dbsize查看当前数据库的key的数量</p><p>flushdb：清空当前库</p><p>flushall：清空全部库</p><p>统一密码管理，16个库都是同样密码，要么都OK要么一个也连接不上</p><p>Redis索引都是从零开始</p><p><strong>更多操作</strong></p><p><a href="http://redisdoc.com/">http://redisdoc.com/</a></p><h1 id="四、Redis数据类型"><a href="#四、Redis数据类型" class="headerlink" title="四、Redis数据类型"></a>四、Redis数据类型</h1><p><a href="https://blog.csdn.net/weixin_40205234/article/details/124614720">https://blog.csdn.net/weixin_40205234/article/details/124614720</a></p><p>Redis的五大数据类型:</p><p>（1）string（字符串）<br>（2）hash（哈希，类似java里的Map）<br>（3）list（列表）<br>（4）set（集合）<br>（5）zset(sorted set：有序集合)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">String</span>：如果存储数字的话，是用int类型的编码;如果存储非数字，小于等于<span class="hljs-number">39</span>字节的字符串，是embstr；大于<span class="hljs-number">39</span>个字节，则是raw编码。<br><span class="hljs-attribute">List</span>：如果列表的元素个数小于<span class="hljs-number">512</span>个，列表每个元素的值都小于<span class="hljs-number">64</span>字节（默认），使用ziplist编码，否则使用linkedlist编码<br><span class="hljs-attribute">Hash</span>：哈希类型元素个数小于<span class="hljs-number">512</span>个，所有值小于<span class="hljs-number">64</span>字节的话，使用ziplist编码,否则使用hashtable编码。<br><span class="hljs-attribute">Set</span>：如果集合中的元素都是整数且元素个数小于<span class="hljs-number">512</span>个，使用intset编码，否则使用hashtable编码。<br><span class="hljs-attribute">Zset</span>：当有序集合的元素个数小于<span class="hljs-number">128</span>个，每个元素的值小于<span class="hljs-number">64</span>字节时，使用ziplist编码，否则使用skiplist（跳跃表）编码<br></code></pre></td></tr></table></figure><h2 id="Redis-键-key"><a href="#Redis-键-key" class="headerlink" title="Redis 键(key)"></a>Redis 键(key)</h2><p><strong>key值查看：</strong></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xquery">（<span class="hljs-number">1</span>）keys * 显示所有<span class="hljs-built_in">的key</span><br>（<span class="hljs-number">2</span><span class="hljs-built_in">）exists</span><span class="hljs-built_in"> key</span> 判断某<span class="hljs-built_in">个key</span>是否存在<br>（<span class="hljs-number">3</span>）move<span class="hljs-built_in"> key</span> db   将当前库<span class="hljs-built_in">的key</span>移至db库<br>（<span class="hljs-number">4</span>）expire<span class="hljs-built_in"> key</span> 秒钟  为给定<span class="hljs-built_in">的key</span>设置过期时间<br>（<span class="hljs-number">5</span>）ttl<span class="hljs-built_in"> key</span> 查看还有多少秒过期，-<span class="hljs-number">1</span>表示永不过期，-<span class="hljs-number">2</span>表示已过期<br>（<span class="hljs-number">6</span>）type<span class="hljs-built_in"> key</span> 查看你<span class="hljs-built_in">的key</span>是什么类型<br>（<span class="hljs-number">7</span>）del<span class="hljs-built_in"> key</span>删<span class="hljs-built_in">除key</span><br></code></pre></td></tr></table></figure><p>更多操作：<a href="http://redisdoc.com/database/index.html">http://redisdoc.com/database/index.html</a></p><h2 id="Redis字符串-String"><a href="#Redis字符串-String" class="headerlink" title="Redis字符串(String)"></a>Redis字符串(String)</h2><blockquote><p>string是redis最基本的类型，一个key对应一个value。</p><p>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。</p><p>string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M。</p><p>应用场景：共享session、分布式锁，计数器、限流。</p><p>内部编码有3种，int（8字节长整型）/embstr（小于等于39字节字符串）/raw（大于39个字节字符串）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">object</span> encoding <span class="hljs-built_in">str</span> //获取<span class="hljs-built_in">str</span>的编码类型<br></code></pre></td></tr></table></figure><p>相关操作：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">set<span class="hljs-regexp">/get/</span>del<span class="hljs-regexp">/append/</span>strlen  设置<span class="hljs-regexp">/获取/</span>删除<span class="hljs-regexp">/追加/</span>字符串长度<br>Incr<span class="hljs-regexp">/decr/i</span>ncrby/decrby 数字操作，一定要是数字才能进行加减<br>getrange<span class="hljs-regexp">/setrange  返回指定范围内的字符串/</span>指定范围字符串替换<br>setex(set with expire)键秒值/setnx(set <span class="hljs-keyword">if</span> not exist)<br>mset<span class="hljs-regexp">/mget/m</span>setnx <br>getset(先get再set)<br></code></pre></td></tr></table></figure><p>所有字符串类型操作：<a href="http://redisdoc.com/string/index.html">http://redisdoc.com/string/index.html</a></p><h2 id="Redis列表-List"><a href="#Redis列表-List" class="headerlink" title="Redis列表(List)"></a>Redis列表(List)</h2><p>Redis 列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素导列表的头部（左边）或者尾部（右边）。它的底层实际是个链表。</p><blockquote><p>简介：列表（list）类型是用来存储多个有序的字符串，一个列表最多可以存储2^32-1个元素。<br>简单实用举例：lpush key value [value …] 、lrange key start end<br>内部编码：ziplist（压缩列表）、linkedlist（链表）<br>应用场景：消息队列，文章列表</p></blockquote><p>list应用场景参考以下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">lpush+<span class="hljs-attribute">lpop</span>=Stack（栈）<br>lpush+<span class="hljs-attribute">rpop</span>=Queue（队列）<br>lpsh+<span class="hljs-attribute">ltrim</span>=Capped Collection（有限集合）<br>lpush+<span class="hljs-attribute">brpop</span>=Message Queue（消息队列）<br></code></pre></td></tr></table></figure><p>相关操作：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tcl">lpush/rpush/<span class="hljs-keyword">lrange</span>  插入表头/插入表尾/区间值返回<br>lpop/rpop  移除并返回表头元素/移除并返回表尾元素<br><span class="hljs-keyword">lindex</span> 按照索引下标获得元素(从上到下)<br>llen 长度获取<br>lrem 移除<br>ltrim key 开始index 结束index，截取指定范围的值后再赋值给key<br>rpoplpush 源列表 目的列表<br><span class="hljs-keyword">lset</span> key index value<br><span class="hljs-keyword">linsert</span> key  before/<span class="hljs-keyword">after</span> 值<span class="hljs-number">1</span> 值<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>所有列表操作：<a href="http://redisdoc.com/list/index.html">http://redisdoc.com/list/index.html</a></p><h2 id="Redis集合-Set"><a href="#Redis集合-Set" class="headerlink" title="Redis集合(Set)"></a>Redis集合(Set)</h2><blockquote><p>简介：集合（set）类型也是用来保存多个的字符串元素，但是不允许重复元素<br>简单使用举例：sadd key element [element …]、smembers key<br>内部编码：intset（整数集合）、hashtable（哈希表）<br>注意点：smembers和lrange、hgetall都属于比较重的命令，如果元素过多存在阻塞Redis的可能性，可以使用sscan来完成。<br>应用场景：用户标签,生成随机数抽奖、社交需求。</p></blockquote><p>相关操作：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gauss"> sadd/smembers/sismember<br> scard，获取集合里面的元素个数<br> srem <span class="hljs-built_in">key</span> value 删除集合中元素<br> srandmember <span class="hljs-built_in">key</span> 某个整数(随机出几个数)<br> spop <span class="hljs-built_in">key</span> 随机出栈<br> smove key1 key2 在key1里某个值      作用是将key1里的某个值赋给key2<br>差集：sdiff<br>交集：sinter<br>并集：sunion<br></code></pre></td></tr></table></figure><p>所有Set集合操作：<a href="http://redisdoc.com/set/index.html">http://redisdoc.com/set/index.html</a></p><h2 id="Redis哈希-Hash"><a href="#Redis哈希-Hash" class="headerlink" title="Redis哈希(Hash)"></a>Redis哈希(Hash)</h2><blockquote><p>简介：在Redis中，哈希类型是指v（值）本身又是一个键值对（k-v）结构<br>简单使用举例：hset key field value 、hget key field<br>内部编码：ziplist（压缩列表） 、hashtable（哈希表）<br>应用场景：缓存用户信息等。<br>注意点：如果开发使用hgetall，哈希元素比较多的话，可能导致Redis阻塞，可以使用hscan。而如果只是获取部分field，建议使用hmget。</p></blockquote><p>相关操作：</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">hset<span class="hljs-regexp">/hget/</span>hmset<span class="hljs-regexp">/hmget/</span>hgetall/hdel<br>hlen<br>hexists key 在key里面的某个值的key<br>hkeys/hvals<br>hincrby/hincrbyfloat<br>hsetnx<br></code></pre></td></tr></table></figure><p>所有Hash操作：<a href="http://redisdoc.com/hash/index.html">http://redisdoc.com/hash/index.html</a></p><h2 id="Redis有序集合Zset-sorted-set"><a href="#Redis有序集合Zset-sorted-set" class="headerlink" title="Redis有序集合Zset(sorted set)"></a>Redis有序集合Zset(sorted set)</h2><blockquote><ul><li>简介：已排序的字符串集合，同时元素不能重复</li><li>简单格式举例：<code>zadd key score member [score member ...]</code>，<code>zrank key member</code></li><li>底层内部编码：<code>ziplist（压缩列表）</code>、<code>skiplist（跳跃表）</code></li><li>应用场景：排行榜，社交需求（如用户点赞）</li></ul></blockquote><p>相关操作：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs maxima">zadd/zrange<br>zrangebyscore <span class="hljs-built_in">key</span> 开始score 结束score<br>zrem <span class="hljs-built_in">key</span> 某score下对应的value值，作用是删除元素<br>zcard/zcount <span class="hljs-built_in">key</span> score区间/zrank <span class="hljs-built_in">key</span> <span class="hljs-built_in">values</span>值，作用是获得下标值/zscore <span class="hljs-built_in">key</span> 对应值,获得分数<br>zrevrank <span class="hljs-built_in">key</span> <span class="hljs-built_in">values</span>值，作用是逆序获得下标值<br>zrevrange<br>zrevrangebyscore  <span class="hljs-built_in">key</span> 结束score 开始score<br></code></pre></td></tr></table></figure><p>所有操作：<a href="http://redisdoc.com/sorted_set/index.html">http://redisdoc.com/sorted_set/index.html</a></p><h2 id="Redis-的三种特殊数据类型"><a href="#Redis-的三种特殊数据类型" class="headerlink" title="Redis 的三种特殊数据类型"></a>Redis 的三种特殊数据类型</h2><p>Geo：Redis3.2推出的，地理位置定位，用于存储地理位置信息，并对存储的信息进行操作。<br>HyperLogLog：用来做基数统计算法的数据结构，如统计网站的UV。<br>Bitmaps ：用一个比特位来映射某个元素的状态，在Redis中，它的底层是基于字符串类型实现的，可以把bitmaps成作一个以比特位为单位的数组</p><h1 id="五、redis配置文件"><a href="#五、redis配置文件" class="headerlink" title="五、redis配置文件"></a>五、redis配置文件</h1><p><a href="https://www.cnblogs.com/zhang-ke/p/5981108.html">https://www.cnblogs.com/zhang-ke/p/5981108.html</a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#配置大小单位,开头定义了一些基本的度量单位，只支持bytes，不支持bit</span><br><span class="hljs-comment">#单位大小写不敏感</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">###################################GENERAL通用###################################</span><br><span class="hljs-comment">#包含其它配置文件</span><br><span class="hljs-attr">include</span> <span class="hljs-string">/path/to/local.conf</span><br><span class="hljs-comment">#是否在后台执行，yes：后台运行；no：不是后台运行</span><br><span class="hljs-attr">daemonize</span> <span class="hljs-string">yes</span><br><span class="hljs-comment">#redis的进程文件</span><br><span class="hljs-attr">pidfile</span> <span class="hljs-string">/var/run/redis_6379.pid</span><br><span class="hljs-comment">#指定 redis 只接收来自于该 IP 地址的请求，如果不进行设置，那么将处理所有请求</span><br><span class="hljs-attr">bind</span> <span class="hljs-string">127.0.0.1</span><br><span class="hljs-comment">#redis监听的端口号。</span><br><span class="hljs-attr">port</span> <span class="hljs-string">6379</span><br><span class="hljs-comment"># 此参数为设置客户端空闲超过timeout，服务端会断开连接，为0则服务端不会主动断开连接，不能小于0。</span><br><span class="hljs-attr">timeout</span> <span class="hljs-string">0</span><br><span class="hljs-comment">#指定了服务端日志的级别。级别包括：debug（很多信息，方便开发、测试），verbose（许多有用的信息，但是没有debug级别信息多），notice（适当的日志级别，适合生产环境），warn（只有非常重要的信息）</span><br><span class="hljs-attr">loglevel</span> <span class="hljs-string">notice</span><br><span class="hljs-comment">#指定了记录日志的文件。空字符串的话，日志会打印到标准输出设备。后台运行的redis标准输出是/dev/null。</span><br><span class="hljs-attr">logfile</span> <span class="hljs-string">/var/log/redis/redis-server.log</span><br><span class="hljs-comment">#数据库的数量，默认使用的数据库是DB 0。可以通过”SELECT “命令选择一个db</span><br><span class="hljs-attr">databases</span> <span class="hljs-string">16</span><br><span class="hljs-comment">#设置tcp的backlog，backlog其实是一个连接队列，backlog队列总和=未完成三次握手队列 + 已经完成三次握手队列。在高并发环境下你需要一个高backlog值来避免客户端连接问题。注意Linux内核会将这个值减小到/proc/sys/net/core/somaxconn的值，所以需要确认增大somaxconn和tcp_max_syn_backlog两个值来达到想要的效果</span><br><span class="hljs-attr">tcp-backlog</span> <span class="hljs-string">511</span><br><span class="hljs-comment">#单位为秒，如果设置为0，则不会进行Keepalive检测，建议设置成60 </span><br><span class="hljs-attr">tcp-keepalive</span> <span class="hljs-string">60</span><br><span class="hljs-comment">#是否把日志输出到syslog中</span><br><span class="hljs-attr">syslog-enabled</span><br><span class="hljs-comment">#指定syslog里的日志标志</span><br><span class="hljs-attr">syslog-ident</span><br><span class="hljs-comment">#指定syslog设备，值可以是USER或LOCAL0-LOCAL7</span><br><span class="hljs-attr">syslog-facility</span><br><span class="hljs-comment">#设置密码 ./redis-cli -a 123456登录</span><br><span class="hljs-comment">#requirepass 123456</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">###################################SNAPSHOTTING快照###################################</span><br><span class="hljs-comment"># RDB是整个内存的压缩过的Snapshot</span><br><span class="hljs-comment"># 快照配置</span><br><span class="hljs-comment"># 注释掉“save”这一行配置项就可以让保存数据库功能失效</span><br><span class="hljs-comment"># 设置sedis进行数据库镜像的频率。</span><br><span class="hljs-comment"># 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化） </span><br><span class="hljs-comment"># 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化） </span><br><span class="hljs-comment"># 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）</span><br><span class="hljs-comment"># 如果想禁用RDB持久化的策略，只要不设置任何save指令，或者给save传入一个空字符串参数也可以</span><br><span class="hljs-attr">save</span> <span class="hljs-string">900 1</span><br><span class="hljs-attr">save</span> <span class="hljs-string">300 10</span><br><span class="hljs-attr">save</span> <span class="hljs-string">60 10000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#当RDB持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，可以通过info中的rdb_last_bgsave_status了解RDB持久化是否有错误</span><br><span class="hljs-attr">stop-writes-on-bgsave-error</span> <span class="hljs-string">yes</span><br><span class="hljs-comment"># 对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能</span><br><span class="hljs-attr">rdbcompression</span> <span class="hljs-string">yes</span><br><span class="hljs-comment">#是否校验rdb文件。从rdb格式的第五个版本开始，在rdb文件的末尾会带上CRC64的校验和。这跟有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗，所以如果你追求高性能，可以关闭该配置。</span><br><span class="hljs-attr">rdbchecksum</span> <span class="hljs-string">yes</span><br><span class="hljs-comment">#rdb文件的名称</span><br><span class="hljs-attr">dbfilename</span> <span class="hljs-string">dump.rdb</span><br><span class="hljs-comment">#数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录</span><br><span class="hljs-attr">dir</span> <span class="hljs-string">/var/lib/redis</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">################################### LIMITS ####################################</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 设置能连上redis的最大客户端连接数量。默认是10000个客户端连接。由于redis不区分连接是客户端连接还是内部打开文件或者和slave连接等，所以maxclients最小建议设置到32。如果超过了maxclients，redis会给新的连接发送’max number of clients reached’，并关闭连接。</span><br><span class="hljs-comment"># maxclients 10000</span><br><span class="hljs-comment">#redis配置的最大内存容量。当内存满了，需要配合maxmemory-policy策略进行处理。注意slave的输出缓冲区是不计算在maxmemory内的。所以为了防止主机内存使用完，建议设置的maxmemory需要更小一些。</span><br><span class="hljs-comment"># maxmemory &lt;bytes&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#内存容量超过maxmemory后的处理策略。</span><br><span class="hljs-comment">#volatile-lru：利用LRU算法移除设置过过期时间的key。</span><br><span class="hljs-comment">#volatile-random：随机移除设置过过期时间的key。</span><br><span class="hljs-comment">#volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL）</span><br><span class="hljs-comment">#allkeys-lru：利用LRU算法移除任何key。</span><br><span class="hljs-comment">#allkeys-random：随机移除任何key。</span><br><span class="hljs-comment">#noeviction：不移除任何key，只是返回一个写错误。</span><br><span class="hljs-comment">#上面的这些驱逐策略，如果redis没有合适的key驱逐，对于写命令，还是会返回错误。redis将不再接收写请求，只接收get请求。写命令包括：set setnx setex append incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby getset mset msetnx exec sort。</span><br><span class="hljs-comment"># maxmemory-policy noeviction</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#lru检测的样本数。使用lru或者ttl淘汰算法，从需要淘汰的列表中随机选择sample个key，选出闲置时间最长的key移除。</span><br><span class="hljs-comment"># maxmemory-samples 5</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">############################## APPEND ONLY MODE ###############################</span><br><span class="hljs-comment">#默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。</span><br><span class="hljs-attr">appendonly</span> <span class="hljs-string">yes</span><br><span class="hljs-comment">#aof文件名</span><br><span class="hljs-attr">appendfilename</span> <span class="hljs-string">&quot;appendonly.aof&quot;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#aof持久化策略的配置</span><br><span class="hljs-comment">#no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。</span><br><span class="hljs-comment">#always表示每次写入都执行fsync，以保证数据同步到磁盘。</span><br><span class="hljs-comment">#everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。</span><br><span class="hljs-attr">appendfsync</span> <span class="hljs-string">everysec</span><br><span class="hljs-comment"># 重写时是否可以运用Appendfsync，用默认no即可，保证数据安全性。</span><br><span class="hljs-attr">no-appendfsync-on-rewrite</span> <span class="hljs-string">no</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写</span><br><span class="hljs-attr">auto-aof-rewrite-min-size</span> <span class="hljs-string">64mb</span><br><span class="hljs-comment">#aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。</span><br><span class="hljs-attr">auto-aof-rewrite-percentage</span> <span class="hljs-string">100</span><br></code></pre></td></tr></table></figure><h1 id="六、redis持久化"><a href="#六、redis持久化" class="headerlink" title="六、redis持久化"></a>六、redis持久化</h1><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p><strong>原理</strong></p><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。</p><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p><p>fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程。</p><p><strong>保存方案</strong></p><p>rdb 保存的是dump.rdb文件。</p><p>save命令只管保存，其它不管，全部阻塞。</p><p>Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求。可以通过lastsave命令获取最后一次成功执行快照的时间。</p><p><strong>RDB持久化恢复方案</strong></p><p>将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可，CONFIG GET dir获取目录，指定配置文件的dir 路径，dir默认当前目录。</p><p><strong>优势与劣势</strong></p><p>优势：</p><p>（1）适合大规模的数据恢复</p><p>（2）对数据完整性和一致性要求不高</p><p>劣势：</p><p>（1）在一定间隔时间做一次备份，所以如果redis意外down掉的话，就会丢失最后一次快照后的所有修改。</p><p>（2）fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</p><p>动态停止保存方法：</p><p>动态所有停止RDB保存规则的方法：redis-cli config set save “”</p><h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><p><strong>原理</strong></p><p>以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><p><strong>配置文件</strong></p><p>Aof保存的是appendonly.aof文件,可以在redis.conf修改文件名。</p><p>修改默认的appendonly no，改为yes</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">appendonly</span> <span class="hljs-string">yes</span><br><span class="hljs-comment"># The name of the append only file (default: &quot;appendonly.aof&quot;)</span><br><span class="hljs-attr">appendfilename</span> <span class="hljs-string">&quot;appendonly.aof&quot;</span><br><span class="hljs-comment">#always表示每次写入都执行fsync，以保证数据同步到磁盘。</span><br><span class="hljs-comment"># appendfsync always</span><br><span class="hljs-comment">#everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。</span><br><span class="hljs-attr">appendfsync</span> <span class="hljs-string">everysec</span><br><span class="hljs-comment">#no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。</span><br><span class="hljs-comment"># appendfsync no</span><br></code></pre></td></tr></table></figure><p><strong>AOF启动/修复/恢复</strong></p><p>将有数据的aof文件复制一份保存到对应目录(config get dir)，然后重启redis进行加载而恢复数据。</p><p>如果AOP文件存在数据异常，可以使用redis-check-aof –fix进行修复。</p><p><strong>rewrite</strong></p><p>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制,当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof</p><p>重写原理：</p><p>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似。</p><p>触发机制：</p><p>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发。</p><p><strong>AOF优势与劣势</strong></p><p>优势：</p><p>（1）每修改同步：appendfsync always   同步持久化 每次发生数据变更会被立即记录到磁盘  性能较差但数据完整性比较好.<br>（2）每秒同步：appendfsync everysec    异步操作，每秒记录   如果一秒内宕机，有数据丢失,但数据丢失小。<br>（3）不同步：appendfsync no   从不同步，性能好。</p><p>劣势：</p><p>（1）相同数据集的数据而言aof文件要远大于rdb文件，恢复速度慢于rdb<br>（2）aof运行效率要慢于rdb,每秒同步策略效率较好，不同步效率和rdb相同</p><h2 id="持久化方案总结"><a href="#持久化方案总结" class="headerlink" title="持久化方案总结"></a>持久化方案总结</h2><p>如果只希望数据在服务器运行的时候存在,可以不使用任何持久化方式.</p><p>方案对比：</p><p>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储。<br>AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾.Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大</p><p>同时开启两种持久化方式：</p><p>在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据,因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.<br>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？<br>作者建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)，快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。</p><h1 id="七、Redis事务"><a href="#七、Redis事务" class="headerlink" title="七、Redis事务"></a>七、Redis事务</h1><p>可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其它命令插入，不许加塞。一个队列中，一次性、顺序性、排他性的执行一系列命令。</p><p><strong>操作流程</strong></p><p>（1）开启：以MULTI开始一个事务<br>（2）入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面<br>（3）执行：由EXEC命令触发事务</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><strong>基本命令</strong></p><p><a href="http://redisdoc.com/transaction/index.html">http://redisdoc.com/transaction/index.html</a></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gauss">DISCARD：取消事务，放弃执行事务块内的所有命令。<br><span class="hljs-built_in">EXEC</span>：执行所有事务块内的命令 <br>MULTI ：标记一个事务块的开始。 <br>WATCH ：监视一个(或多个) <span class="hljs-built_in">key</span> ，如果在事务执行之前这个(或这些) <span class="hljs-built_in">key</span> 被其他命令所改动，那么事务将被打断。 <br>UNWATCH：取消 WATCH 命令对所有 <span class="hljs-built_in">key</span> 的监视。 <br></code></pre></td></tr></table></figure><h3 id="执行情况"><a href="#执行情况" class="headerlink" title="执行情况"></a>执行情况</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p>（1）全部正常执行，即事务中的命令全部执行成功</p><p>（2）放弃事务，即放弃在事务中的所有操作</p><p>（3）全部执行失败（事务中队列中的执行操作，有语法错误）。</p><p>（4）部分执行（若队列中命令无语法错误，则全部执行，执行过程报错的不影响其它命令，例如：一个字符串k1=”vvsdf”，执行操作 incr  k1不会报语法错误，但会报执行错误）</p><h4 id="watch监控"><a href="#watch监控" class="headerlink" title="watch监控"></a>watch监控</h4><p> 悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p><p> 乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，</p><p>乐观锁策略:提交版本必须大于记录当前版本才能执行更新。</p><p>Watch原理：</p><p>Watch指令，类似乐观锁，事务提交时，如果Key的值已被别的客户端改变，比如某个list已被别的客户端push/pop过了，整个事务队列都不会被执行。<br>通过WATCH命令在事务执行之前监控了多个Keys，倘若在WATCH之后有任何Key的值发生了变化，EXEC命令执行的事务都将被放弃，同时返回Nullmulti-bulk应答以通知调用者事务执行失败。</p><p>Watch执行流程：</p><p>（1）WATCH  监视一个(或多个) key</p><p>（2）MULTI标记一个事务块的开始</p><p>（3）执行操作</p><p>（4）情况一：监控了key，如果key被修改了，后面一个事务的执行失效， WATCH 取消对所有 key 的监视</p><p>情况二：执行exec 把MULTI队列中的命令全部执行完成，并且WATCH监控锁也会被取消掉。</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p><a href="https://www.jianshu.com/p/67f700fad8b3">Redission</a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>没有隔离级别的概念：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题。</p><p>不保证原子性：redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚。</p><h1 id="八、Redis的发布订阅"><a href="#八、Redis的发布订阅" class="headerlink" title="八、Redis的发布订阅"></a>八、Redis的发布订阅</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>进程间的一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p><p>Redis 客户端可以订阅任意数量的频道。 </p><h2 id="订阅发布消息图"><a href="#订阅发布消息图" class="headerlink" title="订阅发布消息图"></a>订阅发布消息图</h2><p>例：频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系图</p><p><img src="http://www.runoob.com/wp-content/uploads/2014/11/pubsub1.png" alt="pubsub1"> </p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端： </p><p><img src="http://www.runoob.com/wp-content/uploads/2014/11/pubsub2.png" alt="pubsub2"> </p><h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2><p><a href="http://redisdoc.com/pubsub/index.html">http://redisdoc.com/pubsub/index.html</a></p><p>PSUBSCRIBE pattern [pattern …] 订阅一个或多个符合给定模式的频道。<br>PUBSUB subcommand [argument [argument …]] 查看订阅与发布系统状态。<br>PUBLISH channel message 将信息发送到指定的频道。<br>PUNSUBSCRIBE [pattern [pattern …]] 退订所有给定模式的频道。<br>SUBSCRIBE channel [channel …] 订阅给定的一个或多个频道的信息。<br>UNSUBSCRIBE [channel [channel …]] 指退订给定的频道。</p><p>操作实例：</p><p>在redis客服端创建订阅频道channel1：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>[<span class="hljs-number">1</span>]&gt; SUBSCRIBE channel1<br><span class="hljs-attribute">Reading</span> messages... (press Ctrl-C to quit)<br><span class="hljs-attribute">1</span>) <span class="hljs-string">&quot;subscribe&quot;</span><br><span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;channel1&quot;</span><br><span class="hljs-attribute">3</span>) (integer) <span class="hljs-number">1</span><br><span class="hljs-attribute">1</span>) <span class="hljs-string">&quot;message&quot;</span><br><span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;channel1&quot;</span><br><span class="hljs-attribute">3</span>) <span class="hljs-string">&quot;hello channel1&quot;</span> //收到的第一条消息<br><span class="hljs-attribute">1</span>) <span class="hljs-string">&quot;message&quot;</span><br><span class="hljs-attribute">2</span>) <span class="hljs-string">&quot;channel1&quot;</span><br><span class="hljs-attribute">3</span>) <span class="hljs-string">&quot;come here&quot;</span> //收到的第二条消息<br></code></pre></td></tr></table></figure><p>重新开启一个redis客服端，然后在同一个频道 redisChat 发布消息，订阅者就能接收到消息。 </p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span><span class="hljs-string">[1]</span>&gt; PUBLISH channel1 <span class="hljs-string">&quot;hello channel1&quot;</span><br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0.0.1:6379</span><span class="hljs-string">[1]</span>&gt; PUBLISH channel1 <span class="hljs-string">&quot;come here&quot;</span><br>(integer) <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="九、Redis的复制-Master-Slave"><a href="#九、Redis的复制-Master-Slave" class="headerlink" title="九、Redis的复制(Master/Slave)"></a>九、Redis的复制(Master/Slave)</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>Redis支持简单的主从（master-slave）复制功能，当主Redis服务器更新数据时能将数据自动同步到从Redis服务器 ,Master以写为主，Slave以读为主。</p><h2 id="主要用途"><a href="#主要用途" class="headerlink" title="主要用途"></a>主要用途</h2><p>读写分离、容灾恢复</p><h2 id="配置搭建"><a href="#配置搭建" class="headerlink" title="配置搭建"></a>配置搭建</h2><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><p>配从(库)不配主(库)，从库是不能进行修改操作的。</p><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p><a href="http://redisdoc.com/replication/slaveof.html">http://redisdoc.com/replication/slaveof.html</a></p><p>每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件</p><p>例如有3台redis服务器，分别是A、B、C。</p><h4 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h4><p>以A为主(master)库，B、C为从库。</p><p>在B、C上分别执行slaveof 127.0.0.1 6379，然后A库上所有的更新操作都能在B、C中存在。</p><p>A:</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6379</span>&gt; info replication<br><span class="hljs-comment"># Replication</span><br>role:master<br>connected_slaves:<span class="hljs-number">2</span><br>slave0:ip=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>,<span class="hljs-keyword">port</span>=<span class="hljs-number">6380</span>,<span class="hljs-keyword">state</span>=online,offset=<span class="hljs-number">70</span>,lag=<span class="hljs-number">0</span><br>slave1:ip=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>,<span class="hljs-keyword">port</span>=<span class="hljs-number">6381</span>,<span class="hljs-keyword">state</span>=online,offset=<span class="hljs-number">70</span>,lag=<span class="hljs-number">1</span><br>.....<br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-built_in">set</span> k1 v1<br>OK<br></code></pre></td></tr></table></figure><p>B:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6380</span>&gt; slaveof <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> <span class="hljs-number">6379</span><br>OK<br><span class="hljs-number">127.0.0.1:6380</span>&gt; info replication<br># Replication<br>role:slave<br>master_host:<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br>master_port:<span class="hljs-number">6379</span><br>...<br><span class="hljs-number">127.0.0.1:6380</span>&gt; get k1<br><span class="hljs-string">&quot;v1&quot;</span><br></code></pre></td></tr></table></figure><p>C:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6380</span>&gt; slaveof <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> <span class="hljs-number">6379</span><br>OK<br><span class="hljs-number">127.0.0.1:6381</span>&gt; info replication<br># Replication<br>role:slave<br>master_host:<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br>master_port:<span class="hljs-number">6379</span><br>...<br><span class="hljs-number">127.0.0.1:6381</span>&gt; get k1<br><span class="hljs-string">&quot;v1&quot;</span><br></code></pre></td></tr></table></figure><h4 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h4><p>上一个Slave可以是下一个slave的Master，Slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master,可以有效减轻master的写压力。<br>中途变更转向:会清除之前的数据，重新建立拷贝最新的。<br>A（master）为主库<br>B作为A库的slave，作为C库的master<br>C为B库的slave</p><p>A：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; info replication<br><span class="hljs-comment"># Replication</span><br><span class="hljs-attribute">role</span>:master<br><span class="hljs-attribute">connected_slaves</span>:<span class="hljs-number">1</span><br><span class="hljs-attribute">slave0</span>:ip=<span class="hljs-number">127.0.0.1</span>,port=<span class="hljs-number">6380</span>,state=online,offset=<span class="hljs-number">3290</span>,lag=<span class="hljs-number">0</span><br><span class="hljs-attribute">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; set k2 v2<br><span class="hljs-attribute">OK</span><br></code></pre></td></tr></table></figure><p>B:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6380</span>&gt; slaveof <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> <span class="hljs-number">6379</span><br>OK<br><span class="hljs-number">127.0.0.1:6380</span>&gt; info replication<br># Replication<br>role:slave<br>master_host:<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br>master_port:<span class="hljs-number">6379</span><br>...<br>slave0:ip=<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>,port=<span class="hljs-number">6381</span>,state=online,offset=<span class="hljs-number">3262</span>,lag=<span class="hljs-number">1</span><br><span class="hljs-number">127.0.0.1:6380</span>&gt; get k2<br><span class="hljs-string">&quot;v2</span><br></code></pre></td></tr></table></figure><p>C:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6381</span>&gt; slaveof <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> <span class="hljs-number">6380</span><br>OK<br><span class="hljs-number">127.0.0.1:6381</span>&gt; info replication<br># Replication<br>role:slave<br>master_host:<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br>master_port:<span class="hljs-number">6380</span><br>...<br><span class="hljs-number">127.0.0.1:6381</span>&gt; get k2<br><span class="hljs-string">&quot;v2&quot;</span><br></code></pre></td></tr></table></figure><h4 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h4><p>使当前数据库停止与其他数据库的同步，转成主数据库。</p><p>SLAVEOF no one</p><h4 id="哨兵模式-sentinel"><a href="#哨兵模式-sentinel" class="headerlink" title="哨兵模式(sentinel)"></a>哨兵模式(sentinel)</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。<br>例如：当原有的master挂了，剩下的slave会投票选举出新的master，如果之前的master库重新启动了，则会成为同步新选举出来的master的slave从库。<br>一组sentinel能同时监控多个Master。</p><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>（1）在redis.conf对应目录下新建sentinel.conf文件。并且配置哨兵：<br>sentinel monitor 自定义被监控redis库 127.0.0.1 6379 1<br>上面最后一个数字1，表示主机挂掉后salve投票看让谁接替成为主机，得票数多少后成为主机。<br>例如：监控A库<br>sentinel.conf:</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">sentinel<span class="hljs-built_in"> monitor </span>host6379 127.0.0.1 6379 1<br></code></pre></td></tr></table></figure><p>（2）启动哨兵</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">redis-sentinel sentinel.<span class="hljs-keyword">conf</span> <br></code></pre></td></tr></table></figure><h2 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h2><p>slave启动成功连接到master后会发送一个sync命令<br>Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步<br>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。<br>增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步，但是只要是重新连接master,一次完全同步（全量复制)将被自动执行</p><p>例：当slave第一次连上master会全量复制，后面进行的是增量复制</p><h2 id="复制缺点"><a href="#复制缺点" class="headerlink" title="复制缺点"></a>复制缺点</h2><p>复制延时：</p><p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p><h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>Jedis是 Redis 官方首选的 Java 客户端开发包。 </p><p>开发需要的jar包：commons-pool-1.6.jar、jedis-2.1.0.jar</p><p>maven：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-pool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.10.206&quot;</span>,<span class="hljs-number">6379</span>);<br>System.out.println(jedis.ping());<br></code></pre></td></tr></table></figure><h3 id="基本类型操作"><a href="#基本类型操作" class="headerlink" title="基本类型操作"></a>基本类型操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.10.206&quot;</span>,<span class="hljs-number">6379</span>);<br><span class="hljs-comment">//获取 keys * 结果</span><br>Set&lt;String&gt; keys = jedis.keys(<span class="hljs-string">&quot;*&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> keys.iterator(); iterator.hasNext();) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (String) iterator.next();<br>    System.out.println(key);<br>&#125;<br><span class="hljs-comment">//查看k2是否存在</span><br>System.out.println(<span class="hljs-string">&quot;jedis.exists====&gt;&quot;</span>+jedis.exists(<span class="hljs-string">&quot;k2&quot;</span>));<br><span class="hljs-comment">//查看k1还有多少秒过期</span><br>System.out.println(jedis.ttl(<span class="hljs-string">&quot;k1&quot;</span>));<br><span class="hljs-comment">//查看k1值</span><br>System.out.println(jedis.get(<span class="hljs-string">&quot;k1&quot;</span>));<br><span class="hljs-comment">//设置k4=k4_redis</span><br>jedis.set(<span class="hljs-string">&quot;k4&quot;</span>,<span class="hljs-string">&quot;k4_redis&quot;</span>);<br><span class="hljs-comment">//多个字符串同时设置值</span><br>jedis.mset(<span class="hljs-string">&quot;str1&quot;</span>,<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;str2&quot;</span>,<span class="hljs-string">&quot;v2&quot;</span>,<span class="hljs-string">&quot;str3&quot;</span>,<span class="hljs-string">&quot;v3&quot;</span>);<br><span class="hljs-comment">//获取多个字符串值</span><br>System.out.println(jedis.mget(<span class="hljs-string">&quot;str1&quot;</span>,<span class="hljs-string">&quot;str2&quot;</span>,<span class="hljs-string">&quot;str3&quot;</span>));<br><br><span class="hljs-comment">//list设置值 及获取</span><br>jedis.lpush(<span class="hljs-string">&quot;mylist&quot;</span>,<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;v2&quot;</span>,<span class="hljs-string">&quot;v3&quot;</span>,<span class="hljs-string">&quot;v4&quot;</span>,<span class="hljs-string">&quot;v5&quot;</span>);<br>List&lt;String&gt; list = jedis.lrange(<span class="hljs-string">&quot;mylist&quot;</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (String element : list) &#123;<br>    System.out.println(element);<br>&#125;<br><br><span class="hljs-comment">//set设置值 及获取</span><br>jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>,<span class="hljs-string">&quot;jd001&quot;</span>);<br>jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>,<span class="hljs-string">&quot;jd002&quot;</span>);<br>jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>,<span class="hljs-string">&quot;jd003&quot;</span>);<br>Set&lt;String&gt; set1 = jedis.smembers(<span class="hljs-string">&quot;orders&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> set1.iterator(); iterator.hasNext();) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> (String) iterator.next();<br>    System.out.println(string);<br>&#125;<br><span class="hljs-comment">//set移除值</span><br>jedis.srem(<span class="hljs-string">&quot;orders&quot;</span>,<span class="hljs-string">&quot;jd002&quot;</span>);<br><span class="hljs-comment">//hash设值及获取</span><br>jedis.hset(<span class="hljs-string">&quot;hash1&quot;</span>,<span class="hljs-string">&quot;userName&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>);<br>System.out.println(jedis.hget(<span class="hljs-string">&quot;hash1&quot;</span>,<span class="hljs-string">&quot;userName&quot;</span>));<br><br><span class="hljs-comment">//zset添加值</span><br>jedis.zadd(<span class="hljs-string">&quot;zset01&quot;</span>,<span class="hljs-number">90d</span>,<span class="hljs-string">&quot;v4&quot;</span>);<br><span class="hljs-comment">//zset获取全部值</span><br>Set&lt;String&gt; s1 = jedis.zrange(<span class="hljs-string">&quot;zset01&quot;</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> s1.iterator(); iterator.hasNext();) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> (String) iterator.next();<br>    System.out.println(string);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>);<br><span class="hljs-type">int</span> balance;<span class="hljs-comment">// 可用余额</span><br><span class="hljs-type">int</span> <span class="hljs-variable">amtToSubtract</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">// 实刷额度</span><br><span class="hljs-comment">//watch监控</span><br>jedis.watch(<span class="hljs-string">&quot;balance&quot;</span>);<br>balance = Integer.parseInt(jedis.get(<span class="hljs-string">&quot;balance&quot;</span>));<br><span class="hljs-keyword">if</span> (balance &lt; amtToSubtract) &#123;<br>    <span class="hljs-comment">//取消watch监控</span><br>    jedis.unwatch();<br>    System.out.println(<span class="hljs-string">&quot;modify&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">//开启事务</span><br>    <span class="hljs-type">Transaction</span> <span class="hljs-variable">transaction</span> <span class="hljs-operator">=</span> jedis.multi();<br>    transaction.decrBy(<span class="hljs-string">&quot;balance&quot;</span>, amtToSubtract);<br>    transaction.incrBy(<span class="hljs-string">&quot;debt&quot;</span>, amtToSubtract);<br>    <span class="hljs-comment">//执行并提交事务 watch监控也会取消</span><br>    transaction.exec();<br>    System.out.println(<span class="hljs-string">&quot;success&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis_M</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">6379</span>);<br><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis_S</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">6380</span>);<br>jedis_S.slaveof(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">6379</span>);<br></code></pre></td></tr></table></figure><h3 id="Jedis池"><a href="#Jedis池" class="headerlink" title="Jedis池"></a>Jedis池</h3><p>获取Jedis实例需要从JedisPool中获取,用完Jedis实例需要返还给JedisPool,如果Jedis在使用过程中出错，则也需要还给JedisPool</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisPoolUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">JedisPool</span> <span class="hljs-variable">jedisPool</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">JedisPoolUtil</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JedisPool <span class="hljs-title function_">getJedisPoolInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == jedisPool)&#123;<br>            <span class="hljs-keyword">synchronized</span> (JedisPoolUtil.class)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == jedisPool)&#123;<br>                    <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">poolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>                    poolConfig.setMaxActive(<span class="hljs-number">1000</span>);<br>                    poolConfig.setMaxIdle(<span class="hljs-number">32</span>);<br>                    poolConfig.setMaxWait(<span class="hljs-number">100</span>*<span class="hljs-number">1000</span>);<br>                    poolConfig.setTestOnBorrow(<span class="hljs-literal">true</span>);<br><br>                    jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(poolConfig,<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">6379</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> jedisPool;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">release</span><span class="hljs-params">(JedisPool jedisPool,Jedis jedis)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != jedis)&#123;<br>            jedisPool.returnResourceObject(jedis);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="JedisPoolConfig配置"><a href="#JedisPoolConfig配置" class="headerlink" title="JedisPoolConfig配置"></a>JedisPoolConfig配置</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">JedisPool的配置参数大部分是由JedisPoolConfig的对应项来赋值的。</span><br><span class="hljs-attr">maxActive：控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted。</span><br><span class="hljs-attr">maxIdle：控制一个pool最多有多少个状态为idle(空闲)的jedis实例；</span><br><span class="hljs-attr">whenExhaustedAction：表示当pool中的jedis实例都被allocated完时，pool要采取的操作；默认有三种。</span><br><span class="hljs-attr"> WHEN_EXHAUSTED_FAIL</span> <span class="hljs-string">--&gt; 表示无jedis实例时，直接抛出NoSuchElementException；</span><br><span class="hljs-attr"> WHEN_EXHAUSTED_BLOCK</span> <span class="hljs-string">--&gt; 则表示阻塞住，或者达到maxWait时抛出JedisConnectionException；</span><br><span class="hljs-attr"> WHEN_EXHAUSTED_GROW</span> <span class="hljs-string">--&gt; 则表示新建一个jedis实例，也就说设置的maxActive无用；</span><br><span class="hljs-attr">maxWait：表示当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛JedisConnectionException；</span><br><span class="hljs-attr">testOnBorrow：获得一个jedis实例的时候是否检查连接可用性（ping()）；如果为true，则得到的jedis实例均是可用的；</span><br><br><br><span class="hljs-attr">testOnReturn：return</span> <span class="hljs-string">一个jedis实例给pool时，是否检查连接可用性（ping()）；</span><br><br><br><span class="hljs-attr">testWhileIdle：如果为true，表示有一个idle</span> <span class="hljs-string">object evitor线程对idle object进行扫描，如果validate失败，此object会被从pool中drop掉；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义；</span><br><br><br><span class="hljs-attr">timeBetweenEvictionRunsMillis：表示idle</span> <span class="hljs-string">object evitor两次扫描之间要sleep的毫秒数；</span><br><br><br><span class="hljs-attr">numTestsPerEvictionRun：表示idle</span> <span class="hljs-string">object evitor每次扫描的最多的对象数；</span><br><br><br><span class="hljs-attr">minEvictableIdleTimeMillis：表示一个对象至少停留在idle状态的最短时间，然后才能被idle</span> <span class="hljs-string">object evitor扫描并驱逐；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义；</span><br><br><br><span class="hljs-attr">softMinEvictableIdleTimeMillis：在minEvictableIdleTimeMillis基础上，加入了至少minIdle个对象已经在pool里面了。如果为-1，evicted不会根据idle</span> <span class="hljs-string">time驱逐任何对象。如果minEvictableIdleTimeMillis&gt;0，则此项设置无意义，且只有在timeBetweenEvictionRunsMillis大于0时才有意义；</span><br><br><br><span class="hljs-attr">lifo：borrowObject返回对象时，是采用DEFAULT_LIFO（last</span> <span class="hljs-string">in first out，即类似cache的最频繁使用队列），如果为False，则表示FIFO队列；</span><br><br><br><span class="hljs-attr">其中JedisPoolConfig对一些参数的默认设置如下：</span><br><span class="hljs-attr">testWhileIdle</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">minEvictableIdleTimeMills</span>=<span class="hljs-string">60000</span><br><span class="hljs-attr">timeBetweenEvictionRunsMillis</span>=<span class="hljs-string">30000</span><br><span class="hljs-attr">numTestsPerEvictionRun</span>=<span class="hljs-string">-1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx基础知识</title>
    <link href="/2020/01/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx/nginx%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2020/01/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx/nginx%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-开启日志打开缓存"><a href="#1-开启日志打开缓存" class="headerlink" title="1 开启日志打开缓存"></a>1 开启日志打开缓存</h1><p>对于每一条日志记录,日志文件都将先打开文件,再写入日志记录,然后马上关闭,为了提高包含变量的日志文件存放路径的性能,可以使用open_log_file_cache指令来设置,格式如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">open_log_file_cache <span class="hljs-attribute">max</span>=N [<span class="hljs-attribute">inactive</span>=time][<span class="hljs-attribute">min_uses</span>=N][<span class="hljs-attribute">valid</span>=time]|off<br></code></pre></td></tr></table></figure><p>该指令默认是禁止的,等同于：open_log_file_cache off;</p><p>max:设置缓存中的最大文件描述符数量</p><p>inactive:设置一个时间,如果在设置的时间内没有使用此文件描述符,则自动删除此描述符</p><p>min_uses:在参数inactive指定的时间范围内,如果日志文件超过被使用的次数,则将该日志文件的描述符计入缓存,默认为10秒钟</p><p>valid:设置多长时间检查一次,看日志文件路径与文件名是否仍然存在默认60秒</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">open_log_file_cache <span class="hljs-attribute">max</span>=1000 <span class="hljs-attribute">inactive</span>=20s <span class="hljs-attribute">min_uses</span>=2 <span class="hljs-attribute">valid</span>=1m;<br></code></pre></td></tr></table></figure><h1 id="2-Nginx开启压缩输出"><a href="#2-Nginx开启压缩输出" class="headerlink" title="2 Nginx开启压缩输出"></a>2 Nginx开启压缩输出</h1><p>在http {}中间,启用压缩</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ vim /etc/nginx/nginx.conf<br>gzip <span class="hljs-keyword">on</span>;<br>gzip_min_length <span class="hljs-number">1</span>k;<br>gzip_buffer <span class="hljs-number">4</span> <span class="hljs-number">16</span>k;<br>gzip_http_version <span class="hljs-number">1.1</span>;<br>gzip_comp_level <span class="hljs-number">2</span>;<br>gzip_type <span class="hljs-built_in">text</span>/plain <span class="hljs-built_in">application</span>/x-javascript <span class="hljs-built_in">text</span>/css <span class="hljs-built_in">application</span>/xml;<br>gzip_vary <span class="hljs-keyword">on</span>;<br></code></pre></td></tr></table></figure><h1 id="3-缓存"><a href="#3-缓存" class="headerlink" title="3 缓存"></a>3 缓存</h1><h2 id="3-1-Nginx的浏览器本地缓存设置"><a href="#3-1-Nginx的浏览器本地缓存设置" class="headerlink" title="3.1 Nginx的浏览器本地缓存设置"></a>3.1 Nginx的浏览器本地缓存设置</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coq">$ vim /etc/nginx/nginx.conf<br>location ~.*\.(gif|<span class="hljs-type">jpg</span>|<span class="hljs-type">jpge</span>|<span class="hljs-type">png</span>|<span class="hljs-type">bmp</span>|<span class="hljs-type">swf</span>)$<br>&#123;<br>  expires <span class="hljs-number">30</span>d;<br>&#125;<br>location ~.*\.(js|<span class="hljs-type">css</span>)?$<br>&#123;<br>  expires <span class="hljs-number">1</span>h;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-nginx代理缓存"><a href="#3-2-nginx代理缓存" class="headerlink" title="3.2 nginx代理缓存"></a>3.2 nginx代理缓存</h2><p><a href="https://blog.csdn.net/weixin_30795127/article/details/97385091#proxy_cache_path">https://blog.csdn.net/weixin_30795127/article/details/97385091#proxy_cache_path</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> ~.*\.(gif|jpg|jpge|png|bmp|swf|js|css|html)$<br>&#123;<br>  <span class="hljs-attribute">proxy_cache</span> cache_one;<br>  <span class="hljs-attribute">proxy_cache_valid</span> <span class="hljs-number">200</span> <span class="hljs-number">10m</span>;<br>  <span class="hljs-attribute">proxy_cache_valid</span> <span class="hljs-number">304</span> <span class="hljs-number">1m</span>;<br>  <span class="hljs-attribute">proxy_cache_valid</span> <span class="hljs-number">301</span> <span class="hljs-number">302</span> <span class="hljs-number">1h</span>;<br>  <span class="hljs-attribute">proxy_cache_valid</span> any <span class="hljs-number">1m</span>;<br>  <span class="hljs-comment">#以域名、URI、参数组合成Web缓存的Key值, Nginx根据Key值哈希,存储缓存内容到二级缓存目录内</span><br>  <span class="hljs-attribute">proxy_cache_key</span> <span class="hljs-variable">$hostSuri</span><span class="hljs-variable">$is_argsSargs</span>;<br>  <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>  <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$remote_addr</span>;<br>  <span class="hljs-attribute">proxy_pass</span> http://192.168.3.1;<br>&#125;<br></code></pre></td></tr></table></figure><p>proxy_cache_valid</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">语法<span class="hljs-symbol">:</span> proxy_cache_valid [<span class="hljs-built_in">code</span> ...] <span class="hljs-built_in">time</span>; <br></code></pre></td></tr></table></figure><h1 id="4-设定限速"><a href="#4-设定限速" class="headerlink" title="4 设定限速"></a>4 设定限速</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /download<br>&#123;<br>  <span class="hljs-attribute">limit_rate</span> <span class="hljs-number">256k</span>;<br>  <span class="hljs-attribute">proxy_pass</span> http://1.2.3.4;<br>  <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>  <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$remote_addr</span>;<br>&#125;<br><span class="hljs-section">location</span> /movie<br>&#123;<br>  <span class="hljs-attribute">limit_rate_after</span> <span class="hljs-number">10m</span>;<br>  <span class="hljs-attribute">limit_rate</span> <span class="hljs-number">100k</span>;<br>&#125;<br><span class="hljs-attribute">if</span> (Shttp_user_agent <span class="hljs-regexp">~ Google|Yahoo|baidu)</span>&#123;<br>  <span class="hljs-attribute">limit_rate</span> <span class="hljs-number">20k</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-请求连接控制"><a href="#5-请求连接控制" class="headerlink" title="5 请求连接控制"></a>5 请求连接控制</h1><p>允许客户端请求的最大的单个文件字节数</p><p>client_max_body_size300m;</p><p>缓冲区代理缓冲用户端请求的最大字节数可以理解为先保存到本地再传给用户</p><p>client_body_buffer_size 128k;</p><p>跟后端服务器连接的超时时间-发起握手等候响应超时时间</p><p>proxy_connect_timeout 600;</p><p>连接成功后-等候后端服务器响应时间_其实已经进入后端的排队之中等候处理</p><p>proxy_read_timeout600</p><p>后端服务器数据回传时间-就是在规定时间之内后端服务器必须传完所有的数据</p><p>proxy_send_timeout 600;</p><p>代理请求缓存区_这个缓存区间会保存用户的头信息以供Nginx进行规则处理-一般只要能保存下头信息即可</p><p>proxy_buffer_size 16k;</p><h1 id="6-Nginx-rewrite"><a href="#6-Nginx-rewrite" class="headerlink" title="6 Nginx rewrite"></a>6 Nginx rewrite</h1><p>Rewrite主要的功能就是实现URL的重写, Nginx的Rewrite规则采用PCRE (Perl Compatible Regular Expressions) Perl兼容正则表达式的语法进行规则匹配,如果需要Nginx的Rewrite功能,在编译Nginx之前,需要编译安装PCRE库</p><p>URL是Uniform Resource Location的缩写,译为“统一资源定位符”。如: <a href="http://www.linkwan.com/111/welcome.htm">http://www.linkwan.com/111/welcome.htm</a></p><p>URI由一个通过通用资源标志符(Universal ResourceIdentifier, 简称”URI”)进行定位</p><h1 id="7-指令"><a href="#7-指令" class="headerlink" title="7 指令"></a>7 指令</h1><p>if指令</p><p>规则语法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$http_user_agent</span> ~ MSIE )&#123;<br>  rewrite ^(.*)$ <span class="hljs-regexp">/msie/</span><span class="hljs-variable">$1</span> <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!-f <span class="hljs-variable">$request_filename</span>)&#123;<br>  rewrite ^<span class="hljs-regexp">/img/</span>(.*)$<span class="hljs-regexp">/site/</span><span class="hljs-variable">$host</span><span class="hljs-regexp">/images/</span><span class="hljs-variable">$1</span> last;<br>&#125;<br></code></pre></td></tr></table></figure><p>return指令</p><p>示例,如果访问的URL以”.sh”、”*.bash”结尾,则返回状态码403</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">.*.(sh</span> | bash)?$<br>return <span class="hljs-number">403</span>;<br></code></pre></td></tr></table></figure><p>set、rewrite指令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (?host <span class="hljs-regexp">~* ^(.*?)\.aaa\.com$)</span><br>&#123;<br>  <span class="hljs-attribute">set</span> ?var_tz <span class="hljs-string">&#x27;1&#x27;</span>;<br>  <span class="hljs-attribute">if</span> (?host <span class="hljs-regexp">~* ^192\.168\.1\.(.*?)$)</span><br>  &#123;<br>      <span class="hljs-attribute">set</span> <span class="hljs-variable">$var_tz</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br>  &#125;<br>  <span class="hljs-attribute">if</span> (<span class="hljs-variable">$host</span> <span class="hljs-regexp">~* ^localhost)</span><br>  &#123;<br>      <span class="hljs-attribute">set</span> ?var_tz <span class="hljs-string">&#x27;1&#x27;</span><br>  &#125;<br>  if (<span class="hljs-variable">$var_tz</span> !~<span class="hljs-string">&#x27;1&#x27;</span>)<br>  &#123;<br>      <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/(.*)$</span> http://www.aaa.com/ <span class="hljs-literal">redirect</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p>rewrite </p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nim">location /cms/ [<br>  proxy_pass http://test.yourdomain.com;<br>  rewrite <span class="hljs-string">&quot;^/cms/(.*)\.html$&quot;</span> /cms/index.html <span class="hljs-keyword">break</span>;<br>&#125;<br>一般在跟location中(即location/[..])或直接在server标签中编写rewrite规则,推荐使用last标记,在非跟location中(location /cms/<span class="hljs-meta">&#123;...&#125;</span>),则使用<span class="hljs-keyword">break</span>标记<br></code></pre></td></tr></table></figure><p>rewrite规则编写实例</p><p>1、将原来要访问/data目录重写为/bbs</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rewrite A<span class="hljs-regexp">/data/</span>?$ <span class="hljs-regexp">/bbs/</span> permanent;<br></code></pre></td></tr></table></figure><p>2、根据不同的浏览器将得到不同的结果</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (<span class="hljs-variable">$http_user_agent</span> MSIE)&#123;<br>  <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(.*)$</span> /msie/<span class="hljs-variable">$1</span> <span class="hljs-literal">break</span>;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p>3、防止盗链</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> ~*\.(gif|jpg|png|swf|flv)$ &#123;<br>  <span class="hljs-attribute">valid_referers</span> <span class="hljs-literal">none</span> <span class="hljs-literal">blocked</span> www.test.com <span class="hljs-regexp">*.test.com</span>;<br>  <span class="hljs-attribute">if</span> (<span class="hljs-variable">$invalid_referer</span>) (<br>     rewrite<span class="hljs-regexp"> ^/(.*)</span> http://www.test.com/block.html;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、实现域名跳转</p><p>所有对<a href="http://www.abc.com的访问/">www.abc.com的访问</a>, redirect到<a href="http://www.test.com/">www.test.com</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span><br>&#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span> www.test.com;<br><span class="hljs-attribute">index</span> index.html index.php;<br><span class="hljs-attribute">root</span> /export/home/www<br>if (<span class="hljs-variable">$host</span> =<span class="hljs-string">&quot;www.abc.com&quot;</span>)&#123;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/(.*)$</span> http://www.test.com/<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="8-目录身份验证"><a href="#8-目录身份验证" class="headerlink" title="8 目录身份验证"></a>8 目录身份验证</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># htpasswd-cm /etc/nginx/.htpasswd alice</span><br><span class="hljs-comment"># htpasswd-m /etc/nginx/.htpasswd bob</span><br><span class="hljs-section">location</span> /redhat &#123;<br><span class="hljs-attribute">root</span> /web/html;<br><span class="hljs-attribute">index</span> index.html index.htm;<br><span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">auth_basic</span> <span class="hljs-string">&quot;AwstatAuth&quot;</span><br>auth_basic_user_file /etc/nginx/.htpasswd;<br><span class="hljs-attribute">deny</span> <span class="hljs-number">192.168.0.132</span>;<br><span class="hljs-attribute">allow</span> <span class="hljs-number">192.168.0.0</span>/<span class="hljs-number">24</span>;<br><span class="hljs-attribute">allow</span> <span class="hljs-number">192.168.1.1</span>;<br><span class="hljs-attribute">deny</span> all;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx源码编译</title>
    <link href="/2019/12/21/%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx/nginx%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <url>/2019/12/21/%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx/nginx%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h1 id="一-准备"><a href="#一-准备" class="headerlink" title="一 准备"></a>一 准备</h1><p>软件环境下载</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">yum install -y wget gcc gcc-c++ make pcre pcre-devel <span class="hljs-literal">zlib</span> <span class="hljs-literal">zlib</span>-devel openssl openssl-devel<br></code></pre></td></tr></table></figure><p>nginx下载</p><p><a href="http://nginx.org/download/">http://nginx.org/download/</a></p><h1 id="二-源码编译"><a href="#二-源码编译" class="headerlink" title="二 源码编译"></a>二 源码编译</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml">[root@k8s-master01 nginx-1.23.1]# ./configure --prefix=/usr/local/nginx --with-http_ssl_module<br>[root@k8s-master01 nginx-1.23.1]# make &amp;&amp; make install<br>#配置 /usr/local/nginx/sbin到环境变量<br>[root@k8s-master01 nginx-1.23.1]# cd /usr/local/nginx/<br>[root@k8s-master01 nginx-1.23.1]# sbin/nginx -c conf/nginx.conf<br>[root@k8s-master01 nginx]# curl 10.0.0.101<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">html</span> &#123; <span class="hljs-attribute">color</span>-scheme: light dark; &#125;</span><br><span class="language-css"><span class="hljs-selector-tag">body</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">35em</span>; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css"><span class="hljs-attribute">font-family</span>: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and<br>working. Further configuration is required.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>For online documentation and support please refer to<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;</span>nginx.org<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>Commercial support is available at<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;</span>nginx.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>Thank you for using nginx.<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>预编译参数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-attr">--add-module</span>=path：启用外部模块。<br><span class="hljs-attr">--add-dynamic-module</span>=path：启用外部动态模块。<br><span class="hljs-attr">--prefix</span>=path ：定义将保留服务器文件的目录。<br><span class="hljs-attr">--sbin-path</span>=path：设置nginx可执行文件的名称。此名称仅在安装期间使用。默认情况下，文件名为 prefix/sbin/nginx。<br><span class="hljs-attr">--modules-path</span>=path：定义将在其中安装nginx动态模块的目录。默认情况下使用prefix/modules目录。<br><span class="hljs-attr">--conf-path</span>=path：设置nginx.conf配置文件的名称。如果需要，可以通过在命令行参数中指定nginx来始终使用其他配置文件来启动它 。默认情况下，文件名为prefix/conf/nginx<span class="hljs-selector-class">.conf</span><br><span class="hljs-attr">--error-log-path</span>=path：设置主要错误，警告和诊断文件的名称及路径。默认情况下，文件名为 prefix/logs/error.log。<br><span class="hljs-attr">--pid-path</span>=path：设置nginx.pid将存储主进程的进程ID 的文件名及路径。默认情况下，文件名为 prefix/logs/nginx.pid。<br><span class="hljs-attr">--lock-path</span>=path：为锁定文件的名称设置前缀。默认情况下，值为 prefix/logs/nginx.lock。<br><span class="hljs-attr">--user</span>=name：设置非特权用户的名称，默认用户名是nobody。（设置所有者）<br><span class="hljs-attr">--group</span>=name：设置工作进程将使用其凭据的组的名称。默认情况下，组名称设置为非特权用户的名称。（所属组 ）<br><span class="hljs-attr">--build</span>=name：设置一个可选的nginx构建名称。<br><span class="hljs-attr">--builddir</span>=path：设置构建目录。<br><span class="hljs-attr">--http-log-path</span>=path：设置HTTP服务器的主请求日志文件的名称。安装后，可以始终nginx.conf使用access_log伪指令在配置文件中 更改文件名 。默认情况下，文件名为 prefix/logs/access.log。<br><span class="hljs-attr">--http-client-body-temp-path</span>=path：定义用于存储包含客户端请求正文的临时文件的目录。安装后，可以始终nginx.conf使用client_body_temp_path 指令在配置文件中 更改目录 。默认情况下，目录名为 prefix/client_body_temp。<br><span class="hljs-attr">--http-proxy-temp-path</span>=path：定义一个目录，用于存储带有从代理服务器接收到的数据的临时文件。安装后，始终可以nginx.conf使用proxy_temp_path 指令在配置文件中 更改目录 。默认情况下，目录名为 prefix/proxy_temp。<br><span class="hljs-attr">--http-fastcgi-temp-path</span>=path：定义一个目录，用于存储包含从FastCGI服务器接收到的数据的临时文件。安装后，可以始终nginx.conf使用fastcgi_temp_path 指令在配置文件中 更改目录 。默认情况下，目录名为 prefix/fastcgi_temp。<br><span class="hljs-attr">--http-uwsgi-temp-path</span>=path：定义一个目录，用于存储包含从uwsgi服务器接收到的数据的临时文件。安装后，始终可以nginx.conf使用uwsgi_temp_path 指令在配置文件中 更改目录 。默认情况下，目录名为 prefix/uwsgi_temp。<br><span class="hljs-attr">--http-scgi-temp-path</span>=path：定义一个目录，用于存储带有从SCGI服务器接收到的数据的临时文件。安装后，可以始终nginx.conf使用scgi_temp_path 指令在配置文件中 更改目录 。默认情况下，目录名为 prefix/scgi_temp。<br><span class="hljs-attr">--with-select_module</span><br><span class="hljs-attr">--with-threads</span>：启用线程池的使用 。<br><span class="hljs-attr">--with-file-aio</span>：支持 在FreeBSD和Linux上使用 异步文件I / O（AIO）。<br><span class="hljs-attr">--with-http_ssl_module</span>：启用构建将HTTPS协议支持添加 到HTTP服务器的模块的功能。默认情况下未构建此模块。需要OpenSSL库来构建和运行此模块。<br><span class="hljs-attr">--with-http_v2_module</span>：支持构建提供对HTTP / <span class="hljs-number">2</span>支持的模块 。默认情况下未构建此模块。<br><span class="hljs-attr">--with-http_realip_module</span>：启用构建ngx_http_realip_module 模块的功能，该模块将客户端地址更改为在指定的标头字段中发送的地址。默认情况下未构建此模块。<br><span class="hljs-attr">--with-http_addition_module</span>：允许构建ngx_http_addition_module 模块，该模块在响应前后添加文本。默认情况下未构建此模块。<br><span class="hljs-attr">--with-http_xslt_module</span><br><span class="hljs-attr">--with-http_xslt_module</span>=dynamic：支持构建ngx_http_xslt_module 模块，该 模块使用一个或多个XSLT样式表转换XML响应。默认情况下未构建此模块。该libxml2的和 的libxslt库需要构建和运行此模块。<br><span class="hljs-attr">--with-http_image_filter_module</span><br><span class="hljs-attr">--with-http_image_filter_module</span>=dynamic：支持构建ngx_http_image_filter_module 模块，该模块可以转换JPEG，GIF，PNG和WebP格式的图像。默认情况下未构建此模块。<br><span class="hljs-attr">--with-http_geoip_module</span><br><span class="hljs-attr">--with-http_geoip_module</span>=dynamic：支持构建ngx_http_geoip_module 模块，该模块根据客户端IP地址和预编译的MaxMind数据库创建变量 。默认情况下未构建此模块。<br><span class="hljs-attr">--with-http_sub_module</span>：支持构建ngx_http_sub_module 模块，该模块通过将一个指定的字符串替换为另一个指定的字符串来修改响应。默认情况下未构建此模块。<br><span class="hljs-attr">--with-http_dav_module</span>：支持构建ngx_http_dav_module 模块，该模块通过WebDAV协议提供文件管理自动化。默认情况下未构建此模块。<br><span class="hljs-attr">--with-http_flv_module</span>：支持构建ngx_http_flv_module 模块，该模块为Flash Video（FLV）文件提供伪流服务器端支持。默认情况下未构建此模块。<br><span class="hljs-attr">--with-http_mp4_module</span>：支持构建ngx_http_mp4_module 模块，该模块为MP4文件提供伪流服务器端支持。默认情况下未构建此模块。<br><span class="hljs-attr">--with-http_gunzip_module</span>：支持为不支持“ gzip”编码方法的客户端构建ngx_http_gunzip_module 模块，该 模块使用“ Content-Encoding: gzip” 解压缩响应。默认情况下未构建此模块。<br><span class="hljs-attr">--with-http_gzip_static_module</span>：支持构建ngx_http_gzip_static_module 模块，该 模块支持发送.gz扩展名为“ ”的预压缩文件，而不是常规文件。默认情况下未构建此模块。<br><span class="hljs-attr">--with-http_auth_request_module</span>：允许构建ngx_http_auth_request_module 模块，该 模块基于子请求的结果实现客户端授权。默认情况下未构建此模块。<br><span class="hljs-attr">--with-http_random_index_module</span>：支持构建ngx_http_random_index_module 模块，该 模块处理以斜杠（<span class="hljs-string">&#x27; /&#x27;</span>）结尾的请求，并在目录中选择一个随机文件作为索引文件。默认情况下未构建此模块。<br><span class="hljs-attr">--with-http_secure_link_module</span>：启用构建 ngx_http_secure_link_module 模块。默认情况下未构建此模块。<br><span class="hljs-attr">--with-http_degradation_module</span>：启用构建 ngx_http_degradation_module模块。默认情况下未构建此模块。<br><span class="hljs-attr">--with-http_slice_module</span>：支持构建ngx_http_slice_module 模块，该 模块将请求拆分为子请求，每个子请求都返回一定范围的响应。该模块提供了更有效的大响应缓存。默认情况下未构建此模块。<br><span class="hljs-attr">--with-http_stub_status_module</span>：支持构建ngx_http_stub_status_module 模块，该 模块提供对基本状态信息的访问。默认情况下未构建此模块。<br><span class="hljs-attr">--with-google_perftools_module</span>：允许构建 ngx_google_perftools_module 模块，以使用Google Performance Tools对nginx工作进程进行 性能分析。该模块供nginx开发人员使用，默认情况下未构建。<br><span class="hljs-attr">--with-cpp_test_module</span>：启用构建 ngx_cpp_test_module模块。<br><span class="hljs-attr">--with-mail</span><br><span class="hljs-attr">--with-mail</span>=dynamic：启用POP3 / IMAP4 / SMTP 邮件代理服务器。<br><span class="hljs-attr">--with-mail_ssl_module</span>：启用构建将 SSL / TLS协议支持添加 到邮件代理服务器的模块的功能。默认情况下未构建此模块。需要OpenSSL库来构建和运行此模块。<br><span class="hljs-attr">--with-compat</span>：启用动态模块兼容性。<br><span class="hljs-attr">--with-cc</span>=path：设置C编译器的名称。<br><span class="hljs-attr">--with-cpp</span>=path：设置C预处理器的名称。<br><span class="hljs-attr">--with-cc-opt</span>=parameters：设置将添加到CFLAGS变量的其他参数。在FreeBSD下使用系统PCRE库时， <span class="hljs-attr">--with-cc-opt</span>=<span class="hljs-string">&quot;-I /usr/local/include&quot;</span> 应指定。如果<span class="hljs-built_in">select</span>()需要增加支持的文件数量，也可以在此处指定，例如： <span class="hljs-attr">--with-cc-opt</span>=<span class="hljs-string">&quot;-D FD_SETSIZE=2048&quot;</span>。<br><span class="hljs-attr">--with-ld-opt</span>=parameters：设置在链接期间将使用的其他参数。在FreeBSD下使用系统PCRE库时， <span class="hljs-attr">--with-ld-opt</span>=<span class="hljs-string">&quot;-L /usr/local/lib&quot;</span> 应指定。<br><span class="hljs-attr">--with-cpu-opt</span>=cpu：每个指定的CPU能够使建筑： pentium，pentiumpro， pentium3，pentium4， athlon，opteron， sparc32，sparc64， ppc64。<br><span class="hljs-attr">--without-pcre</span>：禁用PCRE库的用法。<br><span class="hljs-attr">--with-pcre</span>：强制使用PCRE库。<br><span class="hljs-attr">--with-pcre</span>=path：设置PCRE库源的路径。需要从PCRE站点下载并分发库分发（版本<span class="hljs-number">4.4</span> — <span class="hljs-number">8.43</span>） 。其余的由nginx的./configure和完成 make。该库对于location指令中的正则表达式支持和 ngx_http_rewrite_module 模块是必需的 。<br><span class="hljs-attr">--with-pcre-opt</span>=parameters：为PCRE设置其他构建选项。<br><span class="hljs-attr">--with-pcre-jit</span>：使用“及时编译”支持（<span class="hljs-number">1.1</span>.<span class="hljs-number">12</span>，pcre_jit指令）构建PCRE库 。<br><span class="hljs-attr">--with-zlib</span>=path：设置zlib库源的路径。需要从zlib站点下载并分发库发行版（版本<span class="hljs-number">1.1</span>.<span class="hljs-number">3</span>-<span class="hljs-number">1.2</span>.<span class="hljs-number">11</span>） 。其余的由nginx的./configure和完成 make。ngx_http_gzip_module模块需要该库 。<br><span class="hljs-attr">--with-zlib-opt</span>=parameters：为zlib设置其他构建选项。<br><span class="hljs-attr">--with-zlib-asm</span>=cpu：使得能够使用指定的CPU中的一个优化的zlib汇编源程序： pentium，pentiumpro。<br><span class="hljs-attr">--with-libatomic</span>：强制使用libatomic_ops库。<br><span class="hljs-attr">--with-libatomic</span>=path：设置libatomic_ops库源的路径。<br><span class="hljs-attr">--with-openssl</span>=path：设置OpenSSL库源的路径。<br><span class="hljs-attr">--with-openssl-opt</span>=parameters：为OpenSSL设置其他构建选项。<br><span class="hljs-attr">--with-debug</span>：启用调试日志。<br><span class="hljs-attr">--with-http_perl_module</span><br><span class="hljs-attr">--with-http_perl_module</span>=dynamic：支持构建 嵌入式Perl模块。默认情况下未构建此模块。<br><span class="hljs-attr">--with-perl_modules_path</span>=path：定义一个目录，该目录将保留Perl模块。<br><span class="hljs-attr">--with-perl</span>=path：设置Perl二进制文件的名称。<br><span class="hljs-attr">--with-stream</span><br><span class="hljs-attr">--with-stream</span>=dynamic：支持构建 用于通用TCP / UDP代理和负载平衡的 流模块。默认情况下未构建此模块。<br><span class="hljs-attr">--with-stream_ssl_module</span>：支持构建一个模块，该模块 向流模块添加 SSL / TLS协议支持。默认情况下未构建此模块。需要OpenSSL库来构建和运行此模块。<br><span class="hljs-attr">--with-stream_realip_module</span>：启用构建ngx_stream_realip_module 模块的功能，该 模块将客户端地址更改为PROXY协议标头中发送的地址。默认情况下未构建此模块。<br><span class="hljs-attr">--with-stream_geoip_module</span><br><span class="hljs-attr">--with-stream_geoip_module</span>=dynamic：支持构建ngx_stream_geoip_module 模块，该 模块根据客户端IP地址和预编译的MaxMind数据库创建变量 。默认情况下未构建此模块。<br><span class="hljs-attr">--with-stream_ssl_preread_module</span>：支持构建ngx_stream_ssl_preread_module 模块，该 模块允许从ClientHello 消息中提取信息， 而无需终止SSL / TLS。默认情况下未构建此模块。<br><span class="hljs-attr">--without-select_module</span>：启用或禁用构建允许服务器使用该<span class="hljs-built_in">select</span>()方法的模块。如果平台似乎不支持更合适的方法（例如kqueue，epoll或/ dev / poll），则会自动构建此模块。<br><span class="hljs-attr">--with-poll_module</span><br><span class="hljs-attr">--without-poll_module</span>：启用或禁用构建允许服务器使用该<span class="hljs-built_in">poll</span>()方法的模块。如果平台似乎不支持更合适的方法（例如kqueue，epoll或/ dev / poll），则会自动构建此模块。<br><span class="hljs-attr">--without-http_charset_module</span>：禁用构建ngx_http_charset_module 模块，该 模块将指定的字符集添加到“ Content-Type”响应标头字段中，并且可以将数据从一个字符集转换为另一个字符集。<br><span class="hljs-attr">--without-http_gzip_module</span>：禁用构建可压缩 HTTP服务器响应的模块。zlib库是构建和运行此模块所必需的。<br><span class="hljs-attr">--without-http_ssi_module</span>：禁用构建处理通过SSI（服务器端包含）命令的 ngx_http_ssi_module模块的响应。<br><span class="hljs-attr">--without-http_userid_module</span>：禁用构建ngx_http_userid_module 模块，该模块设置适合客户端标识的cookie。<br><span class="hljs-attr">--without-http_access_module</span>：禁用构建ngx_http_access_module 模块，该 模块允许限制对某些客户端地址的访问。<br><span class="hljs-attr">--without-http_auth_basic_module</span>：禁用构建ngx_http_auth_basic_module 模块，该 模块允许通过使用“ HTTP基本身份验证”协议验证用户名和密码来限制对资源的访问。<br><span class="hljs-attr">--without-http_mirror_module</span>：禁用构建ngx_http_mirror_module 模块，该 模块通过创建后台镜像子请求来实现原始请求的镜像。<br><span class="hljs-attr">--without-http_autoindex_module</span>：禁用构建 ngx_http_autoindex_module 模块，以处理以斜杠（<span class="hljs-string">&#x27; /&#x27;</span>）结尾的请求，并在ngx_http_index_module模块找不到索引文件的情况下生成目录列表 。<br><span class="hljs-attr">--without-http_geo_module</span>：禁用构建ngx_http_geo_module 模块，该 模块创建的变量的值取决于客户端IP地址。<br><span class="hljs-attr">--without-http_map_module</span>：禁用构建ngx_http_map_module 模块，该 模块创建的变量值取决于其他变量的值。<br><span class="hljs-attr">--without-http_split_clients_module</span>：禁用构建ngx_http_split_clients_module 模块，该 模块创建用于A / B测试的变量。<br><span class="hljs-attr">--without-http_referer_module</span>：禁用构建ngx_http_referer_module 模块，该 模块可以阻止对“ Referer”标头字段中具有无效值的请求的站点访问。<br><span class="hljs-attr">--without-http_rewrite_module</span>：禁用构建允许HTTP服务器 重定向请求和更改请求URI的模块。构建和运行此模块需要PCRE库。<br><span class="hljs-attr">--without-http_proxy_module</span>：禁用构建HTTP服务器 代理模块。<br><span class="hljs-attr">--without-http_fastcgi_module</span>：禁用构建将请求传递到FastCGI服务器的 ngx_http_fastcgi_module模块。<br><span class="hljs-attr">--without-http_uwsgi_module</span>：禁用构建 将请求传递到uwsgi服务器的 ngx_http_uwsgi_module模块。<br><span class="hljs-attr">--without-http_scgi_module</span>：禁用构建 将请求传递到SCGI服务器的 ngx_http_scgi_module模块。<br><span class="hljs-attr">--without-http_grpc_module</span>：禁用构建 将请求传递到gRPC服务器的 ngx_http_grpc_module模块。<br><span class="hljs-attr">--without-http_memcached_module</span>：禁用构建ngx_http_memcached_module 模块，该 模块从memcached服务器获取响应。<br><span class="hljs-attr">--without-http_limit_conn_module</span>：禁用构建ngx_http_limit_conn_module 模块，该 模块限制每个键的连接数，例如，单个IP地址的连接数。<br><span class="hljs-attr">--without-http_limit_req_module</span>：禁用构建ngx_http_limit_req_module 模块，该模块限制每个密钥的请求处理速率，例如，来自单个IP地址的请求的处理速率。<br><span class="hljs-attr">--without-http_empty_gif_module</span>：禁用构建发出单像素透明GIF的模块 。<br><span class="hljs-attr">--without-http_browser_module</span>：禁用构建ngx_http_browser_module 模块，该 模块创建的变量值取决于“ User-Agent”请求标头字段的值。<br><span class="hljs-attr">--without-http_upstream_hash_module</span>：禁用构建实现哈希 负载平衡方法的模块 。<br><span class="hljs-attr">--without-http_upstream_ip_hash_module</span>：禁用构建实现ip_hash 负载平衡方法的模块 。<br><span class="hljs-attr">--without-http_upstream_least_conn_module</span>：禁用构建实现了minimum_conn 负载平衡方法的模块 。<br><span class="hljs-attr">--without-http_upstream_keepalive_module</span>：禁用构建一个模块来提供 对上游服务器连接的缓存。<br><span class="hljs-attr">--without-http_upstream_zone_module</span>：禁用构建模块，该模块可以将上游组的运行时状态存储在共享内存 区域中。<br><span class="hljs-attr">--without-http</span>：禁用HTTP服务器。<br><span class="hljs-attr">--without-http-cache</span>：禁用HTTP缓存。<br><span class="hljs-attr">--without-mail_pop3_module</span>：在邮件代理服务器中 禁用POP3协议。<br><span class="hljs-attr">--without-mail_imap_module</span>：在邮件代理服务器中 禁用IMAP协议。<br><span class="hljs-attr">--without-mail_smtp_module</span>：在邮件代理服务器中 禁用SMTP协议。<br><span class="hljs-attr">--without-stream_limit_conn_module</span>：禁用构建ngx_stream_limit_conn_module 模块，该 模块限制每个键的连接数，例如，单个IP地址的连接数。<br><span class="hljs-attr">--without-stream_access_module</span>：禁用构建ngx_stream_access_module 模块，该 模块允许限制对某些客户端地址的访问。<br><span class="hljs-attr">--without-stream_geo_module</span>：禁用构建ngx_stream_geo_module 模块，该 模块创建的变量的值取决于客户端IP地址。<br><span class="hljs-attr">--without-stream_map_module</span>：禁用构建ngx_stream_map_module 模块，该 模块创建的变量值取决于其他变量的值。<br><span class="hljs-attr">--without-stream_split_clients_module</span>：禁用构建ngx_stream_split_clients_module 模块，该 模块创建用于A / B测试的变量。<br><span class="hljs-attr">--without-stream_return_module</span>：禁用构建ngx_stream_return_module 模块，该 模块向客户端发送一些指定的值，然后关闭连接。<br><span class="hljs-attr">--without-stream_upstream_hash_module</span>：禁用构建实现哈希 负载平衡方法的模块 。<br><span class="hljs-attr">--without-stream_upstream_least_conn_module</span>：禁用构建实现了minimum_conn 负载平衡方法的模块 。<br><span class="hljs-attr">--without-stream_upstream_zone_module</span>：禁用构建模块，该模块可以将上游组的运行时状态存储在共享内存 区域中。<br></code></pre></td></tr></table></figure><h1 id="三、nginx命令"><a href="#三、nginx命令" class="headerlink" title="三、nginx命令"></a>三、nginx命令</h1><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./nginx</span> 启动nginx<br><span class="hljs-string">./nginx</span> -h 查看nginx命令简单帮助文档<br><span class="hljs-string">./nginx</span> -t 检查配置文件语法是否有错<br><span class="hljs-string">./nginx</span> -V 显示版本和编译时的配置选项<br><span class="hljs-string">./nginx</span> -s stop 强制停止nginx服务<br><span class="hljs-string">./nginx</span> -s <span class="hljs-keyword">reload</span> 重新加载nginx配置文件，然后优雅的方式重启nginx<br><span class="hljs-string">./nginx</span> -s reopen 重启nginx<br><span class="hljs-string">./nginx</span> -s <span class="hljs-keyword">quit</span> 处理完关于nginx的所有请求后再停止服务<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基本算法</title>
    <link href="/2019/01/25/%E5%90%8E%E7%AB%AF/java/%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/"/>
    <url>/2019/01/25/%E5%90%8E%E7%AB%AF/java/%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、基本算法"><a href="#一、基本算法" class="headerlink" title="一、基本算法"></a>一、基本算法</h1><ul><li>1)插入排序(直接插入排序、希尔排序)</li><li>2)交换排序(冒泡排序、快速排序)</li><li>3)选择排序(直接选择排序、堆排序)</li><li>4)归并排序</li><li>5)分配排序(基数排序)</li></ul><p>分析：</p><ul><li>所需辅助空间最多：归并排序</li><li>所需辅助空间最少：堆排序</li><li>平均速度最快：快速排序</li><li>不稳定：快速排序，希尔排序，堆排序。</li></ul><img src="/2019/01/25/%E5%90%8E%E7%AB%AF/java/%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/wps4.jpg" class="" title="img"><h2 id="1-1-直接插入排序"><a href="#1-1-直接插入排序" class="headerlink" title="1.1 直接插入排序"></a>1.1 直接插入排序</h2><p>基本思想</p><p>在要排序的一组数中，假设前面(n-1)[n=2]个数已经是排好顺序的,现在要把第n个数插到前面的有序数中,使得这n个数也是排好顺序的。如此反复循环,直到全部排好顺序。</p><img src="/2019/01/25/%E5%90%8E%E7%AB%AF/java/%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/1659859904665.png" class="" width="1659859904665"><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> static <span class="hljs-type">int</span>[] insertSort() &#123;<br>       <span class="hljs-type">int</span>[] a = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">57</span>, <span class="hljs-number">68</span>, <span class="hljs-number">59</span>, <span class="hljs-number">52</span>&#125;;<br>        // 算法实际次数<br>        <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; a.length; i++) &#123;<br>            <span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-keyword">temp</span> = a[i];<br>            <span class="hljs-keyword">if</span> (a[j] &lt; <span class="hljs-keyword">temp</span>) &#123;<br>                count++;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (; j &gt;= <span class="hljs-number">0</span> &amp;&amp; a[j] &gt; <span class="hljs-keyword">temp</span>; j<span class="hljs-comment">--) &#123;</span><br>                a[j + <span class="hljs-number">1</span>] = a[j];<br>                count++;<br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Arrays.toString(a));<br>            &#125;<br>            a[j + <span class="hljs-number">1</span>] = <span class="hljs-keyword">temp</span>;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Arrays.toString(a));<br>        &#125;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(a.length + &quot;---&quot; + count);<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br></code></pre></td></tr></table></figure><p>打印：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[57, 68, 59, 52]</span><br><span class="hljs-string">[57, 68, 68, 52]</span><br><span class="hljs-string">[57, 59, 68, 52]</span><br><span class="hljs-string">[57, 59, 68, 68]</span><br><span class="hljs-string">[57, 59, 59, 68]</span><br><span class="hljs-string">[57, 57, 59, 68]</span><br><span class="hljs-string">[52, 57, 59, 68]</span><br><span class="hljs-number">4</span>---<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>过程：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">第一次：<br>57<span class="hljs-number"> 68 </span> 一次<br>57<span class="hljs-number"> 68 </span>59 =》57<span class="hljs-number"> 59 </span>68 一次<br>57<span class="hljs-number"> 59 </span>68<span class="hljs-number"> 52 </span>=》57<span class="hljs-number"> 59 </span>52 68=》57<span class="hljs-number"> 52 </span>59 68=》52<span class="hljs-number"> 57 </span>59<span class="hljs-number"> 68 </span>三次<br></code></pre></td></tr></table></figure><p>所以实际算法次数5次</p><h2 id="1-2-希尔排序-最小增量排序"><a href="#1-2-希尔排序-最小增量排序" class="headerlink" title="1.2 希尔排序(最小增量排序)"></a>1.2 希尔排序(最小增量排序)</h2><p><strong>基本思想</strong></p><p>算法先将要排序的一组数按某个增量d(n/2，n为要排序数的个数)分成若干组,每组中记录的下标相差d.对每组中全部元素进行直接插入排序,然后再用一个较小的增量(d/2)对它进行分组,在每组中再进行直接插入排序。当增量减到1时,进行直接插入排序后,排序完成。</p><img src="/2019/01/25/%E5%90%8E%E7%AB%AF/java/%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/1659861837987.png" class="" width="1659861837987"><p>实例</p><p>方式一：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> ShellSortTest &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">int</span>[] shellSort(<span class="hljs-type">int</span>[] a) &#123;<br>        <span class="hljs-type">double</span> d1 = a.length;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            d1 = Math.ceil(d1 / <span class="hljs-number">2</span>);<br>            <span class="hljs-type">int</span> d = (<span class="hljs-type">int</span>) d1;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = d; i &lt; a.length; i = i + <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-type">int</span> j = i - d;<br>                <span class="hljs-type">int</span> <span class="hljs-keyword">temp</span> = a[i];<br>                <span class="hljs-keyword">for</span> (; j &gt;= <span class="hljs-number">0</span> &amp;&amp; a[j] &gt; <span class="hljs-keyword">temp</span>; j = j - d) &#123;<br>                    a[j + d] = a[j];<br>                &#125;<br>                a[j + d] = <span class="hljs-keyword">temp</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (d == <span class="hljs-number">1</span>) &#123;<br>                break;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Arrays.toString(shellSort(<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">57</span>, <span class="hljs-number">68</span>, <span class="hljs-number">59</span>, <span class="hljs-number">52</span>, <span class="hljs-number">72</span>, <span class="hljs-number">28</span>, <span class="hljs-number">96</span>, <span class="hljs-number">33</span>, <span class="hljs-number">24</span>, <span class="hljs-number">19</span>&#125;)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方式二：方式一的简写，跨度d没有向上的四舍五入，算法复杂都一样</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] shellSort2(<span class="hljs-keyword">int</span>[] a) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> d = a.length <span class="hljs-regexp">/ 2; d&gt;0; d /</span>= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = d; i &lt; a.length; i = i + <span class="hljs-number">1</span> ) &#123;<br>            <span class="hljs-keyword">int</span> j = i - d;<br>            <span class="hljs-keyword">int</span> temp = a[i];<br>            <span class="hljs-keyword">for</span> (; j &gt;= <span class="hljs-number">0</span> &amp;&amp; a[j] &gt; temp; j = j - d) &#123;<br>                a[j + d] = a[j];<br>            &#125;<br>            a[j + d] = temp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-简单选择排序"><a href="#1-3-简单选择排序" class="headerlink" title="1.3 简单选择排序"></a>1.3 简单选择排序</h2><p>基本思想</p><p>在要排序的一组数中,选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换,如此循环到倒数第二个数和最后一个数比较为止。</p><img src="/2019/01/25/%E5%90%8E%E7%AB%AF/java/%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/1659861981235.png" class="" width="1659861981235"><p>实例</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectSortTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span>[] <span class="hljs-built_in">selectSort</span>(<span class="hljs-type">int</span>[] a) &#123;<br>        <span class="hljs-type">int</span> position = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            position = i;<br>            <span class="hljs-type">int</span> temp = a[i];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; a.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (a[j] &lt; a[i]) &#123;<br>                    temp = a[j];<br>                    position = j;<br>                &#125;<br>            &#125;<br>            a[position] = a[i];<br>            a[i] = temp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        System.out.<span class="hljs-built_in">println</span>(Arrays.<span class="hljs-built_in">toString</span>(<span class="hljs-built_in">selectSort</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">57</span>, <span class="hljs-number">68</span>, <span class="hljs-number">59</span>, <span class="hljs-number">52</span>&#125;)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-4-堆排序"><a href="#1-4-堆排序" class="headerlink" title="1.4 堆排序"></a>1.4 堆排序</h2><p>基本思想</p><p>堆排序是一种树形选择排序,是对直接选择排序的有效改进。</p><p>堆的定义如下:具有n个元素的序列(h1,h2,.,hn),当且仅当满足(hi&gt;-h2i,hi&gt;=2i+1)或(hi&lt;=h2i,hi&lt;=2i+1) (i=1,2,…n/2)时称之为堆。在这里只讨论满足前者条件的堆。由堆的定义可以看出,堆顶元素(即第一个元素)必为最大项(大顶堆)。完全二叉树可以很直观地表示堆的结构。堆顶为根,其它为左子树、右子树。初始时把要排序的数的序列看作是棵顺序存储的二叉树,调整它们的存储序,使之成为一个堆,这时堆的根节点的数最大。然后将根节点与堆的最后一个节点交换。然后对前面(n-1)个数重新调整使之成为堆。依此类推,直到只有两个节点的堆,并对它们作交换,最后得到有n个节点的有序序列。从算法描述来看,堆排序需要两个过程,一是建立堆,二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆的渗透函数,二是反复调用渗透函数实现排序的函数。</p><p>实例</p><p>初始序列： 46,79,56,38,40,84</p><p>建堆</p><img src="/2019/01/25/%E5%90%8E%E7%AB%AF/java/%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/1659862216644.png" class="" width="1659862216644"><p>交换,从堆中踢出最大数</p><img src="/2019/01/25/%E5%90%8E%E7%AB%AF/java/%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/1659862264740.png" class="" width="1659862264740"><p>剩余结点再建堆,再交换踢出最大数</p><img src="/2019/01/25/%E5%90%8E%E7%AB%AF/java/%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/1659862292390.png" class="" width="1659862292390"><p>依次类推：最后堆中剩余的最后两个结点交换,踢出一个,排序完成。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">HeapSortTest</span> &#123;<br>    <span class="hljs-keyword">private</span> static <span class="hljs-built_in">void</span> buildMaxHeap(<span class="hljs-built_in">int</span>[] <span class="hljs-built_in">array</span>, <span class="hljs-built_in">int</span> lastIndex) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = (lastIndex - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-built_in">int</span> k = i;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-number">2</span> * k + <span class="hljs-number">1</span>&lt;= lastIndex) &#123;<br>                <span class="hljs-built_in">int</span> bigIndex = <span class="hljs-number">2</span> * k + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (bigIndex &lt; lastIndex) &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[bigIndex] &lt; <span class="hljs-built_in">array</span>[bigIndex + <span class="hljs-number">1</span>]) &#123;<br>                        bigIndex++;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[k] &lt; <span class="hljs-built_in">array</span>[bigIndex]) &#123;<br>                    swap(<span class="hljs-built_in">array</span>, k, bigIndex);<br>                    k = bigIndex;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 堆排序</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> static <span class="hljs-built_in">int</span>[] heapSort(<span class="hljs-built_in">int</span>[] <span class="hljs-built_in">array</span>) &#123;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">array</span>Length = <span class="hljs-built_in">array</span>.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">array</span>.length; i++) &#123;<br>            buildMaxHeap(<span class="hljs-built_in">array</span>, <span class="hljs-built_in">array</span>Length<span class="hljs-number">-1</span>-i);<br>            swap(<span class="hljs-built_in">array</span>, <span class="hljs-number">0</span>,<span class="hljs-built_in">array</span>Length<span class="hljs-number">-1</span>-i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">array</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> static <span class="hljs-built_in">void</span> swap(<span class="hljs-built_in">int</span>[] <span class="hljs-built_in">array</span>, <span class="hljs-built_in">int</span> i, <span class="hljs-built_in">int</span> j) &#123;<br>        <span class="hljs-built_in">int</span> temp = <span class="hljs-built_in">array</span>[i];<br>        <span class="hljs-built_in">array</span>[i] = <span class="hljs-built_in">array</span>[j];<br>        <span class="hljs-built_in">array</span>[j] = temp;<br>    &#125;<br>    <span class="hljs-keyword">public</span> static <span class="hljs-built_in">void</span> main(String[] args) &#123;<br>        System.<span class="hljs-keyword">out</span>.println(Arrays.toString(heapSort(new <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">46</span>, <span class="hljs-number">79</span>, <span class="hljs-number">56</span>, <span class="hljs-number">38</span>, <span class="hljs-number">40</span>, <span class="hljs-number">84</span>&#125;)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>精简：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> static <span class="hljs-built_in">int</span>[] heapSort2(<span class="hljs-built_in">int</span>[] <span class="hljs-built_in">array</span>) &#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">array</span>Length = <span class="hljs-built_in">array</span>.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">array</span>.length; i++) &#123;<br>        <span class="hljs-built_in">int</span> lastIndex=<span class="hljs-built_in">array</span>Length - <span class="hljs-number">1</span> - i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = lastIndex / <span class="hljs-number">2</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>            <span class="hljs-built_in">int</span> bigIndex=<span class="hljs-number">2</span>*j+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(bigIndex&lt;=lastIndex)&#123;<br>                <span class="hljs-keyword">if</span>(bigIndex&lt;lastIndex&amp;&amp;<span class="hljs-built_in">array</span>[bigIndex]&lt;<span class="hljs-built_in">array</span>[bigIndex+<span class="hljs-number">1</span>])&#123;<br>                    bigIndex++;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">array</span>[j]&lt;<span class="hljs-built_in">array</span>[bigIndex])&#123;<br>                    swap(<span class="hljs-built_in">array</span>,j,bigIndex);<br>                &#125;<br>            &#125;<br>        &#125;<br>        swap(<span class="hljs-built_in">array</span>, <span class="hljs-number">0</span>, lastIndex);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">array</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-5-冒泡排序"><a href="#1-5-冒泡排序" class="headerlink" title="1.5 冒泡排序"></a>1.5 冒泡排序</h2><p>基本思想</p><p>在要排序的一组数中,对当前还未排好序的范围内的全部数,自上而下对相邻的两个数依次进行比较和调整,让较大的数往下沉,较小的往上冒。即:每当两相邻的<br>数比较后发现它们的排序与排序要求相反时,就将它们互换。</p><p>实例</p><img src="/2019/01/25/%E5%90%8E%E7%AB%AF/java/%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/1659862809780.png" class="" width="1659862809780"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span>[] <span class="hljs-title">bubbleSort</span>()</span> &#123;<br>    <span class="hljs-built_in">int</span> a[] =&#123;<span class="hljs-number">57</span>, <span class="hljs-number">68</span>, <span class="hljs-number">59</span>, <span class="hljs-number">52</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt; a.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; a.length - i; j++) &#123;<br>            <span class="hljs-keyword">if</span> (a[j] &gt; a[j + <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-built_in">int</span> temp = a[j];<br>                a[j] = a[j + <span class="hljs-number">1</span>];<br>                a[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-6-快速排序"><a href="#1-6-快速排序" class="headerlink" title="1.6 快速排序"></a>1.6 快速排序</h2><p>基本思想</p><p>选择一个基准元素,通常选择第一个元素或者最后一个元素.通过一趟扫描,将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其<br>排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分。</p><img src="/2019/01/25/%E5%90%8E%E7%AB%AF/java/%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/1659862985399.png" class="" width="1659862985399"><p>实例：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> QuictSortTest &#123;<br>    <span class="hljs-keyword">private</span> static <span class="hljs-built_in">int</span> get<span class="hljs-constructor">Middle(<span class="hljs-params">int</span>[] <span class="hljs-params">array</span>, <span class="hljs-params">int</span> <span class="hljs-params">low</span>, <span class="hljs-params">int</span> <span class="hljs-params">high</span>)</span> &#123;<br>        <span class="hljs-built_in">int</span> temp = <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">low</span>]</span>;<br>        <span class="hljs-keyword">while</span> (low &lt; high) &#123;<br>            <span class="hljs-comment">// 找到大于temp的左边界</span><br>            <span class="hljs-keyword">while</span> (low &lt; high<span class="hljs-operator"> &amp;&amp; </span><span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">high</span>]</span> &gt;= temp) &#123;<br>                high--;<br>            &#125;<br>            <span class="hljs-comment">// 将小于temp的放到low的位置</span><br>            <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">low</span>]</span> = <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">high</span>]</span>;<br>            <span class="hljs-comment">// 找到小于temp的右边界</span><br>            <span class="hljs-keyword">while</span> (low &lt; high<span class="hljs-operator"> &amp;&amp; </span><span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">low</span>]</span> &lt;= temp) &#123;<br>                low++;<br>            &#125;<br>            <span class="hljs-comment">//交换 大于temp的放到hign位置</span><br>            <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">high</span>]</span> = <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">low</span>]</span>;<br>        &#125;<br>        <span class="hljs-comment">//将开始的temp放到最终的位置</span><br>        <span class="hljs-built_in">array</span><span class="hljs-literal">[<span class="hljs-identifier">low</span>]</span> = temp;<br>        return low;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 快速排序</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param array</span><br><span class="hljs-comment">     * @param low</span><br><span class="hljs-comment">     * @param high</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> static void <span class="hljs-constructor">_quick(<span class="hljs-params">int</span>[] <span class="hljs-params">array</span>, <span class="hljs-params">int</span> <span class="hljs-params">low</span>, <span class="hljs-params">int</span> <span class="hljs-params">high</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (low &lt; high) &#123;<br>            <span class="hljs-built_in">int</span> middle = get<span class="hljs-constructor">Middle(<span class="hljs-params">array</span>, <span class="hljs-params">low</span>, <span class="hljs-params">high</span>)</span>;<br>            <span class="hljs-constructor">_quick(<span class="hljs-params">array</span>, <span class="hljs-params">low</span>, <span class="hljs-params">middle</span> - 1)</span>;<br>            <span class="hljs-constructor">_quick(<span class="hljs-params">array</span>, <span class="hljs-params">middle</span> + 1, <span class="hljs-params">high</span>)</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 快速排序</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    public static <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> quict<span class="hljs-constructor">Sort(<span class="hljs-params">int</span>[] <span class="hljs-params">array</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-constructor">_quick(<span class="hljs-params">array</span>, 0, <span class="hljs-params">array</span>.<span class="hljs-params">length</span> - 1)</span>;<br>        &#125;<br>        return <span class="hljs-built_in">array</span>;<br>    &#125;<br><br>    public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">quictSort</span>(<span class="hljs-params">new</span> <span class="hljs-params">int</span>[]&#123;57, 68, 59, 52, 72, 28, 96, 33, 24, 19&#125;)</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-7-归并排序"><a href="#1-7-归并排序" class="headerlink" title="1.7 归并排序"></a>1.7 归并排序</h2><p>基本排序</p><p>归并(Merge)排序法是将两个(或两个以上)有序表合并成一个新的有序表,即把待排序序列分为若干个子序列,每个子序列是有序的。然后再把有序子序列合并<br>为整体有序序列。</p><img src="/2019/01/25/%E5%90%8E%E7%AB%AF/java/%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/1659863361285.png" class="" width="1659863361285"><p>实例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MergeSortTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] mergeSort(<span class="hljs-type">int</span>[] array) &#123;<br>        sort(array, <span class="hljs-number">0</span>, array.length - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> center, <span class="hljs-type">int</span> right)</span> &#123;<br>        <span class="hljs-type">int</span>[] tempArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[array.length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> center + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">third</span> <span class="hljs-operator">=</span> left;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> left;<br>        <span class="hljs-keyword">while</span> (left &lt;= center &amp;&amp; middle &lt;= right) &#123;<br>            <span class="hljs-keyword">if</span> (array[left] &lt; array[middle]) &#123;<br>                tempArray[third++] = array[left++];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tempArray[third++] = array[middle++];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (left &lt;= center) &#123;<br>            tempArray[third++] = array[left++];<br>        &#125;<br>        <span class="hljs-keyword">while</span> (middle &lt;= right) &#123;<br>            tempArray[third++] = array[middle++];<br>        &#125;<br>        <span class="hljs-keyword">while</span> (temp &lt;= right) &#123;<br>            array[temp] = tempArray[temp++];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>        <span class="hljs-keyword">if</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">center</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>;<br>            sort(array, left, center);<br>            sort(array, center + <span class="hljs-number">1</span>, right);<br>            merge(array, left, center, right);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Arrays.toString(mergeSort(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">57</span>, <span class="hljs-number">68</span>, <span class="hljs-number">59</span>, <span class="hljs-number">52</span>, <span class="hljs-number">72</span>, <span class="hljs-number">28</span>, <span class="hljs-number">96</span>, <span class="hljs-number">33</span>&#125;)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-8-基数排序"><a href="#1-8-基数排序" class="headerlink" title="1.8 基数排序"></a>1.8 基数排序</h2><p>基本思想</p><p>将所有待比较数值(正整数)统一为同样的数位长度,数位较短的数前面补零。然后,从最低位开始,依次进行一次排序。这样从最低位排序一直到最高位排序完成<br>以后.数列就变成一个有序序列。</p><img src="/2019/01/25/%E5%90%8E%E7%AB%AF/java/%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/1659863814006.png" class="" width="1659863814006"><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RadixSortTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] radixSort(<span class="hljs-type">int</span>[] array) &#123;<br>        List&lt;List&lt;Integer&gt;&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            queue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> arr : array) &#123;<br>            <span class="hljs-keyword">if</span> (arr &gt; max) &#123;<br>                max = arr;<br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> max / <span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; time; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; array.length; j++) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> array[j] % (<span class="hljs-type">int</span>) Math.pow(<span class="hljs-number">10</span>, i + <span class="hljs-number">1</span>) / (<span class="hljs-type">int</span>) Math.pow(<span class="hljs-number">10</span>, i);<br>                    List&lt;Integer&gt; list = queue.get(x);<br>                    list.add(array[j]);<br>                    queue.set(x, list);<br>                &#125;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">10</span>; k++) &#123;<br>                    <span class="hljs-keyword">while</span> (queue.get(k).size() &gt; <span class="hljs-number">0</span>) &#123;<br>                        array[count++] = queue.get(k).get(<span class="hljs-number">0</span>);<br>                        queue.get(k).remove(<span class="hljs-number">0</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Arrays.toString(radixSort(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">49</span>, <span class="hljs-number">38</span>, <span class="hljs-number">65</span>, <span class="hljs-number">97</span>, <span class="hljs-number">76</span>, <span class="hljs-number">13</span>, <span class="hljs-number">27</span>, <span class="hljs-number">49</span>, <span class="hljs-number">78</span>, <span class="hljs-number">34</span>, <span class="hljs-number">12</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">62</span>, <span class="hljs-number">99</span>, <span class="hljs-number">98</span>, <span class="hljs-number">54</span>, <span class="hljs-number">101</span>, <span class="hljs-number">56</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">23</span>, <span class="hljs-number">34</span>, <span class="hljs-number">15</span>, <span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">53</span>, <span class="hljs-number">51</span>&#125;)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>源码练习：</p><p><a href="https://github.com/leellun/javasvc-learn/tree/main/svc-datastruct/src/com/newland/algorithm/basic">https://github.com/leellun/javasvc-learn/tree/main/svc-datastruct/src/com/newland/algorithm/basic</a></p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基本算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何用hexo在github上搭建自己的博客</title>
    <link href="/2019/01/23/%E5%89%8D%E7%AB%AF/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2019/01/23/%E5%89%8D%E7%AB%AF/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="一、github仓库创建"><a href="#一、github仓库创建" class="headerlink" title="一、github仓库创建"></a>一、github仓库创建</h1><p>在github创建仓库，仓库名称为[username].github.io。</p><img src="/2019/01/23/%E5%89%8D%E7%AB%AF/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20220923174506204.png" class="" title="image-20220923174506204"><p>然后选择设置</p><img src="/2019/01/23/%E5%89%8D%E7%AB%AF/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20220923175440656.png" class="" title="image-20220923175440656"><p>设置网站的访问host并且制定分支为主分支</p><img src="/2019/01/23/%E5%89%8D%E7%AB%AF/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20220923175557661.png" class="" title="image-20220923175557661"><p>配置git免登录认证信息</p><img src="/2019/01/23/%E5%89%8D%E7%AB%AF/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20220923180413762.png" class="" title="image-20220923180413762"><h1 id="二、hexo使用"><a href="#二、hexo使用" class="headerlink" title="二、hexo使用"></a>二、hexo使用</h1><h2 id="1-1-安装hexo"><a href="#1-1-安装hexo" class="headerlink" title="1.1 安装hexo"></a>1.1 安装hexo</h2><p>全局安装hexo</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g hexo<br><span class="hljs-comment"># 发布支持</span><br>npm <span class="hljs-keyword">install</span> --save hexo-deployer-git<br><br></code></pre></td></tr></table></figure><h2 id="1-2-创建hexo项目并且推到github上"><a href="#1-2-创建hexo项目并且推到github上" class="headerlink" title="1.2 创建hexo项目并且推到github上"></a>1.2 创建hexo项目并且推到github上</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 创建文件夹 [username].github.io</span><br>mkdir [username]<span class="hljs-string">.github.io</span><br><span class="hljs-comment"># 执行hexo初始化操作</span><br>hexo init<br><span class="hljs-comment"># 将 github [username].github.io的.git的文件夹放入项目中，指定分支developer或其它分支作为hexo项目源码存放分支</span><br><br><span class="hljs-comment"># 构建静态页面</span><br>hexo generate<br><br><span class="hljs-comment"># 发布 到master</span><br>hexo <span class="hljs-keyword">deploy</span><br></code></pre></td></tr></table></figure><h2 id="1-3-hexo-配置修改"><a href="#1-3-hexo-配置修改" class="headerlink" title="1.3 hexo 配置修改"></a>1.3 hexo 配置修改</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">青叶水间</span> <span class="hljs-bullet">-</span> <span class="hljs-string">一个IT技术文章分享博客</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">keywords:</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">leellun</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">## 主题配置，我这里用的fluid主题</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <br><br><span class="hljs-comment"># 发布信息 git，地址是repo配置，分支branch ，需要发布必须配置了git的ssh-gen</span><br><span class="hljs-comment"># 这里还需要安装了 插件hexo-deployer-git，npm install --save hexo-deployer-git</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:leellun/leellun.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h2 id="1-4-markdown图片支持"><a href="#1-4-markdown图片支持" class="headerlink" title="1.4 markdown图片支持"></a>1.4 markdown图片支持</h2><p>修改_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>安装依赖支持：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">npm install hexo-<span class="hljs-built_in">image</span>-link --<span class="hljs-built_in">save</span><br></code></pre></td></tr></table></figure><h2 id="1-5-主题添加"><a href="#1-5-主题添加" class="headerlink" title="1.5 主题添加"></a>1.5 主题添加</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-theme-fluid <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>主题配置：_config.fluid.yml</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">favicon:</span> <span class="hljs-keyword">/img/</span>leaf_icon.png<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">navbar:</span><br>  <span class="hljs-meta"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span><br>  <span class="hljs-meta"># The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config</span><br><span class="hljs-symbol">  blog_title:</span> <span class="hljs-string">&quot;青叶水间&quot;</span><br><span class="hljs-symbol">index:</span><br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><span class="hljs-symbol">  slogan:</span><br><span class="hljs-symbol">    enable:</span> true<br><br>    <span class="hljs-meta"># 为空则按 hexo config.subtitle 显示</span><br>    <span class="hljs-meta"># If empty, text based on `subtitle` in hexo config</span><br><span class="hljs-symbol">    text:</span> <span class="hljs-string">&quot;一个Java、SpringBoot、SpringCloud、服务器等文章分享博客网站&quot;</span><br><span class="hljs-symbol">post:</span><br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><span class="hljs-symbol">archive:</span><br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><span class="hljs-symbol">category:</span><br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><span class="hljs-symbol">tag:</span><br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><span class="hljs-symbol">about:</span><br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><span class="hljs-symbol">page:</span><br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><span class="hljs-symbol">page404:</span><br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><span class="hljs-symbol">  banner_img_height:</span> <span class="hljs-number">60</span><br><span class="hljs-symbol">links:</span><br><span class="hljs-symbol">  enable:</span> true<br><span class="hljs-symbol">  banner_img:</span> <span class="hljs-keyword">/img/</span>bg-default.png<br><br><span class="hljs-meta">#---------------------------</span><br><span class="hljs-meta"># 页脚</span><br><span class="hljs-meta"># Footer</span><br><span class="hljs-meta">#---------------------------</span><br><span class="hljs-symbol">footer:</span><br>  <span class="hljs-meta"># 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题</span><br>  <span class="hljs-meta"># HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people</span><br><span class="hljs-symbol">  content:</span> &#x27;<br>    <span class="hljs-params">&lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;</span><span class="hljs-params">&lt;span&gt;</span>Hexo<span class="hljs-params">&lt;/span&gt;</span><span class="hljs-params">&lt;/a&gt;</span><br>    <span class="hljs-params">&lt;i class=&quot;iconfont icon-love&quot;&gt;</span><span class="hljs-params">&lt;/i&gt;</span><br>    <span class="hljs-params">&lt;a href=&quot;https://github.com/leellun&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;</span><span class="hljs-params">&lt;span&gt;</span>我的github<span class="hljs-params">&lt;/span&gt;</span><span class="hljs-params">&lt;/a&gt;</span><br></code></pre></td></tr></table></figure><h1 id="三、页面与文章"><a href="#三、页面与文章" class="headerlink" title="三、页面与文章"></a>三、页面与文章</h1><p>创建页面：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-meta"># 创建about页面</span><br>hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></td></tr></table></figure><p>创建文章：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>文章头信息：</p><table><thead><tr><th>Data</th><th>Description</th></tr></thead><tbody><tr><td><code>title</code></td><td>标题</td></tr><tr><td><code>slug</code></td><td>地址</td></tr><tr><td><code>layout</code></td><td>布局</td></tr><tr><td><code>path</code></td><td>路径。Hexo默认情况下基于new_post_path设置构建post路径。</td></tr><tr><td><code>date</code></td><td>日期 默认当前</td></tr><tr><td>tags</td><td>标签</td></tr><tr><td>categories</td><td>类别</td></tr><tr><td>author</td><td>作者</td></tr></tbody></table><p>更多：<a href="https://hexo.io/docs/variables.html">https://hexo.io/docs/variables.html</a></p><p>启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>构建静态文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>推送到github，提供网页浏览：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>这里是我的博客网站源码配置（deveploer分支）：<a href="https://github.com/leellun/leellun.github.io">https://github.com/leellun/leellun.github.io</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
